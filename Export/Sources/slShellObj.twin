'tbShellLib slShellObj :: Shell32 Objects

'Contains shell32/shdocvw shell automation interfaces
[ InterfaceId ("EAB22AC1-30C1-11CF-A7EB-0000C05BAE0B") ]
Interface IWebBrowser Extends stdole.IDispatch
    Sub GoBack()
    Sub GoForward()
    Sub GoHome()
    Sub GoSearch()
    Sub Navigate(ByVal url As String, Optional flags As Variant, Optional TargetFrameName As Variant, Optional PostData As Variant, Optional Headers As Variant)
    Sub Refresh()
    Sub Refresh2(Optional level As Variant)
    Sub Stop()
    Function Application() As IDispatch
    Function Parent() As IDispatch
    Function Container() As IDispatch
    Function Document() As IDispatch
    Function TopLevelContainer() As Integer
    Function Type() As String
    Property Get Left() As Long
    Property Let Left(ByVal Left As Long)
    Property Get Top() As Long
    Property Let Top(ByVal Top As Long)
    Property Get Width() As Long
    Property Let Width(ByVal Width As Long)
    Property Get Height() As Long
    Property Let Height(ByVal Height As Long)
    Function LocationName() As String
    Function LocationURL() As String
    Function Busy() As Integer
End Interface
[ InterfaceId ("0002DF05-0000-0000-C000-000000000046") ]
Interface IWebBrowserApp Extends IWebBrowser
    Sub Quit()
    Sub ClientToWindow(pcx As Long, pcy As Long)
    Sub PutProperty(ByVal Property As String, ByVal vtValue As Variant)
    Function GetProperty(ByVal Property As String) As Variant
    Property Get Name() As String
    Property Get hWnd() As LongPtr
    Property Get FullName() As String
    Property Get Path() As String
    Property Get Visible() As Integer
    Property Let Visible(ByVal value As Integer)
    Property Get StatusBar() As Integer
    Property Let StatusBar(ByVal value As Integer)
    Property Get StatusText() As String
    Property Let StatusText(ByVal StatusText As String)
    Property Get Toolbar() As Long
    Property Let Toolbar(ByVal Value As Long)
    Property Get MenuBar() As Integer
    Property Let MenuBar(ByVal value As Integer)
    Property Get Fullscreen() As Integer
    Property Let Fullscreen(ByVal value As Integer)
End Interface

[ InterfaceId ("E7A1AF80-4D96-11CF-960C-0080C7F4EE85") ]
Interface IShellFolderViewDual Extends IDispatch
    Property Get Application() As IDispatch
    Property Get Parent() As IDispatch
    Property Get Folder() As Folder
    Function SelectedItems() As FolderItems
    Property Get FocusedItem() As FolderItem
    Sub SelectItem(pvfi As Variant, ByVal dwFlags As Long)
    Function PopupItemMenu(ByVal pfi As FolderItem, Optional ByVal vx As Variant, Optional ByVal vy As Variant) As String
    Property Get Script() As IDispatch
    Property Get ViewOptions() As Long
End Interface
[ InterfaceId ("31C147b6-0ADE-4A3C-B514-DDF932EF6D17") ]
Interface IShellFolderViewDual2 Extends IShellFolderViewDual
    Property Get CurrentViewMode() As Long
    Property Let CurrentViewMode(ByVal ViewMode As Long)
    Sub SelectItemRelative(ByVal iRelative As Long)
End Interface
[ InterfaceId ("29EC8E6C-46D3-411f-BAAA-611A6C9CAC66") ]
Interface IShellFolderViewDual3 Extends IShellFolderViewDual2
    Property Get GroupBy() As String
    Property Let GroupBy(ByVal bstrGroupBy As String)
    Property Get FolderFlags() As Long
    Property Let FolderFlags(ByVal dwFlags As Long)
    Property Get SortColumns() As String
    Property Let SortColumns(ByVal bstrSortColumns As String)
    Property Let IconSize(ByVal iIconSize As Long)
    Property Get IconSize() As Long
    Sub FilterView(ByVal bstrFilterText As String)
End Interface

[ InterfaceId ("88A05C00-F000-11CE-8350-444553540000") ]
Interface IShellLinkDual Extends IDispatch
    Property Get Path() As String
    Property Let Path(ByVal bs As String)
    Property Get Description() As String
    Property Let Description(ByVal bs As String)
    Property Get WorkingDirectory() As String
    Property Let WorkingDirectory(ByVal bs As String)
    Property Get Arguments() As String
    Property Let Arguments(ByVal bs As String)
    Property Get HotKey() As Long
    Property Let HotKey(ByVal iHK As Long)
    Property Get ShowCommand() As Long
    Property Let ShowCommand(ByVal iHK As Long)
    Sub Resolve(ByVal fFlags As Long)
    Function GetIconLocation(pbs As String) As Long
    Sub SetIconLocation(ByVal bs As String, ByVal iIcon As Long)
    Sub Save(ByVal vWhere As Variant)
End Interface
[ InterfaceId ("317EE249-F12E-11d2-B1E4-00C04F8EEB3E") ]
Interface IShellLinkDual2 Extends IShellLinkDual
    Property Get Target() As FolderItem
End Interface

[ InterfaceId ("D8F015C0-C278-11CE-A49E-444553540000") ]
Interface IShellDispatch Extends IDispatch
    Property Get Application() As IDispatch
    Property Get Parent() As IDispatch
    Function Namespace(ByVal vDir As Variant) As Folder
    Function BrowseForFolder(ByVal hwnd As Long, ByVal Title As String, ByVal options As Long, Optional ByVal RootFolder As Variant) As Folder
    Function Windows() As IDispatch
    Sub Open(ByVal vDir As Variant)
    Sub Explore(ByVal vDir As Variant)
    Sub MinimizeAll()
    Sub UndoMinimizeAll()
    Sub FileRun()
    Sub CascadeWindows()
    Sub TileVertically()
    Sub TileHorizontally()
    Sub ShutdownWindows()
    Sub Suspend()
    Sub EjectPC()
    Sub SetTime()
    Sub TrayProperties()
    Sub Help()
    Sub FindFiles()
    Sub FindComputer()
    Sub RefreshMenu()
    Sub ControlPanelItem(ByVal bstrDir As String)
End Interface
[ InterfaceId ("A4C6892C-3BA9-11d2-9DEA-00C04FB16162") ]
Interface IShellDispatch2 Extends IShellDispatch
    Function IsRestricted(ByVal Group As String, ByVal Restriction As String) As Long
    Sub ShellExecute(ByVal File As String, Optional ByVal vArgs As Variant, Optional ByVal vDir As Variant, Optional ByVal vOperation As Variant, Optional ByVal vShow As Variant)
    Sub FindPrinter(Optional ByVal name As String, Optional ByVal location As String, Optional ByVal model As String)
    Function GetSystemInformation(ByVal name As String) As Variant
    Function ServiceStart(ByVal serviceName As String, ByVal Persistent As Variant) As Variant
    Function ServiceStop(ByVal serviceName As String, ByVal Persistent As Variant) As Variant
    Function IsServiceRunning(ByVal ServiceName As String) As Variant
    Function CanStartStopService(ByVal ServiceName As String) As Variant
    Function ShowBrowserBar(ByVal bstrClsid As String, ByVal bShow As Variant) As Variant
End Interface
[ InterfaceId ("177160ca-bb5a-411c-841d-bd38facdeaa0") ]
Interface IShellDispatch3 Extends IShellDispatch2
    Sub AddToRecent(ByVal varFile As Variant, Optional ByVal bstrCategory As String)
End Interface
[ InterfaceId ("efd84b2d-4bcf-4298-be25-eb542a59fbda") ]
Interface IShellDispatch4 Extends IShellDispatch3
    Sub WindowsSecurity()
    Sub ToggleDesktop()
    Function ExplorerPolicy(ByVal bstrPolicyName As String) As Variant
    Function GetSetting(ByVal lSetting As Long) As Integer
End Interface
[ InterfaceId ("866738b9-6cf2-4de8-8767-f794ebe74f4e") ]
Interface IShellDispatch5 Extends IShellDispatch4
    Sub WindowSwitcher()
End Interface
[ InterfaceId ("286e6f1b-7113-4355-9562-96b7e9d64c54") ]
Interface IShellDispatch6 Extends IShellDispatch5
    Sub SearchCommand()
End Interface

[ InterfaceId ("FAC32C80-CBE4-11CE-8350-444553540000") ]
Interface FolderItem Extends IDispatch
    Property Get Application() As IDispatch
    Property Get Parent() As IDispatch
    Property Get Name() As String
    Property Let Name(ByVal bs As String)
    Property Get Path() As String
    Property Get GetLink() As IDispatch
    Property Get GetFolder() As IDispatch
    Property Get IsLink() As Integer
    Property Get IsFolder() As Integer
    Property Get IsFileSystem() As Integer
    Property Get IsBrowsable() As Integer
    Property Get ModifyDate() As Date
    Property Let ModifyDate(ByVal dt As Date)
    Property Get Size() As Long
    Property Get Type() As String
    Function Verbs() As FolderItemVerbs
    Sub InvokeVerb(Optional ByVal vVerb As Variant)
End Interface
[ InterfaceId ("edc817aa-92b8-11d1-b075-00c04fc33aa5") ]
Interface FolderItem2 Extends FolderItem
    Sub InvokeVerbEx(Optional ByVal vVerb As Variant, Optional ByVal vArgs As Variant)
    Function ExtendedProperty(ByVal bstrPropName As String) As Variant
End Interface

[ InterfaceId ("744129E0-CBE5-11CE-8350-444553540000") ]
Interface FolderItems Extends IDispatch
    Property Get Count() As Long
    Property Get Application() As IDispatch
    Property Get Parent() As IDispatch
    Function Item(Optional ByVal index As Variant) As FolderItem
    Function _NewEnum() As stdole.IUnknown
End Interface
[ InterfaceId ("C94F0AD0-F363-11d2-A327-00C04F8EEC7F") ]
Interface FolderItems2 Extends FolderItems
    Sub InvokeVerbEx(Optional ByVal vVerb As Variant, Optional ByVal vArgs As Variant)
End Interface
[ InterfaceId ("eaa7c309-bbec-49d5-821d-64d966cb667f") ]
Interface FolderItems3 Extends FolderItems2
    Sub Filter(ByVal grfFlags As Long, ByVal bstrFileSpec As String)
    Function Verbs() As FolderItemVerbs
End Interface

[ InterfaceId ("BBCBDE60-C3FF-11CE-8350-444553540000") ]
Interface Folder Extends IDispatch
    Property Get Title() As String
    Property Get Application() As IDispatch
    Property Get Parent() As IDispatch
    Property Get ParentFolder() As Folder
    Function Items() As FolderItems
    Function ParseName(ByVal bName As String) As FolderItem
    Sub NewFolder(ByVal bName As String, Optional ByVal vOptions As Variant)
    Sub MoveHere(ByVal vItem As Variant, Optional ByVal vOptions As Variant)
    Sub CopyHere(ByVal vItem As Variant, Optional ByVal vOptions As Variant)
    Function GetDetailsOf(ByVal vItem As Variant, ByVal iColumn As Long) As String
End Interface
[ InterfaceId ("f0d2d8ef-3890-11d2-bf8b-00c04fb93661") ]
Interface Folder2 Extends Folder
    Function Self() As FolderItem
    Function OfflineStatus() As Long
    Sub Synchronize()
    Function HaveToShowWebViewBarricade() As Integer
    Sub DismissedWebViewBarricade()
End Interface
[ InterfaceId ("A7AE5F64-C4D7-4d7f-9307-4D24EE54B841") ]
Interface Folder3 Extends Folder2
    Property Get ShowWebViewBarricade() As Integer
    Property Let ShowWebViewBarricade(ByVal bShowWebViewBarricade As Integer)
End Interface

[ InterfaceId ("08EC3E00-50B0-11CF-960C-0080C7F4EE85") ]
Interface FolderItemVerb Extends IDispatch
    Property Get Application() As IDispatch
    Property Get Parent() As IDispatch
    Property Get Name() As String
    Sub DoIt()
End Interface
[ InterfaceId ("1F8352C0-50B0-11CF-960C-0080C7F4EE85") ]
Interface FolderItemVerbs Extends IDispatch
    Property Get Count() As Long
    Property Get Application() As IDispatch
    Property Get Parent() As IDispatch
    Function Item(ByVal index As Variant) As FolderItemVerb
    Function _NewEnum() As stdole.IUnknown
End Interface

[ InterfaceId ("4a3df050-23bd-11d2-939f-00a0c91eedba") ]
Interface DFConstraint Extends IDispatch
    Function Name() As String
    Function Value() As Variant
End Interface

[ InterfaceId ("62112AA2-EBE4-11cf-A5FB-0020AFE7292D") ]
Interface DShellFolderViewEvents Extends idispatch
    Sub SelectionChanged()
    Sub EnumDone()
    Function VerbInvoked() As Integer
    Function DefaultVerbInvoked() As Integer
    Function BeginDrag() As Integer
End Interface

[ InterfaceId ("9BA05970-F6A8-11CF-A442-00A0C90A8F39") ]
Interface IFolderViewOC Extends IDispatch
    Sub SetFolderView(ByVal pdisp As IDispatch)
End Interface


Module slShellObj

Public Enum BrowserNavConstants
	navOpenInNewWindow = &H0001 'helpstring("Open in new window")] 
	navNoHistory = &H0002 'helpstring("Exclude from history list")] 
	navNoReadFromCache = &H0004 'helpstring("Don't read from cache")] 
	navNoWriteToCache = &H0008 'helpstring("Don't write from cache")] 
	navAllowAutosearch = &H0010 'helpstring("Try other sites on failure")] 
	navBrowserBar = &H0020 'helpstring("OpenBrowserBar")] 
	navHyperlink = &H0040 'helpstring("Hyperlink")] 
	navEnforceRestricted = &H0080 'helpstring("Enforce restricted zone")] 
	navNewWindowsManaged = &H0100 'helpstring("Apply new window management")] 
	navUntrustedForDownload = &H0200 'helpstring("Untrusted download")] 
	navTrustedForActiveX = &H0400 'helpstring("Trusted for ActiveX prompt")] 
	navOpenInNewTab = &H0800 'helpstring("Open in new tab")] 
	navOpenInBackgroundTab = &H1000 'helpstring("Open in a background tab")] 
	navKeepWordWheelText = &H2000 'helpstring("Maintain the wordwheel text")] 
	navVirtualTab = &H4000 'helpstring("Virtual tab across MIC levels")] 
	navBlockRedirectsXDomain = &H8000 'helpstring("Block x-domain redirects")] 
	navOpenNewForegroundTab = &H10000 'helpstring("Force open in foreground tab")] 
	navTravelLogScreenshot = &H20000 'helpstring("Travel Log nav with screenshot")] 
	navDeferUnload = &H40000 'helpstring("Defer unload of virtual tab")] 
	navSpeculative = &H80000 'helpstring("Speculative navigate")] 
	navSuggestNewWindow = &H100000 'helpstring("Suggest open in new window")] 
	navSuggestNewTab = &H200000 'helpstring("Suggest open in new tab")] 
	navReserved1 = &H400000 'helpstring("Reserved")] 
	navHomepageNavigate = &H800000 'helpstring("HP navigation")] 
	navRefresh = &H1000000 'helpstring("Treat nav as refresh")] 
	navHostNavigation = &H2000000 'helpstring("Host initiated navigation")] 
	navReserved2 = &H4000000 'helpstring("Reserved")] 
	navReserved3 = &H8000000 'helpstring("Reserved")] 
	navReserved4 = &H10000000 'helpstring("Reserved")] 
	navReserved5 = &H20000000 'helpstring("Reserved")] 
	navReserved6 = &H40000000 'helpstring("Reserved")] 
End Enum

Public Enum RefreshConstants' // must map to these in sdk\inc\docobj.h
	REFRESH_NORMAL = 0 '[ helpstring("Refresh normal")]  ,  //== OLECMDIDF_REFRESH_NORMAL
	REFRESH_IFEXPIRED = 1 '[ helpstring("Refresh if expired")] ,  //== OLECMDIDF_REFRESH_IFEXPIRED
	REFRESH_COMPLETELY = 3 ' helpstring("Refresh completely")]    //== OLECMDIDF_REFRESH_COMPLETELY
End Enum

Public Enum CommandStateChangeConstants
	CSC_UPDATECOMMANDS = &HFFFFFFFF '[helpstring("Command Change")] ,
	CSC_NAVIGATEFORWARD = &H00000001'[helpstring("Navigate Forward")] ,
	CSC_NAVIGATEBACK = &H00000002 '[helpstring("Navigate Back")] ,
End Enum

Public Enum OfflineFolderStatus
    OFS_INACTIVE = -1 '   [helpstring("Offline caching not available for this folder")] ,
    OFS_ONLINE '   [helpstring("Server is online")] ,
    OFS_OFFLINE '   [helpstring("Server is offline")] ,
    OFS_SERVERBACK '    [helpstring("Server is offline but is reachable")] ,
    OFS_DIRTYCACHE '    [helpstring("Server is online with unmerged changes")],
End Enum

Public Enum ShellFolderViewOptions
    SFVVO_SHOWALLOBJECTS = &H00000001 '[helpstring("Show All Objects")] ,
    SFVVO_SHOWEXTENSIONS = &H00000002',    [helpstring("Show File Extensions")] 
    SFVVO_SHOWCOMPCOLOR = &H00000008 '[helpstring("Color encode Compressed files")] ,
    SFVVO_SHOWSYSFILES = &H00000020 '[helpstring("Show System Files")] ,
    SFVVO_WIN95CLASSIC = &H00000040'[helpstring("Use Windows 95 UI settings")] ,
    SFVVO_DOUBLECLICKINWEBVIEW = &H00000080 '[helpstring("User needs to double click in web View")] ,
    SFVVO_DESKTOPHTML = &H00000200 '[helpstring("Is Desktop HTML enabled")] ,
End Enum

Public Enum ShellSpecialFolderConstants
	ssfDESKTOP = 0
	ssfPROGRAMS = &H2
	ssfCONTROLS = &H3
	ssfPRINTERS = &H4
	ssfPERSONAL = &H5
	ssfFAVORITES = &H6
	ssfSTARTUP = &H7
	ssfRECENT = &H8
	ssfSENDTO = &H9
	ssfBITBUCKET = &Ha
	ssfSTARTMENU = &Hb
	ssfDESKTOPDIRECTORY = &H10
	ssfDRIVES = &H11
	ssfNETWORK = &H12
	ssfNETHOOD = &H13
	ssfFONTS = &H14
	ssfTEMPLATES = &H15
	ssfCOMMONSTARTMENU = &H16
	ssfCOMMONPROGRAMS = &H17
	ssfCOMMONSTARTUP = &H18
	ssfCOMMONDESKTOPDIR = &H19
	ssfAPPDATA = &H1a
	ssfPRINTHOOD = &H1b
	ssfLOCALAPPDATA = &H1c
	ssfALTSTARTUP = &H1d
	ssfCOMMONALTSTARTUP = &H1e
	ssfCOMMONFAVORITES = &H1f
	ssfINTERNETCACHE = &H20
	ssfCOOKIES = &H21
	ssfHISTORY = &H22
	ssfCOMMONAPPDATA = &H23
	ssfWINDOWS = &H24
	ssfSYSTEM = &H25
	ssfPROGRAMFILES = &H26
	ssfMYPICTURES = &H27
	ssfPROFILE = &H28
	ssfSYSTEMx86 = &H29
	ssfPROGRAMFILESx86 = &H30
End Enum

Public Const sCLSID_ShellFolderViewOC = "new: {9BA05971-F6A8-11CF-A442-00A0C90A8F39}"
Public Const sCLSID_ShellFolderItem = "new: {2fe352ea-fd1f-11d2-b1f4-00c04f8eeb3e}"
Public Const sCLSID_ShellLinkObject = "new: {11219420-1768-11d1-95BE-00609797EA4F}"
Public Const sCLSID_ShellFolderView = "new: {62112AA1-EBE4-11cf-A5FB-0020AFE7292D}"
Public Const sCLSID_Shell = "new: {13709620-C279-11CE-A49E-444553540000}"
Public Const sCLSID_ShellDispatchInproc = "new: {0A89A860-D7B1-11CE-8350-444553540000}"

End Module