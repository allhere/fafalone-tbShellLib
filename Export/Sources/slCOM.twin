'tbShellLib - slCOM :: Misc COM component stuff


[ InterfaceId ("75121952-E0D0-43E5-9380-1D80483ACF72") ]
[ OleAutomation (False) ]
Interface ICreateObject Extends stdole.IUnknown
    Sub CreateObject(ByRef clsid As UUID, ByVal pUnkOuter As IUnknown, ByRef riid As UUID, ByRef ppv As Any)
End Interface

[ InterfaceId ("00000002-0000-0000-C000-000000000046") ]
[ OleAutomation (False) ]
Interface IMalloc Extends stdole.IUnknown
    [ PreserveSig ]
    Function Alloc(ByVal cb As LongPtr) As LongPtr
    [ PreserveSig ]
    Function Realloc(ByRef pv As Any, ByVal cb As LongPtr) As LongPtr
    [ PreserveSig ]
    Sub Free(ByVal pv As LongPtr) 'As Long
    [ PreserveSig ]
    Function GetSize(ByVal pv As LongPtr) As LongPtr
    [ PreserveSig ]
    Function DidAlloc(ByVal pv As LongPtr) As Long
    [ PreserveSig ]
    Sub HeapMinimize()
End Interface

[ InterfaceId ("00000003-0000-0000-C000-000000000046") ]
[ OleAutomation (False) ]
Interface IMarshal Extends stdole.IUnknown
        Sub GetUnmarshalClass(ByRef riid As UUID, ByRef pv As Any, ByVal dwDestContext As MSHCTX, ByRef pvDestContext As Any, ByVal MSHLFLAGS As MSHLFLAGS, ByRef pCid As UUID)
        Function GetMarshalSizeMax(ByRef riid As UUID, ByRef pv As Any, ByVal dwDestContext As MSHCTX, ByRef pvDestContext As Any, ByVal MSHLFLAGS As MSHLFLAGS) As Long
        Sub MarshalInterface(ByVal pStm As IStream, ByRef riid As UUID, ByRef pv As Any, ByVal dwDestContext As MSHCTX, ByRef pvDestContext As Any, ByVal MSHLFLAGS As MSHLFLAGS)
        Sub UnmarshalInterface(ByVal pStm As IStream, ByRef riid As UUID, ByRef ppv As Any)
        Sub ReleaseMarshalData(ByVal pStm As IStream)
        Sub DisconnectObject(ByVal dwReserved As Long)
End Interface


[ InterfaceId ("0000000A-0000-0000-C000-000000000046") ]
[ OleAutomation (False) ]
Interface ILockBytes Extends stdole.IUnknown
        Function ReadAt(ByVal ulOffset As LongLong, ByRef pv As Any, ByVal cb As Long) As Long
        Function WriteAt(ByVal ulOffset As LongLong, ByRef pv As Any, ByVal cb As Long) As Long
        Sub Flush()
        Sub SetSize(ByVal cb As LongLong)
        Sub LockRegion(ByVal libOffset As LongLong, ByVal cb As LongLong, ByVal dwLockType As Long)
        Sub UnlockRegion(ByVal libOffset As LongLong, ByVal cb As LongLong, ByVal dwLockType As Long)
        Sub Stat(ByRef pstatstg As STATSTG, Optional ByVal grfStatFlag As STATFLAG = 0)
End Interface

[ InterfaceId ("99CAF010-415E-11CF-8814-00AA00B569F5") ]
[ OleAutomation (False) ]
Interface IFillLockBytes Extends stdole.IUnknown
        Function FillAppend(ByRef pv As Any, ByVal cb As Long) As Long
        Function FillAt(ByVal ulOffset As LongLong, ByRef pv As Any, ByVal cb As Long) As Long
        Sub SetFillSize(ByVal ulSize As LongLong)
        Sub Terminate(ByVal bCanceled As Long)
End Interface
    
[ InterfaceId ("0E6D4D90-6738-11CF-9608-00AA00680DB4") ]
[ OleAutomation (False) ]
Interface ILayoutStorage Extends stdole.IUnknown
        Sub LayoutScript(ByRef pStorageLayout As StorageLayout, ByVal nEntries As Long, ByVal glfInterleavedFlag As Long)
        Sub BeginMonitor()
        Sub EndMonitor()
        Sub ReLayoutDocfile(ByVal pwcsNewDfName As String)
        Sub ReLayoutDocfileOnILockBytes(ByVal pILockBytes As ILockBytes)
End Interface

    [ InterfaceId ("1CF2B120-547D-101B-8E65-08002B2BD119") ]
    [ OleAutomation (False) ]
    Interface IErrorInfo Extends stdole.IUnknown
        Sub GetGUID(ByRef pGUID As UUID)
        Function GetSource() As String
        Function GetDescription() As String
        Function GetHelpFile() As String
        Function GetHelpContext() As Long
    End Interface

    [ InterfaceId ("22F03340-547D-101B-8E65-08002B2BD119") ]
    [ OleAutomation (False) ]
    Interface ICreateErrorInfo Extends stdole.IUnknown
        Sub SetGuid(ByRef rguid As UUID)
        Sub SetSource(ByVal szSource As String)
        Sub SetDescription(ByVal szDescription As String)
        Sub SetHelpFile(ByVal szHelpFile As String)
        Sub SetHelpContext(ByVal dwHelpContext As Long)
    End Interface

    [ InterfaceId ("DF0B3D60-548F-101B-8E65-08002B2BD119") ]
    [ OleAutomation (False) ]
    Interface ISupportErrorInfo Extends stdole.IUnknown
        Sub InterfaceSupportsErrorInfo(ByRef riid As UUID)
    End Interface
    
    [ InterfaceId ("0000002F-0000-0000-C000-000000000046") ]
    [ OleAutomation (False) ]
    Interface IRecordInfo Extends stdole.IUnknown
        Sub RecordInit(ByRef pvNew As Any)
        Sub RecordClear(ByRef pvExisting As Any)
        Sub RecordCopy(ByRef pvExisting As Any, ByRef pvNew As Any)
        Sub GetGUID(ByRef pGUID As UUID)
        Function GetName() As String
        Function GetSize() As Long
        Function GetTypeInfo() As ITypeInfo
        Function GetField(ByRef pvData As Any, ByVal szFieldName As String) As Variant
        Sub GetFieldNoCopy(ByRef pvData As Any, ByVal szFieldName As String, ByRef pvarField As Variant, ByRef ppvDataCArray As Any)
        Sub PutField(ByVal wFlags As INVOKEKIND, ByRef pvData As Any, ByVal szFieldName As String, ByRef pvarField As Variant)
        Sub PutFieldNoCopy(ByVal wFlags As INVOKEKIND, ByRef pvData As Any, ByVal szFieldName As String, ByRef pvarField As Variant)
        Sub GetFieldNames(ByRef pcNames As Long, ByRef rgBstrNames As String)
        [ PreserveSig ]
        Function IsMatchingType(ByVal pRecordInfo As IRecordInfo) As Long
        [ PreserveSig ]
        Function RecordCreate() As Long
        Sub RecordCreateCopy(ByRef pvSource As Any, ByRef ppvDest As Any)
        Sub RecordDestroy(ByRef pvRecord As Any)
    End Interface

    [ InterfaceId ("0000010D-0000-0000-C000-000000000046") ]
    [ OleAutomation (False) ]
    Interface IViewObject Extends stdole.IUnknown
        Sub Draw(ByVal dwDrawAspect As DVASPECT, ByVal lindex As Long, ByRef pvAspect As Any, ByRef ptd As Any, ByVal hdcTargetDev As LongPtr, ByVal hdcDraw As LongPtr, ByRef lprcBounds As RECT, ByRef lprcWBounds As RECT, ByVal pfnContinue As LongPtr, ByVal dwContinue As Long)
        Sub GetColorSet(ByVal dwDrawAspect As DVASPECT, ByVal lindex As Long, ByRef pvAspect As Any, ByRef ptd As Any, ByVal hicTargetDev As LongPtr, ByRef ppColorSet As LongPtr)
        Function Freeze(ByVal dwDrawAspect As DVASPECT, ByVal lindex As Long, ByRef pvAspect As Any) As Long
        Sub Unfreeze(ByVal dwFreeze As Long)
        Sub SetAdvise(ByVal aspects As DVASPECT, ByVal ADVF As ADVF, ByVal pIAdviseSink As LongPtr)
        Sub GetAdvise(ByRef pAspects As DVASPECT, ByRef pAdvf As ADVF, ByRef pIAdviseSink As LongPtr)
    End Interface

    [ InterfaceId ("00000127-0000-0000-C000-000000000046") ]
    [ OleAutomation (False) ]
    Interface IViewObject2 Extends IViewObject
        Sub GetExtent(ByVal dwDrawAspect As DVASPECT, ByVal lindex As Long, ByRef ptd As DVTARGETDEVICE, ByRef lpSIZE As SIZE)
    End Interface

    [ InterfaceId ("CB728B20-F786-11CE-92AD-00AA00A74CD0") ]
    [ Description ("IProfferService") ]
    [ OleAutomation (False) ]
    Interface IProfferService Extends stdole.IUnknown
        Function ProfferService(ByRef rguidService As UUID, ByVal pSP As IServiceProvider) As Long
        Sub RevokeService(ByVal dwCookie As Long)
    End Interface
    
[ InterfaceId ("0000013D-0000-0000-C000-000000000046") ]
[ OleAutomation (False) ]
Interface IClientSecurity Extends stdole.IUnknown
    Sub QueryBlanket(ByVal pProxy As stdole.IUnknown, pAuthnSvc As Long, pAuthzSvc As Long, pServerPrincName As LongPtr, pAuthnLevel As Long, pImpLevel As Long, pAuthInfo As Any, pCapabilities As Long)
    Sub SetBlanket(ByVal pProxy As stdole.IUnknown, ByVal AuthnSvc As Long, ByVal AuthzSvc As Long, ByVal pServerPrincName As LongPtr, ByVal AuthnLevel As Long, ByVal ImpLevel As Long, pAuthInfo As Any, ByVal Capabilities As Long)
    Function CopyProxy(ByVal pProxy As stdole.IUnknown) As stdole.IUnknown
End Interface

[ InterfaceId ("0000013E-0000-0000-C000-000000000046") ]
[ OleAutomation (False) ]
Interface IServerSecurity Extends stdole.IUnknown
    Sub QueryBlanket(pAuthnSvc As Long, pAuthzSvc As Long, pServerPrincName As LongPtr, pAuthnLevel As Long, pImpLevel As Long, pPrivs As LongPtr, pCapabilities As Long)
    Sub ImpersonateClient()
    Sub RevertToSelf()
    Sub IsImpersonating() 'BOOL [ PreserveSig ] when Implements-compat
End Interface

[ InterfaceId ("00000140-0000-0000-C000-000000000046") ]
[ OleAutomation (False) ]
Interface IClassActivator Extends stdole.IUnknown
    Sub GetClassObject(rclsid As UUID, ByVal dwClassContext As Long, ByVal locale As Long, riid As UUID, ppv As Any)
End Interface

[ InterfaceId ("a9d758a0-4617-11cf-95fc-00aa00680db4") ]
[ OleAutomation (False) ]
Interface IProgressNotify Extends stdole.IUnknown
    Sub OnProgress(ByVal dwProgressCurrent As Long, ByVal dwProgressMaximum As Long, ByVal fAccurate As Long, ByVal fOwner As Long)
End Interface

[ InterfaceId ("0000001d-0000-0000-C000-000000000046") ]
[ OleAutomation (False) ]
Interface IMallocSpy Extends stdole.IUnknown
    [ PreserveSig ] Function PreAlloc(ByVal cbRequest As LongPtr) As LongPtr
    [ PreserveSig ] Function PostAlloc(pActual As Any) As LongPtr
    [ PreserveSig ] Function PreFree(pRequest As Any, ByVal fSpyed As Long) As LongPtr
    [ PreserveSig ] Sub PostFree(ByVal fSpyed As Long)
    [ PreserveSig ] Function PreRealloc(pRequest As Any, ByVal cbRequest As LongPtr, ppNewRequest As LongPtr, ByVal fSpyed As Long) As LongPtr
    [ PreserveSig ] Function PostRealloc(pActual As Any, ByVal fSpyed As Long) As LongPtr
    [ PreserveSig ] Function PreGetSize(pRequest As Any, ByVal fSpyed As Long) As LongPtr
    [ PreserveSig ] Function PostGetSize(ByVal cbActual As LongPtr, ByVal fSpyed As Long) As LongPtr
    [ PreserveSig ] Function PreDidAlloc(pRequest As Any, ByVal fSpyed As Long) As LongPtr
    [ PreserveSig ] Function PostDidAlloc(pRequest As Any, ByVal fSpyed As Long, ByVal fActual As Long) As Long
    [ PreserveSig ] Sub PreHeapMinimize()
    [ PreserveSig ] Sub PostHeapMinimize()
End Interface

[ InterfaceId ("00000018-0000-0000-C000-000000000046") ]
[ OleAutomation (False) ]
Interface IStdMarshalInfo Extends stdole.IUnknown
    Sub GetClassForHandler(ByVal dwDestContext As Long, pvDestContext As Any, pClsid As UUID)
End Interface

[ InterfaceId ("00000019-0000-0000-C000-000000000046") ]
[ OleAutomation (False) ]
Interface IExternalConnection Extends stdole.IUnknown
    Sub AddConnection(ByVal extconn As Long, ByVal reserved As Long)
    Sub ReleaseConnection(ByVal extconn As Long, ByVal reserved As Long, ByVal fLastReleaseCloses As Long)
End Interface

[ InterfaceId ("969dc708-5c76-11d1-8d86-0000f804b057") ]
[ OleAutomation (False) ]
Interface IThumbnailExtractor Extends stdole.IUnknown
    Sub ExtractThumbnail(ByVal pStg As IStorage, ByVal ulLength As Long, ByVal ulHeight As Long, pulOutputLength As Long, pulOutputHeight As Long, phOutputBitmap As LongPtr)
    Sub OnFileUpdated(ByVal pStg As IStorage)
End Interface



[ CoClassId ("cefc65d8-66d8-11d1-8d8c-0000f804b057") ]
CoClass ThumbnailFCNHandler
    [ Default ] Interface IThumbnailExtractor
End CoClass



Module slCOM

Public Enum EXTCONN
	EXTCONN_STRONG = &H0001 ' strong connection
	EXTCONN_WEAK = &H0002 ' weak connection (table, container)
	EXTCONN_CALLABLE = &H0004 ' table .vs. callable
End Enum

Public Enum EOLE_AUTHENTICATION_CAPABILITIES
	EOAC_NONE = &H0
	EOAC_MUTUAL_AUTH = &H1
	EOAC_SECURE_REFS = &H2
End Enum

Public Type SOLE_AUTHENTICATION_SERVICE
	dwAuthnSvc As Long
	dwAuthzSvc As Long
	pPrincipalName /* OLECHAR* */ As LongPtr
	hr As Long
End Type

Public Enum MSHCTX
        MSHCTX_LOCAL = 0                                     ' &H00000000&
        MSHCTX_NOSHAREDMEM = 1                               ' &H00000001&
        MSHCTX_DIFFERENTMACHINE = 2                          ' &H00000002&
        MSHCTX_INPROC = 3                                    ' &H00000003&
        MSHCTX_CROSSCTX = 4                                  ' &H00000004&
    End Enum

Public Enum MSHLFLAGS
        MSHLFLAGS_NORMAL = 0                                 ' &H00000000&
        MSHLFLAGS_TABLESTRONG = 1                            ' &H00000001&
        MSHLFLAGS_TABLEWEAK = 2                              ' &H00000002&
        MSHLFLAGS_NOPING = 3                                 ' &H00000003&
    End Enum

Public Type StorageLayout
        LayoutType As Long                                   ' offset &H0000
        pwcsElementName As LongPtr                              ' offset &H0004
        cOffset As LongLong                                  ' offset &H0008
        cBytes As LongLong                                   ' offset &H0010
    End Type
    
End Module