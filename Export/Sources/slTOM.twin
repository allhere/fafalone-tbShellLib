'slTOM.twin - Text Object Model (TOM.h, TextServ.h) for RichEdit control


    [ InterfaceId ("00020D00-0000-0000-C000-000000000046") ]
    [ OleAutomation (False) ]
    Interface IRichEditOle Extends stdole.IUnknown
        Function GetClientSite() As IOleClientSite
        [ PreserveSig ]
        Function GetObjectCount() As Long
        [ PreserveSig ]
        Function GetLinkCount() As Long
        [ PreserveSig ]
        Function GetObject(ByVal iob As Long, ByRef pREOBJECT As Any, ByVal dwFlags As REO_GETOBJ) As Long
        [ PreserveSig ]
        Function InsertObject(ByRef pREOBJECT As Any) As Long
        [ PreserveSig ]
        Function ConvertObject(ByVal iob As Long, ByRef pCLSIDNew As OLECLSID, ByVal pstrUserTypeNew As String) As Long
        [ PreserveSig ]
        Function ActivateAs(ByRef pCLSID As OLECLSID, ByRef pCLSIDAs As OLECLSID) As Long
        [ PreserveSig ]
        Function SetHostNames(ByVal pstrContainerApp As String, ByVal pstrContainerObj As String) As Long
        [ PreserveSig ]
        Function SetLinkAvailable(ByVal iob As Long, ByVal fAvailable As Long) As Long
        [ PreserveSig ]
        Function SetDvaspect(ByVal iob As Long, ByVal dvAspect As DVASPECT) As Long
        [ PreserveSig ]
        Function HandsOffStorage(ByVal iob As Long) As Long
        [ PreserveSig ]
        Function SaveCompleted(ByVal iob As Long, ByVal pStorage As IStorage) As Long
        [ PreserveSig ]
        Function InPlaceDeactivate() As Long
        [ PreserveSig ]
        Function ContextSensitiveHelp(ByVal fEnterMode As Long) As Long
        [ PreserveSig ]
        Function GetClipboardData(ByVal lpCharRange As LongPtr, ByVal RECO As RECO_FLAGS, ByRef ppDataObject As IDataObject) As Long
        [ PreserveSig ]
        Function ImportDataObject(ByVal pDataObject As IDataObject, ByVal CF As Integer, ByVal hMetaPict As LongPtr) As Long
    End Interface

    [ InterfaceId ("00020D03-0000-0000-C000-000000000046") ]
    [ OleAutomation (False) ]
    Interface IRichEditOleCallback Extends stdole.IUnknown
        Sub GetNewStorage(ByRef ppStorage As IStorage)
        Sub GetInPlaceContext(ByRef ppFrame As IOleInPlaceFrame, ByRef ppDoc As IOleInPlaceUIWindow, ByRef pFrameInfo As OLEINPLACEFRAMEINFO)
        Sub ShowContainerUI(ByVal fShow As Long)
        Sub QueryInsertObject(ByRef pCLSID As OLECLSID, ByVal pStorage As IStorage, ByVal CharPos As Long)
        Sub DeleteObject(ByVal LpOleObject As LongPtr)
        Sub QueryAcceptData(ByVal pDataObject As IDataObject, ByRef CF As Integer, ByVal RECO As RECO_FLAGS, ByVal fReally As Long, ByVal hMetaPict As LongPtr)
        Sub ContextSensitiveHelp(ByVal fEnterMode As Long)
        Sub GetClipboardData(ByVal lpCharRange As LongPtr, ByVal RECO As RECO_FLAGS, ByRef ppDataObject As IDataObject)
        Sub GetDragDropEffect(ByVal fDrag As Long, ByVal KeyState As Long, ByRef dwEffect As Long)
        Sub GetContextMenu(ByVal SelType As Integer, ByVal LpOleObject As LongPtr, ByVal lpCharRange As LongPtr, ByRef hMenu As LongPtr)
    End Interface
    
    
   [ InterfaceId ("8CC497C0-A1DF-11CE-8098-00AA0047BE5D") ]
    '[ DualInterface ]
    [ OleAutomation (False) ]
    Interface ITextDocument Extends IDispatch
        [ DispId (0) ]
        Property Get Name() As String
        [ DispId (1) ]
        Property Get Selection() As ITextSelection
        [ DispId (2) ]
        Property Get StoryCount() As Long
        [ DispId (3) ]
        Property Get StoryRanges() As ITextStoryRanges
        [ DispId (4) ]
        Property Get Saved() As Long
        [ DispId (4) ]
        Property Let Saved(ByVal pValue As Long)
        [ DispId (5) ]
        Property Get DefaultTabStop() As Single
        [ DispId (5) ]
        Property Let DefaultTabStop(ByVal pValue As Single)
        [ DispId (6) ]
        Sub New()
        [ DispId (7) ]
        Sub Open(ByRef pVar As Variant, ByVal flags As tomOpenFlags, Optional ByVal CodePage As Long = 0)
        [ DispId (8) ]
        Sub Save(ByRef pVar As Variant, ByVal flags As tomOpenFlags, Optional ByVal CodePage As Long = 0)
        [ DispId (9) ]
        Function Freeze() As Long
        [ DispId (10) ]
        Function Unfreeze() As Long
        [ DispId (11) ]
        Sub BeginEditCollection()
        [ DispId (12) ]
        Sub EndEditCollection()
        [ DispId (13) ]
        Function Undo(ByVal Count As Long) As Long
        [ DispId (14) ]
        Function Redo(ByVal Count As Long) As Long
        [ DispId (15) ]
        Function Range(Optional ByVal cp1 As Long = 0, Optional ByVal cp2 As Long = -1) As ITextRange
        [ DispId (16) ]
        Function RangeFromPoint(ByVal x As Long, ByVal y As Long) As ITextRange
    End Interface
    [ InterfaceId ("C241F5E0-7206-11D8-A2C7-00A0D1D6C6B3") ]
    [ OleAutomation (False) ]
    Interface ITextDocument2 Extends ITextDocument
        Property Get GetCaretType() As Long
        Property Let SetCaretType(ByVal value As Long)
        Property Get GetDisplays() As ITextDisplays
        Property Get GetDocumentFont() As ITextFont2
        Property Let SetDocumentFont(ByVal pFont As ITextFont2)
        Property Get GetDocumentPara() As ITextPara2
        Property Let SetDocumentPara(ByVal pPara As ITextPara2)
        Property Get GetEastAsianFlags() As Long
        Property Get GetGenerator() As String
        Property Let SetIMEInProgress(ByVal Value As Long)
        Property Get GetNotificationMode() As Long
        Property Let SetNotificationMode(ByVal Value As Long)
        Property Get GetSelection2() As ITextSelection2
        Property Get GetStoryRanges2() As ITextStoryRanges2
        Property Get GetTypographyOptions() As Long
        Property Get GetVersion() As Long
        Property Get GetWindow() As LongLong
        Sub AttachMsgFilter(ByVal pFilter As IUnknown)
        Sub CheckTextLimit(ByVal cch As Long, pcch As Long)
        Function GetCallManager() As IUnknown
        Sub GetClientRect(pLeft As Long, pTop As Long, pRight As Long, pBottom As Long)
        Function GetEffectColor(ByVal Index As Long) As Long
        Function GetImmContext() As LongLong
        Sub GetPreferredFont(ByVal cp As Long, ByVal CharRep As Long, ByVal Options As Long, ByVal curCharRep As Long, ByVal curFontSize As Long, pbstr As String, pPitchAndFamily As Long, pNewFontSize As Long)
        Sub GetProperty(ByVal Type As Long, pValue As Long)
        Sub GetStrings(ppStrs As ITextStrings)
        Sub Notify(ByVal Notify As Long)
        Function Range2(ByVal cpActive As Long, ByVal cpAnchor As Long) As ITextRange2
        Function RangeFromPoint2(ByVal x As Long, ByVal y As Long, ByVal Type As Long) As ITextRange2
        Sub ReleaseCallManager(ByVal pVoid As IUnknown)
        Sub ReleaseImmContext(ByVal Context As LongLong)
        Sub SetEffectColor(ByVal Index As Long, ByVal Value As Long)
        Sub SetProperty(ByVal Type As Long, ByVal Value As Long)
        Sub SetTypographyOptions(ByVal Options As Long, ByVal Mask As Long)
        Sub SysBeep()
        Sub Update(ByVal Value As Long)
        Sub UpdateWindow()
        Sub	GetMathProperties(pOptions As Long)
        Sub SetMathProperties(ByVal Options As Long, ByVal Mask As Long)
        Property Get GetActiveStory() As ITextStory
        Property Let SetActiveStory(ByVal pStore As ITextStory)
        Property Get GetMainStory() As ITextStory
        Property Get GetNewStory() As ITextStory
        Function GetStory(ByVal Index As Long) As ITextStory
    End Interface
    
    [ InterfaceId ("01c25500-4268-11d1-883a-3c8b00c10000") ]
    [ OleAutomation (False) ]
    Interface ITextDocument2Old Extends ITextDocument
    	Sub AttachMsgFilter(ByVal pFilter As IUnknown)
        Sub SetEffectColor(ByVal Index As Long, ByVal Value As Long)
        Sub GetEffectColor(ByVal Index As Long, pcr As Long)
        Property Get GetCaretType() As Long
        Property Let SetCaretType(ByVal value As Long)
        Function GetImmContext() As LongLong
        Sub ReleaseImmContext(ByVal Context As LongLong)
        Sub GetPreferredFont(ByVal cp As Long, ByVal CharRep As Long, ByVal Option As Long, ByVal curCharRep As Long, ByVal curFontSize As Long, pbstr As String, pPitchAndFamily As Long, pNewFontSize As Long)
        Property Get GetNotificationMode() As Long
        Property Let SetNotificationMode(ByVal Value As Long)
        Sub GetClientRect(pLeft As Long, pTop As Long, pRight As Long, pBottom As Long)
        Property Get GetSelection2() As ITextSelection
        Sub GetWindow(phwnd As LongLong)
        Sub GetFEFlags(pFlags As Long)
        Sub UpdateWindow()
        Sub CheckTextLimit(ByVal cch As Long, pcch As Long)
        Sub IMEInProgress(ByVal Value As Long)
        Sub SysBeep()
        Sub Update(ByVal mode As Long)
        Sub Notify(ByVal Notify As Long)
        Function GetDocumentFont() As ITextFont
        Function GetDocumentPara() As ITextPara
        Function GetCallManager() As IUnknown
        Sub ReleaseCallManager(ByVal pVoid As IUnknown)
    End Interface
    
    [ InterfaceId ("C241F5F2-7206-11D8-A2C7-00A0D1D6C6B3") ]
    [ OleAutomation (False) ]
    Interface ITextDisplays Extends IDispatch
    
    End Interface
    
    [ InterfaceId ("8CC497C2-A1DF-11CE-8098-00AA0047BE5D") ]
   '[ DualInterface]
    Interface ITextRange Extends IDispatch
        [ DispId (0) ]
        Property Get Text() As String
        [ DispId (0) ]
        Property Let Text(ByVal pBSTR As String)
        [ DispId (513) ]
        Property Get CHAR() As Long
        [ DispId (513) ]
        Property Let CHAR(ByVal pch As Long)
        [ DispId (514) ]
        Property Get Duplicate() As ITextRange
        [ DispId (515) ]
        Property Get FormattedText() As ITextRange
        [ DispId (515) ]
        Property Let FormattedText(ByVal ppRange As ITextRange)
        [ DispId (516) ]
        Property Get Start() As Long
        [ DispId (516) ]
        Property Let Start(ByVal pcpFirst As Long)
        [ DispId (517) ]
        Property Get end() As Long
        [ DispId (517) ]
        Property Let end(ByVal pcpLim As Long)
        [ DispId (518) ]
        Property Get Font() As ITextFont
        [ DispId (518) ]
        Property Let Font(ByVal pFont As ITextFont)
        [ DispId (519) ]
        Property Get Para() As ITextPara
        [ DispId (519) ]
        Property Let Para(ByVal pPara As ITextPara)
        [ DispId (520) ]
        Property Get StoryLength() As Long
        [ DispId (521) ]
        Property Get StoryType() As tomStories
        [ DispId (528) ]
        Sub Collapse(ByVal bStart As Long)
        [ DispId (529) ]
        Function Expand(ByVal Unit As tomUnits) As Long
        [ DispId (530) ]
        Function GetIndex(ByVal Unit As tomUnits) As Long
        [ DispId (531) ]
        Sub SetIndex(ByVal Unit As tomUnits, ByVal index As Long, ByVal Extend As tomExtend)
        [ DispId (532) ]
        Sub SetRange(ByVal cpActive As Long, ByVal cpOther As Long)
        [ DispId (533) ]
        Function InRange(ByVal pRange As ITextRange) As Long
        [ DispId (534) ]
        Function InStory(ByVal pRange As ITextRange) As Long
        [ DispId (535) ]
        Function IsEqual(ByVal pRange As ITextRange) As Long
        [ DispId (536) ]
        Sub Select()
        [ DispId (537) ]
        Function StartOf(ByVal Unit As tomUnits, ByVal Extend As tomExtend) As Long
        [ DispId (544) ]
        Function EndOf(ByVal Unit As tomUnits, ByVal Extend As tomExtend) As Long
        [ DispId (545) ]
        Function Move(ByVal Unit As tomUnits, ByVal Count As Long) As Long
        [ DispId (546) ]
        Function MoveStart(ByVal Unit As tomUnits, ByVal Count As Long) As Long
        [ DispId (547) ]
        Function MoveEnd(ByVal Unit As tomUnits, ByVal Count As Long) As Long
        [ DispId (548) ]
        Function MoveWhile(ByRef Cset As Variant, ByVal Count As Long) As Long
        [ DispId (549) ]
        Function MoveStartWhile(ByRef Cset As Variant, ByVal Count As Long) As Long
        [ DispId (550) ]
        Function MoveEndWhile(ByRef Cset As Variant, ByVal Count As Long) As Long
        [ DispId (551) ]
        Function MoveUntil(ByRef Cset As Variant, ByVal Count As Long) As Long
        [ DispId (552) ]
        Function MoveStartUntil(ByRef Cset As Variant, ByVal Count As Long) As Long
        [ DispId (553) ]
        Function MoveEndUntil(ByRef Cset As Variant, ByVal Count As Long) As Long
        [ DispId (560) ]
        Function FindText(ByVal bstr As String, ByVal cch As Long, ByVal flags As tomFindFlags) As Long
        [ DispId (561) ]
        Function FindTextStart(ByVal bstr As String, ByVal cch As Long, ByVal flags As tomFindFlags) As Long
        [ DispId (562) ]
        Function FindTextEnd(ByVal bstr As String, ByVal cch As Long, ByVal flags As tomFindFlags) As Long
        [ DispId (563) ]
        Function Delete(ByVal Unit As tomUnits, ByVal Count As Long) As Long
        [ DispId (564) ]
        Sub Cut(ByRef pVar As Variant)
        [ DispId (565) ]
        Sub Copy(ByRef pVar As Variant)
        [ DispId (566) ]
        Sub Paste(ByRef pVar As Variant, ByVal Format As Long)
        [ DispId (567) ]
        Function CanPaste(ByRef pVar As Variant, ByVal Format As Long) As Long
        [ DispId (568) ]
        Function CanEdit() As Long
        [ DispId (569) ]
        Sub ChangeCase(ByVal type As Long)
        [ DispId (576) ]
        Sub GetPoint(ByVal type As Long, ByRef px As Long, ByRef py As Long)
        [ DispId (577) ]
        Sub SetPoint(ByVal x As Long, ByVal y As Long, ByVal type As Long, ByVal Extend As tomExtend)
        [ DispId (578) ]
        Sub ScrollIntoView(ByVal Value As Long)
        [ DispId (579) ]
        Function GetEmbeddedObject() As IUnknown
    End Interface
    [ InterfaceId ("C241F5E2-7206-11D8-A2C7-00A0D1D6C6B3") ]
    [ OleAutomation (False) ]
    Interface ITextRange2 Extends ITextSelection
    	Property Get GetCch() As Long
        Property Get GetCells() As IUnknown
        Property Get GetColumn() As IUnknown
        Property Get GetCount() As Long
        Property Get GetDuplicate2() As ITextRange2
        Property Get GetFont2() As ITextFont2
        Property Let SetFont2(ByVal pFont As ITextFont2)
        Property Get GetFormattedText() As ITextRange2
        Property Let SetFormattedText(ByVal pRange As ITextRange2)
        Property Get GetGravity() As Long
        Property Let SetGravity(ByVal Value As Long)
        Property Get GetPara2() As ITextPara2
        Property Let SetPara2(ByVal pPara As ITextPara2)
        Property Get GetRow() As ITextRow
        Property Get GetStartPara() As Long
        Property Get GetTable() As IUnknown
        Property Get GetURL() As String
        Property Let SetURL(ByVal bstr As String)
        Sub AddSubrange(ByVal cp1 As Long, ByVal cp2 As Long, ByVal Activate As Long)
        Sub BuildUpMath(ByVal Flags As Long)
        Sub DeleteSubrange(ByVal cpFirst As Long, ByVal cpLim As Long)
        Sub Find(ByVal pRange As ITextRange2, ByVal Count As Long, ByVal Flags As Long, pDelta As Long)
        Sub GetChar2(pChar As Long, ByVal Offset As Long)
        Sub GetDropCap(pcLine As Long, pPosition As Long)
        Sub GetInlineObject(pType As Long, pAlign As Long, pChar As Long, pChar1 As Long, pChar2 As Long, pCount As Long, pTeXStyle As Long, pcCol As Long, pLevel As Long)
        Sub GetRect(ByVal Type As Long, pLeft As Long, pTop As Long, pRight As Long, pBottom As Long, pHit As Long)
        Sub GetSubrange(ByVal iSubrange As Long, pcpFirst As Long, pcpLim As Long)
        Sub GetText2(ByVal Flags As Long, pbstr As String)
        Sub HexToUnicode()
        Sub InsertTable(ByVal cCol As Long, ByVal cRow As Long, ByVal AutoFit As Long)
        Sub Linearize(ByVal Flags As Long)
        Sub SetActiveSubrange(ByVal cpAnchor As Long, ByVal cpActive As Long)
        Sub SetDropCap(ByVal cLine As Long, ByVal Position As Long)
        Sub SetProperty(ByVal Flags As Long, ByVal bstr As String)
        Sub UnicodeToHex()
        Sub SetInlineObject(ByVal Type As Long, ByVal Align As Long, ByVal Char As Long, ByVal Char1 As Long, ByVal Char2 As Long, ByVal Count As Long, ByVal TeXStyle As Long, ByVal cCol As Long)
        Sub GetMathFunctionType(ByVal bstr As String, pValue As Long)
        Sub InsertImage(ByVal width As Long, ByVal height As Long, ByVal ascent As Long, ByVal Type As Long, ByVal bstrAltText As String, ByVal pStream As IStream)
    End Interface
    
    [ InterfaceId ("8CC497C1-A1DF-11CE-8098-00AA0047BE5D") ]
    '[ DualInterface ]
    [ OleAutomation (False) ]
    Interface ITextSelection Extends ITextRange
        [ DispId (257) ]
        Property Get flags() As tomSelectionFlags
        [ DispId (257) ]
        Property Let flags(ByVal pFlags As tomSelectionFlags)
        [ DispId (258) ]
        Property Get type() As Long
        [ DispId (259) ]
        Function MoveLeft(ByVal Unit As tomUnits, ByVal Count As Long, ByVal Extend As tomExtend) As Long
        [ DispId (260) ]
        Function MoveRight(ByVal Unit As tomUnits, ByVal Count As Long, ByVal Extend As tomExtend) As Long
        [ DispId (261) ]
        Function MoveUp(ByVal Unit As tomUnits, ByVal Count As Long, ByVal Extend As tomExtend) As Long
        [ DispId (262) ]
        Function MoveDown(ByVal Unit As tomUnits, ByVal Count As Long, ByVal Extend As tomExtend) As Long
        [ DispId (263) ]
        Function HomeKey(ByVal Unit As tomUnits, ByVal Extend As tomExtend) As Long
        [ DispId (264) ]
        Function EndKey(ByVal Unit As tomUnits, ByVal Extend As tomExtend) As Long
        [ DispId (265) ]
        Sub TypeText(ByVal bstr As String)
    End Interface
    [ InterfaceId ("C241F5E1-7206-11D8-A2C7-00A0D1D6C6B3") ]
    [ OleAutomation (False) ]
    Interface ITextSelection2 Extends ITextRange
    	
    End Interface
    
    [ InterfaceId ("8CC497C3-A1DF-11CE-8098-00AA0047BE5D") ]
    '[ DualInterface ]
    [ OleAutomation (False) ]
    Interface ITextFont Extends IDispatch
        [ DispId (0) ]
        Property Get Duplicate() As ITextFont
        [ DispId (0) ]
        Property Let Duplicate(ByVal ppFont As ITextFont)
        [ DispId (769) ]
        Function CanChange() As Long
        [ DispId (770) ]
        Function IsEqual(ByVal pFont As ITextFont) As Long
        [ DispId (771) ]
        Sub Reset(ByVal Value As Long)
        [ DispId (772) ]
        Property Get Style() As Long
        [ DispId (772) ]
        Property Let Style(ByVal pValue As Long)
        [ DispId (773) ]
        Property Get AllCaps() As Long
        [ DispId (773) ]
        Property Let AllCaps(ByVal pValue As Long)
        [ DispId (774) ]
        Property Get Animation() As tomAnimation
        [ DispId (774) ]
        Property Let Animation(ByVal pValue As tomAnimation)
        [ DispId (775) ]
        Property Get BackColor() As Long
        [ DispId (775) ]
        Property Let BackColor(ByVal pValue As Long)
        [ DispId (776) ]
        Property Get Bold() As Long
        [ DispId (776) ]
        Property Let Bold(ByVal pValue As Long)
        [ DispId (777) ]
        Property Get Emboss() As Long
        [ DispId (777) ]
        Property Let Emboss(ByVal pValue As Long)
        [ DispId (784) ]
        Property Get ForeColor() As Long
        [ DispId (784) ]
        Property Let ForeColor(ByVal pValue As Long)
        [ DispId (785) ]
        Property Get Hidden() As Long
        [ DispId (785) ]
        Property Let Hidden(ByVal pValue As Long)
        [ DispId (786) ]
        Property Get Engrave() As Long
        [ DispId (786) ]
        Property Let Engrave(ByVal pValue As Long)
        [ DispId (787) ]
        Property Get Italic() As Long
        [ DispId (787) ]
        Property Let Italic(ByVal pValue As Long)
        [ DispId (788) ]
        Property Get Kerning() As Single
        [ DispId (788) ]
        Property Let Kerning(ByVal pValue As Single)
        [ DispId (789) ]
        Property Get LanguageID() As Long
        [ DispId (789) ]
        Property Let LanguageID(ByVal pValue As Long)
        [ DispId (790) ]
        Property Get Name() As String
        [ DispId (790) ]
        Property Let Name(ByVal pBSTR As String)
        [ DispId (791) ]
        Property Get Outline() As Long
        [ DispId (791) ]
        Property Let Outline(ByVal pValue As Long)
        [ DispId (792) ]
        Property Get position() As Single
        [ DispId (792) ]
        Property Let position(ByVal pValue As Single)
        [ DispId (793) ]
        Property Get Protected() As Long
        [ DispId (793) ]
        Property Let Protected(ByVal pValue As Long)
        [ DispId (800) ]
        Property Get Shadow() As Long
        [ DispId (800) ]
        Property Let Shadow(ByVal pValue As Long)
        [ DispId (801) ]
        Property Get SIZE() As Single
        [ DispId (801) ]
        Property Let SIZE(ByVal pValue As Single)
        [ DispId (802) ]
        Property Get SmallCaps() As Long
        [ DispId (802) ]
        Property Let SmallCaps(ByVal pValue As Long)
        [ DispId (803) ]
        Property Get Spacing() As Single
        [ DispId (803) ]
        Property Let Spacing(ByVal pValue As Single)
        [ DispId (804) ]
        Property Get StrikeThrough() As Long
        [ DispId (804) ]
        Property Let StrikeThrough(ByVal pValue As Long)
        [ DispId (805) ]
        Property Get Subscript() As Long
        [ DispId (805) ]
        Property Let Subscript(ByVal pValue As Long)
        [ DispId (806) ]
        Property Get Superscript() As Long
        [ DispId (806) ]
        Property Let Superscript(ByVal pValue As Long)
        [ DispId (807) ]
        Property Get Underline() As Long
        [ DispId (807) ]
        Property Let Underline(ByVal pValue As Long)
        [ DispId (808) ]
        Property Get Weight() As Long
        [ DispId (808) ]
        Property Let Weight(ByVal pValue As Long)
    End Interface
    [ InterfaceId ("C241F5E3-7206-11D8-A2C7-00A0D1D6C6B3") ]
    [ OleAutomation (False) ]
    Interface ITextFont2 Extends ITextFont
        Property Get GetCount() As Long
        Property Get GetAutoLigatures() As Long
        Property Let SetAutoLigatures(ByVal value As Long)
        Property Get GetAutospaceAlpha() As Long
        Property Let SetAutospaceAlpha(ByVal value As Long)
        Property Get GetAutospaceNumeric() As Long
        Property Let SetAutospaceNumeric(ByVal value As Long)
        Property Get GetAutospaceParens() As Long
        Property Let SetAutospaceParens(ByVal value As Long)
        Property Get GetCharRep() As Long
        Property Let SetCharRep(ByVal value As Long)
        Property Get GetCompressionMode() As Long
        Property Let SetCompressionMode(ByVal value As Long)
        Property Get GetCookie() As Long
        Property Let SetCookie(ByVal value As Long)
        Property Get GetDoubleStrike() As Long
        Property Let SetDoubleStrike(ByVal value As Long)
        Property Get GetDuplicate2() As ITextFont2
        Property Let SetDuplicate2(ByVal pFont As ITextFont2)
        Property Get GetLinkType() As Long
        Property Get GetMathZone() As Long
        Property Let SetMathZone(ByVal value As Long)
        Property Get GetModWidthPairs() As Long
        Property Let SetModWidthPairs(ByVal value As Long)
        Property Get GetModWidthSpace() As Long
        Property Let SetModWidthSpace(ByVal value As Long)
        Property Get GetOldNumbers() As Long
        Property Let SetOldNumbers(ByVal value As Long)
        Property Get GetOverlapping() As Long
        Property Let SetOverlapping(ByVal value As Long)
        Property Get GetPositionSubSuper() As Long
        Property Let SetPositionSubSuper(ByVal value As Long)
        Property Get GetScaling() As Long
        Property Let SetScaling(ByVal value As Long)
        Sub GetEffects(pValue As Long, pMask As Long)
        Sub GetEffects2(pValue As Long, pMask As Long)
        Function GetProperty(ByVal Type As Long) As Long
        Sub GetPropertyInfo(ByVal index As Long, pType As Long, pValue As Long)
        Function IsEqual2(ByVal pFont As ITextFont2) As LongPtr
        Sub SetEffects(ByVal pValue As Long, ByVal pMask As Long)
        Sub SetEffects2(ByVal pValue As Long, ByVal pMask As Long)
        Sub SetProperty(ByVal Type As Long, ByVal Value As Long)
    End Interface

    [ InterfaceId ("8CC497C4-A1DF-11CE-8098-00AA0047BE5D") ]
    '[ DualInterface ]
    [ OleAutomation (False) ]
    Interface ITextPara Extends IDispatch
        [ DispId (0) ]
        Property Get Duplicate() As ITextPara
        [ DispId (0) ]
        Property Let Duplicate(ByVal ppPara As ITextPara)
        [ DispId (1025) ]
        Function CanChange() As Long
        [ DispId (1026) ]
        Function IsEqual(ByVal pPara As ITextPara) As Long
        [ DispId (1027) ]
        Sub Reset(ByVal Value As Long)
        [ DispId (1028) ]
        Property Get Style() As Long
        [ DispId (1028) ]
        Property Let Style(ByVal pValue As Long)
        [ DispId (1029) ]
        Property Get Alignment() As tomAlign
        [ DispId (1029) ]
        Property Let Alignment(ByVal pValue As tomAlign)
        [ DispId (1030) ]
        Property Get Hyphenation() As Long
        [ DispId (1030) ]
        Property Let Hyphenation(ByVal pValue As Long)
        [ DispId (1031) ]
        Property Get FirstLineIndent() As Single
        [ DispId (1032) ]
        Property Get KeepTogether() As Long
        [ DispId (1032) ]
        Property Let KeepTogether(ByVal pValue As Long)
        [ DispId (1033) ]
        Property Get KeepWithNext() As Long
        [ DispId (1033) ]
        Property Let KeepWithNext(ByVal pValue As Long)
        [ DispId (1040) ]
        Property Get LeftIndent() As Single
        [ DispId (1041) ]
        Property Get LineSpacing() As Single
        [ DispId (1042) ]
        Property Get LineSpacingRule() As tomLineSpacingRules
        [ DispId (1043) ]
        Property Get ListAlignment() As Long
        [ DispId (1043) ]
        Property Let ListAlignment(ByVal pValue As Long)
        [ DispId (1044) ]
        Property Get ListLevelIndex() As Long
        [ DispId (1044) ]
        Property Let ListLevelIndex(ByVal pValue As Long)
        [ DispId (1045) ]
        Property Get ListStart() As Long
        [ DispId (1045) ]
        Property Let ListStart(ByVal pValue As Long)
        [ DispId (1046) ]
        Property Get ListTab() As Single
        [ DispId (1046) ]
        Property Let ListTab(ByVal pValue As Single)
        [ DispId (1047) ]
        Property Get ListType() As tomList
        [ DispId (1047) ]
        Property Let ListType(ByVal pValue As tomList)
        [ DispId (1048) ]
        Property Get NoLineNumber() As Long
        [ DispId (1048) ]
        Property Let NoLineNumber(ByVal pValue As Long)
        [ DispId (1049) ]
        Property Get PageBreakBefore() As Long
        [ DispId (1049) ]
        Property Let PageBreakBefore(ByVal pValue As Long)
        [ DispId (1056) ]
        Property Get RightIndent() As Single
        [ DispId (1056) ]
        Property Let RightIndent(ByVal pValue As Single)
        [ DispId (1057) ]
        Sub SetIndents(ByVal StartIndent As Single, ByVal LeftIndent As Single, ByVal RightIndent As Single)
        [ DispId (1058) ]
        Sub SetLineSpacing(ByVal LineSpacingRule As tomLineSpacingRules, ByVal LineSpacing As Single)
        [ DispId (1059) ]
        Property Get SpaceAfter() As Single
        [ DispId (1059) ]
        Property Let SpaceAfter(ByVal pValue As Single)
        [ DispId (1060) ]
        Property Get SpaceBefore() As Single
        [ DispId (1060) ]
        Property Let SpaceBefore(ByVal pValue As Single)
        [ DispId (1061) ]
        Property Get WidowControl() As Long
        [ DispId (1061) ]
        Property Let WidowControl(ByVal pValue As Long)
        [ DispId (1062) ]
        Property Get TabCount() As Long
        [ DispId (1063) ]
        Sub AddTab(ByVal tbPos As Single, ByVal tbAlign As Long, ByVal tbLeader As Long)
        [ DispId (1064) ]
        Sub ClearAllTabs()
        [ DispId (1065) ]
        Sub DeleteTab(ByVal tbPos As Single)
        [ DispId (1072) ]
        Sub GetTab(ByVal iTab As Long, ByRef ptbPos As Single, ByRef ptbAlign As Long, ByRef ptbLeader As Long)
    End Interface
    [ InterfaceId ("C241F5E4-7206-11D8-A2C7-00A0D1D6C6B3") ]
    [ OleAutomation (False) ]
    Interface ITextPara2 Extends ITextPara
    	Property Get GetBorders() As IUnknown
        Property Get GetDuplicate2() As ITextPara2
        Property Let GetDuplicate2(ByVal pPara As ITextPara2)
        Property Get GetFontAlignment() As Long
        Property Let SetFontAlignment(ByVal Value As Long)
        Property Get GetHangingPunctuation() As Long
        Property Let SetHangingPunctuation(ByVal Value As Long)
        Property Get GetSnapToGrid() As Long
        Property Let SetSnapToGrid(ByVal Value As Long)
        Property Get GetTrimPunctuationAtStart() As Long
        Property Let SetTrimPunctuationAtStart(ByVal Value As Long)
        Sub GetEffects(pValue As Long, pMask As Long)
        Function GetProperty(ByVal Type As Long) As Long
        Function IsEqual2(ByVal pPara As ITextPara2) As Long
        Sub SetEffects(ByVal Value As Long, ByVal Mask As Long)
        Sub SetProperty(ByVal Type As Long, ByVal Value As Long)
    End Interface
    

    [ InterfaceId ("8CC497C5-A1DF-11CE-8098-00AA0047BE5D") ]
    '[ DualInterface ]
    [ OleAutomation (False) ]
    Interface ITextStoryRanges Extends IDispatch
        [ DispId (-4), Restricted ]
        Function _NewEnum() As Variant
        [ DispId (0) ]
        Function Item(ByVal index As Long) As ITextRange
        [ DispId (2) ]
        Property Get Count() As Long
    End Interface
    [ InterfaceId ("C241F5E5-7206-11D8-A2C7-00A0D1D6C6B3") ]
    [ OleAutomation (False) ]
    Interface ITextStoryRanges2 Extends ITextStoryRanges
    	Function Item2(ByVal Index As Long) As ITextRange2
    End Interface
    
    [ InterfaceId ("C241F5F3-7206-11D8-A2C7-00A0D1D6C6B3") ]
    [ OleAutomation (False) ]
    Interface ITextStory Extends stdole.IUnknown
    	Property Get GetActive() As Long
        Property Let SetActive(ByVal Value As Long)
        Property Get GetDisplay() As IUnknown
        Property Get GetIndex() As Long
        Property Get GetType() As Long
        Property Let SetType(ByVal Value As Long)
        Sub GetProperty(ByVal Type As Long, pValue As Long)
        Function GetRange(ByVal cpActive As Long, ByVal cpAnchor As Long) As ITextRange2
        Function GetText(ByVal Flags As Long) As String
        Sub SetFormattedText(ByVal pUnk As IUnknown)
        Sub SetProperty(ByVal Type As Long, ByVal Value As Long)
        Sub SetText(ByVal Flags As Long, ByVal bstr As String)
    End Interface
    
    [ InterfaceId ("C241F5E7-7206-11D8-A2C7-00A0D1D6C6B3") ]
    [ OleAutomation (False) ]
    Interface ITextStrings Extends IDispatch
        Function Item(ByVal Index As Long) As ITextRange2
        Property Get GetCount() As Long
        Sub Add(ByVal bstr As String)
        Sub Append(ByVal pRange As ITextRange2, ByVal iString As Long)
        Sub Cat2(ByVal iString As Long)
        Sub CatTop2(ByVal bstr As String)
        Sub DeleteRange(ByVal pRange As ITextRange2)
        Sub EncodeFunction(ByVal Type As Long, ByVal Align As Long, ByVal Char As Long, ByVal Char1 As Long, ByVal Char2 As Long, ByVal Count As Long, ByVal TeXStyle As Long, ByVal cCol As Long, ByVal pRange As ITextRange2)
        Sub GetCch(ByVal iString As Long, pcch As Long)
        Sub InsertNullStr(ByVal iString As Long)
        Sub MoveBoundary(ByVal iString As Long, ByVal cch As Long)
        Sub PrefixTop(ByVal bstr As String)
        Sub Remove(ByVal iString As Long, ByVal cString As Long)
        Sub SetFormattedText(ByVal pRangeD As ITextRange2, ByVal pRangeS As ITextRange2)
        Sub SetOpCp(ByVal iString As Long, ByVal cp As Long)
        Sub SuffixTop(ByVal bstr As String, ByVal pRange As ITextRange2)
        Sub Swap()
    End Interface
        
    [ InterfaceId ("C241F5EF-7206-11D8-A2C7-00A0D1D6C6B3") ]
    [ OleAutomation (False) ]
    Interface ITextRow Extends IDispatch
    	Property Get GetAlignment() As Long
        Property Let SetAlignment(ByVal Value As Long)
    	Property Get GetCellCount() As Long
        Property Let SetCellCount(ByVal Value As Long)
    	Property Get GetCellCountCache() As Long
        Property Let SetCellCountCache(ByVal Value As Long)
    	Property Get GetCellIndex() As Long
        Property Let SetCellIndex(ByVal Value As Long)
    	Property Get GetCellMargin() As Long
        Property Let SetCellMargin(ByVal Value As Long)
    	Property Get GetHeight() As Long
        Property Let SetHeight(ByVal Value As Long)
   	    Property Get GetIndent() As Long
        Property Let SetIndent(ByVal Value As Long)
   	    Property Get GetKeepTogether() As Long
        Property Let SetKeepTogether(ByVal Value As Long)
   	    Property Get GetKeepWithNext() As Long
        Property Let SetKeepWithNext(ByVal Value As Long)
        Property Get GetNestLevel() As Long
        Property Get GetRTL() As Long
        Property Let SetRTL(ByVal Value As Long)
        Property Get GetCellAlignment() As Long
        Property Let SetCellAlignment(ByVal Value As Long)
        Property Get GetCellColorBack() As Long
        Property Let SetCellColorBack(ByVal Value As Long)
        Property Get GetCellColorFore() As Long
        Property Let SetCellColorFore(ByVal Value As Long)
        Property Get GetCellMergeFlags() As Long
        Property Let SetCellMergeFlags(ByVal Value As Long)
        Property Get GetCellShading() As Long
        Property Let SetCellShading(ByVal Value As Long)
        Property Get GetCellVerticalText() As Long
        Property Let SetCellVerticalText(ByVal Value As Long)
        Property Get GetCellWidth() As Long
        Property Let SetCellWidth(ByVal Value As Long)
        Sub GetCellBorderColors(pcrLeft As Long, pcrTop As Long, pcrRight As Long, pcrBottom As Long)
        Sub GetCellBorderWidths(pduLeft As Long, pduTop As Long, pduRight As Long, pduBottom As Long)
        Sub SetCellBorderColors(ByVal crLeft As Long, ByVal crTop As Long, ByVal crRight As Long, ByVal crBottom As Long)
        Sub SetCellBorderWidths(ByVal duLeft As Long, ByVal duTop As Long, ByVal duRight As Long, ByVal duBottom As Long)
        Sub Apply(ByVal cRow As Long, ByVal Flags As Long)
        Function CanChange() As Long
        Function GetProperty(ByVal type As Long) As Long
        Sub Insert(ByVal cRow As Long)
        Function IsEqual(ByVal pRow As ITextRow) As Long
        Sub Reset(ByVal Value As Long)
        Sub SetProperty(ByVal Type As Long, ByVal Value As Long)
    End Interface

[ InterfaceId ("8D33F740-CF58-11CE-A89D-00AA006CADC5") ]
[ OleAutomation (False) ]
Interface ITextServices Extends stdole.IUnknown
	Sub TxSendMessage(ByVal msg As Long, ByVal wParam As LongPtr, lParam As Any, plResult As LongPtr)
    Sub TxDraw(ByVal dwDrawAspect As Long, ByVal lindex As Long, pvAspect As Any, ptd As DVTARGETDEVICE, ByVal hdcDraw As LongPtr, ByVal hicTargetDev As LongPtr, lprcBounds As RECT, lprcWBounds As RECT, lprcUpdate As RECT, ByVal pfnContinue As Long, ByVal dwContinue As Long, ByVal lViewId As Long)
    Sub TxGetHScroll(plMin As Long, plMax As Long, plPos As Long, plPage As Long, pfEnabled As Long)
    Sub TxGetVScroll(plMin As Long, plMax As Long, plPos As Long, plPage As Long, pfEnabled As Long)
    Sub OnTxSetCursor(ByVal dwDrawAspect As Long, ByVal lindex As Long, pvAspect As Any, ptd As DVTARGETDEVICE, ByVal hdcDraw As LongPtr, ByVal hicTargetDev As LongPtr, lprcClient As RECT, ByVal x As Long, ByVal y As Long)
    Sub TxQueryHitPoint(ByVal dwDrawAspect As Long, ByVal lindex As Long, pvAspect As Any, ptd As DVTARGETDEVICE, ByVal hdcDraw As LongPtr, ByVal hicTargetDev As LongPtr, lprcClient As RECT, ByVal x As Long, ByVal y As Long, pHitResult As Long)
    Sub OnTxInPlaceActivate(prcClient As RECT)
    Sub OnTxInPlaceDeactivate()
    Sub OnTxUIActivate()
    Sub OnTxUIDeactivate()
    Sub TxGetText(pbstrText As String)
    Sub TxSetText(ByVal pszText As LongPtr)
    Sub TxGetCurTargetX(x As Long)
    Sub TxGetBaseLinePos(pos As Long)
    Sub TxGetNaturalSize(ByVal dwDrawAspect As Long, ByVal hdcDraw As LongPtr, ByVal hicTargetDev As LongPtr, ptd As DVTARGETDEVICE, ByVal dwMode As Long, psizelExtent As SIZE, pwidth As Long, pheight As Long)
    Sub TxGetDropTarget(ppDropTarget As IDropTarget)
    Sub OnTxPropertyBitsChange(ByVal dwMask As Long, ByVal dwBits As Long)
    Sub TxGetCachedSize(pdwWidth As Long, pdwHeight As Long)
End Interface
[ InterfaceId ("8D33F741-CF58-11CE-A89D-00AA006CADC5") ]
[ OleAutomation (False) ]
Interface ITextServices2 Extends ITextServices
	Sub TxGetNaturalSize2(ByVal dwAspect As Long, ByVal hdcDraw As LongPtr, ByVal hicTargetDevice As LongPtr, ptd As DVTARGETDEVICE, ByVal dwMode As Long, psizelExtent As SIZE, pwidth As Long, pheight As Long, pascent As Long)
    Sub TxDrawD2D(ByVal pRenderTarget As ID2D1RenderTarget, lprcBounds As RECT, lprcUpdate As RECT, ByVal lViewId As Long)
End Interface


[ InterfaceId ("13E670F4-1A5A-11CF-ABEB-00AA00B65EA1") ]
[ OleAutomation (False) ]
Interface ITextHost Extends stdole.IUnknown
	[ PreserveSig ] Function TxGetDC() As LongPtr
    [ PreserveSig ] Function TxReleaseDC(ByVal hdc As LongPtr) As Long
    [ PreserveSig ] Function TxShowScrollBar(ByVal fnBar As Long, ByVal fShow As Long) As Long
    [ PreserveSig ] Function TxEnableScrollBar(ByVal fuSBFlags As Long, ByVal fuArrowFlags As Long) As Long
    [ PreserveSig ] Function TxSetScrollRange(ByVal fnBar As Long, ByVal nMinPos As Long, ByVal nMaxPos As Long, ByVal fRedraw As Long) As Long
    [ PreserveSig ] Function TxSetScrollPos(ByVal fnBar As Long, ByVal fuArrowFlags As Long) As Long
    [ PreserveSig ] Sub TxInvalidateRect(prc As RECT, ByVal fMode As Long)
    [ PreserveSig ] Sub TxViewChange(ByVal fUpdate As Long)
    [ PreserveSig ] Function TxCreateCaret(ByVal hbmp As LongPtr, ByVal xWidth As Long, ByVal yHeight As Long) As Long
    [ PreserveSig ] Function TxShowCaret(ByVal fShow As Long) As Long
    [ PreserveSig ] Function TxSetCaretPos(ByVal x As Long, ByVal x As Long) As Long
    [ PreserveSig ] Function TxSetTimer(ByVal idTimer As Long, ByVal uTimeout As Long) As Long
    [ PreserveSig ] Sub TxKillTimer(ByVal idTimer As Long)
    [ PreserveSig ] Sub TxScrollWindowEx(ByVal dx As Long, ByVal dy As Long, lprcScroll As RECT, lprcClip As RECT, ByVal hrgnUpdate As LongPtr, lprcUpdate As RECT, ByVal fuScroll As Long)
    [ PreserveSig ] Sub TxSetCapture(ByVal fCapture As Long)
    [ PreserveSig ] Sub TxSetFocus()
    [ PreserveSig ] Sub TxSetCursor(ByVal hcur As LongPtr, ByVal fText As Long)
    [ PreserveSig ] Function TxScreenToClient(lppt As POINT) As Long
    [ PreserveSig ] Function TxClientToScreen(lppt As POINT) As Long
    Sub TxActivate(plOldState As Long)
    Sub TxDeactivate(ByVal lNewState As Long)
    Sub TxGetClientRect(prc As RECT)
    Sub TxGetViewInset(prc As RECT)
    Sub TxGetCharFormat(ppCF As CHARFORMATW)
    Sub TxGetParaFormat(ppPF As PARAFORMAT)
    [ PreserveSig ] Function TxGetSysColor(ByVal nIndex As Long) As Long
    Sub TxGetBackStyle(pstyle As TXTBACKSTYLE)
    Sub TxGetMaxLength(plength As Long)
    Sub TxGetScrollBars(pdwScrollBars As Long)
    Sub TxGetPasswordChar(pch As Integer)
    Sub TxGetAcceleratorPos(pcp As Long)
    Sub TxGetExtent(lpExtent As SIZE)
    Sub OnTxCharFormatChange(pCF As CHARFORMATW)
    Sub OnTxParaFormatChange(pPF As PARAFORMAT)
    Sub TxGetPropertyBits(ByVal dwMask As Long, pdwBits As Long)
    Sub TxNotify(ByVal iNotify As Long, pv As Any)
    [ PreserveSig ] Function TxImmGetContext() As LongPtr
    [ PreserveSig ] Sub TxImmReleaseContext(ByVal himc As LongPtr)
    Sub TxGetSelectionBarWidth(lSelBarWidth As Long)
End Interface
[ InterfaceId ("13E670F5-1A5A-11CF-ABEB-00AA00B65EA1") ]
[ OleAutomation (False) ]
Interface ITextHost2 Extends ITextHost
	[ PreserveSig ] Function TxIsDoubleClickPending() As Long
    Sub TxGetWindow(phwnd As LongPtr)
    Sub TxSetForegroundWindow()
    [ PreserveSig ] Function TxGetPalette() As LongPtr
    Sub TxGetFEFlags(pFlags As Long)
    [ PreserveSig ] Function TxSetCursor2(ByVal hcur As LongPtr, ByVal bText As Long) As LongPtr
    [ PreserveSig ] Sub TxFreeTextServicesNotification()
    Sub TxGetEditStyle(ByVal dwItem As Long, pdwData As Long)
    Sub TxGetWindowStyles(pdwStyle As Long, pdwExStyle As Long)
    Sub TxEBookLoadImage(ByVal lpszName As LongPtr, pID As LongPtr, psize As SIZE, pdwFlags As Long)
    Sub TxEBookImageDraw(ByVal ID As LongPtr, ByVal hdc As LongPtr, topLeft As POINT, prcRenderint As RECT, ByVal fSelected As Long)
    Sub TxGetHorzExtent(plHorzExtent As Long)
End Interface

[ InterfaceId ("F2FB5CC0-B5A9-437F-9BA2-47632082269F") ]
[ OleAutomation (False) ]
Interface IRicheditUiaOverrides Extends stdole.iunknown
	Sub GetPropertyOverrideValue(ByVal propertyId As Long, pRetValue As Variant)
End Interface

[ InterfaceId ("23969a9d-8546-4032-a1bb-73750cbf3333") ]
[ OleAutomation (False) ]
Interface IRichEditUiaInformation Extends stdole.IUnknown
	Sub GetBoundaryRectangle(pUiaRect As RECT)
    Sub IsVisible()
End Interface



Module slTOM

Public Enum RichEdit_ParagraphFormatMask
	PFM_STARTINDENT = &H00000001
	PFM_RIGHTINDENT = &H00000002
	PFM_OFFSET = &H00000004
	PFM_ALIGNMENT = &H00000008
	PFM_TABSTOPS = &H00000010
	PFM_NUMBERING = &H00000020
	PFM_OFFSETINDENT = &H80000000
'  PARAFORMAT 2.0 masks and effects
	PFM_SPACEBEFORE = &H00000040
	PFM_SPACEAFTER = &H00000080
	PFM_LINESPACING = &H00000100
	PFM_STYLE = &H00000400
	PFM_BORDER = &H00000800  ' (*)
	PFM_SHADING = &H00001000  ' (*)
	PFM_NUMBERINGSTYLE = &H00002000  ' RE 3.0
	PFM_NUMBERINGTAB = &H00004000  ' RE 3.0
	PFM_NUMBERINGSTART = &H00008000&  ' RE 3.0
	PFM_RTLPARA = &H00010000
	PFM_KEEP = &H00020000  ' (*)
	PFM_KEEPNEXT = &H00040000  ' (*)
	PFM_PAGEBREAKBEFORE = &H00080000  ' (*)
	PFM_NOLINENUMBER = &H00100000  ' (*)
	PFM_NOWIDOWCONTROL = &H00200000  ' (*)
	PFM_DONOTHYPHEN = &H00400000  ' (*)
	PFM_SIDEBYSIDE = &H00800000  ' (*)
'  The following two paragraph-format properties are read only
	PFM_COLLAPSED = &H01000000  ' RE 3.0
	PFM_OUTLINELEVEL = &H02000000  ' RE 3.0
	PFM_BOX = &H04000000  ' RE 3.0
	PFM_RESERVED2 = &H08000000  ' RE 4.0
	PFM_TABLEROWDELIMITER = &H10000000  ' RE 4.0
	PFM_TEXTWRAPPINGBREAK = &H20000000  ' RE 3.0
	PFM_TABLE = &H40000000  ' RE 3.0
'  PARAFORMAT "ALL" masks
	PFM_ALL = (PFM_STARTINDENT Or PFM_RIGHTINDENT Or PFM_OFFSET Or PFM_TABSTOPS Or PFM_NUMBERING Or PFM_RTLPARA)
'  Note: PARAFORMAT has no effects (BiDi RichEdit 1.0 does have PFE_RTLPARA)
	PFM_EFFECTS = (PFM_RTLPARA Or PFM_KEEP Or PFM_KEEPNEXT Or PFM_TABLE Or	PFM_PAGEBREAKBEFORE Or PFM_NOLINENUMBER Or	PFM_NOWIDOWCONTROL Or PFM_DONOTHYPHEN Or PFM_SIDEBYSIDE Or	PFM_TABLE Or PFM_TABLEROWDELIMITER)
	PFM_ALL2 = (PFM_ALL Or PFM_EFFECTS Or PFM_SPACEBEFORE Or PFM_SPACEAFTER Or	PFM_LINESPACING Or PFM_STYLE Or PFM_SHADING Or PFM_BORDER Or	PFM_NUMBERINGTAB Or PFM_NUMBERINGSTART Or PFM_NUMBERINGSTYLE)
End Enum

Public Const MAX_TAB_STOPS  = 32

[ PackingAlignment (4) ]
Public Type PARAFORMAT
	cbSize As Long
	dwMask As RichEdit_ParagraphFormatMask
	wNumbering As Integer
	wEffects As Integer
	dxStartIndent As Long
	dxRightIndent As Long
	dxOffset As Long
	wAlignment As Integer
	cTabCount As Integer
	rgxTabs(0 To (MAX_TAB_STOPS - 1)) As Long
End Type


Public Enum tomOpenFlags
	tomRTF = 1
	tomText = 2
	tomHTML = 3
	tomWordDocument = 4
	tomCreateNew = 16
	tomCreateAlways = 32
	tomOpenExisting = 48
	tomOpenAlways = 64
	tomTruncateExisting = 80
	tomReadOnly = 256
	tomShareDenyRead = 512
	tomShareDenyWrite = 1024
	tomPasteFile = 4096
End Enum

Public Enum tomLineSpacingRules
	tomLineSpaceSingle = 0
	tomLineSpace1pt5 = 1
	tomLineSpaceDouble = 2
	tomLineSpaceAtLeast = 3
	tomLineSpaceExactly = 4
	tomLineSpaceMultiple = 5
End Enum

Public Enum tomAlign
	tomAlignLeft = 0
	tomAlignCenter = 1
	tomAlignRight = 2
	tomAlignJustify = 3
	tomAlignDecimal = 3
	tomAlignBar = 4
End Enum

Public Enum tomSelection
	tomNoSelection = 0
	tomSelectionIP = 1
	tomSelectionNormal = 2
	tomSelectionFrame = 3
	tomSelectionColumn = 4
	tomSelectionRow = 5
	tomSelectionBlock = 6
	tomSelectionInlineShape = 7
	tomSelectionShape = 8
End Enum

Public Enum tomBool
	tomFalse = 0
	tomTrue = &Hffffffff
	tomToggle = &Hff676982
End Enum

Public Enum tomColor
	tomAutoColor = &Hff676983
End Enum

Public Enum tomResetFlags
	tomDefault = &Hff676984
	tomUndefined = &Hff676981
End Enum

Public Enum tomMove
	tomBackward = &Hc0000001
	tomForward = &H3fffffff
End Enum

Public Enum tomExtend
	tomMove = 0
	tomExtend = 1
End Enum

Public Enum tomSelectionFlags
	tomSelStartActive = 1
	tomSelAtEOL = 2
	tomSelOvertype = 4
	tomSelActive = 8
	tomSelReplace = 16
End Enum

Public Enum tomStartEnd
	tomEnd = 0
	tomStart = 32
End Enum

Public Enum tomCollapse
	tomCollapseEnd = 0
	tomCollapseStart = 1
End Enum

Public Enum tomUnderline
	tomNone = 0
	tomSingle = 1
	tomWords = 2
	tomDouble = 3
	tomDotted = 4
End Enum

Public Enum tomTabSpace
	tomSpaces = 0
	tomDots = 1
	tomDashes = 2
	tomLines = 3
End Enum

Public Enum tomTabs
	tomTabBack = &Hfffffffd
	tomTabNext = &Hfffffffe
	tomTabHere = &Hffffffff
End Enum

Public Enum tomList
	tomListNone = 0
	tomListBullet = 1
	tomListNumberAsArabic = 2
	tomListNumberAsLCLetter = 3
	tomListNumberAsUCLetter = 4
	tomListNumberAsLCRoman = 5
	tomListNumberAsUCRoman = 6
	tomListNumberAsSequence = 7
	tomListParentheses = &H00010000
	tomListPeriod = &H00020000
	tomListPlain = &H00030000
End Enum

Public Enum tomUnits
	tomCharacter = 1
	tomWord = 2
	tomSentence = 3
	tomParagraph = 4
	tomLine = 5
	tomStory = 6
	tomScreen = 7
	tomSection = 8
	tomColumn = 9
	tomRow = 10
	tomWindow = 11
	tomCell = 12
	tomCharFormat = 13
	tomParaFormat = 14
	tomTable = 15
	tomObject = 16
End Enum

Public Enum tomFindFlags
	tomMatchWord = 2
	tomMatchCase = 4
	tomMatchPattern = 8
End Enum

Public Enum tomStories
	tomUnknownStory = 0
	tomMainTextStory = 1
	tomFootnotesStory = 2
	tomEndnotesStory = 3
	tomCommentsStory = 4
	tomTextFrameStory = 5
	tomEvenPagesHeaderStory = 6
	tomPrimaryHeaderStory = 7
	tomEvenPagesFooterStory = 8
	tomPrimaryFooterStory = 9
	tomFirstPageHeaderStory = 10
	tomFirstPageFooterStory = 11
End Enum

Public Enum tomAnimation
	tomNoAnimation = 0
	tomLasVegasLights = 1
	tomBlinkingBackground = 2
	tomSparkleText = 3
	tomMarchingBlackAnts = 4
	tomMarchingRedAnts = 5
	tomShimmer = 6
	tomWipeDown = 7
	tomWipeRight = 8
	tomAnimationMax = 8
End Enum

Public Enum tomCase
	tomLowerCase = 0
	tomUpperCase = 1
	tomTitleCase = 2
	tomSentenceCase = 4
	tomToggleCase = 5
End Enum

Public Enum REO_GETOBJ
	REO_GETOBJ_NO_INTERFACES = 0
	REO_GETOBJ_POLEOBJ = 1
	REO_GETOBJ_PSTG = 2
	REO_GETOBJ_POLESITE = 4
	REO_GETOBJ_ALL_INTERFACES = 7
End Enum

Public Enum REO_IOB
	REO_IOB_SELECTION = &Hffffffff
	REO_CP_SELECTION = &Hffffffff
	REO_IOB_USE_CP = &Hfffffffe
End Enum

Public Enum REO_FLAGS
	REO_NULL = (&H00000000)
	REO_READWRITEMASK = (&H000007FF)
	REO_CANROTATE = (&H00000080)
	REO_OWNERDRAWSELECT = (&H00000040)
	REO_DONTNEEDPALETTE = (&H00000020)
	REO_BLANK = (&H00000010)
	REO_DYNAMICSIZE = (&H00000008)
	REO_INVERTEDSELECT = (&H00000004)
	REO_BELOWBASELINE = (&H00000002)
	REO_RESIZABLE = (&H00000001)
	REO_USEASBACKGROUND = (&H00000400)
	REO_WRAPTEXTAROUND = (&H00000200)
	REO_ALIGNTORIGHT = (&H00000100)
	REO_LINK = (&H80000000)
	REO_STATIC = (&H40000000)
	REO_SELECTED = (&H08000000)
	REO_OPEN = (&H04000000)
	REO_INPLACEACTIVE = (&H02000000)
	REO_HILITED = (&H01000000)
	REO_LINKAVAILABLE = (&H00800000)
	REO_GETMETAFILE = (&H00400000)
End Enum

Public Enum RECO_FLAGS
	RECO_PASTE = 0
	RECO_DROP = 1
	RECO_COPY = 2
	RECO_CUT = 3
	RECO_DRAG = 4
End Enum

Public Type REOBJECT
	cbStruct As Long
	cp As Long
	clsid As UUID
	poleobj As IOleObject
	pstg As IStorage
	polesite As IOleClientSite
	sizel As SIZE
	DVASPECT As DVASPECT
	dwFlags As REO_FLAGS
	dwUser As Long
End Type

Public Type CHARRANGE
	start As Long
	End As Long
End Type

Public Enum TXTBACKSTYLE
	TXTBACK_TRANSPARENT = 0 '@emembackground should show through
	TXTBACK_OPAQUE = 1 '@ememerase background
End Enum

Public Enum TXTHITRESULT
	TXTHITRESULT_NOHIT = 0 '@ememno hit
	TXTHITRESULT_TRANSPARENT = 1 '@emem point is within the text's rectangle, but
	' in a transparent region
	TXTHITRESULT_CLOSE = 2 '@emempoint is close to the text
	TXTHITRESULT_HIT = 3 '@emem dead-on hit
End Enum

Public Enum TXTNATURALSIZE
	TXTNS_FITTOCONTENT2 = 0 '@emem Get size that fits indented content
	TXTNS_FITTOCONTENT = 1 '@emem Get size that fits content
	TXTNS_ROUNDTOLINE = 2 '@emem Round to nearest whole line
	TXTNS_FITTOCONTENT3 = 3 '@emem Get size that fits indented
	' content + trailing whitespace
	TXTNS_FITTOCONTENTWSP = 4 '@emem Get size that fits unindented
	' content + trailing whitespace
	TXTNS_INCLUDELASTLINE = &H40000000 '@emem In plain-text ctrl, inc height
	' of a final CR
	TXTNS_EMU = &H80000000 '@emem EMUs, not pixels are used as
	' measurement units (both ways)
End Enum

Public Enum TXTVIEW
	TXTVIEW_ACTIVE = 0
	TXTVIEW_INACTIVE = -1
End Enum

Public Type CHANGENOTIFY
    dwChangeType As Long
    pvCookieData As LongPtr
End Type

Public Const TXTBIT_RICHTEXT  = 1  ' rich-text control
Public Const TXTBIT_MULTILINE  = 2  ' single vs multi-line control
Public Const TXTBIT_READONLY  = 4  ' read only text
Public Const TXTBIT_SHOWACCELERATOR  = 8  ' underline accelerator character
Public Const TXTBIT_USEPASSWORD  = &H10  ' use password char to display text
Public Const TXTBIT_HIDESELECTION  = &H20  ' show selection when inactive
Public Const TXTBIT_SAVESELECTION  = &H40  ' remember selection when inactive
Public Const TXTBIT_AUTOWORDSEL  = &H80  ' auto-word selection
Public Const TXTBIT_VERTICAL  = &H100  ' vertical
Public Const TXTBIT_SELBARCHANGE  = &H200  ' notification that the selection bar width
'  has changed.
'  FUTURE: move this bit to the end to
'  maintain the division between
'  properties and notifications.
Public Const TXTBIT_WORDWRAP  = &H400  ' if set, then multi-line controls
'  should wrap words to fit the available
'  display
Public Const TXTBIT_ALLOWBEEP  = &H800  ' enable/disable beeping
Public Const TXTBIT_DISABLEDRAG  = &H1000  ' disable/enable dragging
Public Const TXTBIT_VIEWINSETCHANGE  = &H2000  ' the inset changed
Public Const TXTBIT_BACKSTYLECHANGE  = &H4000
Public Const TXTBIT_MAXLENGTHCHANGE  = &H8000&
Public Const TXTBIT_SCROLLBARCHANGE  = &H10000
Public Const TXTBIT_CHARFORMATCHANGE  = &H20000
Public Const TXTBIT_PARAFORMATCHANGE  = &H40000
Public Const TXTBIT_EXTENTCHANGE  = &H80000
Public Const TXTBIT_CLIENTRECTCHANGE  = &H100000  ' the client rectangle changed
Public Const TXTBIT_USECURRENTBKG  = &H200000  ' tells the renderer to use the current background
'  color rather than the system default for an entire line
Public Const TXTBIT_NOTHREADREFCOUNT  = &H400000  ' don't reference TLS data on behalf of this instance
Public Const TXTBIT_SHOWPASSWORD  = &H800000  ' Show password string
Public Const TXTBIT_D2DDWRITE  = &H1000000  ' Use D2D/DWrite for this instance (and not GDI/Uniscribe).
Public Const TXTBIT_D2DSIMPLETYPOGRAPHY  = &H2000000  ' Don't glyph all. Only valid if D2DDWRITE is set.
Public Const TXTBIT_D2DPIXELSNAPPED  = &H4000000  ' Don't do subpixel. Only valid if D2DDWRITE is set.
Public Const TXTBIT_D2DSUBPIXELLINES  = &H8000000  ' Don't pixel-snap text lines and underline, strikethrough
'   in the secondary text flow direction (usually vertical)
'   Only valid if D2DDWRITE is set and D2DPIXELSNAPPED is not set.
Public Const TXTBIT_FLASHLASTPASSWORDCHAR  = &H10000000  ' Show last password char momentarily
Public Const TXTBIT_ADVANCEDINPUT  = &H20000000  ' Use advanced input features.

Public Enum CFMT_Mask
	CFM_BOLD = &H00000001
	CFM_ITALIC = &H00000002
	CFM_UNDERLINE = &H00000004
	CFM_STRIKEOUT = &H00000008
	CFM_PROTECTED = &H00000010
	CFM_LINK = &H00000020  ' Exchange hyperlink extension
	CFM_SIZE = &H80000000
	CFM_COLOR = &H40000000
	CFM_FACE = &H20000000
	CFM_OFFSET = &H10000000
	CFM_CHARSET = &H08000000
	CFM_SMALLCAPS = &H00000040  ' (*)
	CFM_ALLCAPS = &H00000080  ' Displayed by 3.0
	CFM_HIDDEN = &H00000100  ' Hidden by 3.0
	CFM_OUTLINE = &H00000200  ' (*)
	CFM_SHADOW = &H00000400  ' (*)
	CFM_EMBOSS = &H00000800  ' (*)
	CFM_IMPRINT = &H00001000  ' (*)
	CFM_DISABLED = &H00002000
	CFM_REVISED = &H00004000
	CFM_REVAUTHOR = &H00008000&
	CFE_SUBSCRIPT = &H00010000  ' Superscript and subscript are
	CFE_SUPERSCRIPT = &H00020000  '    mutually exclusive
	CFM_ANIMATION = &H00040000  ' (*)
	CFM_STYLE = &H00080000  ' (*)
	CFM_KERNING = &H00100000
	CFM_SPACING = &H00200000  ' Displayed by 3.0
	CFM_WEIGHT = &H00400000
	CFM_UNDERLINETYPE = &H00800000  ' Many displayed by 3.0
	'(_RICHEDIT_VER  = >= &H0600)
	CFM_COOKIE = &H01000000  ' RE 6.0
	' = #endif
	CFM_LCID = &H02000000
	CFM_BACKCOLOR = &H04000000  ' Higher mask bits defined above
	CFM_SUBSCRIPT = (CFE_SUBSCRIPT Or CFE_SUPERSCRIPT)
	CFM_SUPERSCRIPT = CFM_SUBSCRIPT
	CFM_EFFECTS = (CFM_BOLD Or CFM_ITALIC Or CFM_UNDERLINE Or CFM_COLOR Or CFE_PROTECTED Or CFM_LINK)
	CFM_ALL = (CFM_EFFECTS Or CFM_SIZE Or CFM_FACE Or CFM_OFFSET Or CFM_CHARSET)
	CFM_EFFECTS2 = (CFM_EFFECTS Or CFM_DISABLED Or CFM_SMALLCAPS Or CFM_ALLCAPS Or CFM_OUTLINE Or CFM_SHADOW Or CFM_EMBOSS Or CFM_IMPRINT Or CFM_REVISED Or CFM_SUBSCRIPT Or CFM_SUPERSCRIPT Or CFM_BACKCOLOR)
	'(_RICHEDIT_VER  = >= &H0600)
	CFM_ALL2 = (CFM_ALL Or CFM_EFFECTS2 Or CFM_BACKCOLOR Or CFM_LCID Or	CFM_UNDERLINETYPE Or CFM_WEIGHT Or CFM_REVAUTHOR Or CFM_SPACING Or CFM_KERNING Or CFM_STYLE Or CFM_ANIMATION Or CFM_COOKIE)
End Enum
Public Enum CFMT_Effects
	CFE_BOLD = &H00000001
	CFE_ITALIC = &H00000002
	CFE_UNDERLINE = &H00000004
	CFE_STRIKEOUT = &H00000008
	CFE_PROTECTED = &H00000010
	CFE_LINK = &H00000020
	CFE_AUTOCOLOR = &H40000000
	CFE_SMALLCAPS = CFM_SMALLCAPS
	CFE_ALLCAPS = CFM_ALLCAPS
	CFE_HIDDEN = CFM_HIDDEN
	CFE_OUTLINE = CFM_OUTLINE
	CFE_SHADOW = CFM_SHADOW
	CFE_EMBOSS = CFM_EMBOSS
	CFE_IMPRINT = CFM_IMPRINT
	CFE_DISABLED = CFM_DISABLED
	CFE_REVISED = CFM_REVISED
'  CFE_AUTOCOLOR and CFE_AUTOBACKCOLOR correspond to CFM_COLOR and
'  CFM_BACKCOLOR, respectively, which control them
	CFE_AUTOBACKCOLOR = CFM_BACKCOLOR
	CFM_FONTBOUND = &H00100000
	CFM_LINKPROTECTED = &H00800000  ' Word hyperlink field
	CFM_EXTENDED = &H02000000
	CFM_MATHNOBUILDUP = &H08000000
	CFM_MATH = &H10000000
	CFM_MATHORDINARY = &H20000000
	CFM_ALLEFFECTS = (CFM_EFFECTS2 Or CFM_FONTBOUND Or CFM_EXTENDED Or CFM_MATHNOBUILDUP Or CFM_MATH Or CFM_MATHORDINARY)
	CFE_FONTBOUND = &H00100000  ' Font chosen by binder, not user
	CFE_LINKPROTECTED = &H00800000
	CFE_EXTENDED = &H02000000
	CFE_MATHNOBUILDUP = &H08000000
	CFE_MATH = &H10000000
	CFE_MATHORDINARY = &H20000000
End Enum
[ PackingAlignment (4) ]
Public Type CHARFORMATW
	cbSize As Long
	dwMask As CFMT_Mask
	dwEffects As CFMT_Effects
	yHeight As Long
	yOffset As Long
	crTextColor As Long
	bCharSet As Byte
	bPitchAndFamily As Byte
	szFaceName(0 To (32 - 1)) As Integer
End Type
End Module