
    

    [ InterfaceId ("B859EE5A-D838-4B5B-A2E8-1ADC7D93DB48") ]
    [ Description ("The root factory interface for all DWrite objects.") ]
    [ OleAutomation (False) ]
    Interface IDWriteFactory Extends IUnknown
        [ Description ("Gets a font collection representing the set of installed fonts.") ]
        /* voffset &H000C*/ Sub GetSystemFontCollection(ByRef fontCollection As IDWriteFontCollection, ByVal checkForUpdates As Long)
        [ Description ("Creates a font collection using a custom font collection loader.") ]
        /* voffset &H0010*/ Function CreateCustomFontCollection(ByVal collectionLoader As IDWriteFontCollectionLoader, ByRef collectionKey As Any, ByVal collectionKeySize As Long) As IDWriteFontCollection
        [ Description ("Registers a custom font collection loader with the factory object.") ]
        /* voffset &H0014*/ Sub RegisterFontCollectionLoader(ByVal fontCollectionLoader As IDWriteFontCollectionLoader)
        [ Description ("Unregisters a custom font collection loader that was previously registered using RegisterFontCollectionLoader.") ]
        /* voffset &H0018*/ Sub UnregisterFontCollectionLoader(ByVal fontCollectionLoader As IDWriteFontCollectionLoader)
        [ Description ("CreateFontFileReference creates a font file reference object from a local font file.") ]
        /* voffset &H001C*/ Function CreateFontFileReference(ByVal filePath As LongPtr, ByRef LastWriteTime As FILETIME) As IDWriteFontFile
        [ Description ("CreateCustomFontFileReference creates a reference to an application specific font file resource.") ]
        /* voffset &H0020*/ Function CreateCustomFontFileReference(ByRef fontFileReferenceKey As Any, ByVal fontFileReferenceKeySize As Long, ByVal fontFileLoader As IDWriteFontFileLoader) As IDWriteFontFile
        [ Description ("Creates a font face object.") ]
        /* voffset &H0024*/ Function CreateFontFace(ByVal fontFaceType As DWRITE_FONT_FACE_TYPE, ByVal numberOfFiles As Long, ByVal fontFiles As IDWriteFontFile, ByVal faceIndex As Long, ByVal fontFaceSimulationFlags As DWRITE_FONT_SIMULATIONS) As IDWriteFontFace
        [ Description ("Creates a rendering parameters object with default settings for the primary monitor.") ]
        /* voffset &H0028*/ Function CreateRenderingParams() As IDWriteRenderingParams
        [ Description ("Creates a rendering parameters object with default settings for the specified monitor.") ]
        /* voffset &H002C*/ Function CreateMonitorRenderingParams(ByVal monitor As LongPtr) As IDWriteRenderingParams
        [ Description ("Creates a rendering parameters object with the specified properties.") ]
        /* voffset &H0030*/ Function CreateCustomRenderingParams(ByVal Gamma As Single, ByVal enhancedContrast As Single, ByVal clearTypeLevel As Single, ByVal pixelGeometry As DWRITE_PIXEL_GEOMETRY, ByVal renderingMode As DWRITE_RENDERING_MODE) As IDWriteRenderingParams
        [ Description ("Registers a font file loader with DirectWrite.") ]
        /* voffset &H0034*/ Sub RegisterFontFileLoader(ByVal fontFileLoader As IDWriteFontFileLoader)
        [ Description ("Unregisters a font file loader that was previously registered with the DirectWrite font system using RegisterFontFileLoader.") ]
        /* voffset &H0038*/ Sub UnregisterFontFileLoader(ByVal fontFileLoader As IDWriteFontFileLoader)
        [ Description ("Create a text format object used for text layout.") ]
        /* voffset &H003C*/ Function CreateTextFormat(ByVal fontFamilyName As LongPtr, ByVal fontCollection As IDWriteFontCollection, ByVal fontWeight As DWRITE_FONT_WEIGHT, ByVal fontStyle As DWRITE_FONT_STYLE, ByVal fontStretch As DWRITE_FONT_STRETCH, ByVal fontSize As Single, ByVal localeName As LongPtr) As IDWriteTextFormat
        [ Description ("Create a typography object used in conjunction with text format for text layout.") ]
        /* voffset &H0040*/ Function CreateTypography() As IDWriteTypography
        [ Description ("Create an object used for interoperability with GDI.") ]
        /* voffset &H0044*/ Function GetGdiInterop() As IDWriteGdiInterop
        [ Description ("CreateTextLayout takes a string, format, and associated constraints and produces and object representing the fully analyzed and formatted result.") ]
        /* voffset &H0048*/ Function CreateTextLayout(ByVal string As LongPtr, ByVal stringLength As Long, ByVal textFormat As IDWriteTextFormat, ByVal maxWidth As Single, ByVal maxHeight As Single) As IDWriteTextLayout
        [ Description ("CreateGdiCompatibleTextLayout takes a string, format, and associated constraints and produces and object representing the result formatted for a particular display resolution and measuring method.") ]
        /* voffset &H004C*/ Function CreateGdiCompatibleTextLayout(ByVal string As LongPtr, ByVal stringLength As Long, ByVal textFormat As IDWriteTextFormat, ByVal layoutWidth As Single, ByVal layoutHeight As Single, ByVal pixelsPerDip As Single, ByRef transform As Any, ByVal useGdiNatural As Long) As IDWriteTextLayout
        [ Description ("The application may call this function to create an inline object for trimming, using an ellipsis as the omission sign.") ]
        /* voffset &H0050*/ Function CreateEllipsisTrimmingSign(ByVal textFormat As IDWriteTextFormat) As IDWriteInlineObject
        [ Description ("Return an interface to perform text analysis with.") ]
        /* voffset &H0054*/ Function CreateTextAnalyzer() As IDWriteTextAnalyzer
        [ Description ("Creates a number substitution object using a locale name, substitution method, and whether to ignore user overrides (uses NLS defaults for the given culture instead).") ]
        /* voffset &H0058*/ Function CreateNumberSubstitution(ByVal substitutionMethod As DWRITE_NUMBER_SUBSTITUTION_METHOD, ByVal localeName As LongPtr, ByVal ignoreUserOverride As Long) As IDWriteNumberSubstitution
        [ Description ("Creates a glyph run analysis object, which encapsulates information used to render a glyph run.") ]
        /* voffset &H005C*/ Function CreateGlyphRunAnalysis(ByRef glyphRun As DWRITE_GLYPH_RUN, ByVal pixelsPerDip As Single, ByRef transform As Any, ByVal renderingMode As DWRITE_RENDERING_MODE, ByVal measuringMode As DWRITE_MEASURING_MODE, ByVal baselineOriginX As Single, ByVal baselineOriginY As Single) As IDWriteGlyphRunAnalysis
    End Interface

    [ InterfaceId ("A84CEE02-3EEA-4EEE-A827-87C1A02A0FCC") ]
    [ Description ("The IDWriteFontCollection encapsulates a collection of fonts.") ]
    [ OleAutomation (False) ]
    Interface IDWriteFontCollection Extends IUnknown
        [ PreserveSig ]
        [ Description ("Gets the number of font families in the collection.") ]
        /* voffset &H000C*/ Function GetFontFamilyCount() As Long
        [ Description ("Creates a font family object given a zero-based font family index.") ]
        /* voffset &H0010*/ Function GetFontFamily(ByVal index As Long) As IDWriteFontFamily
        [ Description ("Finds the font family with the specified family name.") ]
        /* voffset &H0014*/ Function FindFamilyName(ByVal familyName As LongPtr, ByRef index As Long) As Long
        [ Description ("Gets the font object that corresponds to the same physical font as the specified font face object. The specified physical font must belong to the font collection.") ]
        /* voffset &H0018*/ Function GetFontFromFontFace(ByVal fontFace As IDWriteFontFace) As IDWriteFont
    End Interface

    [ InterfaceId ("DA20D8EF-812A-4C43-9802-62EC4ABD7ADD") ]
    [ Description ("The IDWriteFontFamily interface represents a set of fonts that share the same design but are differentiated by weight, stretch, and style.") ]
    [ OleAutomation (False) ]
    Interface IDWriteFontFamily Extends IDWriteFontList
        [ Description ("Creates an localized strings object that contains the family names for the font family, indexed by locale name.") ]
        /* voffset &H0000*/ Function GetFamilyNames() As IDWriteLocalizedStrings
        [ Description ("Gets the font that best matches the specified properties.") ]
        /* voffset &H0004*/ Function GetFirstMatchingFont(ByVal Weight As DWRITE_FONT_WEIGHT, ByVal stretch As DWRITE_FONT_STRETCH, ByVal Style As DWRITE_FONT_STYLE) As IDWriteFont
        [ Description ("Gets a list of fonts in the font family ranked in order of how well they match the specified properties.") ]
        /* voffset &H0008*/ Function GetMatchingFonts(ByVal Weight As DWRITE_FONT_WEIGHT, ByVal stretch As DWRITE_FONT_STRETCH, ByVal Style As DWRITE_FONT_STYLE) As IDWriteFontList
    End Interface

    [ InterfaceId ("1A0D8438-1D97-4EC1-AEF9-A2FB86ED6ACB") ]
    [ Description ("The IDWriteFontList interface represents a list of fonts.") ]
    [ OleAutomation (False) ]
    Interface IDWriteFontList Extends IUnknown
        [ Description ("Gets the font collection that contains the fonts.") ]
        /* voffset &H000C*/ Function GetFontCollection() As IDWriteFontCollection
        [ PreserveSig ]
        [ Description ("Gets the number of fonts in the font list.") ]
        /* voffset &H0010*/ Function GetFontCount() As Long
        [ Description ("Gets a font given its zero-based index.") ]
        /* voffset &H0014*/ Function GetFont(ByVal index As Long) As IDWriteFont
    End Interface

    [ InterfaceId ("ACD16696-8C14-4F5D-877E-FE3FC1D32737") ]
    [ Description ("The IDWriteFont interface represents a physical font in a font collection.") ]
    [ OleAutomation (False) ]
    Interface IDWriteFont Extends IUnknown
        [ Description ("Gets the font family to which the specified font belongs.") ]
        /* voffset &H000C*/ Function GetFontFamily() As IDWriteFontFamily
        [ PreserveSig ]
        [ Description ("Gets the weight of the specified font.") ]
        /* voffset &H0010*/ Function GetWeight() As DWRITE_FONT_WEIGHT
        [ PreserveSig ]
        [ Description ("Gets the stretch (aka. width) of the specified font.") ]
        /* voffset &H0014*/ Function GetStretch() As DWRITE_FONT_STRETCH
        [ PreserveSig ]
        [ Description ("Gets the style (aka. slope) of the specified font.") ]
        /* voffset &H0018*/ Function GetStyle() As DWRITE_FONT_STYLE
        [ PreserveSig ]
        [ Description ("Returns TRUE if the font is a symbol font or FALSE if not.") ]
        /* voffset &H001C*/ Function IsSymbolFont() As Long
        [ Description ("Gets a localized strings collection containing the face names for the font (e.g., Regular or Bold), indexed by locale name.") ]
        /* voffset &H0020*/ Function GetFaceNames() As IDWriteLocalizedStrings
        [ Description ("Gets a localized strings collection containing the specified informational strings, indexed by locale name.") ]
        /* voffset &H0024*/ Function GetInformationalStrings(ByVal informationalStringID As DWRITE_INFORMATIONAL_STRING_ID, ByRef informationalStrings As IDWriteLocalizedStrings) As Long
        [ PreserveSig ]
        [ Description ("Gets a value that indicates what simulation are applied to the specified font.") ]
        /* voffset &H0028*/ Function GetSimulations() As DWRITE_FONT_SIMULATIONS
        [ PreserveSig ]
        [ Description ("Gets the metrics for the font.") ]
        /* voffset &H002C*/ Sub GetMetrics(ByRef fontMetrics As DWRITE_FONT_METRICS)
        [ Description ("Determines whether the font supports the specified character.") ]
        /* voffset &H0030*/ Function HasCharacter(ByVal unicodeValue As Long) As Long
        [ Description ("Creates a font file enumerator object that encapsulates a collection of font files.") ]
        /* voffset &H0034*/ Function CreateFontFace() As IDWriteFontFace
    End Interface

    [ InterfaceId ("08256209-099A-4B34-B86D-C22B110E7771") ]
    [ Description ("Represents a collection of strings indexed by locale name.") ]
    [ OleAutomation (False) ]
    Interface IDWriteLocalizedStrings Extends IUnknown
        [ PreserveSig ]
        [ Description ("Gets the number of language/string pairs.") ]
        /* voffset &H000C*/ Function GetCount() As Long
        [ Description ("Gets the index of the item with the specified locale name.") ]
        /* voffset &H0010*/ Function FindLocaleName(ByVal localeName As LongPtr, ByRef index As Long) As Long
        [ Description ("Gets the length in characters (not including the null terminator) of the locale name with the specified index.") ]
        /* voffset &H0014*/ Function GetLocaleNameLength(ByVal index As Long) As Long
        [ Description ("Copies the locale name with the specified index to the specified array.") ]
        /* voffset &H0018*/ Sub GetLocaleName(ByVal index As Long, localeName As LongPtr, ByVal SIZE As Long)
        [ Description ("Gets the length in characters (not including the null terminator) of the string with the specified index.") ]
        /* voffset &H001C*/ Function GetStringLength(ByVal index As Long) As Long
        [ Description ("Copies the string with the specified index to the specified array.") ]
        /* voffset &H0020*/ Sub GetString(ByVal index As Long, stringBuffer As LongPtr, ByVal SIZE As Long)
    End Interface

    [ InterfaceId ("5F49804D-7024-4D43-BFA9-D25984F53849") ]
    [ Description ("The interface that represents an absolute reference to a font face.") ]
    [ OleAutomation (False) ]
    Interface IDWriteFontFace Extends IUnknown
        [ PreserveSig ]
        [ Description ("Obtains the file format type of a font face.") ]
        /* voffset &H000C*/ Function GetType() As DWRITE_FONT_FACE_TYPE
        [ Description ("Obtains the font files representing a font face.") ]
        /* voffset &H0010*/ Sub GetFiles(ByRef numberOfFiles As Long, ByRef fontFiles As Any)
        [ PreserveSig ]
        [ Description ("Obtains the zero-based index of the font face in its font file or files. If the font files contain a single face, the return value is zero.") ]
        /* voffset &H0014*/ Function GetIndex() As Long
        [ PreserveSig ]
        [ Description ("Obtains the algorithmic style simulation flags of a font face.") ]
        /* voffset &H0018*/ Function GetSimulations() As DWRITE_FONT_SIMULATIONS
        [ PreserveSig ]
        [ Description ("Determines whether the font is a symbol font.") ]
        /* voffset &H001C*/ Function IsSymbolFont() As Long
        [ PreserveSig ]
        [ Description ("Obtains design units and common metrics for the font face. These metrics are applicable to all the glyphs within a fontface and are used by applications for layout calculations.") ]
        /* voffset &H0020*/ Sub GetMetrics(ByRef fontFaceMetrics As DWRITE_FONT_METRICS)
        [ PreserveSig ]
        [ Description ("Obtains the number of glyphs in the font face.") ]
        /* voffset &H0024*/ Function GetGlyphCount() As Integer
        [ Description ("Obtains ideal glyph metrics in font design units. Design glyphs metrics are used for glyph positioning.") ]
        /* voffset &H0028*/ Sub GetDesignGlyphMetrics(ByRef glyphIndices As Any, ByVal glyphCount As Long, ByRef glyphMetrics As Any, ByVal isSideways As Long)
        [ Description ("Returns the nominal mapping of UCS4 Unicode code points to glyph indices as defined by the font 'CMAP' table.") ]
        /* voffset &H002C*/ Sub GetGlyphIndices(ByRef codePoints As Any, ByVal codePointCount As Long, ByRef glyphIndices As Any)
        [ Description ("Finds the specified OpenType font table if it exists and returns a pointer to it.") ]
        /* voffset &H0030*/ Sub TryGetFontTable(ByVal openTypeTableTag As Long, ByRef tableData As Any, ByRef tableSize As Long, ByRef tableContext As Any, ByRef exists As Long)
        [ PreserveSig ]
        [ Description ("Releases the table obtained earlier from TryGetFontTable.") ]
        /* voffset &H0034*/ Sub ReleaseFontTable(ByRef tableContext As Any)
        [ Description ("Computes the outline of a run of glyphs by calling back to the outline sink interface.") ]
        /* voffset &H0038*/ Sub GetGlyphRunOutline(ByVal emSize As Single, ByRef glyphIndices As Any, ByRef glyphAdvances As Any, ByRef glyphOffsets As Any, ByVal glyphCount As Long, ByVal isSideways As Long, ByVal isRightToLeft As Long, ByVal geometrySink As ID2D1SimplifiedGeometrySink)
        [ Description ("Determines the recommended rendering mode for the font given the specified size and rendering parameters.") ]
        /* voffset &H003C*/ Function GetRecommendedRenderingMode(ByVal emSize As Single, ByVal pixelsPerDip As Single, ByVal measuringMode As DWRITE_MEASURING_MODE, ByVal renderingParams As IDWriteRenderingParams) As DWRITE_RENDERING_MODE
        [ Description ("Obtains design units and common metrics for the font face.") ]
        /* voffset &H0040*/ Function GetGdiCompatibleMetrics(ByVal emSize As Single, ByVal pixelsPerDip As Single, ByRef transform As Any) As DWRITE_FONT_METRICS
        [ Description ("Obtains glyph metrics in font design units with the return values compatible with what GDI would produce.") ]
        /* voffset &H0044*/ Sub GetGdiCompatibleGlyphMetrics(ByVal emSize As Single, ByVal pixelsPerDip As Single, ByRef transform As Any, ByVal useGdiNatural As Long, ByRef glyphIndices As Any, ByVal glyphCount As Long, ByRef glyphMetrics As Any, ByVal isSideways As Long)
    End Interface

    [ InterfaceId ("2F0DA53A-2ADD-47CD-82EE-D9EC34688E75") ]
    [ Description ("The interface that represents text rendering settings for glyph rasterization and filtering.") ]
    [ OleAutomation (False) ]
    Interface IDWriteRenderingParams Extends IUnknown
        [ PreserveSig ]
        [ Description ("Gets the gamma value used for gamma correction. Valid values must be greater than zero and cannot exceed 256.") ]
        /* voffset &H000C*/ Function GetGamma() As Single
        [ PreserveSig ]
        [ Description ("Gets the amount of contrast enhancement. Valid values are greater than or equal to zero.") ]
        /* voffset &H0010*/ Function GetEnhancedContrast() As Single
        [ PreserveSig ]
        [ Description ("Gets the ClearType level. Valid values range from 0.0f (no ClearType) to 1.0f (full ClearType).") ]
        /* voffset &H0014*/ Function GetClearTypeLevel() As Single
        [ PreserveSig ]
        [ Description ("Gets the pixel geometry.") ]
        /* voffset &H0018*/ Function GetPixelGeometry() As DWRITE_PIXEL_GEOMETRY
        [ PreserveSig ]
        [ Description ("Gets the rendering mode.") ]
        /* voffset &H001C*/ Function GetRenderingMode() As DWRITE_RENDERING_MODE
    End Interface

    [ InterfaceId ("CCA920E4-52F0-492B-BFA8-29C72EE0A468") ]
    [ Description ("The font collection loader interface is used to construct a collection of fonts given a particular type of key.") ]
    [ OleAutomation (False) ]
    Interface IDWriteFontCollectionLoader Extends IUnknown
        [ Description ("Creates a font file enumerator object that encapsulates a collection of font files.") ]
        /* voffset &H000C*/ Sub CreateEnumeratorFromKey(ByVal factory As IDWriteFactory, ByRef collectionKey As Any, ByVal collectionKeySize As Long, ByRef fontFileEnumerator As IDWriteFontFileEnumerator)
    End Interface

    [ InterfaceId ("72755049-5FF7-435D-8348-4BE97CFA6C7C") ]
    [ Description ("The font file enumerator interface encapsulates a collection of font files. The font system uses this interface to enumerate font files when building a font collection.") ]
    [ OleAutomation (False) ]
    Interface IDWriteFontFileEnumerator Extends IUnknown
        /* voffset &H000C*/ Function MoveNext() As Long
        /* voffset &H0010*/ Function GetCurrentFontFile() As IDWriteFontFile
    End Interface

    [ InterfaceId ("739D886A-CEF5-47DC-8769-1A8B41BEBBB0") ]
    [ Description ("The interface that represents a reference to a font file.") ]
    [ OleAutomation (False) ]
    Interface IDWriteFontFile Extends IUnknown
        [ Description ("This method obtains the pointer to the reference key of a font file. The pointer is only valid until the object that refers to it is released.") ]
        /* voffset &H000C*/ Function GetReferenceKey(ByRef fontFileReferenceKey As Any) As Long
        [ Description ("Obtains the file loader associated with a font file object.") ]
        /* voffset &H0010*/ Function GetLoader() As IDWriteFontFileLoader
        [ Description ("Analyzes a file and returns whether it represents a font, and whether the font type is supported by the font system.") ]
        /* voffset &H0014*/ Sub Analyze(ByRef isSupportedFontType As Long, ByRef fontFileType As DWRITE_FONT_FILE_TYPE, ByRef fontFaceType As DWRITE_FONT_FACE_TYPE, ByRef numberOfFaces As Long)
    End Interface

    [ InterfaceId ("727CAD4E-D6AF-4C9E-8A08-D695B11CAA49") ]
    [ Description ("Font file loader interface handles loading font file resources of a particular type from a key.") ]
    [ OleAutomation (False) ]
    Interface IDWriteFontFileLoader Extends IUnknown
        [ Description ("Creates a font file stream object that encapsulates an open file resource.") ]
        /* voffset &H000C*/ Sub CreateStreamFromKey(ByRef fontFileReferenceKey As Any, ByVal fontFileReferenceKeySize As Long, ByRef fontFileStream As IDWriteFontFileStream)
    End Interface

    [ InterfaceId ("6D4865FE-0AB8-4D91-8F62-5DD6BE34A3E0") ]
    [ Description ("The interface for loading font file data.") ]
    [ OleAutomation (False) ]
    Interface IDWriteFontFileStream Extends IUnknown
        [ Description ("Reads a fragment from a file.") ]
        /* voffset &H000C*/ Sub ReadFileFragment(ByRef fragmentStart As Any, ByVal fileOffset As LongLong, ByVal fragmentSize As LongLong, ByRef fragmentContext As Any)
        [ PreserveSig ]
        [ Description ("Releases a fragment from a file.") ]
        /* voffset &H0010*/ Sub ReleaseFileFragment(ByRef fragmentContext As Any)
        [ Description ("Obtains the total size of a file.") ]
        /* voffset &H0014*/ Function GetFileSize() As LongLong
        [ Description ("Obtains the last modified time of the file. The last modified time is used by DirectWrite font selection algorithms to determine whether one font resource is more up to date than another one.") ]
        /* voffset &H0018*/ Function GetLastWriteTime() As LongLong
    End Interface

    [ InterfaceId ("9C906818-31D7-4FD3-A151-7C5E225DB55A") ]
    [ Description ("The format of text used for text layout purpose.") ]
    [ OleAutomation (False) ]
    Interface IDWriteTextFormat Extends IUnknown
        [ Description ("Set alignment option of text relative to layout box's leading and trailing edge.") ]
        /* voffset &H000C*/ Sub SetTextAlignment(ByVal textAlignment As DWRITE_TEXT_ALIGNMENT)
        [ Description ("Set alignment option of paragraph relative to layout box's top and bottom edge.") ]
        /* voffset &H0010*/ Sub SetParagraphAlignment(ByVal paragraphAlignment As DWRITE_PARAGRAPH_ALIGNMENT)
        [ Description ("Set word wrapping option.") ]
        /* voffset &H0014*/ Sub SetWordWrapping(ByVal wordWrapping As DWRITE_WORD_WRAPPING)
        [ Description ("Set paragraph reading direction.") ]
        /* voffset &H0018*/ Sub SetReadingDirection(ByVal readingDirection As DWRITE_READING_DIRECTION)
        [ Description ("Set paragraph flow direction.") ]
        /* voffset &H001C*/ Sub SetFlowDirection(ByVal flowDirection As DWRITE_FLOW_DIRECTION)
        [ Description ("Set incremental tab stop position.") ]
        /* voffset &H0020*/ Sub SetIncrementalTabStop(ByVal incrementalTabStop As Single)
        [ Description ("Set trimming options for any trailing text exceeding the layout width or for any far text exceeding the layout height.") ]
        /* voffset &H0024*/ Sub SetTrimming(ByRef trimmingOptions As DWRITE_TRIMMING, ByVal trimmingSign As IDWriteInlineObject)
        [ Description ("Set line spacing.") ]
        /* voffset &H0028*/ Sub SetLineSpacing(ByVal lineSpacingMethod As DWRITE_LINE_SPACING_METHOD, ByVal LineSpacing As Single, ByVal baseline As Single)
        [ PreserveSig ]
        [ Description ("Get alignment option of text relative to layout box's leading and trailing edge.") ]
        /* voffset &H002C*/ Function GetTextAlignment() As DWRITE_TEXT_ALIGNMENT
        [ PreserveSig ]
        [ Description ("Get alignment option of paragraph relative to layout box's top and bottom edge.") ]
        /* voffset &H0030*/ Function GetParagraphAlignment() As DWRITE_PARAGRAPH_ALIGNMENT
        [ PreserveSig ]
        [ Description ("Get word wrapping option.") ]
        /* voffset &H0034*/ Function GetWordWrapping() As DWRITE_WORD_WRAPPING
        [ PreserveSig ]
        [ Description ("Get paragraph reading direction.") ]
        /* voffset &H0038*/ Function GetReadingDirection() As DWRITE_READING_DIRECTION
        [ PreserveSig ]
        [ Description ("Get paragraph flow direction.") ]
        /* voffset &H003C*/ Function GetFlowDirection() As DWRITE_FLOW_DIRECTION
        [ PreserveSig ]
        [ Description ("Get incremental tab stop position.") ]
        /* voffset &H0040*/ Function GetIncrementalTabStop() As Single
        [ Description ("Get trimming options for text overflowing the layout width.") ]
        /* voffset &H0044*/ Function GetTrimming(ByRef trimmingOptions As DWRITE_TRIMMING) As IDWriteInlineObject
        [ Description ("Get line spacing.") ]
        /* voffset &H0048*/ Sub GetLineSpacing(ByRef lineSpacingMethod As DWRITE_LINE_SPACING_METHOD, ByRef LineSpacing As Single, ByRef baseline As Single)
        [ Description ("Get the font collection.") ]
        /* voffset &H004C*/ Sub GetFontCollection(ByRef fontCollection As IDWriteFontCollection)
        [ PreserveSig ]
        [ Description ("Get the length of the font family name, in characters, not including the terminating NULL character.") ]
        /* voffset &H0050*/ Function GetFontFamilyNameLength() As Long
        [ Description ("Get a copy of the font family name.") ]
        /* voffset &H0054*/ Sub GetFontFamilyName(fontFamilyName As LongPtr, ByVal nameSize As Long)
        [ PreserveSig ]
        [ Description ("Get the font weight.") ]
        /* voffset &H0058*/ Function GetFontWeight() As DWRITE_FONT_WEIGHT
        [ PreserveSig ]
        [ Description ("Get the font style.") ]
        /* voffset &H005C*/ Function GetFontStyle() As DWRITE_FONT_STYLE
        [ PreserveSig ]
        [ Description ("Get the font stretch.") ]
        /* voffset &H0060*/ Function GetFontStretch() As DWRITE_FONT_STRETCH
        [ PreserveSig ]
        [ Description ("Get the font em height.") ]
        /* voffset &H0064*/ Function GetFontSize() As Single
        [ PreserveSig ]
        [ Description ("Get the length of the locale name, in characters, not including the terminating NULL character.") ]
        /* voffset &H0068*/ Function GetLocaleNameLength() As Long
        [ Description ("Get a copy of the locale name.") ]
        /* voffset &H006C*/ Sub GetLocaleName(localeName As LongPtr, ByVal nameSize As Long)
    End Interface

    [ InterfaceId ("8339FDE3-106F-47AB-8373-1C6295EB10B3") ]
    [ Description ("The IDWriteInlineObject interface wraps an application defined inline graphic, allowing DWrite to query metrics as if it was a glyph inline with the text.") ]
    [ OleAutomation (False) ]
    Interface IDWriteInlineObject Extends IUnknown
        [ Description ("The application implemented rendering callback (IDWriteTextRenderer::DrawInlineObject) can use this to draw the inline object without needing to cast or query the object type. The text layout does not call this method directly.") ]
        /* voffset &H000C*/ Sub Draw(ByRef clientDrawingContext As Any, ByVal renderer As IDWriteTextRenderer, ByVal originX As Single, ByVal originY As Single, ByVal isSideways As Long, ByVal isRightToLeft As Long, ByVal clientDrawingEffect As IUnknown)
        [ Description ("TextLayout calls this callback function to get the measurement of the inline object.") ]
        /* voffset &H0010*/ Function GetMetrics() As DWRITE_INLINE_OBJECT_METRICS
        [ Description ("TextLayout calls this callback function to get the visible extents (in DIPs) of the inline object.") ]
        /* voffset &H0014*/ Function GetOverhangMetrics() As DWRITE_OVERHANG_METRICS
        [ Description ("Layout uses this to determine the line breaking behavior of the inline object amidst the text.") ]
        /* voffset &H0018*/ Sub GetBreakConditions(ByRef breakConditionBefore As DWRITE_BREAK_CONDITION, ByRef breakConditionAfter As DWRITE_BREAK_CONDITION)
    End Interface

    [ InterfaceId ("EF8A8135-5CC6-45FE-8825-C5A0724EB819") ]
    [ Description ("The IDWriteTextLayout interface represents a set of application-defined callbacks that perform rendering of text, inline objects, and decorations such as underlines.") ]
    [ OleAutomation (False) ]
    Interface IDWriteTextRenderer Extends IDWritePixelSnapping
        [ Description ("IDWriteTextLayout::Draw calls this function to instruct the client to render a run of glyphs.") ]
        /* voffset &H0000*/ Sub DrawGlyphRun(ByRef clientDrawingContext As Any, ByVal baselineOriginX As Single, ByVal baselineOriginY As Single, ByVal measuringMode As DWRITE_MEASURING_MODE, ByRef glyphRun As DWRITE_GLYPH_RUN, ByRef glyphRunDescription As DWRITE_GLYPH_RUN_DESCRIPTION, ByVal clientDrawingEffect As IUnknown)
        [ Description ("IDWriteTextLayout::Draw calls this function to instruct the client to draw an underline.") ]
        /* voffset &H0004*/ Sub DrawUnderline(ByRef clientDrawingContext As Any, ByVal baselineOriginX As Single, ByVal baselineOriginY As Single, ByRef Underline As DWRITE_UNDERLINE, ByVal clientDrawingEffect As IUnknown)
        [ Description ("IDWriteTextLayout::Draw calls this function to instruct the client to draw a strikethrough.") ]
        /* voffset &H0008*/ Sub DrawStrikethrough(ByRef clientDrawingContext As Any, ByVal baselineOriginX As Single, ByVal baselineOriginY As Single, ByRef StrikeThrough As DWRITE_STRIKETHROUGH, ByVal clientDrawingEffect As IUnknown)
        [ Description ("IDWriteTextLayout::Draw calls this application callback when it needs to draw an inline object.") ]
        /* voffset &H000C*/ Sub DrawInlineObject(ByRef clientDrawingContext As Any, ByVal originX As Single, ByVal originY As Single, ByVal inlineObject As IDWriteInlineObject, ByVal isSideways As Long, ByVal isRightToLeft As Long, ByVal clientDrawingEffect As IUnknown)
    End Interface

    [ InterfaceId ("EAF3A2DA-ECF4-4D24-B644-B34F6842024B") ]
    [ Description ("The IDWritePixelSnapping interface defines the pixel snapping properties of a text renderer.") ]
    [ OleAutomation (False) ]
    Interface IDWritePixelSnapping Extends IUnknown
        [ Description ("Determines whether pixel snapping is disabled. The recommended default is FALSE, unless doing animation that requires subpixel vertical placement.") ]
        /* voffset &H000C*/ Function IsPixelSnappingDisabled(ByRef clientDrawingContext As Any) As Long
        [ Description ("Gets the current transform that maps abstract coordinates to DIPs, which may disable pixel snapping upon any rotation or shear.") ]
        /* voffset &H0010*/ Function GetCurrentTransform(ByRef clientDrawingContext As Any) As DWRITE_MATRIX
        [ Description ("Gets the number of physical pixels per DIP. A DIP (device-independent pixel) is 1/96 inch, so the pixelsPerDip value is the number of logical pixels per inch divided by 96 (yieldinga value of 1 for 96 DPI and 1.25 for 120).") ]
        /* voffset &H0014*/ Function GetPixelsPerDip(ByRef clientDrawingContext As Any) As Single
    End Interface

    [ InterfaceId ("55F1112B-1DC2-4B3C-9541-F46894ED85B6") ]
    [ Description ("Font typography setting.") ]
    [ OleAutomation (False) ]
    Interface IDWriteTypography Extends IUnknown
        [ Description ("Add font feature.") ]
        /* voffset &H000C*/ Sub AddFontFeature(ByVal fontFeature As LongLong)
        [ PreserveSig ]
        [ Description ("Get the number of font features.") ]
        /* voffset &H0010*/ Function GetFontFeatureCount() As Long
        [ Description ("Get the font feature at the specified index.") ]
        /* voffset &H0014*/ Function GetFontFeature(ByVal fontFeatureIndex As Long) As DWRITE_FONT_FEATURE
    End Interface

    [ InterfaceId ("1EDD9491-9853-4299-898F-6432983B6F3A") ]
    [ Description ("The GDI interop interface provides interoperability with GDI.") ]
    [ OleAutomation (False) ]
    Interface IDWriteGdiInterop Extends IUnknown
        [ Description ("Creates a font object that matches the properties specified by the LOGFONT structure.") ]
        /* voffset &H000C*/ Function CreateFontFromLOGFONT(ByRef logFont As Any) As IDWriteFont
        [ Description ("Initializes a LOGFONT structure based on the GDI-compatible properties of the specified font.") ]
        /* voffset &H0010*/ Function ConvertFontToLOGFONT(ByVal Font As IDWriteFont, ByRef logFont As Any) As Long
        [ Description ("Initializes a LOGFONT structure based on the GDI-compatible properties of the specified font.") ]
        /* voffset &H0014*/ Sub ConvertFontFaceToLOGFONT(ByVal Font As IDWriteFontFace, ByRef logFont As Any)
        [ Description ("Creates a font face object that corresponds to the currently selected HFONT.") ]
        /* voffset &H0018*/ Function CreateFontFaceFromHdc(ByVal hdc As LongPtr) As IDWriteFontFace
        [ Description ("Creates an object that encapsulates a bitmap and memory DC which can be used for rendering glyphs.") ]
        /* voffset &H001C*/ Function CreateBitmapRenderTarget(ByVal hdc As LongPtr, ByVal width As Long, ByVal Height As Long) As IDWriteBitmapRenderTarget
    End Interface

    [ InterfaceId ("5E5A32A3-8DFF-4773-9FF6-0696EAB77267") ]
    [ Description ("Encapsulates a 32-bit device independent bitmap and device context, which can be used for rendering glyphs.") ]
    [ OleAutomation (False) ]
    Interface IDWriteBitmapRenderTarget Extends IUnknown
        [ Description ("Draws a run of glyphs to the bitmap.") ]
        /* voffset &H000C*/ Sub DrawGlyphRun(ByVal baselineOriginX As Single, ByVal baselineOriginY As Single, ByVal measuringMode As DWRITE_MEASURING_MODE, ByRef glyphRun As DWRITE_GLYPH_RUN, ByVal renderingParams As IDWriteRenderingParams, ByVal textColor As Long, ByRef blackBoxRect As Any)
        [ PreserveSig ]
        [ Description ("Gets a handle to the memory device context.") ]
        /* voffset &H0010*/ Function GetMemoryDC() As LongPtr
        [ PreserveSig ]
        [ Description ("Gets the number of bitmap pixels per DIP. A DIP (device-independent pixel) is 1/96 inch so this value is the number if pixels per inch divided by 96.") ]
        /* voffset &H0014*/ Function GetPixelsPerDip() As Single
        [ Description ("Sets the number of bitmap pixels per DIP. A DIP (device-independent pixel) is 1/96 inch so this value is the number if pixels per inch divided by 96.") ]
        /* voffset &H0018*/ Sub SetPixelsPerDip(ByVal pixelsPerDip As Single)
        [ Description ("Gets the transform that maps abstract coordinate to DIPs. By default this is the identity transform.") ]
        /* voffset &H001C*/ Function GetCurrentTransform() As DWRITE_MATRIX
        [ Description ("Sets the transform that maps abstract coordinate to DIPs. This does not affect the world transform of the underlying device context.") ]
        /* voffset &H0020*/ Sub SetCurrentTransform(ByRef transform As Any)
        [ Description ("Gets the dimensions of the bitmap.") ]
        /* voffset &H0024*/ Function GetSize() As SIZE
        [ Description ("Resizes the bitmap.") ]
        /* voffset &H0028*/ Sub Resize(ByVal width As Long, ByVal Height As Long)
    End Interface

    [ InterfaceId ("53737037-6D14-410B-9BFE-0B182BB70961") ]
    [ Description ("The IDWriteTextLayout interface represents a block of text after it has been fully analyzed and formatted.") ]
    [ OleAutomation (False) ]
    Interface IDWriteTextLayout Extends IDWriteTextFormat
        [ Description ("Set layout maximum width") ]
        /* voffset &H0070*/ Sub SetMaxWidth(ByVal maxWidth As Single)
        [ Description ("Set layout maximum height") ]
        /* voffset &H0074*/ Sub SetMaxHeight(ByVal maxHeight As Single)
        [ Description ("Set the font collection.") ]
        /* voffset &H0078*/ Sub SetFontCollection(ByVal fontCollection As IDWriteFontCollection, ByVal textRange_startPosition As Long, ByVal textRange_length As Long)
        [ Description ("Set null-terminated font family name.") ]
        /* voffset &H007C*/ Sub SetFontFamilyName(ByVal fontFamilyName As LongPtr, ByVal textRange_startPosition As Long, ByVal textRange_length As Long)
        [ Description ("Set font weight.") ]
        /* voffset &H0080*/ Sub SetFontWeight(ByVal fontWeight As DWRITE_FONT_WEIGHT, ByVal textRange_startPosition As Long, ByVal textRange_length As Long)
        [ Description ("Set font style.") ]
        /* voffset &H0084*/ Sub SetFontStyle(ByVal fontStyle As DWRITE_FONT_STYLE, ByVal textRange_startPosition As Long, ByVal textRange_length As Long)
        [ Description ("Set font stretch.") ]
        /* voffset &H0088*/ Sub SetFontStretch(ByVal fontStretch As DWRITE_FONT_STRETCH, ByVal textRange_startPosition As Long, ByVal textRange_length As Long)
        [ Description ("Set font em height.") ]
        /* voffset &H008C*/ Sub SetFontSize(ByVal fontSize As Single, ByVal textRange_startPosition As Long, ByVal textRange_length As Long)
        [ Description ("Set underline.") ]
        /* voffset &H0090*/ Sub SetUnderline(ByVal hasUnderline As Long, ByVal textRange_startPosition As Long, ByVal textRange_length As Long)
        [ Description ("Set strikethrough.") ]
        /* voffset &H0094*/ Sub SetStrikethrough(ByVal hasStrikethrough As Long, ByVal textRange_startPosition As Long, ByVal textRange_length As Long)
        [ Description ("Set application-defined drawing effect.") ]
        /* voffset &H0098*/ Sub SetDrawingEffect(ByVal drawingEffect As IUnknown, ByVal textRange_startPosition As Long, ByVal textRange_length As Long)
        [ Description ("Set inline object.") ]
        /* voffset &H009C*/ Sub SetInlineObject(ByVal inlineObject As IDWriteInlineObject, ByVal textRange_startPosition As Long, ByVal textRange_length As Long)
        [ Description ("Set font typography features.") ]
        /* voffset &H00A0*/ Sub SetTypography(ByVal typography As IDWriteTypography, ByVal textRange_startPosition As Long, ByVal textRange_length As Long)
        [ Description ("Set locale name.") ]
        /* voffset &H00A4*/ Sub SetLocaleName(ByVal localeName As LongPtr, ByVal textRange_startPosition As Long, ByVal textRange_length As Long)
        [ PreserveSig ]
        [ Description ("Get layout maximum width.") ]
        /* voffset &H00A8*/ Function GetMaxWidth() As Single
        [ PreserveSig ]
        [ Description ("Get layout maximum height.") ]
        /* voffset &H00AC*/ Function GetMaxHeight() As Single
        [ Description ("Get the font collection where the current position is at.") ]
        /* voffset &H00B0*/ Sub GetFontCollection(ByVal CurrentPosition As Long, ByRef fontCollection As IDWriteFontCollection, ByRef textRange As Any)
        [ Description ("Get the length of the font family name where the current position is at.") ]
        /* voffset &H00B4*/ Sub GetFontFamilyNameLength(ByVal CurrentPosition As Long, ByRef nameLength As Long, ByRef textRange As Any)
        [ Description ("Copy the font family name where the current position is at.") ]
        /* voffset &H00B8*/ Sub GetFontFamilyName(ByVal CurrentPosition As Long, fontFamilyName As LongPtr, ByVal nameSize As Long, ByRef textRange As Any)
        [ Description ("Get the font weight where the current position is at.") ]
        /* voffset &H00BC*/ Sub GetFontWeight(ByVal CurrentPosition As Long, ByRef fontWeight As DWRITE_FONT_WEIGHT, ByRef textRange As Any)
        [ Description ("Get the font style where the current position is at.") ]
        /* voffset &H00C0*/ Sub GetFontStyle(ByVal CurrentPosition As Long, ByRef fontStyle As DWRITE_FONT_STYLE, ByRef textRange As Any)
        [ Description ("Get the font stretch where the current position is at.") ]
        /* voffset &H00C4*/ Sub GetFontStretch(ByVal CurrentPosition As Long, ByRef fontStretch As DWRITE_FONT_STRETCH, ByRef textRange As Any)
        [ Description ("Get the font em height where the current position is at.") ]
        /* voffset &H00C8*/ Sub GetFontSize(ByVal CurrentPosition As Long, ByRef fontSize As Single, ByRef textRange As Any)
        [ Description ("Get the underline presence where the current position is at.") ]
        /* voffset &H00CC*/ Sub GetUnderline(ByVal CurrentPosition As Long, ByRef hasUnderline As Long, ByRef textRange As Any)
        [ Description ("Get the strikethrough presence where the current position is at.") ]
        /* voffset &H00D0*/ Sub GetStrikethrough(ByVal CurrentPosition As Long, ByRef hasStrikethrough As Long, ByRef textRange As Any)
        [ Description ("Get the application-defined drawing effect where the current position is at.") ]
        /* voffset &H00D4*/ Sub GetDrawingEffect(ByVal CurrentPosition As Long, ByRef drawingEffect As IUnknown, ByRef textRange As Any)
        [ Description ("Get the inline object at the given position.") ]
        /* voffset &H00D8*/ Sub GetInlineObject(ByVal CurrentPosition As Long, ByRef inlineObject As IDWriteInlineObject, ByRef textRange As Any)
        [ Description ("Get the typography setting where the current position is at.") ]
        /* voffset &H00DC*/ Sub GetTypography(ByVal CurrentPosition As Long, ByRef typography As IDWriteTypography, ByRef textRange As Any)
        [ Description ("Get the length of the locale name where the current position is at.") ]
        /* voffset &H00E0*/ Sub GetLocaleNameLength(ByVal CurrentPosition As Long, ByRef nameLength As Long, ByRef textRange As Any)
        [ Description ("Get the locale name where the current position is at.") ]
        /* voffset &H00E4*/ Sub GetLocaleName(ByVal CurrentPosition As Long, localeName As LongPtr, ByVal nameSize As Long, ByRef textRange As Any)
        [ Description ("Initiate drawing of the text.") ]
        /* voffset &H00E8*/ Sub Draw(ByRef clientDrawingContext As Any, ByVal renderer As IDWriteTextRenderer, ByVal originX As Single, ByVal originY As Single)
        [ Description ("GetLineMetrics returns properties of each line.") ]
        /* voffset &H00EC*/ Function GetLineMetrics(ByRef lineMetrics As DWRITE_LINE_METRICS, ByVal maxLineCount As Long) As Long
        [ Description ("GetMetrics retrieves overall metrics for the formatted string.") ]
        /* voffset &H00F0*/ Function GetMetrics() As DWRITE_TEXT_METRICS
        [ Description ("GetOverhangMetrics returns the overhangs (in DIPs) of the layout and all objects contained in it, including text glyphs and inline objects.") ]
        /* voffset &H00F4*/ Function GetOverhangMetrics() As DWRITE_OVERHANG_METRICS
        [ Description ("Retrieve logical properties and measurement of each cluster.") ]
        /* voffset &H00F8*/ Function GetClusterMetrics(ByRef clusterMetrics As DWRITE_CLUSTER_METRICS, ByVal maxClusterCount As Long) As Long
        [ Description ("Determines the minimum possible width the layout can be set to without emergency breaking between the characters of whole words.") ]
        /* voffset &H00FC*/ Function DetermineMinWidth() As Single
        [ Description ("Given a coordinate (in DIPs) relative to the top-left of the layout box, this returns the corresponding hit-test metrics of the text string where the hit-test has occurred.") ]
        /* voffset &H0100*/ Sub HitTestPoint(ByVal pointX As Single, ByVal pointY As Single, ByRef isTrailingHit As Long, ByRef isInside As Long, ByRef hitTestMetrics As DWRITE_HIT_TEST_METRICS)
        [ Description ("Given a text position and whether the caret is on the leading or trailing edge of that position, this returns the corresponding coordinate (in DIPs) relative to the top-left of the layout box.") ]
        /* voffset &H0104*/ Sub HitTestTextPosition(ByVal textPosition As Long, ByVal isTrailingHit As Long, ByRef pointX As Single, ByRef pointY As Single, ByRef hitTestMetrics As DWRITE_HIT_TEST_METRICS)
        [ Description ("The application calls this function to get a set of hit-test metrics corresponding to a range of text positions.") ]
        /* voffset &H0108*/ Sub HitTestTextRange(ByVal textPosition As Long, ByVal textLength As Long, ByVal originX As Single, ByVal originY As Single, ByRef hitTestMetrics As DWRITE_HIT_TEST_METRICS, ByVal maxHitTestMetricsCount As Long, ByRef actualHitTestMetricsCount As Long)
    End Interface

    [ InterfaceId ("B7E6163E-7F46-43B4-84B3-E4E6249C365D") ]
    [ Description ("Analyzes various text properties for complex script processing.") ]
    [ OleAutomation (False) ]
    Interface IDWriteTextAnalyzer Extends IUnknown
        [ Description ("Analyzes a text range for script boundaries, reading text attributes from the source and reporting the Unicode script ID to the sink callback SetScript.") ]
        /* voffset &H000C*/ Sub AnalyzeScript(ByVal analysisSource As IDWriteTextAnalysisSource, ByVal textPosition As Long, ByVal textLength As Long, ByVal analysisSink As IDWriteTextAnalysisSink)
        [ Description ("Analyzes a text range for script directionality, reading attributes from the source and reporting levels to the sink callback SetBidiLevel.") ]
        /* voffset &H0010*/ Sub AnalyzeBidi(ByVal analysisSource As IDWriteTextAnalysisSource, ByVal textPosition As Long, ByVal textLength As Long, ByVal analysisSink As IDWriteTextAnalysisSink)
        [ Description ("Analyzes a text range for spans where number substitution is applicable, reading attributes from the source and reporting substitutable ranges to the sink callback SetNumberSubstitution.") ]
        /* voffset &H0014*/ Sub AnalyzeNumberSubstitution(ByVal analysisSource As IDWriteTextAnalysisSource, ByVal textPosition As Long, ByVal textLength As Long, ByVal analysisSink As IDWriteTextAnalysisSink)
        [ Description ("Analyzes a text range for potential breakpoint opportunities, reading attributes from the source and reporting breakpoint opportunities to the sink callback SetLineBreakpoints.") ]
        /* voffset &H0018*/ Sub AnalyzeLineBreakpoints(ByVal analysisSource As IDWriteTextAnalysisSource, ByVal textPosition As Long, ByVal textLength As Long, ByVal analysisSink As IDWriteTextAnalysisSink)
        [ Description ("Parses the input text string and maps it to the set of glyphs and associated glyph data according to the font and the writing system's rendering rules.") ]
        /* voffset &H001C*/ Sub GetGlyphs(ByVal textString As LongPtr, ByVal textLength As Long, ByVal fontFace As IDWriteFontFace, ByVal isSideways As Long, ByVal isRightToLeft As Long, ByRef scriptAnalysis As DWRITE_SCRIPT_ANALYSIS, ByVal localeName As LongPtr, ByVal numberSubstitution As IDWriteNumberSubstitution, ByRef features As Any, ByRef featureRangeLengths As Any, ByVal featureRanges As Long, ByVal maxGlyphCount As Long, ByRef clusterMap As Integer, ByRef textProps As DWRITE_SHAPING_TEXT_PROPERTIES, ByRef glyphIndices As Integer, ByRef glyphProps As DWRITE_SHAPING_GLYPH_PROPERTIES, ByRef actualGlyphCount As Long)
        [ Description ("Place glyphs output from the GetGlyphs method according to the font and the writing system's rendering rules.") ]
        /* voffset &H0020*/ Sub GetGlyphPlacements(ByVal textString As LongPtr, ByRef clusterMap As Integer, ByRef textProps As DWRITE_SHAPING_TEXT_PROPERTIES, ByVal textLength As Long, ByRef glyphIndices As Integer, ByRef glyphProps As DWRITE_SHAPING_GLYPH_PROPERTIES, ByVal glyphCount As Long, ByVal fontFace As IDWriteFontFace, ByVal fontEmSize As Single, ByVal isSideways As Long, ByVal isRightToLeft As Long, ByRef scriptAnalysis As DWRITE_SCRIPT_ANALYSIS, ByVal localeName As LongPtr, ByRef features As Any, ByRef featureRangeLengths As Any, ByVal featureRanges As Long, ByRef glyphAdvances As Single, ByRef glyphOffsets As DWRITE_GLYPH_OFFSET)
        [ Description ("Place glyphs output from the GetGlyphs method according to the font and the writing system's rendering rules.") ]
        /* voffset &H0024*/ Sub GetGdiCompatibleGlyphPlacements(ByVal textString As LongPtr, ByRef clusterMap As Integer, ByRef textProps As DWRITE_SHAPING_TEXT_PROPERTIES, ByVal textLength As Long, ByRef glyphIndices As Integer, ByRef glyphProps As DWRITE_SHAPING_GLYPH_PROPERTIES, ByVal glyphCount As Long, ByVal fontFace As IDWriteFontFace, ByVal fontEmSize As Single, ByVal pixelsPerDip As Single, ByRef transform As Any, ByVal useGdiNatural As Long, ByVal isSideways As Long, ByVal isRightToLeft As Long, ByRef scriptAnalysis As DWRITE_SCRIPT_ANALYSIS, ByVal localeName As LongPtr, ByRef features As Any, ByRef featureRangeLengths As Any, ByVal featureRanges As Long, ByRef glyphAdvances As Single, ByRef glyphOffsets As DWRITE_GLYPH_OFFSET)
    End Interface

    [ InterfaceId ("688E1A58-5094-47C8-ADC8-FBCEA60AE92B") ]
    [ Description ("The interface implemented by the text analyzer's client to provide text to the analyzer.") ]
    [ OleAutomation (False) ]
    Interface IDWriteTextAnalysisSource Extends IUnknown
        /* voffset &H000C*/ Sub GetTextAtPosition(ByVal textPosition As Long, ByRef textString As LongPtr, ByRef textLength As Long)
        /* voffset &H0010*/ Sub GetTextBeforePosition(ByVal textPosition As Long, ByRef textString As LongPtr, ByRef textLength As Long)
        [ PreserveSig ]
        /* voffset &H0014*/ Function GetParagraphReadingDirection() As DWRITE_READING_DIRECTION
        /* voffset &H0018*/ Sub GetLocaleName(ByVal textPosition As Long, ByRef textLength As Long, ByRef localeName As LongPtr)
        /* voffset &H001C*/ Sub GetNumberSubstitution(ByVal textPosition As Long, ByRef textLength As Long, ByRef numberSubstitution As IDWriteNumberSubstitution)
    End Interface

    [ InterfaceId ("14885CC9-BAB0-4F90-B6ED-5C366A2CD03D") ]
    [ Description ("Holds the appropriate digits and numeric punctuation for a given locale.") ]
    [ OleAutomation (False) ]
    Interface IDWriteNumberSubstitution Extends IUnknown
    End Interface

    [ InterfaceId ("5810CD44-0CA0-4701-B3FA-BEC5182AE4F6") ]
    [ Description ("The interface implemented by the text analyzer's client to receive the output of a given text analysis.") ]
    [ OleAutomation (False) ]
    Interface IDWriteTextAnalysisSink Extends IUnknown
        [ Description ("Report script analysis for the text range.") ]
        /* voffset &H000C*/ Sub SetScriptAnalysis(ByVal textPosition As Long, ByVal textLength As Long, ByRef scriptAnalysis As Long)
        [ Description ("Repport line-break opportunities for each character, starting from the specified position.") ]
        /* voffset &H0010*/ Sub SetLineBreakpoints(ByVal textPosition As Long, ByVal textLength As Long, ByRef lineBreakpoints As Long)
        [ Description ("Set bidirectional level on the range, called once per each level run change (either explicit or resolved implicit).") ]
        /* voffset &H0014*/ Sub SetBidiLevel(ByVal textPosition As Long, ByVal textLength As Long, ByVal explicitLevel As Byte, ByVal resolvedLevel As Byte)
        [ Description ("Set number substitution on the range.") ]
        /* voffset &H0018*/ Sub SetNumberSubstitution(ByVal textPosition As Long, ByVal textLength As Long, ByVal numberSubstitution As IDWriteNumberSubstitution)
    End Interface

    [ InterfaceId ("7D97DBF7-E085-42D4-81E3-6A883BDED118") ]
    [ Description ("Interface that encapsulates information used to render a glyph run.") ]
    [ OleAutomation (False) ]
    Interface IDWriteGlyphRunAnalysis Extends IUnknown
        [ Description ("Gets the bounding rectangle of the physical pixels affected by the glyph run.") ]
        /* voffset &H000C*/ Function GetAlphaTextureBounds(ByVal textureType As DWRITE_TEXTURE_TYPE) As RECT
        [ Description ("Creates an alpha texture of the specified type.") ]
        /* voffset &H0010*/ Sub CreateAlphaTexture(ByVal textureType As DWRITE_TEXTURE_TYPE, ByRef textureBounds As RECT, ByRef alphaValues As Any, ByVal BufferSize As Long)
        [ Description ("Gets properties required for ClearType blending.") ]
        /* voffset &H0014*/ Sub GetAlphaBlendParams(ByVal renderingParams As IDWriteRenderingParams, ByRef blendGamma As Single, ByRef blendEnhancedContrast As Single, ByRef blendClearTypeLevel As Single)
    End Interface

    [ InterfaceId ("B2D9F3EC-C9FE-4A11-A2EC-D86208F7C0A2") ]
    [ Description ("A built-in implementation of IDWriteFontFileLoader interface that operates on local font files and exposes local font file information from the font file reference key.") ]
    [ OleAutomation (False) ]
    Interface IDWriteLocalFontFileLoader Extends IDWriteFontFileLoader
        [ Description ("Obtains the length of the absolute file path from the font file reference key.") ]
        /* voffset &H0010*/ Sub GetFilePathLengthFromKey(ByRef fontFileReferenceKey As Any, ByVal fontFileReferenceKeySize As Long, ByRef filePathLength As Long)
        [ Description ("Obtains the absolute font file path from the font file reference key.") ]
        /* voffset &H0014*/ Sub GetFilePathFromKey(ByRef fontFileReferenceKey As Any, ByVal fontFileReferenceKeySize As Long, ByRef filePath As Integer, ByVal filePathSize As Long)
        [ Description ("Obtains the last write time of the file from the font file reference key.") ]
        /* voffset &H0018*/ Sub GetLastWriteTimeFromKey(ByRef fontFileReferenceKey As Any, ByVal fontFileReferenceKeySize As Long, ByRef LastWriteTime As FILETIME)
    End Interface




                                            ' LenB() = &H0004, Len() = &H0004, UDT Alignment = &H0004

    [ InterfaceId ("06152247-6F50-465A-9245-118BFD3B6007") ]
    [ Description ("Creates Direct2D resources.") ]
    [ OleAutomation (False) ]
    Interface ID2D1Factory Extends IUnknown
        [ Description ("Forces the factory to refresh any system defaults that it might have changed since factory creation.") ]
        /* voffset &H000C*/ Sub ReloadSystemMetrics()
        [ PreserveSig ]
        [ Description ("Retrieves the current desktop DPI. To refresh this, call ReloadSystemMetrics.") ]
        /* voffset &H0010*/ Sub GetDesktopDpi(ByRef DpiX As Single, ByRef DpiY As Single)
        [ Description ("Creates an ID2D1RectangleGeometry.") ]
        /* voffset &H0014*/ Function CreateRectangleGeometry(ByRef rectangle As D2D1_RECT_F) As ID2D1RectangleGeometry
        [ Description ("Creates an ID2D1RoundedRectangleGeometry.") ]
        /* voffset &H0018*/ Function CreateRoundedRectangleGeometry(ByRef roundedRectangle As D2D1_ROUNDED_RECT) As ID2D1RoundedRectangleGeometry
        [ Description ("Creates an ID2D1EllipseGeometry.") ]
        /* voffset &H001C*/ Function CreateEllipseGeometry(ByRef ellipse As D2D1_ELLIPSE) As ID2D1EllipseGeometry
        [ Description ("Creates an ID2D1GeometryGroup, which is an object that holds other geometries.") ]
        /* voffset &H0020*/ Function CreateGeometryGroup(ByVal fillMode As D2D1_FILL_MODE, ByRef geometries As ID2D1Geometry, ByVal geometriesCount As Long) As ID2D1GeometryGroup
        [ Description ("Transforms the specified geometry and stores the result as an ID2D1TransformedGeometry object.") ]
        /* voffset &H0024*/ Function CreateTransformedGeometry(ByVal sourceGeometry As ID2D1Geometry, ByRef transform As D2D1_MATRIX_3X2_F) As ID2D1TransformedGeometry
        [ Description ("Creates an empty ID2D1PathGeometry.") ]
        /* voffset &H0028*/ Function CreatePathGeometry() As ID2D1PathGeometry
        [ Description ("Creates an ID2D1StrokeStyle that describes start cap, dash pattern, and other features of a stroke.") ]
        /* voffset &H002C*/ Function CreateStrokeStyle(ByRef strokeStyleProperties As D2D1_STROKE_STYLE_PROPERTIES, ByRef dashes As Any, ByVal dashesCount As Long) As ID2D1StrokeStyle
        [ Description ("Creates an ID2D1DrawingStateBlock that can be used with the SaveDrawingState and RestoreDrawingState methods of a render target.") ]
        /* voffset &H0030*/ Function CreateDrawingStateBlock(ByRef drawingStateDescription As Any, ByRef textRenderingParams As Any) As ID2D1DrawingStateBlock
        [ Description ("Creates a render target that renders to a Microsoft Windows Imaging Component (WIC) bitmap.") ]
        /* voffset &H0034*/ Function CreateWicBitmapRenderTarget(ByRef target As Any, ByRef renderTargetProperties As D2D1_RENDER_TARGET_PROPERTIES) As ID2D1RenderTarget
        [ Description ("Creates an ID2D1HwndRenderTarget, a render target that renders to a window.") ]
        /* voffset &H0038*/ Function CreateHwndRenderTarget(ByRef renderTargetProperties As D2D1_RENDER_TARGET_PROPERTIES, ByRef hwndRenderTargetProperties As D2D1_HWND_RENDER_TARGET_PROPERTIES) As ID2D1HwndRenderTarget
        [ Description ("Creates a render target that draws to a DirectX Graphics Infrastructure (DXGI) surface.") ]
        /* voffset &H003C*/ Function CreateDxgiSurfaceRenderTarget(ByRef dxgiSurface As Any, ByRef renderTargetProperties As D2D1_RENDER_TARGET_PROPERTIES) As ID2D1RenderTarget
        [ Description ("Creates a render target that draws to a Windows Graphics Device Interface (GDI) device context.") ]
        /* voffset &H0040*/ Function CreateDCRenderTarget(ByRef renderTargetProperties As D2D1_RENDER_TARGET_PROPERTIES) As ID2D1DCRenderTarget
    End Interface

    [ InterfaceId ("2CD906A2-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Describes a two-dimensional rectangle.") ]
    [ OleAutomation (False) ]
    Interface ID2D1RectangleGeometry Extends ID2D1Geometry
        [ PreserveSig ]
        [ Description ("Retrieves the rectangle that describes the rectangle geometry's dimensions.") ]
        /* voffset &H0000*/ Sub GetRect(ByRef RECT As D2D1_RECT_F)
    End Interface

    [ InterfaceId ("2CD906A1-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Represents a geometry resource and defines a set of helper methods for manipulating and measuring geometric shapes. Interfaces that inherit from ID2D1Geometry define specific shapes.") ]
    [ OleAutomation (False) ]
    Interface ID2D1Geometry Extends ID2D1Resource
        [ Description ("Retrieve the bounds of the geometry, with an optional applied transform.") ]
        /* voffset &H0000*/ Function GetBounds(ByRef worldTransform As Any) As D2D1_RECT_F
        [ Description ("Get the bounds of the corresponding geometry after it has been widened or have an optional pen style applied.") ]
        /* voffset &H0004*/ Function GetWidenedBounds(ByVal strokeWidth As Single, ByVal strokeStyle As ID2D1StrokeStyle, ByRef worldTransform As Any, ByVal flatteningTolerance As Single) As D2D1_RECT_F
        [ Description ("Checks to see whether the corresponding penned and widened geometry contains the given point.") ]
        /* voffset &H0008*/ Function StrokeContainsPoint(ByVal pointX As Single, ByVal pointY As Single, ByVal strokeWidth As Single, ByVal strokeStyle As ID2D1StrokeStyle, ByRef worldTransform As Any, ByVal flatteningTolerance As Single) As Long
        [ Description ("Test whether the given fill of this geometry would contain this point.") ]
        /* voffset &H000C*/ Function FillContainsPoint(ByVal pointX As Single, ByVal pointY As Single, ByRef worldTransform As Any, ByVal flatteningTolerance As Single) As Long
        [ Description ("Compare how one geometry intersects or contains another geometry.") ]
        /* voffset &H0010*/ Function CompareWithGeometry(ByVal inputGeometry As ID2D1Geometry, ByRef inputGeometryTransform As Any, ByVal flatteningTolerance As Single) As D2D1_GEOMETRY_RELATION
        [ Description ("Converts a geometry to a simplified geometry that has arcs and quadratic beziers removed.") ]
        /* voffset &H0014*/ Sub Simplify(ByVal simplificationOption As D2D1_GEOMETRY_SIMPLIFICATION_OPTION, ByRef worldTransform As Any, ByVal flatteningTolerance As Single, ByVal geometrySink As ID2D1SimplifiedGeometrySink)
        [ Description ("Tessellates a geometry into triangles.") ]
        /* voffset &H0018*/ Sub Tessellate(ByRef worldTransform As Any, ByVal flatteningTolerance As Single, ByVal tessellationSink As ID2D1TessellationSink)
        [ Description ("Performs a combine operation between the two geometries to produce a resulting geometry.") ]
        /* voffset &H001C*/ Sub CombineWithGeometry(ByVal inputGeometry As ID2D1Geometry, ByVal combineMode As D2D1_COMBINE_MODE, ByRef inputGeometryTransform As Any, ByVal flatteningTolerance As Single, ByVal geometrySink As ID2D1SimplifiedGeometrySink)
        [ Description ("Computes the outline of the geometry. The result is written back into a simplified geometry sink.") ]
        /* voffset &H0020*/ Sub Outline(ByRef worldTransform As Any, ByVal flatteningTolerance As Single, ByVal geometrySink As ID2D1SimplifiedGeometrySink)
        [ Description ("Computes the area of the geometry.") ]
        /* voffset &H0024*/ Function ComputeArea(ByRef worldTransform As Any, ByVal flatteningTolerance As Single) As Single
        [ Description ("Computes the length of the geometry.") ]
        /* voffset &H0028*/ Function ComputeLength(ByRef worldTransform As Any, ByVal flatteningTolerance As Single) As Single
        [ Description ("Computes the point and tangent a given distance along the path.") ]
        /* voffset &H002C*/ Sub ComputePointAtLength(ByVal Length As Single, ByRef worldTransform As Any, ByVal flatteningTolerance As Single, ByRef POINT As Any, ByRef unitTangentVector As Any)
        [ Description ("Get the geometry and widen it as well as apply an optional pen style.") ]
        /* voffset &H0030*/ Sub Widen(ByVal strokeWidth As Single, ByRef strokeStyle As Any, ByRef worldTransform As Any, ByVal flatteningTolerance As Single, ByVal geometrySink As ID2D1SimplifiedGeometrySink)
    End Interface

    [ InterfaceId ("2CD90691-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Represents a Direct2D drawing resource.") ]
    [ OleAutomation (False) ]
    Interface ID2D1Resource Extends IUnknown
        [ Description ("Retrieve the factory associated with this resource.") ]
        /* voffset &H000C*/ Function GetFactory() As ID2D1Factory
    End Interface

    [ InterfaceId ("2CD9069D-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Describes the caps, miter limit, line join, and dash information for a stroke.") ]
    [ OleAutomation (False) ]
    Interface ID2D1StrokeStyle Extends ID2D1Resource
        [ PreserveSig ]
        [ Description ("Retrieves the type of shape used at the beginning of a stroke.") ]
        /* voffset &H0010*/ Function GetStartCap() As D2D1_CAP_STYLE
        [ PreserveSig ]
        [ Description ("Retrieves the type of shape used at the end of a stroke.") ]
        /* voffset &H0014*/ Function GetEndCap() As D2D1_CAP_STYLE
        [ PreserveSig ]
        [ Description ("Gets a value that specifies how the ends of each dash are drawn.") ]
        /* voffset &H0018*/ Function GetDashCap() As D2D1_CAP_STYLE
        [ PreserveSig ]
        [ Description ("Retrieves the limit on the ratio of the miter length to half the stroke's thickness.") ]
        /* voffset &H001C*/ Function GetMiterLimit() As Single
        [ PreserveSig ]
        [ Description ("Retrieves the type of joint used at the vertices of a shape's outline.") ]
        /* voffset &H0020*/ Function GetLineJoin() As D2D1_LINE_JOIN
        [ PreserveSig ]
        [ Description ("Retrieves a value that specifies how far in the dash sequence the stroke will start.") ]
        /* voffset &H0024*/ Function GetDashOffset() As Single
        [ PreserveSig ]
        [ Description ("Gets a value that describes the stroke's dash pattern.") ]
        /* voffset &H0028*/ Function GetDashStyle() As D2D1_DASH_STYLE
        [ PreserveSig ]
        [ Description ("Retrieves the number of entries in the dashes array.") ]
        /* voffset &H002C*/ Function GetDashesCount() As Long
        [ PreserveSig ]
        [ Description ("Copies the dash pattern to the specified array.") ]
        /* voffset &H0030*/ Sub GetDashes(ByRef dashes As Single, ByVal dashesCount As Long)
    End Interface

    [ InterfaceId ("2CD9069E-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Describes a geometric path that does not contain quadratic bezier curves or arcs.") ]
    [ OleAutomation (False) ]
    Interface ID2D1SimplifiedGeometrySink Extends IUnknown
        [ PreserveSig ]
        [ Description ("Specifies the method used to determine which points are inside the geometry described by this geometry sink and which points are outside.") ]
        /* voffset &H000C*/ Sub SetFillMode(ByVal fillMode As D2D1_FILL_MODE)
        [ PreserveSig ]
        [ Description ("Specifies stroke and join options to be applied to new segments added to the geometry sink.") ]
        /* voffset &H0010*/ Sub SetSegmentFlags(ByVal vertexFlags As D2D1_PATH_SEGMENT)
        [ PreserveSig ]
        [ Description ("Starts a new figure at the specified point.") ]
        /* voffset &H0014*/ Sub BeginFigure(ByVal startPointX As Single, ByVal startPointY As Single, ByVal figureBegin As D2D1_FIGURE_BEGIN)
        [ PreserveSig ]
        [ Description ("Creates a sequence of lines using the specified points and adds them to the geometry sink.") ]
        /* voffset &H0018*/ Sub AddLines(ByRef points As D2D1_POINT_2F, ByVal pointsCount As Long)
        [ PreserveSig ]
        [ Description ("Creates a sequence of cubic Bezier curves and adds them to the geometry sink.") ]
        /* voffset &H001C*/ Sub AddBeziers(ByRef beziers As D2D1_BEZIER_SEGMENT, ByVal beziersCount As Long)
        [ PreserveSig ]
        [ Description ("Ends the current figure; optionally, closes it.") ]
        /* voffset &H0020*/ Sub EndFigure(ByVal figureEnd As D2D1_FIGURE_END)
        [ Description ("Closes the geometry sink, indicates whether it is in an error state, and resets the sink's error state.") ]
        /* voffset &H0024*/ Sub Close()
    End Interface

    [ InterfaceId ("2CD906C1-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Populates an ID2D1Mesh object with triangles.") ]
    [ OleAutomation (False) ]
    Interface ID2D1TessellationSink Extends IUnknown
        [ PreserveSig ]
        [ Description ("Copies the specified triangles to the sink.") ]
        /* voffset &H000C*/ Sub AddTriangles(ByRef triangles As D2D1_TRIANGLE, ByVal trianglesCount As Long)
        [ Description ("Closes the sink and returns its error status.") ]
        /* voffset &H0010*/ Sub Close()
    End Interface

    [ InterfaceId ("2CD906A3-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Describes a rounded rectangle.") ]
    [ OleAutomation (False) ]
    Interface ID2D1RoundedRectangleGeometry Extends ID2D1Geometry
        [ PreserveSig ]
        [ Description ("Retrieves a rounded rectangle that describes this rounded rectangle geometry.") ]
        /* voffset &H0034*/ Sub GetRoundedRect(ByRef roundedRect As D2D1_ROUNDED_RECT)
    End Interface

    [ InterfaceId ("2CD906A4-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Represents an ellipse.") ]
    [ OleAutomation (False) ]
    Interface ID2D1EllipseGeometry Extends ID2D1Geometry
        [ PreserveSig ]
        [ Description ("Gets the D2D1_ELLIPSE structure that describes this ellipse geometry.") ]
        /* voffset &H0034*/ Sub GetEllipse(ByRef ellipse As D2D1_ELLIPSE)
    End Interface

    [ InterfaceId ("2CD906A6-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Represents a composite geometry, composed of other ID2D1Geometry objects.") ]
    [ OleAutomation (False) ]
    Interface ID2D1GeometryGroup Extends ID2D1Geometry
        [ PreserveSig ]
        [ Description ("Indicates how the intersecting areas of the geometries contained in this geometry group are combined.") ]
        /* voffset &H0034*/ Function GetFillMode() As D2D1_FILL_MODE
        [ PreserveSig ]
        [ Description ("Indicates the number of geometry objects in the geometry group.") ]
        /* voffset &H0038*/ Function GetSourceGeometryCount() As Long
        [ PreserveSig ]
        [ Description ("Retrieves the geometries in the geometry group.") ]
        /* voffset &H003C*/ Sub GetSourceGeometries(ByRef geometries As ID2D1Geometry, ByVal geometriesCount As Long)
    End Interface

    [ InterfaceId ("2CD906BB-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Represents a geometry that has been transformed.") ]
    [ OleAutomation (False) ]
    Interface ID2D1TransformedGeometry Extends ID2D1Geometry
        [ Description ("Retrieves the source geometry of this transformed geometry object.") ]
        /* voffset &H0034*/ Function GetSourceGeometry() As ID2D1Geometry
        [ PreserveSig ]
        [ Description ("Retrieves the matrix used to transform the ID2D1TransformedGeometry object's source geometry.") ]
        /* voffset &H0038*/ Sub GetTransform(ByRef transform As D2D1_MATRIX_3X2_F)
    End Interface

    [ InterfaceId ("2CD906A5-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Represents a complex shape that may be composed of arcs, curves, and lines.") ]
    [ OleAutomation (False) ]
    Interface ID2D1PathGeometry Extends ID2D1Geometry
        [ Description ("Retrieves the geometry sink that is used to populate the path geometry with figures and segments.") ]
        /* voffset &H0034*/ Function Open() As ID2D1GeometrySink
        [ Description ("Copies the contents of the path geometry to the specified ID2D1GeometrySink.") ]
        /* voffset &H0038*/ Sub Stream(ByVal geometrySink As ID2D1GeometrySink)
        [ Description ("Retrieves the number of segments in the path geometry.") ]
        /* voffset &H003C*/ Function GetSegmentCount() As Long
        [ Description ("Retrieves the number of figures in the path geometry.") ]
        /* voffset &H0040*/ Function GetFigureCount() As Long
    End Interface

    [ InterfaceId ("2CD9069F-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Describes a geometric path that can contain lines, arcs, cubic Bezier curves, and quadratic Bezier curves.") ]
    [ OleAutomation (False) ]
    Interface ID2D1GeometrySink Extends ID2D1SimplifiedGeometrySink
        [ PreserveSig ]
        [ Description ("Creates a line segment between the current point and the specified end point and adds it to the geometry sink.") ]
        /* voffset &H0028*/ Sub AddLine(ByVal pointX As Single, ByVal pointY As Single)
        [ PreserveSig ]
        [ Description ("Creates a cubic Bezier curve between the current point and the specified end point and adds it to the geometry sink.") ]
        /* voffset &H002C*/ Sub AddBezier(ByRef bezier As D2D1_BEZIER_SEGMENT)
        [ PreserveSig ]
        [ Description ("Creates a quadratic Bezier curve between the current point and the specified end point and adds it to the geometry sink.") ]
        /* voffset &H0030*/ Sub AddQuadraticBezier(ByRef bezier As D2D1_QUADRATIC_BEZIER_SEGMENT)
        [ PreserveSig ]
        [ Description ("Adds a sequence of quadratic Bezier segments as an array in a single call.") ]
        /* voffset &H0034*/ Sub AddQuadraticBeziers(ByRef beziers As D2D1_QUADRATIC_BEZIER_SEGMENT, ByVal beziersCount As Long)
        [ PreserveSig ]
        [ Description ("Creates a single arc and adds it to the path geometry.") ]
        /* voffset &H0038*/ Sub AddArc(ByRef arc As D2D1_ARC_SEGMENT)
    End Interface

    [ InterfaceId ("28506E39-EBF6-46A1-BB47-FD85565AB957") ]
    [ Description ("Represents the drawing state of a render target: the antialiasing mode, transform, tags, and text-rendering options.") ]
    [ OleAutomation (False) ]
    Interface ID2D1DrawingStateBlock Extends ID2D1Resource
        [ PreserveSig ]
        [ Description ("Retrieves the state currently contained within this state block resource.") ]
        /* voffset &H0010*/ Sub GetDescription(ByRef stateDescription As D2D1_DRAWING_STATE_DESCRIPTION)
        [ PreserveSig ]
        [ Description ("Sets the state description of this state block resource.") ]
        /* voffset &H0014*/ Sub SetDescription(ByRef stateDescription As D2D1_DRAWING_STATE_DESCRIPTION)
        [ PreserveSig ]
        [ Description ("Sets the text rendering parameters of this state block resource.") ]
        /* voffset &H0018*/ Sub SetTextRenderingParams(ByRef textRenderingParams As Any)
        [ PreserveSig ]
        [ Description ("Retrieves the text rendering parameters contained within this state block resource. If a Nothing text rendering parameter was specified, Nothing will be returned.") ]
        /* voffset &H001C*/ Sub GetTextRenderingParams(ByRef textRenderingParams As Any)
    End Interface

    [ InterfaceId ("2CD90694-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Represents an object that can receive drawing commands. Interfaces that inherit from ID2D1RenderTarget render the drawing commands they receive in different ways.") ]
    [ OleAutomation (False) ]
    Interface ID2D1RenderTarget Extends ID2D1Resource
        [ Description ("Create a D2D bitmap by copying from memory, or create uninitialized.") ]
        /* voffset &H0010*/ Function CreateBitmap(ByVal width As Long, ByVal Height As Long, ByRef srcData As Any, ByVal pitch As Long, ByRef bitmapProperties As D2D1_BITMAP_PROPERTIES) As ID2D1Bitmap
        [ Description ("Create a D2D bitmap by copying a WIC bitmap.") ]
        /* voffset &H0014*/ Function CreateBitmapFromWicBitmap(ByRef wicBitmapSource As Any, ByRef bitmapProperties As Any) As ID2D1Bitmap
        [ Description ("Create a D2D bitmap by sharing bits from another resource. The bitmap must be compatible with the render target for the call to succeed.") ]
        /* voffset &H0018*/ Function CreateSharedBitmap(ByRef riid As Any, ByRef data As Any, ByRef bitmapProperties As Any) As ID2D1Bitmap
        [ Description ("Creates a bitmap brush. The bitmap is scaled, rotated, skewed or tiled to fill or pen a geometry.") ]
        /* voffset &H001C*/ Function CreateBitmapBrush(ByVal bitmap As ID2D1Bitmap, ByRef bitmapBrushProperties As Any, ByRef brushProperties As Any) As ID2D1BitmapBrush
        [ Description ("Creates a new ID2D1SolidColorBrush that can be used to paint areas with a solid color.") ]
        /* voffset &H0020*/ Function CreateSolidColorBrush(ByRef color As D2D1_COLOR_F, ByRef brushProperties As Any) As ID2D1SolidColorBrush
        [ Description ("Creates an ID2D1GradientStopCollection from the specified array of D2D1_GRADIENT_STOP structures.") ]
        /* voffset &H0024*/ Function CreateGradientStopCollection(ByRef gradientStops As D2D1_GRADIENT_STOP, ByVal gradientStopsCount As Long, ByVal colorInterpolationGamma As D2D1_GAMMA, ByVal extendMode As D2D1_EXTEND_MODE) As ID2D1GradientStopCollection
        [ Description ("Creates an ID2D1LinearGradientBrush object for painting areas with a linear gradient.") ]
        /* voffset &H0028*/ Function CreateLinearGradientBrush(ByRef linearGradientBrushProperties As D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES, ByRef brushProperties As Any, ByVal gradientStopCollection As ID2D1GradientStopCollection) As ID2D1LinearGradientBrush
        [ Description ("Creates an ID2D1RadialGradientBrush object that can be used to paint areas with a radial gradient.") ]
        /* voffset &H002C*/ Function CreateRadialGradientBrush(ByRef radialGradientBrushProperties As D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES, ByRef brushProperties As Any, ByVal gradientStopCollection As ID2D1GradientStopCollection) As ID2D1RadialGradientBrush
        [ Description ("Creates a new bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target.") ]
        /* voffset &H0030*/ Function CreateCompatibleRenderTarget(ByRef desiredSize As Any, ByRef desiredPixelSize As Any, ByRef desiredFormat As Any, ByVal Options As D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS) As ID2D1BitmapRenderTarget
        [ Description ("Creates a layer resource that can be used with this render target and its compatible render targets.") ]
        /* voffset &H0034*/ Function CreateLayer(ByRef SIZE As Any) As ID2D1Layer
        [ Description ("Create a mesh that uses triangles to describe a shape.") ]
        /* voffset &H0038*/ Function CreateMesh() As ID2D1Mesh
        [ PreserveSig ]
        [ Description ("Draws a line between the specified points using the specified stroke style.") ]
        /* voffset &H003C*/ Sub DrawLine(ByVal point0_x As Single, ByVal point0_y As Single, ByVal point1_x As Single, ByVal point1_y As Single, ByVal brush As ID2D1Brush, ByVal strokeWidth As Single, ByVal strokeStyle As ID2D1StrokeStyle)
        [ PreserveSig ]
        [ Description ("Draws the outline of a rectangle that has the specified dimensions and stroke style.") ]
        /* voffset &H0040*/ Sub DrawRectangle(ByRef RECT As D2D1_RECT_F, ByVal brush As ID2D1Brush, ByVal strokeWidth As Single, ByVal strokeStyle As ID2D1StrokeStyle)
        [ PreserveSig ]
        [ Description ("Paints the interior of the specified rectangle.") ]
        /* voffset &H0044*/ Sub FillRectangle(ByRef RECT As D2D1_RECT_F, ByVal brush As ID2D1Brush)
        [ PreserveSig ]
        [ Description ("Draws the outline of the specified rounded rectangle using the specified stroke style.") ]
        /* voffset &H0048*/ Sub DrawRoundedRectangle(ByRef roundedRect As D2D1_ROUNDED_RECT, ByVal brush As ID2D1Brush, ByVal strokeWidth As Single, ByVal strokeStyle As ID2D1StrokeStyle)
        [ PreserveSig ]
        [ Description ("Paints the interior of the specified rounded rectangle.") ]
        /* voffset &H004C*/ Sub FillRoundedRectangle(ByRef roundedRect As D2D1_ROUNDED_RECT, ByVal brush As ID2D1Brush)
        [ PreserveSig ]
        [ Description ("Draws the outline of an ellipse with the specified dimensions and stroke.") ]
        /* voffset &H0050*/ Sub DrawEllipse(ByRef ellipse As D2D1_ELLIPSE, ByVal brush As ID2D1Brush, ByVal strokeWidth As Single, ByVal strokeStyle As ID2D1StrokeStyle)
        [ PreserveSig ]
        [ Description ("Paints the interior of the specified ellipse.") ]
        /* voffset &H0054*/ Sub FillEllipse(ByRef ellipse As D2D1_ELLIPSE, ByVal brush As ID2D1Brush)
        [ PreserveSig ]
        [ Description ("Draws the outline of the specified geometry using the specified stroke style.") ]
        /* voffset &H0058*/ Sub DrawGeometry(ByVal geometry As ID2D1Geometry, ByVal brush As ID2D1Brush, ByVal strokeWidth As Single, ByVal strokeStyle As ID2D1StrokeStyle)
        [ PreserveSig ]
        [ Description ("Paints the interior of the specified geometry.") ]
        /* voffset &H005C*/ Sub FillGeometry(ByVal geometry As ID2D1Geometry, ByVal brush As ID2D1Brush, ByVal opacityBrush As ID2D1Brush)
        [ PreserveSig ]
        [ Description ("Paints the interior of the specified mesh.") ]
        /* voffset &H0060*/ Sub FillMesh(ByVal mesh As ID2D1Mesh, ByVal brush As ID2D1Brush)
        [ PreserveSig ]
        [ Description ("Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target.") ]
        /* voffset &H0064*/ Sub FillOpacityMask(ByVal opacityMask As ID2D1Bitmap, ByVal brush As ID2D1Brush, ByVal Content As D2D1_OPACITY_MASK_CONTENT, ByRef destinationRectangle As Any, ByRef sourceRectangle As Any)
        [ PreserveSig ]
        [ Description ("Draws the specified ID2D1Bitmap.") ]
        /* voffset &H0068*/ Sub DrawBitmap(ByVal bitmap As ID2D1Bitmap, ByRef destinationRectangle As Any, ByVal opacity As Single, ByVal InterpolationMode As D2D1_BITMAP_INTERPOLATION_MODE, ByRef sourceRectangle As Any)
        [ PreserveSig ]
        [ Description ("Draws the specified text using the format information provided by an IDWriteTextFormat object.") ]
        /* voffset &H006C*/ Sub DrawText(ByVal string As LongPtr, ByVal stringLength As Long, ByRef textFormat As Any, ByRef layoutRect As D2D1_RECT_F, ByVal defaultForegroundBrush As ID2D1Brush, ByVal Options As D2D1_DRAW_TEXT_OPTIONS, ByVal measuringMode As DWRITE_MEASURING_MODE)
        [ PreserveSig ]
        [ Description ("Draws the formatted text described by the specified IDWriteTextLayout object.") ]
        /* voffset &H0070*/ Sub DrawTextLayout(ByVal originX As Single, ByVal originY As Single, ByRef textLayout As Any, ByVal defaultForegroundBrush As ID2D1Brush, ByVal Options As D2D1_DRAW_TEXT_OPTIONS)
        [ PreserveSig ]
        [ Description ("Draws the specified glyphs.") ]
        /* voffset &H0074*/ Sub DrawGlyphRun(ByVal baselineOriginX As Single, ByVal baselineOriginY As Single, ByRef glyphRun As Any, ByVal foregroundBrush As ID2D1Brush, ByVal measuringMode As DWRITE_MEASURING_MODE)
        [ PreserveSig ]
        [ Description ("Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.") ]
        /* voffset &H0078*/ Sub SetTransform(ByRef transform As D2D1_MATRIX_3X2_F)
        [ PreserveSig ]
        [ Description ("Gets the current transform of the render target.") ]
        /* voffset &H007C*/ Sub GetTransform(ByRef transform As D2D1_MATRIX_3X2_F)
        [ PreserveSig ]
        [ Description ("Sets the antialiasing mode of the render target. The antialiasing mode applies to all subsequent drawing operations, excluding text and glyph drawing operations.") ]
        /* voffset &H0080*/ Sub SetAntialiasMode(ByVal antialiasMode As D2D1_ANTIALIAS_MODE)
        [ PreserveSig ]
        [ Description ("Retrieves the current antialiasing mode for nontext drawing operations.") ]
        /* voffset &H0084*/ Function GetAntialiasMode() As D2D1_ANTIALIAS_MODE
        [ PreserveSig ]
        [ Description ("Specifies the antialiasing mode to use for subsequent text and glyph drawing operations.") ]
        /* voffset &H0088*/ Sub SetTextAntialiasMode(ByVal textAntialiasMode As D2D1_TEXT_ANTIALIAS_MODE)
        [ PreserveSig ]
        [ Description ("Gets the current antialiasing mode for text and glyph drawing operations.") ]
        /* voffset &H008C*/ Function GetTextAntialiasMode() As D2D1_TEXT_ANTIALIAS_MODE
        [ PreserveSig ]
        [ Description ("Specifies text rendering options to be applied to all subsequent text and glyph drawing operations.") ]
        /* voffset &H0090*/ Sub SetTextRenderingParams(ByRef textRenderingParams As Any)
        [ Description ("Retrieves the render target's current text rendering options.") ]
        /* voffset &H0094*/ Function GetTextRenderingParams() As IUnknown
        [ PreserveSig ]
        [ Description ("Specifies a label for subsequent drawing operations.") ]
        /* voffset &H0098*/ Sub SetTags(ByVal tag1 As LongLong, ByVal tag2 As LongLong)
        [ PreserveSig ]
        [ Description ("Gets the label for subsequent drawing operations.") ]
        /* voffset &H009C*/ Sub GetTags(ByRef tag1 As Any, ByRef tag2 As Any)
        [ PreserveSig ]
        [ Description ("Adds the specified layer to the render target so that it receives all subsequent drawing operations until PopLayer is called.") ]
        /* voffset &H00A0*/ Sub PushLayer(ByRef layerParameters As D2D1_LAYER_PARAMETERS, ByVal layer As ID2D1Layer)
        [ PreserveSig ]
        [ Description ("Stops redirecting drawing operations to the layer that is specified by the last PushLayer call.") ]
        /* voffset &H00A4*/ Sub PopLayer()
        [ Description ("Executes all pending drawing commands.") ]
        /* voffset &H00A8*/ Sub Flush(ByRef tag1 As Any, ByRef tag2 As Any)
        [ PreserveSig ]
        [ Description ("Saves the current drawing state to the specified ID2D1DrawingStateBlock.") ]
        /* voffset &H00AC*/ Sub SaveDrawingState(ByVal drawingStateBlock As ID2D1DrawingStateBlock)
        [ PreserveSig ]
        [ Description ("Sets the render target's drawing state to that of the specified ID2D1DrawingStateBlock.") ]
        /* voffset &H00B0*/ Sub RestoreDrawingState(ByVal drawingStateBlock As ID2D1DrawingStateBlock)
        [ PreserveSig ]
        [ Description ("Specifies a rectangle to which all subsequent drawing operations are clipped.") ]
        /* voffset &H00B4*/ Sub PushAxisAlignedClip(ByRef clipRect As D2D1_RECT_F, ByVal antialiasMode As D2D1_ANTIALIAS_MODE)
        [ PreserveSig ]
        [ Description ("Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations.") ]
        /* voffset &H00B8*/ Sub PopAxisAlignedClip()
        [ PreserveSig ]
        [ Description ("Clears the drawing area to the specified color.") ]
        /* voffset &H00BC*/ Sub Clear(ByRef clearColor As Any)
        [ PreserveSig ]
        [ Description ("Initiates drawing on this render target.") ]
        /* voffset &H00C0*/ Sub BeginDraw()
        [ Description ("Ends drawing operations on the render target and indicates the current error state and associated tags.") ]
        /* voffset &H00C4*/ Sub EndDraw(ByRef tag1 As Any, ByRef tag2 As Any)
        [ PreserveSig ]
        [ Description ("Retrieves the pixel format and alpha mode of the render target.") ]
        /* voffset &H00C8*/ Function GetPixelFormat() As D2D1_PIXEL_FORMAT
        [ PreserveSig ]
        [ Description ("Sets the dots per inch (DPI) of the render target.") ]
        /* voffset &H00CC*/ Sub SetDpi(ByVal DpiX As Single, ByVal DpiY As Single)
        [ PreserveSig ]
        [ Description ("Return the render target's dots per inch (DPI).") ]
        /* voffset &H00D0*/ Sub GetDpi(ByRef DpiX As Single, ByRef DpiY As Single)
        [ PreserveSig ]
        [ Description ("Returns the size of the render target in device-independent pixels.") ]
        /* voffset &H00D4*/ Function GetSize() As D2D1_SIZE_F
        [ PreserveSig ]
        [ Description ("Returns the size of the render target in device pixels.") ]
        /* voffset &H00D8*/ Function GetPixelSize() As D2D1_SIZE_U
        [ PreserveSig ]
        [ Description ("Gets the maximum size, in device-dependent units (pixels), of any one bitmap dimension supported by the render target.") ]
        /* voffset &H00DC*/ Function GetMaximumBitmapSize() As Long
        [ PreserveSig ]
        [ Description ("Indicates whether the render target supports the specified properties.") ]
        /* voffset &H00E0*/ Function IsSupported(ByRef renderTargetProperties As D2D1_RENDER_TARGET_PROPERTIES) As Long
    End Interface

    [ InterfaceId ("A2296057-EA42-4099-983B-539FB6505426") ]
    [ Description ("Root bitmap resource, linearly scaled on a draw call.") ]
    [ OleAutomation (False) ]
    Interface ID2D1Bitmap Extends ID2D1Resource
        [ PreserveSig ]
        [ Description ("Returns the size of the bitmap in resolution independent units.") ]
        /* voffset &H0010*/ Function GetSize() As D2D1_SIZE_F
        [ PreserveSig ]
        [ Description ("Returns the size of the bitmap in resolution dependent units, (pixels).") ]
        /* voffset &H0014*/ Function GetPixelSize() As D2D1_SIZE_U
        [ PreserveSig ]
        [ Description ("Retrieve the format of the bitmap.") ]
        /* voffset &H0018*/ Function GetPixelFormat() As D2D1_PIXEL_FORMAT
        [ PreserveSig ]
        [ Description ("Return the DPI of the bitmap.") ]
        /* voffset &H001C*/ Sub GetDpi(ByRef DpiX As Single, ByRef DpiY As Single)
        [ Description ("Copies the specified region from the specified bitmap into the current bitmap.") ]
        /* voffset &H0020*/ Sub CopyFromBitmap(ByRef destPoint As Any, ByVal bitmap As ID2D1Bitmap, ByRef srcRect As Any)
        [ Description ("Copies the specified region from the specified render target into the current bitmap.") ]
        /* voffset &H0024*/ Sub CopyFromRenderTarget(ByRef destPoint As Any, ByVal renderTarget As ID2D1RenderTarget, ByRef srcRect As Any)
        [ Description ("Copies the specified region from memory into the current bitmap.") ]
        /* voffset &H0028*/ Sub CopyFromMemory(ByRef dstRect As Any, ByRef srcData As Any, ByVal pitch As Long)
    End Interface

    [ InterfaceId ("2CD906AA-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("A bitmap brush allows a bitmap to be used to fill a geometry.") ]
    [ OleAutomation (False) ]
    Interface ID2D1BitmapBrush Extends ID2D1Brush
        [ PreserveSig ]
        [ Description ("Sets how the bitmap is to be treated outside of its natural extent on the X axis.") ]
        /* voffset &H0000*/ Sub SetExtendModeX(ByVal extendModeX As D2D1_EXTEND_MODE)
        [ PreserveSig ]
        [ Description ("Sets how the bitmap is to be treated outside of its natural extent on the Y axis.") ]
        /* voffset &H0004*/ Sub SetExtendModeY(ByVal extendModeY As D2D1_EXTEND_MODE)
        [ PreserveSig ]
        [ Description ("Sets the interpolation mode used when this brush is used.") ]
        /* voffset &H0008*/ Sub SetInterpolationMode(ByVal InterpolationMode As D2D1_BITMAP_INTERPOLATION_MODE)
        [ PreserveSig ]
        [ Description ("Sets the bitmap associated as the source of this brush.") ]
        /* voffset &H000C*/ Sub SetBitmap(ByVal bitmap As ID2D1Bitmap)
        [ PreserveSig ]
        [ Description ("Gets the method by which the brush horizontally tiles those areas that extend past its bitmap.") ]
        /* voffset &H0010*/ Function GetExtendModeX() As D2D1_EXTEND_MODE
        [ PreserveSig ]
        [ Description ("Gets the method by which the brush vertically tiles those areas that extend past its bitmap.") ]
        /* voffset &H0014*/ Function GetExtendModeY() As D2D1_EXTEND_MODE
        [ PreserveSig ]
        [ Description ("Gets the interpolation method used when the brush bitmap is scaled or rotated.") ]
        /* voffset &H0018*/ Function GetInterpolationMode() As D2D1_BITMAP_INTERPOLATION_MODE
        [ Description ("Gets the bitmap source that this brush uses to paint.") ]
        /* voffset &H001C*/ Function GetBitmap() As ID2D1Bitmap
    End Interface

    [ InterfaceId ("2CD906A8-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("The root brush interface. All brushes can be used to fill or pen a geometry.") ]
    [ OleAutomation (False) ]
    Interface ID2D1Brush Extends ID2D1Resource
        [ PreserveSig ]
        [ Description ("Sets the opacity for when the brush is drawn over the entire fill of the brush.") ]
        /* voffset &H0010*/ Sub SetOpacity(ByVal opacity As Single)
        [ PreserveSig ]
        [ Description ("Sets the transform that applies to everything drawn by the brush.") ]
        /* voffset &H0014*/ Sub SetTransform(ByRef transform As D2D1_MATRIX_3X2_F)
        [ PreserveSig ]
        [ Description ("Gets the degree of opacity of this brush.") ]
        /* voffset &H0018*/ Function GetOpacity() As Single
        [ PreserveSig ]
        [ Description ("Gets the transform applied to this brush.") ]
        /* voffset &H001C*/ Sub GetTransform(ByRef transform As D2D1_MATRIX_3X2_F)
    End Interface

    [ InterfaceId ("2CD906A9-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Paints an area with a solid color.") ]
    [ OleAutomation (False) ]
    Interface ID2D1SolidColorBrush Extends ID2D1Brush
        [ PreserveSig ]
        [ Description ("Specifies the color of this solid color brush.") ]
        /* voffset &H0020*/ Sub SetColor(ByRef color As D2D1_COLOR_F)
        [ PreserveSig ]
        [ Description ("Retrieves the color of the solid color brush.") ]
        /* voffset &H0024*/ Function GetColor() As D2D1_COLOR_F
    End Interface

    [ InterfaceId ("2CD906A7-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Represents an collection of gradient stops that can then be the source resource for either a linear or radial gradient brush.") ]
    [ OleAutomation (False) ]
    Interface ID2D1GradientStopCollection Extends ID2D1Resource
        [ PreserveSig ]
        [ Description ("Returns the number of stops in the gradient.") ]
        /* voffset &H0010*/ Function GetGradientStopCount() As Long
        [ PreserveSig ]
        [ Description ("Copies the gradient stops from the collection into the caller's interface.") ]
        /* voffset &H0014*/ Sub GetGradientStops(ByRef gradientStops As D2D1_GRADIENT_STOP, ByVal gradientStopsCount As Long)
        [ PreserveSig ]
        [ Description ("Returns whether the interpolation occurs with 1.0 or 2.2 gamma.") ]
        /* voffset &H0018*/ Function GetColorInterpolationGamma() As D2D1_GAMMA
        [ PreserveSig ]
        [ Description ("Indicates the behavior of the gradient outside the normalized gradient range.") ]
        /* voffset &H001C*/ Function GetExtendMode() As D2D1_EXTEND_MODE
    End Interface

    [ InterfaceId ("2CD906AB-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Paints an area with a linear gradient.") ]
    [ OleAutomation (False) ]
    Interface ID2D1LinearGradientBrush Extends ID2D1Brush
        [ PreserveSig ]
        [ Description ("Sets the starting coordinates of the linear gradient in the brush's coordinate space.") ]
        /* voffset &H0020*/ Sub SetStartPoint(ByVal startPointX As Single, ByVal startPointY As Single)
        [ PreserveSig ]
        [ Description ("Sets the end point of the gradient in local coordinate space. This is not influenced by the geometry being filled.") ]
        /* voffset &H0024*/ Sub SetEndPoint(ByVal startPointX As Single, ByVal startPointY As Single)
        [ PreserveSig ]
        [ Description ("Retrieves the starting coordinates of the linear gradient.") ]
        /* voffset &H0028*/ Function GetStartPoint() As D2D1_POINT_2F
        [ PreserveSig ]
        [ Description ("Retrieves the ending coordinates of the linear gradient.") ]
        /* voffset &H002C*/ Function GetEndPoint() As D2D1_POINT_2F
        [ Description ("Retrieves the ID2D1GradientStopCollection associated with this linear gradient brush.") ]
        /* voffset &H0030*/ Function GetGradientStopCollection() As ID2D1GradientStopCollection
    End Interface

    [ InterfaceId ("2CD906AC-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Paints an area with a radial gradient.") ]
    [ OleAutomation (False) ]
    Interface ID2D1RadialGradientBrush Extends ID2D1Brush
        [ PreserveSig ]
        [ Description ("Sets the center of the radial gradient. This will be in local coordinates and will not depend on the geometry being filled.") ]
        /* voffset &H0020*/ Sub SetCenter(ByVal centerX As Single, ByVal centerY As Single)
        [ PreserveSig ]
        [ Description ("Sets offset of the origin relative to the radial gradient center.") ]
        /* voffset &H0024*/ Sub SetGradientOriginOffset(ByVal gradientOriginOffsetX As Single, ByVal gradientOriginOffsetY As Single)
        [ PreserveSig ]
        [ Description ("Specifies the x-radius of the gradient ellipse, in the brush's coordinate space.") ]
        /* voffset &H0028*/ Sub SetRadiusX(ByVal radiusX As Single)
        [ PreserveSig ]
        [ Description ("Specifies the y-radius of the gradient ellipse, in the brush's coordinate space.") ]
        /* voffset &H002C*/ Sub SetRadiusY(ByVal radiusY As Single)
        [ PreserveSig ]
        [ Description ("Retrieves the center of the gradient ellipse.") ]
        /* voffset &H0030*/ Function GetCenter() As D2D1_POINT_2F
        [ PreserveSig ]
        [ Description ("Retrieves the offset of the gradient origin relative to the gradient ellipse's center.") ]
        /* voffset &H0034*/ Function GetGradientOriginOffset() As D2D1_POINT_2F
        [ PreserveSig ]
        [ Description ("Retrieves the x-radius of the gradient ellipse.") ]
        /* voffset &H0038*/ Function GetRadiusX() As Single
        [ PreserveSig ]
        [ Description ("Retrieves the y-radius of the gradient ellipse.") ]
        /* voffset &H003C*/ Function GetRadiusY() As Single
        [ Description ("Retrieves the ID2D1GradientStopCollection associated with this radial gradient brush object.") ]
        /* voffset &H0040*/ Function GetGradientStopCollection() As ID2D1GradientStopCollection
    End Interface

    [ InterfaceId ("2CD90695-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Renders to an intermediate texture created by the CreateCompatibleRenderTarget method.") ]
    [ OleAutomation (False) ]
    Interface ID2D1BitmapRenderTarget Extends ID2D1RenderTarget
        [ Description ("Retrieves the bitmap for this render target. The returned bitmap can be used for drawing operations.") ]
        /* voffset &H00E4*/ Function GetBitmap() As ID2D1Bitmap
    End Interface

    [ InterfaceId ("2CD9069B-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Represents the backing store required to render a layer.") ]
    [ OleAutomation (False) ]
    Interface ID2D1Layer Extends ID2D1Resource
        [ PreserveSig ]
        [ Description ("Gets the size of the layer in device-independent pixels.") ]
        /* voffset &H0010*/ Function GetSize() As D2D1_SIZE_F
    End Interface

    [ InterfaceId ("2CD906C2-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Represents a set of vertices that form a list of triangles.") ]
    [ OleAutomation (False) ]
    Interface ID2D1Mesh Extends ID2D1Resource
        [ Description ("Opens the mesh for population.") ]
        /* voffset &H0010*/ Function Open() As ID2D1TessellationSink
    End Interface

    [ InterfaceId ("2CD90698-12E2-11DC-9FED-001143A055F9") ]
    [ Description ("Renders drawing instructions to a window.") ]
    [ OleAutomation (False) ]
    Interface ID2D1HwndRenderTarget Extends ID2D1RenderTarget
        [ PreserveSig ]
        [ Description ("Indicates whether the HWND associated with this render target is occluded.") ]
        /* voffset &H00E4*/ Function CheckWindowState() As D2D1_WINDOW_STATE
        [ Description ("Changes the size of the render target to the specified pixel size.") ]
        /* voffset &H00E8*/ Sub Resize(ByRef pixelSize As D2D1_SIZE_U)
        [ PreserveSig ]
        [ Description ("Returns the HWND associated with this render target.") ]
        /* voffset &H00EC*/ Function GetHwnd() As LongPtr
    End Interface

    [ InterfaceId ("1C51BC64-DE61-46FD-9899-63A5D8F03950") ]
    [ Description ("Issues drawing commands to a GDI device context.") ]
    [ OleAutomation (False) ]
    Interface ID2D1DCRenderTarget Extends ID2D1RenderTarget
        [ Description ("Binds the render target to the device context to which it issues drawing commands.") ]
        /* voffset &H00E4*/ Sub BindDC(ByVal hdc As LongPtr, ByRef pSubRect As RECT)
    End Interface

    Module D2DConstants
Public Const D2D1_DEFAULT_FLATTENING_TOLERANCE As Single = 0.25
    End Module

    [ InterfaceId ("E0DB51C3-6F77-4BAE-B3D5-E47509B35838") ]
    [ Description ("Provides access to an device context that can accept GDI drawing commands.") ]
    [ OleAutomation (False) ]
    Interface ID2D1GdiInteropRenderTarget Extends IUnknown
        [ Description ("Retrieves the device context associated with this render target.") ]
        /* voffset &H000C*/ Function GetDC(ByVal mode As D2D1_DC_INITIALIZE_MODE) As LongPtr
        [ Description ("Indicates that drawing with the device context retrieved using the GetDC method is finished.") ]
        /* voffset &H0010*/ Sub ReleaseDC(ByRef rect_update As Any)
    End Interface
    
#Region "DXGI"
    [ InterfaceId ("AEC22FB8-76F3-4639-9BE0-28EB43A67A2E") ]
    Interface IDXGIObject Extends stdole.IUnknown
        /* voffset &H000C*/ Sub SetPrivateData(ByRef Name As UUID, ByVal DataSize As Long, ByRef pData As Any)
        /* voffset &H0010*/ Sub SetPrivateDataInterface(ByRef Name As UUID, ByVal pUnknown As IUnknown)
        /* voffset &H0014*/ Sub GetPrivateData(ByRef Name As UUID, ByRef pDataSize As Long, ByRef pData As Any)
        /* voffset &H0018*/ Sub GetParent(ByRef riid As UUID, ByRef ppParent As Any)
    End Interface

    [ InterfaceId ("3D3E0379-F9DE-4D58-BB6C-18D62992F1A6") ]
    Interface IDXGIDeviceSubObject Extends IDXGIObject
        /* voffset &H001C*/ Sub GetDevice(ByRef riid As UUID, ByRef ppDevice As Any)
    End Interface

    [ InterfaceId ("035F3AB4-482E-4E50-B41F-8A7F8BD8960B") ]
    Interface IDXGIResource Extends IDXGIDeviceSubObject
        /* voffset &H0020*/ Sub GetSharedHandle(ByRef pSharedHandle As LongPtr)
        /* voffset &H0024*/ Sub GetUsage(ByRef pUsage As Long)
        /* voffset &H0028*/ Sub SetEvictionPriority(ByVal EvictionPriority As Long)
        /* voffset &H002C*/ Sub GetEvictionPriority(ByRef pEvictionPriority As Long)
    End Interface

    [ InterfaceId ("9D8E1289-D7B3-465F-8126-250E349AF85D") ]
    Interface IDXGIKeyedMutex Extends IDXGIDeviceSubObject
        /* voffset &H0020*/ Sub AcquireSync(ByVal key As LongLong, ByVal dwMilliseconds As Long)
        /* voffset &H0024*/ Sub ReleaseSync(ByVal key As LongLong)
    End Interface

    [ InterfaceId ("CAFCB56C-6AC3-4889-BF47-9E23BBD260EC") ]
    Interface IDXGISurface Extends IDXGIDeviceSubObject
        /* voffset &H0020*/ Sub GetDesc(ByRef pDesc As DXGI_SURFACE_DESC)
        /* voffset &H0024*/ Sub Map(ByRef pLockedRect As DXGI_MAPPED_RECT, ByVal MapFlags As Long)
        /* voffset &H0028*/ Sub Unmap()
    End Interface

    [ InterfaceId ("4AE63092-6327-4C1B-80AE-BFE12EA32B86") ]
    Interface IDXGISurface1 Extends IDXGISurface
        /* voffset &H002C*/ Sub GetDC(ByVal Discard As Long, ByRef phdc As LongPtr)
        /* voffset &H0030*/ Sub ReleaseDC(ByRef pDirtyRect As RECT)
    End Interface

    [ InterfaceId ("2411E7E1-12AC-4CCF-BD14-9798E8534DC0") ]
    Interface IDXGIAdapter Extends IDXGIObject
        /* voffset &H001C*/ Sub EnumOutputs(ByVal Output As Long, ByRef ppOutput As IDXGIOutput)
        /* voffset &H0020*/ Sub GetDesc(ByRef pDesc As DXGI_ADAPTER_DESC)
        /* voffset &H0024*/ Sub CheckInterfaceSupport(ByRef InterfaceName As UUID, ByRef pUMDVersion As LARGE_INTEGER)
    End Interface

    [ InterfaceId ("AE02EEDB-C735-4690-8D52-5A8DC20213AA") ]
    Interface IDXGIOutput Extends IDXGIObject
        /* voffset &H001C*/ Sub GetDesc(ByRef pDesc As DXGI_OUTPUT_DESC)
        /* voffset &H0020*/ Sub GetDisplayModeList(ByVal EnumFormat As DXGI_FORMAT, ByVal flags As Long, ByRef pNumModes As Long, ByRef pDesc As DXGI_MODE_DESC)
        /* voffset &H0024*/ Sub FindClosestMatchingMode(ByRef pModeToMatch As DXGI_MODE_DESC, ByRef pClosestMatch As DXGI_MODE_DESC, ByVal pConcernedDevice As IUnknown)
        /* voffset &H0028*/ Sub WaitForVBlank()
        /* voffset &H002C*/ Sub TakeOwnership(ByVal pDevice As IUnknown, ByVal Exclusive As Long)
        [ PreserveSig ]
        /* voffset &H0030*/ Sub ReleaseOwnership()
        /* voffset &H0034*/ Sub GetGammaControlCapabilities(ByRef pGammaCaps As DXGI_GAMMA_CONTROL_CAPABILITIES)
        /* voffset &H0038*/ Sub SetGammaControl(ByRef pArray As DXGI_GAMMA_CONTROL)
        /* voffset &H003C*/ Sub GetGammaControl(ByRef pArray As DXGI_GAMMA_CONTROL)
        /* voffset &H0040*/ Sub SetDisplaySurface(ByVal pScanoutSurface As IDXGISurface)
        /* voffset &H0044*/ Sub GetDisplaySurfaceData(ByVal pDestination As IDXGISurface)
        /* voffset &H0048*/ Sub GetFrameStatistics(ByRef pStats As DXGI_FRAME_STATISTICS)
    End Interface

    [ InterfaceId ("310D36A0-D2E7-4C0A-AA04-6A9D23B8886A") ]
    Interface IDXGISwapChain Extends IDXGIDeviceSubObject
        /* voffset &H0020*/ Sub Present(ByVal SyncInterval As Long, ByVal flags As Long)
        /* voffset &H0024*/ Sub GetBuffer(ByVal Buffer As Long, ByRef riid As UUID, ByRef ppSurface As Any)
        /* voffset &H0028*/ Sub SetFullscreenState(ByVal FullScreen As Long, ByVal pTarget As IDXGIOutput)
        /* voffset &H002C*/ Sub GetFullscreenState(ByVal pFullscreen As Long, ByRef ppTarget As IDXGIOutput)
        /* voffset &H0030*/ Sub GetDesc(ByRef pDesc As DXGI_SWAP_CHAIN_DESC)
        /* voffset &H0034*/ Sub ResizeBuffers(ByVal BufferCount As Long, ByVal width As Long, ByVal Height As Long, ByVal NewFormat As DXGI_FORMAT, ByVal SwapChainFlags As Long)
        /* voffset &H0038*/ Sub ResizeTarget(ByRef pNewTargetParameters As DXGI_MODE_DESC)
        /* voffset &H003C*/ Sub GetContainingOutput(ByRef ppOutput As IDXGIOutput)
        /* voffset &H0040*/ Sub GetFrameStatistics(ByRef pStats As DXGI_FRAME_STATISTICS)
        /* voffset &H0044*/ Sub GetLastPresentCount(ByRef pLastPresentCount As Long)
    End Interface

    [ InterfaceId ("7B7166EC-21C7-44AE-B21A-C9AE321AE369") ]
    Interface IDXGIFactory Extends IDXGIObject
        /* voffset &H001C*/ Sub EnumAdapters(ByVal Adapter As Long, ByRef ppAdapter As IDXGIAdapter)
        /* voffset &H0020*/ Sub MakeWindowAssociation(ByVal WindowHandle As LongPtr, ByVal flags As Long)
        /* voffset &H0024*/ Sub GetWindowAssociation(ByRef pWindowHandle As LongPtr)
        /* voffset &H0028*/ Sub CreateSwapChain(ByVal pDevice As IUnknown, ByRef pDesc As DXGI_SWAP_CHAIN_DESC, ByRef ppSwapChain As IDXGISwapChain)
        /* voffset &H002C*/ Sub CreateSoftwareAdapter(ByVal Module As LongPtr, ByRef ppAdapter As IDXGIAdapter)
    End Interface

    [ InterfaceId ("54EC77FA-1377-44E6-8C32-88FD5F44C84C") ]
    Interface IDXGIDevice Extends IDXGIObject
        /* voffset &H001C*/ Sub GetAdapter(ByRef pAdapter As IDXGIAdapter)
        /* voffset &H0020*/ Sub CreateSurface(ByRef pDesc As DXGI_SURFACE_DESC, ByVal NumSurfaces As Long, ByVal usage As Long, ByRef pSharedResource As DXGI_SHARED_RESOURCE, ByRef ppSurface As IDXGISurface)
        /* voffset &H0024*/ Sub QueryResourceResidency(ByVal ppResources As IUnknown, ByRef pResidencyStatus As DXGI_RESIDENCY, ByVal NumResources As Long)
        /* voffset &H0028*/ Sub SetGPUThreadPriority(ByVal Priority As Long)
        /* voffset &H002C*/ Sub GetGPUThreadPriority(ByRef pPriority As Long)
    End Interface

    [ InterfaceId ("770AAE78-F26F-4DBA-A829-253C83D1B387") ]
    Interface IDXGIFactory1 Extends IDXGIFactory
        /* voffset &H0030*/ Sub EnumAdapters1(ByVal Adapter As Long, ByRef ppAdapter As IDXGIAdapter1)
        [ PreserveSig ]
        /* voffset &H0034*/ Function IsCurrent() As Long
    End Interface

    [ InterfaceId ("29038F61-3839-4626-91FD-086879011A05") ]
    Interface IDXGIAdapter1 Extends IDXGIAdapter
        /* voffset &H0028*/ Sub GetDesc1(ByRef pDesc As DXGI_ADAPTER_DESC1)
    End Interface

    [ InterfaceId ("77DB970F-6276-48BA-BA28-070143B4392C") ]
    Interface IDXGIDevice1 Extends IDXGIDevice
        /* voffset &H0030*/ Sub SetMaximumFrameLatency(ByVal MaxLatency As Long)
        /* voffset &H0034*/ Sub GetMaximumFrameLatency(ByRef pMaxLatency As Long)
    End Interface

    [ InterfaceId ("EA9DBF1A-C88E-4486-854A-98AA0138F30C") ]
    Interface IDXGIDisplayControl Extends stdole.IUnknown
        [ PreserveSig ]
        /* voffset &H000C*/ Function IsStereoEnabled() As Long
        [ PreserveSig ]
        /* voffset &H0010*/ Sub SetStereoEnabled(ByVal Enabled As Long)
    End Interface

    [ InterfaceId ("191CFAC3-A341-470D-B26E-A864F428319C") ]
    Interface IDXGIOutputDuplication Extends IDXGIObject
        [ PreserveSig ]
        /* voffset &H001C*/ Sub GetDesc(ByRef pDesc As DXGI_OUTDUPL_DESC)
        /* voffset &H0020*/ Sub AcquireNextFrame(ByVal TimeoutInMilliseconds As Long, ByRef pFrameInfo As DXGI_OUTDUPL_FRAME_INFO, ByRef ppDesktopResource As IDXGIResource)
        /* voffset &H0024*/ Sub GetFrameDirtyRects(ByVal DirtyRectsBufferSize As Long, ByRef pDirtyRectsBuffer As RECT, ByRef pDirtyRectsBufferSizeRequired As Long)
        /* voffset &H0028*/ Sub GetFrameMoveRects(ByVal MoveRectsBufferSize As Long, ByRef pMoveRectBuffer As DXGI_OUTDUPL_MOVE_RECT, ByRef pMoveRectsBufferSizeRequired As Long)
        /* voffset &H002C*/ Sub GetFramePointerShape(ByVal PointerShapeBufferSize As Long, ByRef pPointerShapeBuffer As Any, ByRef pPointerShapeBufferSizeRequired As Long, ByRef pPointerShapeInfo As DXGI_OUTDUPL_POINTER_SHAPE_INFO)
        /* voffset &H0030*/ Sub MapDesktopSurface(ByRef pLockedRect As DXGI_MAPPED_RECT)
        /* voffset &H0034*/ Sub UnMapDesktopSurface()
        /* voffset &H0038*/ Sub ReleaseFrame()
    End Interface

    [ InterfaceId ("ABA496DD-B617-4CB8-A866-BC44D7EB1FA2") ]
    Interface IDXGISurface2 Extends IDXGISurface1
        /* voffset &H0034*/ Sub GetResource(ByRef riid As UUID, ByRef ppParentResource As Any, ByRef pSubresourceIndex As Long)
    End Interface

    [ InterfaceId ("30961379-4609-4A41-998E-54FE567EE0C1") ]
    Interface IDXGIResource1 Extends IDXGIResource
        /* voffset &H0030*/ Sub CreateSubresourceSurface(ByVal index As Long, ByRef ppSurface As IDXGISurface2)
        /* voffset &H0034*/ Sub CreateSharedHandle(ByRef pAttributes As SECURITY_ATTRIBUTES, ByVal dwAccess As Long, ByVal lpName As LongPtr, ByRef pHandle As LongPtr)
    End Interface



    [ InterfaceId ("05008617-FBFD-4051-A790-144884B4F6A9") ]
    Interface IDXGIDevice2 Extends IDXGIDevice1
        /* voffset &H0038*/ Sub OfferResources(ByVal NumResources As Long, ByVal ppResources As IDXGIResource, ByVal Priority As DXGI_OFFER_RESOURCE_PRIORITY)
        /* voffset &H003C*/ Sub ReclaimResources(ByVal NumResources As Long, ByVal ppResources As IDXGIResource, ByVal pDiscarded As Long)
        /* voffset &H0040*/ Sub EnqueueSetEvent(ByVal hEvent As LongPtr)
    End Interface

    [ InterfaceId ("790A45F7-0D42-4876-983A-0A55CFE6F4AA") ]
    Interface IDXGISwapChain1 Extends IDXGISwapChain
        /* voffset &H0048*/ Sub GetDesc1(ByRef pDesc As DXGI_SWAP_CHAIN_DESC1)
        /* voffset &H004C*/ Sub GetFullscreenDesc(ByRef pDesc As DXGI_SWAP_CHAIN_FULLSCREEN_DESC)
        /* voffset &H0050*/ Sub GetHwnd(ByRef phwnd As LongPtr)
        /* voffset &H0054*/ Sub GetCoreWindow(ByRef refiid As UUID, ByRef ppunk As Any)
        /* voffset &H0058*/ Sub Present1(ByVal SyncInterval As Long, ByVal PresentFlags As Long, ByRef pPresentParameters As DXGI_PRESENT_PARAMETERS)
        [ PreserveSig ]
        /* voffset &H005C*/ Function IsTemporaryMonoSupported() As Long
        /* voffset &H0060*/ Sub GetRestrictToOutput(ByRef ppRestrictToOutput As IDXGIOutput)
        /* voffset &H0064*/ Sub SetBackgroundColor(ByRef pColor As D3DCOLORVALUE)
        /* voffset &H0068*/ Sub GetBackgroundColor(ByRef pColor As D3DCOLORVALUE)
        /* voffset &H006C*/ Sub SetRotation(ByVal rotation As DXGI_MODE_ROTATION)
        /* voffset &H0070*/ Sub GetRotation(ByRef pRotation As DXGI_MODE_ROTATION)
    End Interface

    [ InterfaceId ("50C83A1C-E072-4C48-87B0-3630FA36A6D0") ]
    Interface IDXGIFactory2 Extends IDXGIFactory1
        [ PreserveSig ]
        /* voffset &H0038*/ Function IsWindowedStereoEnabled() As Long
        /* voffset &H003C*/ Sub CreateSwapChainForHwnd(ByVal pDevice As IUnknown, ByVal hwnd As LongPtr, ByRef pDesc As DXGI_SWAP_CHAIN_DESC1, ByRef pFullscreenDesc As DXGI_SWAP_CHAIN_FULLSCREEN_DESC, ByVal pRestrictToOutput As IDXGIOutput, ByRef ppSwapChain As IDXGISwapChain1)
        /* voffset &H0040*/ Sub CreateSwapChainForCoreWindow(ByVal pDevice As IUnknown, ByVal pWindow As IUnknown, ByRef pDesc As DXGI_SWAP_CHAIN_DESC1, ByVal pRestrictToOutput As IDXGIOutput, ByRef ppSwapChain As IDXGISwapChain1)
        /* voffset &H0044*/ Sub GetSharedResourceAdapterLuid(ByVal hResource As LongPtr, ByRef pLuid As LUID)
        /* voffset &H0048*/ Sub RegisterStereoStatusWindow(ByVal WindowHandle As LongPtr, ByVal wMsg As Long, ByRef pdwCookie As Long)
        /* voffset &H004C*/ Sub RegisterStereoStatusEvent(ByVal hEvent As LongPtr, ByRef pdwCookie As Long)
        [ PreserveSig ]
        /* voffset &H0050*/ Sub UnregisterStereoStatus(ByVal dwCookie As Long)
        /* voffset &H0054*/ Sub RegisterOcclusionStatusWindow(ByVal WindowHandle As LongPtr, ByVal wMsg As Long, ByRef pdwCookie As Long)
        /* voffset &H0058*/ Sub RegisterOcclusionStatusEvent(ByVal hEvent As LongPtr, ByRef pdwCookie As Long)
        [ PreserveSig ]
        /* voffset &H005C*/ Sub UnregisterOcclusionStatus(ByVal dwCookie As Long)
        /* voffset &H0060*/ Sub CreateSwapChainForComposition(ByVal pDevice As IUnknown, ByRef pDesc As DXGI_SWAP_CHAIN_DESC1, ByVal pRestrictToOutput As IDXGIOutput, ByRef ppSwapChain As IDXGISwapChain1)
    End Interface

                                               ' LenB() = &H0130, Len() = &H0130, UDT Alignment = &H0004

    [ InterfaceId ("0AA1AE0A-FA0E-4B84-8644-E05FF8E5ACB5") ]
    Interface IDXGIAdapter2 Extends IDXGIAdapter1
        /* voffset &H002C*/ Sub GetDesc2(ByRef pDesc As DXGI_ADAPTER_DESC2)
    End Interface

    [ InterfaceId ("00CDDEA8-939B-4B83-A340-A685226666CC") ]
    Interface IDXGIOutput1 Extends IDXGIOutput
        /* voffset &H004C*/ Sub GetDisplayModeList1(ByVal EnumFormat As DXGI_FORMAT, ByVal flags As Long, ByRef pNumModes As Long, ByRef pDesc As DXGI_MODE_DESC1)
        /* voffset &H0050*/ Sub FindClosestMatchingMode1(ByRef pModeToMatch As DXGI_MODE_DESC1, ByRef pClosestMatch As DXGI_MODE_DESC1, ByVal pConcernedDevice As IUnknown)
        /* voffset &H0054*/ Sub GetDisplaySurfaceData1(ByVal pDestination As IDXGIResource)
        /* voffset &H0058*/ Sub DuplicateOutput(ByVal pDevice As IUnknown, ByRef ppOutputDuplication As IDXGIOutputDuplication)
    End Interface

    [ InterfaceId ("6007896C-3244-4AFD-BF18-A6D3BEDA5023") ]
    Interface IDXGIDevice3 Extends IDXGIDevice2
        [ PreserveSig ]
        /* voffset &H0044*/ Sub Trim()
    End Interface
	
    [ InterfaceId ("A8BE2AC4-199F-4946-B331-79599FB98DE7") ]
    Interface IDXGISwapChain2 Extends IDXGISwapChain1
        /* voffset &H0074*/ Sub SetSourceSize(ByVal width As Long, ByVal Height As Long)
        /* voffset &H0078*/ Sub GetSourceSize(ByRef pwidth As Long, ByRef pheight As Long)
        /* voffset &H007C*/ Sub SetMaximumFrameLatency(ByVal MaxLatency As Long)
        /* voffset &H0080*/ Sub GetMaximumFrameLatency(ByRef pMaxLatency As Long)
        [ PreserveSig ]
        /* voffset &H0084*/ Function GetFrameLatencyWaitableObject() As Long
        /* voffset &H0088*/ Sub SetMatrixTransform(ByRef pMatrix As DXGI_MATRIX_3X2_F)
        /* voffset &H008C*/ Sub GetMatrixTransform(ByRef pMatrix As DXGI_MATRIX_3X2_F)
    End Interface

    [ InterfaceId ("595E39D1-2724-4663-99B1-DA969DE28364") ]
    Interface IDXGIOutput2 Extends IDXGIOutput1
        [ PreserveSig ]
        /* voffset &H005C*/ Function SupportsOverlays() As Long
    End Interface

    [ InterfaceId ("25483823-CD46-4C7D-86CA-47AA95B837BD") ]
    Interface IDXGIFactory3 Extends IDXGIFactory2
        [ PreserveSig ]
        /* voffset &H0064*/ Function GetCreationFlags() As Long
    End Interface

    [ InterfaceId ("2633066B-4514-4C7A-8FD8-12EA98059D18") ]
    Interface IDXGIDecodeSwapChain Extends stdole.IUnknown
        /* voffset &H000C*/ Sub PresentBuffer(ByVal BufferToPresent As Long, ByVal SyncInterval As Long, ByVal flags As Long)
        /* voffset &H0010*/ Sub SetSourceRect(ByRef prect As RECT)
        /* voffset &H0014*/ Sub SetTargetRect(ByRef prect As RECT)
        /* voffset &H0018*/ Sub SetDestSize(ByVal width As Long, ByVal Height As Long)
        /* voffset &H001C*/ Sub GetSourceRect(ByRef prect As RECT)
        /* voffset &H0020*/ Sub GetTargetRect(ByRef prect As RECT)
        /* voffset &H0024*/ Sub GetDestSize(ByRef pwidth As Long, ByRef pheight As Long)
        /* voffset &H0028*/ Sub SetColorSpace(ByVal ColorSpace As DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS)
        [ PreserveSig ]
        /* voffset &H002C*/ Function GetColorSpace() As DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS
    End Interface

    [ InterfaceId ("41E7D1F2-A591-4F7B-A2E5-FA9C843E1C12") ]
    Interface IDXGIFactoryMedia Extends stdole.IUnknown
        /* voffset &H000C*/ Sub CreateSwapChainForCompositionSurfaceHandle(ByVal pDevice As IUnknown, ByVal hSurface As LongPtr, ByRef pDesc As DXGI_SWAP_CHAIN_DESC1, ByVal pRestrictToOutput As IDXGIOutput, ByRef ppSwapChain As IDXGISwapChain1)
        /* voffset &H0010*/ Sub CreateDecodeSwapChainForCompositionSurfaceHandle(ByVal pDevice As IUnknown, ByVal hSurface As LongPtr, ByRef pDesc As DXGI_DECODE_SWAP_CHAIN_DESC, ByVal pYuvDecodeBuffers As IDXGIResource, ByVal pRestrictToOutput As IDXGIOutput, ByRef ppSwapChain As IDXGIDecodeSwapChain)
    End Interface

    [ InterfaceId ("DD95B90B-F05F-4F6A-BD65-25BFB264BD84") ]
    Interface IDXGISwapChainMedia Extends stdole.IUnknown
        /* voffset &H000C*/ Sub GetFrameStatisticsMedia(ByRef pStats As DXGI_FRAME_STATISTICS_MEDIA)
        /* voffset &H0010*/ Sub SetPresentDuration(ByVal Duration As Long)
        /* voffset &H0014*/ Sub CheckPresentDurationSupport(ByVal DesiredPresentDuration As Long, ByRef pClosestSmallerPresentDuration As Long, ByRef pClosestLargerPresentDuration As Long)
    End Interface

    [ InterfaceId ("8A6BB301-7E7E-41F4-A8E0-5B32F7F99B18") ]
    Interface IDXGIOutput3 Extends IDXGIOutput2
        /* voffset &H0060*/ Sub CheckOverlaySupport(ByVal EnumFormat As DXGI_FORMAT, ByVal pConcernedDevice As IUnknown, ByRef pFlags As Long)
    End Interface

    [ InterfaceId ("94D99BDB-F1F8-4AB0-B236-7DA0170EDAB1") ]
    Interface IDXGISwapChain3 Extends IDXGISwapChain2
        [ PreserveSig ]
        /* voffset &H0090*/ Function GetCurrentBackBufferIndex() As Long
        /* voffset &H0094*/ Sub CheckColorSpaceSupport(ByVal ColorSpace As DXGI_COLOR_SPACE_TYPE, ByRef pColorSpaceSupport As Long)
        /* voffset &H0098*/ Sub SetColorSpace1(ByVal ColorSpace As DXGI_COLOR_SPACE_TYPE)
        /* voffset &H009C*/ Sub ResizeBuffers1(ByVal BufferCount As Long, ByVal width As Long, ByVal Height As Long, ByVal Format As DXGI_FORMAT, ByVal SwapChainFlags As Long, ByRef pCreationNodeMask As Long, ByVal ppPresentQueue As IUnknown)
    End Interface

    [ InterfaceId ("DC7DCA35-2196-414D-9F53-617884032A60") ]
    Interface IDXGIOutput4 Extends IDXGIOutput3
        /* voffset &H0064*/ Sub CheckOverlayColorSpaceSupport(ByVal Format As DXGI_FORMAT, ByVal ColorSpace As DXGI_COLOR_SPACE_TYPE, ByVal pConcernedDevice As IUnknown, ByRef pFlags As Long)
    End Interface

    [ InterfaceId ("1BC6EA02-EF36-464F-BF0C-21CA39E5168A") ]
    Interface IDXGIFactory4 Extends IDXGIFactory3
        /* voffset &H0068*/ Sub EnumAdapterByLuid(ByVal AdapterLuid As LongLong, ByRef riid As UUID, ByRef ppvAdapter As Any)
        /* voffset &H006C*/ Sub EnumWarpAdapter(ByRef riid As UUID, ByRef ppvAdapter As Any)
    End Interface

    [ InterfaceId ("645967A4-1392-4310-A798-8053CE3E93FD") ]
    Interface IDXGIAdapter3 Extends IDXGIAdapter2
        /* voffset &H0030*/ Sub RegisterHardwareContentProtectionTeardownStatusEvent(ByVal hEvent As LongPtr, ByRef pdwCookie As Long)
        [ PreserveSig ]
        /* voffset &H0034*/ Sub UnregisterHardwareContentProtectionTeardownStatus(ByVal dwCookie As Long)
        /* voffset &H0038*/ Sub QueryVideoMemoryInfo(ByVal NodeIndex As Long, ByVal MemorySegmentGroup As DXGI_MEMORY_SEGMENT_GROUP, ByRef pVideoMemoryInfo As DXGI_QUERY_VIDEO_MEMORY_INFO)
        /* voffset &H003C*/ Sub SetVideoMemoryReservation(ByVal NodeIndex As Long, ByVal MemorySegmentGroup As DXGI_MEMORY_SEGMENT_GROUP, ByVal Reservation As LongLong)
        /* voffset &H0040*/ Sub RegisterVideoMemoryBudgetChangeNotificationEvent(ByVal hEvent As LongPtr, ByRef pdwCookie As Long)
        [ PreserveSig ]
        /* voffset &H0044*/ Sub UnregisterVideoMemoryBudgetChangeNotification(ByVal dwCookie As Long)
    End Interface

    [ InterfaceId ("80A07424-AB52-42EB-833C-0C42FD282D98") ]
    Interface IDXGIOutput5 Extends IDXGIOutput4
        /* voffset &H0068*/ Sub DuplicateOutput1(ByVal pDevice As IUnknown, ByVal flags As Long, ByVal SupportedFormatsCount As Long, ByRef pSupportedFormats As DXGI_FORMAT, ByRef ppOutputDuplication As IDXGIOutputDuplication)
    End Interface

    [ InterfaceId ("3D585D5A-BD4A-489E-B1F4-3DBCB6452FFB") ]
    Interface IDXGISwapChain4 Extends IDXGISwapChain3
        /* voffset &H00A0*/ Sub SetHDRMetaData(ByVal type As DXGI_HDR_METADATA_TYPE, ByVal SIZE As Long, ByRef pMetaData As Any)
    End Interface

    [ InterfaceId ("7632E1F5-EE65-4DCA-87FD-84CD75F8838D") ]
    Interface IDXGIFactory5 Extends IDXGIFactory4
        /* voffset &H0070*/ Sub CheckFeatureSupport(ByVal Feature As DXGI_FEATURE, ByRef pFeatureSupportData As Any, ByVal FeatureSupportDataSize As Long)
    End Interface

    [ InterfaceId ("3C8D99D1-4FBF-4181-A82C-AF66BF7BD24E") ]
    Interface IDXGIAdapter4 Extends IDXGIAdapter3
        /* voffset &H0048*/ Sub GetDesc3(ByRef pDesc As DXGI_ADAPTER_DESC3)
    End Interface

    [ InterfaceId ("95B4F95F-D8DA-4CA4-9EE6-3B76D5968A10") ]
    Interface IDXGIDevice4 Extends IDXGIDevice3
        /* voffset &H0048*/ Sub OfferResources1(ByVal NumResources As Long, ByVal ppResources As IDXGIResource, ByVal Priority As DXGI_OFFER_RESOURCE_PRIORITY, ByVal flags As Long)
        /* voffset &H004C*/ Sub ReclaimResources1(ByVal NumResources As Long, ByVal ppResources As IDXGIResource, ByRef pResults As DXGI_RECLAIM_RESOURCE_RESULTS)
    End Interface


    [ InterfaceId ("068346E8-AAEC-4B84-ADD7-137F513F77A1") ]
    Interface IDXGIOutput6 Extends IDXGIOutput5
        /* voffset &H006C*/ Sub GetDesc1(ByRef pDesc As DXGI_OUTPUT_DESC1)
        /* voffset &H0070*/ Sub CheckHardwareCompositionSupport(ByRef pFlags As Long)
    End Interface
#End Region

#Region "DCOMP"

    [ InterfaceId ("C37EA93A-E7AA-450D-B16F-9746CB0407F3") ]
    Interface IDCompositionDevice Extends stdole.IUnknown
        /* voffset &H000C*/ Sub Commit()
        /* voffset &H0010*/ Sub WaitForCommitCompletion()
        /* voffset &H0014*/ Sub GetFrameStatistics(ByRef statistics As DCOMPOSITION_FRAME_STATISTICS)
        /* voffset &H0018*/ Sub CreateTargetForHwnd(ByVal hwnd As LongPtr, ByVal topmost As Long, ByRef target As IDCompositionTarget)
        /* voffset &H001C*/ Sub CreateVisual(ByRef visual As IDCompositionVisual)
        /* voffset &H0020*/ Sub CreateSurface(ByVal width As Long, ByVal Height As Long, ByVal PixelFormat As DXGI_FORMAT, ByVal AlphaMode As DXGI_ALPHA_MODE, ByRef surface As IDCompositionSurface)
        /* voffset &H0024*/ Sub CreateVirtualSurface(ByVal initialWidth As Long, ByVal initialHeight As Long, ByVal PixelFormat As DXGI_FORMAT, ByVal AlphaMode As DXGI_ALPHA_MODE, ByRef virtualSurface As IDCompositionVirtualSurface)
        /* voffset &H0028*/ Sub CreateSurfaceFromHandle(ByVal Handle As LongPtr, ByRef surface As IUnknown)
        /* voffset &H002C*/ Sub CreateSurfaceFromHwnd(ByVal hwnd As LongPtr, ByRef surface As IUnknown)
        /* voffset &H0030*/ Sub CreateTranslateTransform(ByRef translateTransform As IDCompositionTranslateTransform)
        /* voffset &H0034*/ Sub CreateScaleTransform(ByRef scaleTransform As IDCompositionScaleTransform)
        /* voffset &H0038*/ Sub CreateRotateTransform(ByRef rotateTransform As IDCompositionRotateTransform)
        /* voffset &H003C*/ Sub CreateSkewTransform(ByRef skewTransform As IDCompositionSkewTransform)
        /* voffset &H0040*/ Sub CreateMatrixTransform(ByRef matrixTransform As IDCompositionMatrixTransform)
        /* voffset &H0044*/ Sub CreateTransformGroup(ByVal transforms As LongPtr, ByVal Elements As Long, ByRef transformGroup As IDCompositionTransform)
        /* voffset &H0048*/ Sub CreateTranslateTransform3D(ByRef translateTransform3D As IDCompositionTranslateTransform3D)
        /* voffset &H004C*/ Sub CreateScaleTransform3D(ByRef scaleTransform3D As IDCompositionScaleTransform3D)
        /* voffset &H0050*/ Sub CreateRotateTransform3D(ByRef rotateTransform3D As IDCompositionRotateTransform3D)
        /* voffset &H0054*/ Sub CreateMatrixTransform3D(ByRef matrixTransform3D As IDCompositionMatrixTransform3D)
        /* voffset &H0058*/ Sub CreateTransform3DGroup(ByVal transforms3D As LongPtr, ByVal Elements As Long, ByRef transform3DGroup As IDCompositionTransform3D)
        /* voffset &H005C*/ Sub CreateEffectGroup(ByRef effectGroup As IDCompositionEffectGroup)
        /* voffset &H0060*/ Sub CreateRectangleClip(ByRef clip As IDCompositionRectangleClip)
        /* voffset &H0064*/ Sub CreateAnimation(ByRef Animation As IDCompositionAnimation)
        /* voffset &H0068*/ Sub CheckDeviceState(ByVal pfValid As Long)
    End Interface

    [ InterfaceId ("EACDD04C-117E-4E17-88F4-D1B12B0E3D89") ]
    Interface IDCompositionTarget Extends stdole.IUnknown
        /* voffset &H000C*/ Sub SetRoot(ByVal visual As IDCompositionVisual)
    End Interface


    [ InterfaceId ("4D93059D-097B-4651-9A60-F0F25116E2F3") ]
    Interface IDCompositionVisual Extends stdole.IUnknown
        /* voffset &H000C*/ Sub SetOffsetX(ByVal offsetX As Single)
        /* voffset &H0010*/ Sub SetOffsetX_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0014*/ Sub SetOffsetY(ByVal offsetY As Single)
        /* voffset &H0018*/ Sub SetOffsetY_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H001C*/ Sub SetTransform(ByRef matrix As D2D_MATRIX_3X2_F)
        /* voffset &H0020*/ Sub SetTransform_T(ByVal transform As IDCompositionTransform)
        /* voffset &H0024*/ Sub SetTransformParent(ByVal visual As IDCompositionVisual)
        /* voffset &H0028*/ Sub SetEffect(ByVal effect As IDCompositionEffect)
        /* voffset &H002C*/ Sub SetBitmapInterpolationMode(ByVal InterpolationMode As DCOMPOSITION_BITMAP_INTERPOLATION_MODE)
        /* voffset &H0030*/ Sub SetBorderMode(ByVal borderMode As DCOMPOSITION_BORDER_MODE)
        /* voffset &H0034*/ Sub SetClipR(ByRef RECT As D2D_RECT_F)
        /* voffset &H0038*/ Sub SetClip(ByVal clip As IDCompositionClip)
        /* voffset &H003C*/ Sub SetContent(ByVal Content As IUnknown)
        /* voffset &H0040*/ Sub AddVisual(ByVal visual As IDCompositionVisual, ByVal insertAbove As Long, ByVal referenceVisual As IDCompositionVisual)
        /* voffset &H0044*/ Sub RemoveVisual(ByVal visual As IDCompositionVisual)
        /* voffset &H0048*/ Sub RemoveAllVisuals()
        /* voffset &H004C*/ Sub SetCompositeMode(ByVal compositeMode As DCOMPOSITION_COMPOSITE_MODE)
    End Interface

    [ InterfaceId ("EC81B08F-BFCB-4E8D-B193-A915587999E8") ]
    Interface IDCompositionEffect Extends stdole.IUnknown
    End Interface

    [ InterfaceId ("71185722-246B-41F2-AAD1-0443F7F4BFC2") ]
    Interface IDCompositionTransform3D Extends IDCompositionEffect
    End Interface

    [ InterfaceId ("FD55FAA7-37E0-4C20-95D2-9BE45BC33F55") ]
    Interface IDCompositionTransform Extends IDCompositionTransform3D
    End Interface

    [ InterfaceId ("06791122-C6F0-417D-8323-269E987F5954") ]
    Interface IDCompositionTranslateTransform Extends IDCompositionTransform
        /* voffset &H000C*/ Sub SetOffsetX(ByVal offsetX As Single)
        /* voffset &H0010*/ Sub SetOffsetX_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0014*/ Sub SetOffsetY(ByVal offsetY As Single)
        /* voffset &H0018*/ Sub SetOffsetY_A(ByVal Animation As IDCompositionAnimation)
    End Interface

    [ InterfaceId ("71FDE914-40EF-45EF-BD51-68B037C339F9") ]
    Interface IDCompositionScaleTransform Extends IDCompositionTransform
        /* voffset &H000C*/ Sub SetScaleX(ByVal scaleX As Single)
        /* voffset &H0010*/ Sub SetScaleX_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0014*/ Sub SetScaleY(ByVal scaleY As Single)
        /* voffset &H0018*/ Sub SetScaleY_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H001C*/ Sub SetCenterX(ByVal centerX As Single)
        /* voffset &H0020*/ Sub SetCenterX_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0024*/ Sub SetCenterY(ByVal centerY As Single)
        /* voffset &H0028*/ Sub SetCenterY_A(ByVal Animation As IDCompositionAnimation)
    End Interface

    [ InterfaceId ("641ED83C-AE96-46C5-90DC-32774CC5C6D5") ]
    Interface IDCompositionRotateTransform Extends IDCompositionTransform
        /* voffset &H000C*/ Sub SetAngle(ByVal angle As Single)
        /* voffset &H0010*/ Sub SetAngle_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0014*/ Sub SetCenterX(ByVal centerX As Single)
        /* voffset &H0018*/ Sub SetCenterX_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H001C*/ Sub SetCenterY(ByVal centerY As Single)
        /* voffset &H0020*/ Sub SetCenterY_A(ByVal Animation As IDCompositionAnimation)
    End Interface

    [ InterfaceId ("E57AA735-DCDB-4C72-9C61-0591F58889EE") ]
    Interface IDCompositionSkewTransform Extends IDCompositionTransform
        /* voffset &H000C*/ Sub SetAngleX(ByVal angleX As Single)
        /* voffset &H0010*/ Sub SetAngleX_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0014*/ Sub SetAngleY(ByVal angleY As Single)
        /* voffset &H0018*/ Sub SetAngleY_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H001C*/ Sub SetCenterX(ByVal centerX As Single)
        /* voffset &H0020*/ Sub SetCenterX_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0024*/ Sub SetCenterY(ByVal centerY As Single)
        /* voffset &H0028*/ Sub SetCenterY_A(ByVal Animation As IDCompositionAnimation)
    End Interface

    [ InterfaceId ("16CDFF07-C503-419C-83F2-0965C7AF1FA6") ]
    Interface IDCompositionMatrixTransform Extends IDCompositionTransform
        /* voffset &H000C*/ Sub SetMatrix(ByRef matrix As D2D_MATRIX_3X2_F)
        /* voffset &H0010*/ Sub SetMatrixElement(ByVal Row As Long, ByVal Column As Long, ByVal Value As Single)
        /* voffset &H0014*/ Sub SetMatrixElement_A(ByVal Row As Long, ByVal Column As Long, ByVal Animation As IDCompositionAnimation)
    End Interface

    [ InterfaceId ("A7929A74-E6B2-4BD6-8B95-4040119CA34D") ]
    Interface IDCompositionEffectGroup Extends IDCompositionEffect
        /* voffset &H000C*/ Sub SetOpacity(ByVal opacity As Single)
        /* voffset &H0010*/ Sub SetOpacity_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0014*/ Sub SetTransform3D(ByVal transform3D As IDCompositionTransform3D)
    End Interface

    [ InterfaceId ("91636D4B-9BA1-4532-AAF7-E3344994D788") ]
    Interface IDCompositionTranslateTransform3D Extends IDCompositionTransform3D
        /* voffset &H000C*/ Sub SetOffsetX(ByVal offsetX As Single)
        /* voffset &H0010*/ Sub SetOffsetX_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0014*/ Sub SetOffsetY(ByVal offsetY As Single)
        /* voffset &H0018*/ Sub SetOffsetY_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H001C*/ Sub SetOffsetZ(ByVal offsetZ As Single)
        /* voffset &H0020*/ Sub SetOffsetZ_A(ByVal Animation As IDCompositionAnimation)
    End Interface

    [ InterfaceId ("2A9E9EAD-364B-4B15-A7C4-A1997F78B389") ]
    Interface IDCompositionScaleTransform3D Extends IDCompositionTransform3D
        /* voffset &H000C*/ Sub SetScaleX(ByVal scaleX As Single)
        /* voffset &H0010*/ Sub SetScaleX_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0014*/ Sub SetScaleY(ByVal scaleY As Single)
        /* voffset &H0018*/ Sub SetScaleY_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H001C*/ Sub SetScaleZ(ByVal scaleZ As Single)
        /* voffset &H0020*/ Sub SetScaleZ_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0024*/ Sub SetCenterX(ByVal centerX As Single)
        /* voffset &H0028*/ Sub SetCenterX_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H002C*/ Sub SetCenterY(ByVal centerY As Single)
        /* voffset &H0030*/ Sub SetCenterY_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0034*/ Sub SetCenterZ(ByVal centerZ As Single)
        /* voffset &H0038*/ Sub SetCenterZ_A(ByVal Animation As IDCompositionAnimation)
    End Interface

    [ InterfaceId ("D8F5B23F-D429-4A91-B55A-D2F45FD75B18") ]
    Interface IDCompositionRotateTransform3D Extends IDCompositionTransform3D
        /* voffset &H000C*/ Sub SetAngle(ByVal angle As Single)
        /* voffset &H0010*/ Sub SetAngle_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0014*/ Sub SetAxisX(ByVal axisX As Single)
        /* voffset &H0018*/ Sub SetAxisX_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H001C*/ Sub SetAxisY(ByVal axisY As Single)
        /* voffset &H0020*/ Sub SetAxisY_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0024*/ Sub SetAxisZ(ByVal axisZ As Single)
        /* voffset &H0028*/ Sub SetAxisZ_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H002C*/ Sub SetCenterX(ByVal centerX As Single)
        /* voffset &H0030*/ Sub SetCenterX_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0034*/ Sub SetCenterY(ByVal centerY As Single)
        /* voffset &H0038*/ Sub SetCenterY_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H003C*/ Sub SetCenterZ(ByVal centerZ As Single)
        /* voffset &H0040*/ Sub SetCenterZ_A(ByVal Animation As IDCompositionAnimation)
    End Interface
                                              ' LenB() = &H0018, Len() = &H0018, UDT Alignment = &H0004

    [ InterfaceId ("4B3363F0-643B-41B7-B6E0-CCF22D34467C") ]
    Interface IDCompositionMatrixTransform3D Extends IDCompositionTransform3D
        /* voffset &H000C*/ Sub SetMatrix(ByRef matrix As D3DMATRIX)
        /* voffset &H0010*/ Sub SetMatrixElement(ByVal Row As Long, ByVal Column As Long, ByVal Value As Single)
        /* voffset &H0014*/ Sub SetMatrixElement_A(ByVal Row As Long, ByVal Column As Long, ByVal Animation As IDCompositionAnimation)
    End Interface

    [ InterfaceId ("64AC3703-9D3F-45EC-A109-7CAC0E7A13A7") ]
    Interface IDCompositionClip Extends stdole.IUnknown
    End Interface

    [ InterfaceId ("9842AD7D-D9CF-4908-AED7-48B51DA5E7C2") ]
    Interface IDCompositionRectangleClip Extends IDCompositionClip
        /* voffset &H000C*/ Sub SetLeft(ByVal Left As Single)
        /* voffset &H0010*/ Sub SetLeft_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0014*/ Sub SetTop(ByVal Top As Single)
        /* voffset &H0018*/ Sub SetTop_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H001C*/ Sub SetRight(ByVal Right As Single)
        /* voffset &H0020*/ Sub SetRight_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0024*/ Sub SetBottom(ByVal Bottom As Single)
        /* voffset &H0028*/ Sub SetBottom_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H002C*/ Sub SetTopLeftRadiusX(ByVal radius As Single)
        /* voffset &H0030*/ Sub SetTopLeftRadiusX_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0034*/ Sub SetTopLeftRadiusY(ByVal radius As Single)
        /* voffset &H0038*/ Sub SetTopLeftRadiusY_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H003C*/ Sub SetTopRightRadiusX(ByVal radius As Single)
        /* voffset &H0040*/ Sub SetTopRightRadiusX_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0044*/ Sub SetTopRightRadiusY(ByVal radius As Single)
        /* voffset &H0048*/ Sub SetTopRightRadiusY_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H004C*/ Sub SetBottomLeftRadiusX(ByVal radius As Single)
        /* voffset &H0050*/ Sub SetBottomLeftRadiusX_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0054*/ Sub SetBottomLeftRadiusY(ByVal radius As Single)
        /* voffset &H0058*/ Sub SetBottomLeftRadiusY_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H005C*/ Sub SetBottomRightRadiusX(ByVal radius As Single)
        /* voffset &H0060*/ Sub SetBottomRightRadiusX_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0064*/ Sub SetBottomRightRadiusY(ByVal radius As Single)
        /* voffset &H0068*/ Sub SetBottomRightRadiusY_A(ByVal Animation As IDCompositionAnimation)
    End Interface

    [ InterfaceId ("BB8A4953-2C99-4F5A-96F5-4819027FA3AC") ]
    Interface IDCompositionSurface Extends stdole.IUnknown
        /* voffset &H000C*/ Sub BeginDraw(ByRef updateRect As RECT, ByRef iid As UUID, ByRef updateObject As Any, ByRef updateOffset As POINT)
        /* voffset &H0010*/ Sub EndDraw()
        /* voffset &H0014*/ Sub SuspendDraw()
        /* voffset &H0018*/ Sub ResumeDraw()
        /* voffset &H001C*/ Sub Scroll(ByRef scrollRect As RECT, ByRef clipRect As RECT, ByVal offsetX As Long, ByVal offsetY As Long)
    End Interface

    [ InterfaceId ("AE471C51-5F53-4A24-8D3E-D0C39C30B3F0") ]
    Interface IDCompositionVirtualSurface Extends IDCompositionSurface
        /* voffset &H0020*/ Sub Resize(ByVal width As Long, ByVal Height As Long)
        /* voffset &H0024*/ Sub Trim(ByRef rectangles As RECT, ByVal Count As Long)
    End Interface

    [ InterfaceId ("75F6468D-1B8E-447C-9BC6-75FEA80B5B25") ]
    Interface IDCompositionDevice2 Extends stdole.IUnknown
        /* voffset &H000C*/ Sub Commit()
        /* voffset &H0010*/ Sub WaitForCommitCompletion()
        /* voffset &H0014*/ Sub GetFrameStatistics(ByRef statistics As DCOMPOSITION_FRAME_STATISTICS)
        /* voffset &H0018*/ Sub CreateVisual(ByRef visual As IDCompositionVisual2)
        /* voffset &H001C*/ Sub CreateSurfaceFactory(ByVal renderingDevice As IUnknown, ByRef surfaceFactory As IDCompositionSurfaceFactory)
        /* voffset &H0020*/ Sub CreateSurface(ByVal width As Long, ByVal Height As Long, ByVal PixelFormat As DXGI_FORMAT, ByVal AlphaMode As DXGI_ALPHA_MODE, ByRef surface As IDCompositionSurface)
        /* voffset &H0024*/ Sub CreateVirtualSurface(ByVal initialWidth As Long, ByVal initialHeight As Long, ByVal PixelFormat As DXGI_FORMAT, ByVal AlphaMode As DXGI_ALPHA_MODE, ByRef virtualSurface As IDCompositionVirtualSurface)
        /* voffset &H0028*/ Sub CreateTranslateTransform(ByRef translateTransform As IDCompositionTranslateTransform)
        /* voffset &H002C*/ Sub CreateScaleTransform(ByRef scaleTransform As IDCompositionScaleTransform)
        /* voffset &H0030*/ Sub CreateRotateTransform(ByRef rotateTransform As IDCompositionRotateTransform)
        /* voffset &H0034*/ Sub CreateSkewTransform(ByRef skewTransform As IDCompositionSkewTransform)
        /* voffset &H0038*/ Sub CreateMatrixTransform(ByRef matrixTransform As IDCompositionMatrixTransform)
        /* voffset &H003C*/ Sub CreateTransformGroup(ByVal transforms As LongPtr, ByVal Elements As Long, ByRef transformGroup As IDCompositionTransform)
        /* voffset &H0040*/ Sub CreateTranslateTransform3D(ByRef translateTransform3D As IDCompositionTranslateTransform3D)
        /* voffset &H0044*/ Sub CreateScaleTransform3D(ByRef scaleTransform3D As IDCompositionScaleTransform3D)
        /* voffset &H0048*/ Sub CreateRotateTransform3D(ByRef rotateTransform3D As IDCompositionRotateTransform3D)
        /* voffset &H004C*/ Sub CreateMatrixTransform3D(ByRef matrixTransform3D As IDCompositionMatrixTransform3D)
        /* voffset &H0050*/ Sub CreateTransform3DGroup(ByVal transforms3D As LongPtr, ByVal Elements As Long, ByRef transform3DGroup As IDCompositionTransform3D)
        /* voffset &H0054*/ Sub CreateEffectGroup(ByRef effectGroup As IDCompositionEffectGroup)
        /* voffset &H0058*/ Sub CreateRectangleClip(ByRef clip As IDCompositionRectangleClip)
        /* voffset &H005C*/ Sub CreateAnimation(ByRef Animation As IDCompositionAnimation)
    End Interface

    [ InterfaceId ("5F4633FE-1E08-4CB8-8C75-CE24333F5602") ]
    Interface IDCompositionDesktopDevice Extends IDCompositionDevice2
        /* voffset &H0060*/ Sub CreateTargetForHwnd(ByVal hwnd As LongPtr, ByVal topmost As Long, ByRef target As IDCompositionTarget)
        /* voffset &H0064*/ Sub CreateSurfaceFromHandle(ByVal Handle As LongPtr, ByRef surface As IUnknown)
        /* voffset &H0068*/ Sub CreateSurfaceFromHwnd(ByVal hwnd As LongPtr, ByRef surface As IUnknown)
    End Interface

    [ InterfaceId ("A1A3C64A-224F-4A81-9773-4F03A89D3C6C") ]
    Interface IDCompositionDeviceDebug Extends stdole.IUnknown
        /* voffset &H000C*/ Sub EnableDebugCounters()
        /* voffset &H0010*/ Sub DisableDebugCounters()
    End Interface

    [ InterfaceId ("E334BC12-3937-4E02-85EB-FCF4EB30D2C8") ]
    Interface IDCompositionSurfaceFactory Extends stdole.IUnknown
        /* voffset &H000C*/ Sub CreateSurface(ByVal width As Long, ByVal Height As Long, ByVal PixelFormat As DXGI_FORMAT, ByVal AlphaMode As DXGI_ALPHA_MODE, ByRef surface As IDCompositionSurface)
        /* voffset &H0010*/ Sub CreateVirtualSurface(ByVal initialWidth As Long, ByVal initialHeight As Long, ByVal PixelFormat As DXGI_FORMAT, ByVal AlphaMode As DXGI_ALPHA_MODE, ByRef virtualSurface As IDCompositionVirtualSurface)
    End Interface

    [ InterfaceId ("E8DE1639-4331-4B26-BC5F-6A321D347A85") ]
    Interface IDCompositionVisual2 Extends IDCompositionVisual
        /* voffset &H0050*/ Sub SetOpacityMode(ByVal mode As DCOMPOSITION_OPACITY_MODE)
        /* voffset &H0054*/ Sub SetBackFaceVisibility(ByVal visibility As DCOMPOSITION_BACKFACE_VISIBILITY)
    End Interface

    [ InterfaceId ("FED2B808-5EB4-43A0-AEA3-35F65280F91B") ]
    Interface IDCompositionVisualDebug Extends IDCompositionVisual2
        /* voffset &H0058*/ Sub EnableHeatMap(ByRef color As D2D1_COLOR_F)
        /* voffset &H005C*/ Sub DisableHeatMap()
        /* voffset &H0060*/ Sub EnableRedrawRegions()
        /* voffset &H0064*/ Sub DisableRedrawRegions()
    End Interface


    [ InterfaceId ("2775F462-B6C1-4015-B0BE-B3E7D6A4976D") ]
    Interface IDCompositionVisual3 Extends IDCompositionVisualDebug
        /* voffset &H0068*/ Sub SetDepthMode(ByVal mode As DCOMPOSITION_DEPTH_MODE)
        /* voffset &H006C*/ Sub SetOffsetZ(ByVal offsetZ As Single)
        /* voffset &H0070*/ Sub SetOffsetZ_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0074*/ Sub SetOpacity(ByVal opacity As Single)
        /* voffset &H0078*/ Sub SetOpacity_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H007C*/ Sub SetTransform(ByRef matrix As D2D_MATRIX_4X4_F)
        /* voffset &H0080*/ Sub SetTransform_T(ByVal transform As IDCompositionTransform3D)
        /* voffset &H0084*/ Sub SetVisible(ByVal Visible As Long)
    End Interface

    [ InterfaceId ("0987CB06-F916-48BF-8D35-CE7641781BD9") ]
    Interface IDCompositionDevice3 Extends IDCompositionDevice2
        /* voffset &H0060*/ Sub CreateGaussianBlurEffect(ByRef gaussianBlurEffect As IDCompositionGaussianBlurEffect)
        /* voffset &H0064*/ Sub CreateBrightnessEffect(ByRef brightnessEffect As IDCompositionBrightnessEffect)
        /* voffset &H0068*/ Sub CreateColorMatrixEffect(ByRef colorMatrixEffect As IDCompositionColorMatrixEffect)
        /* voffset &H006C*/ Sub CreateShadowEffect(ByRef shadowEffect As IDCompositionShadowEffect)
        /* voffset &H0070*/ Sub CreateHueRotationEffect(ByRef hueRotationEffect As IDCompositionHueRotationEffect)
        /* voffset &H0074*/ Sub CreateSaturationEffect(ByRef saturationEffect As IDCompositionSaturationEffect)
        /* voffset &H0078*/ Sub CreateTurbulenceEffect(ByRef turbulenceEffect As IDCompositionTurbulenceEffect)
        /* voffset &H007C*/ Sub CreateLinearTransferEffect(ByRef linearTransferEffect As IDCompositionLinearTransferEffect)
        /* voffset &H0080*/ Sub CreateTableTransferEffect(ByRef tableTransferEffect As IDCompositionTableTransferEffect)
        /* voffset &H0084*/ Sub CreateCompositeEffect(ByRef compositeEffect As IDCompositionCompositeEffect)
        /* voffset &H0088*/ Sub CreateBlendEffect(ByRef blendEffect As IDCompositionBlendEffect)
        /* voffset &H008C*/ Sub CreateArithmeticCompositeEffect(ByRef arithmeticCompositeEffect As IDCompositionArithmeticCompositeEffect)
        /* voffset &H0090*/ Sub CreateAffineTransform2DEffect(ByRef affineTransform2dEffect As IDCompositionAffineTransform2DEffect)
    End Interface

    [ InterfaceId ("30C421D5-8CB2-4E9F-B133-37BE270D4AC2") ]
    Interface IDCompositionFilterEffect Extends IDCompositionEffect
        /* voffset &H000C*/ Sub SetInput(ByVal index As Long, ByVal input As IUnknown, ByVal flags As Long)
    End Interface

    [ InterfaceId ("45D4D0B7-1BD4-454E-8894-2BFA68443033") ]
    Interface IDCompositionGaussianBlurEffect Extends IDCompositionFilterEffect
        /* voffset &H0010*/ Sub SetStandardDeviation(ByVal amount As Single)
        /* voffset &H0014*/ Sub SetStandardDeviation_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0018*/ Sub SetBorderMode(ByVal mode As D2D1_BORDER_MODE)
    End Interface

    [ InterfaceId ("6027496E-CB3A-49AB-934F-D798DA4F7DA6") ]
    Interface IDCompositionBrightnessEffect Extends IDCompositionFilterEffect
        /* voffset &H0010*/ Sub SetWhitePoint(ByRef WhitePoint As D2D1_VECTOR_2F)
        /* voffset &H0014*/ Sub SetBlackPoint(ByRef blackPoint As D2D1_VECTOR_2F)
        /* voffset &H0018*/ Sub SetWhitePointX(ByVal whitePointX As Single)
        /* voffset &H001C*/ Sub SetWhitePointX_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0020*/ Sub SetWhitePointY(ByVal whitePointY As Single)
        /* voffset &H0024*/ Sub SetWhitePointY_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0028*/ Sub SetBlackPointX(ByVal blackPointX As Single)
        /* voffset &H002C*/ Sub SetBlackPointX_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0030*/ Sub SetBlackPointY(ByVal blackPointY As Single)
        /* voffset &H0034*/ Sub SetBlackPointY_A(ByVal Animation As IDCompositionAnimation)
    End Interface

    [ InterfaceId ("C1170A22-3CE2-4966-90D4-55408BFC84C4") ]
    Interface IDCompositionColorMatrixEffect Extends IDCompositionFilterEffect
        /* voffset &H0010*/ Sub SetMatrix(ByRef matrix As D2D_MATRIX_5X4_F)
        /* voffset &H0014*/ Sub SetMatrixElement(ByVal Row As Long, ByVal Column As Long, ByVal Value As Single)
        /* voffset &H0018*/ Sub SetMatrixElementv(ByVal Row As Long, ByVal Column As Long, ByVal Animation As IDCompositionAnimation)
        /* voffset &H001C*/ Sub SetAlphaMode(ByVal mode As D2D1_COLORMATRIX_ALPHA_MODE)
        /* voffset &H0020*/ Sub SetClampOutput(ByVal clamp As Long)
    End Interface

    [ InterfaceId ("4AD18AC0-CFD2-4C2F-BB62-96E54FDB6879") ]
    Interface IDCompositionShadowEffect Extends IDCompositionFilterEffect
        /* voffset &H0010*/ Sub SetStandardDeviation(ByVal amount As Single)
        /* voffset &H0014*/ Sub SetStandardDeviation_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0018*/ Sub SetColor(ByRef color As D2D_VECTOR_4F)
        /* voffset &H001C*/ Sub SetRed(ByVal amount As Single)
        /* voffset &H0020*/ Sub SetRed_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0024*/ Sub SetGreen(ByVal amount As Single)
        /* voffset &H0028*/ Sub SetGreen_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H002C*/ Sub SetBlue(ByVal amount As Single)
        /* voffset &H0030*/ Sub SetBlue_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0034*/ Sub SetAlpha(ByVal amount As Single)
        /* voffset &H0038*/ Sub SetAlpha_A(ByVal Animation As IDCompositionAnimation)
    End Interface

    [ InterfaceId ("6DB9F920-0770-4781-B0C6-381912F9D167") ]
    Interface IDCompositionHueRotationEffect Extends IDCompositionFilterEffect
        /* voffset &H0010*/ Sub SetAngle(ByVal amountDegrees As Single)
        /* voffset &H0014*/ Sub SetAngle_A(ByVal Animation As IDCompositionAnimation)
    End Interface

    [ InterfaceId ("A08DEBDA-3258-4FA4-9F16-9174D3FE93B1") ]
    Interface IDCompositionSaturationEffect Extends IDCompositionFilterEffect
        /* voffset &H0010*/ Sub SetSaturation(ByVal ratio As Single)
        /* voffset &H0014*/ Sub SetSaturation_A(ByVal Animation As IDCompositionAnimation)
    End Interface

    [ InterfaceId ("A6A55BDA-C09C-49F3-9193-A41922C89715") ]
    Interface IDCompositionTurbulenceEffect Extends IDCompositionFilterEffect
        /* voffset &H0010*/ Sub SetOffset(ByRef Offset As D2D1_VECTOR_2F)
        /* voffset &H0014*/ Sub SetBaseFrequency(ByRef frequency As D2D1_VECTOR_2F)
        /* voffset &H0018*/ Sub SetSize(ByRef SIZE As D2D1_VECTOR_2F)
        /* voffset &H001C*/ Sub SetNumOctaves(ByVal numOctaves As Long)
        /* voffset &H0020*/ Sub SetSeed(ByVal seed As Long)
        /* voffset &H0024*/ Sub SetNoise(ByVal noise As D2D1_TURBULENCE_NOISE)
        /* voffset &H0028*/ Sub SetStitchable(ByVal stitchable As Long)
    End Interface

    [ InterfaceId ("4305EE5B-C4A0-4C88-9385-67124E017683") ]
    Interface IDCompositionLinearTransferEffect Extends IDCompositionFilterEffect
        /* voffset &H0010*/ Sub SetRedYIntercept(ByVal redYIntercept As Single)
        /* voffset &H0014*/ Sub SetRedYIntercept_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0018*/ Sub SetRedSlope(ByVal redSlope As Single)
        /* voffset &H001C*/ Sub SetRedSlope_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0020*/ Sub SetRedDisable(ByVal redDisable As Long)
        /* voffset &H0024*/ Sub SetGreenYIntercept(ByVal greenYIntercept As Single)
        /* voffset &H0028*/ Sub SetGreenYIntercept_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H002C*/ Sub SetGreenSlope(ByVal greenSlope As Single)
        /* voffset &H0030*/ Sub SetGreenSlope_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0034*/ Sub SetGreenDisable(ByVal greenDisable As Long)
        /* voffset &H0038*/ Sub SetBlueYIntercept(ByVal blueYIntercept As Single)
        /* voffset &H003C*/ Sub SetBlueYIntercept_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0040*/ Sub SetBlueSlope(ByVal blueSlope As Single)
        /* voffset &H0044*/ Sub SetBlueSlope_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0048*/ Sub SetBlueDisable(ByVal blueDisable As Long)
        /* voffset &H004C*/ Sub SetAlphaYIntercept(ByVal alphaYIntercept As Single)
        /* voffset &H0050*/ Sub SetAlphaYIntercept_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0054*/ Sub SetAlphaSlope(ByVal alphaSlope As Single)
        /* voffset &H0058*/ Sub SetAlphaSlope_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H005C*/ Sub SetAlphaDisable(ByVal alphaDisable As Long)
        /* voffset &H0060*/ Sub SetClampOutput(ByVal clampOutput As Long)
    End Interface

    [ InterfaceId ("9B7E82E2-69C5-4EB4-A5F5-A7033F5132CD") ]
    Interface IDCompositionTableTransferEffect Extends IDCompositionFilterEffect
        /* voffset &H0010*/ Sub SetRedTable(ByRef tableValues As Single, ByVal Count As Long)
        /* voffset &H0014*/ Sub SetGreenTable(ByRef tableValues As Single, ByVal Count As Long)
        /* voffset &H0018*/ Sub SetBlueTable(ByRef tableValues As Single, ByVal Count As Long)
        /* voffset &H001C*/ Sub SetAlphaTable(ByRef tableValues As Single, ByVal Count As Long)
        /* voffset &H0020*/ Sub SetRedDisable(ByVal redDisable As Long)
        /* voffset &H0024*/ Sub SetGreenDisable(ByVal greenDisable As Long)
        /* voffset &H0028*/ Sub SetBlueDisable(ByVal blueDisable As Long)
        /* voffset &H002C*/ Sub SetAlphaDisable(ByVal alphaDisable As Long)
        /* voffset &H0030*/ Sub SetClampOutput(ByVal clampOutput As Long)
        /* voffset &H0034*/ Sub SetRedTableValue(ByVal index As Long, ByVal Value As Single)
        /* voffset &H0038*/ Sub SetRedTableValue_A(ByVal index As Long, ByVal Animation As IDCompositionAnimation)
        /* voffset &H003C*/ Sub SetGreenTableValue(ByVal index As Long, ByVal Value As Single)
        /* voffset &H0040*/ Sub SetGreenTableValue_A(ByVal index As Long, ByVal Animation As IDCompositionAnimation)
        /* voffset &H0044*/ Sub SetBlueTableValue(ByVal index As Long, ByVal Value As Single)
        /* voffset &H0048*/ Sub SetBlueTableValue_A(ByVal index As Long, ByVal Animation As IDCompositionAnimation)
        /* voffset &H004C*/ Sub SetAlphaTableValue(ByVal index As Long, ByVal Value As Single)
        /* voffset &H0050*/ Sub SetAlphaTableValue_A(ByVal index As Long, ByVal Animation As IDCompositionAnimation)
    End Interface

    [ InterfaceId ("576616C0-A231-494D-A38D-00FD5EC4DB46") ]
    Interface IDCompositionCompositeEffect Extends IDCompositionFilterEffect
        /* voffset &H0010*/ Sub SetMode(ByVal mode As D2D1_COMPOSITE_MODE)
    End Interface

    [ InterfaceId ("33ECDC0A-578A-4A11-9C14-0CB90517F9C5") ]
    Interface IDCompositionBlendEffect Extends IDCompositionFilterEffect
        /* voffset &H0010*/ Sub SetMode(ByVal mode As D2D1_BLEND_MODE)
    End Interface

    [ InterfaceId ("3B67DFA8-E3DD-4E61-B640-46C2F3D739DC") ]
    Interface IDCompositionArithmeticCompositeEffect Extends IDCompositionFilterEffect
        /* voffset &H0010*/ Sub SetCoefficients(ByRef coefficients As D2D_VECTOR_4F)
        /* voffset &H0014*/ Sub SetClampOutput(ByVal clampOutput As Long)
        /* voffset &H0018*/ Sub SetCoefficient1(ByVal Coeffcient1 As Single)
        /* voffset &H001C*/ Sub SetCoefficient1_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0020*/ Sub SetCoefficient2(ByVal Coefficient2 As Single)
        /* voffset &H0024*/ Sub SetCoefficient2_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0028*/ Sub SetCoefficient3(ByVal Coefficient3 As Single)
        /* voffset &H002C*/ Sub SetCoefficient3_A(ByVal Animation As IDCompositionAnimation)
        /* voffset &H0030*/ Sub SetCoefficient4(ByVal Coefficient4 As Single)
        /* voffset &H0034*/ Sub SetCoefficient4_A(ByVal Animation As IDCompositionAnimation)
    End Interface

    [ InterfaceId ("0B74B9E8-CDD6-492F-BBBC-5ED32157026D") ]
    Interface IDCompositionAffineTransform2DEffect Extends IDCompositionFilterEffect
        /* voffset &H0010*/ Sub SetInterpolationMode(ByVal InterpolationMode As D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE)
        /* voffset &H0014*/ Sub SetBorderMode(ByVal borderMode As D2D1_BORDER_MODE)
        /* voffset &H0018*/ Sub SetTransformMatrix(ByRef transformMatrix As D2D1_MATRIX_3X2_F)
        /* voffset &H001C*/ Sub SetTransformMatrixElement(ByVal Row As Long, ByVal Column As Long, ByVal Value As Single)
        /* voffset &H0020*/ Sub SetTransformMatrixElement_A(ByVal Row As Long, ByVal Column As Long, ByVal Animation As IDCompositionAnimation)
        /* voffset &H0024*/ Sub SetSharpness(ByVal Sharpness As Single)
        /* voffset &H0028*/ Sub SetSharpness_A(ByVal Animation As IDCompositionAnimation)
    End Interface

    [ InterfaceId ("CBFD91D9-51B2-45E4-B3DE-D19CCFB863C5") ]
    [ Description ("IDCompositionAnimation Interface") ]
    Interface IDCompositionAnimation Extends stdole.IUnknown
        /* voffset &H000C*/ Sub Reset()
        /* voffset &H0010*/ Sub SetAbsoluteBeginTime(ByVal beginTime As LongLong)
        /* voffset &H0014*/ Sub AddCubic(ByVal beginOffset As Double, ByVal constantCoefficient As Single, ByVal linearCoefficient As Single, ByVal quadraticCoefficient As Single, ByVal cubicCoefficient As Single)
        /* voffset &H0018*/ Sub AddSinusoidal(ByVal beginOffset As Double, ByVal bias As Single, ByVal amplitude As Single, ByVal frequency As Single, ByVal phase As Single)
        /* voffset &H001C*/ Sub AddRepeat(ByVal beginOffset As Double, ByVal durationToRepeat As Double)
        /* voffset &H0020*/ Sub end(ByVal endOffset As Double, ByVal endValue As Single)
    End Interface
	
#End Region



    Module slDirectX
        [ Description ("Creates a factory object that can be used to create Direct2D resources.") ]
        Public Declare Function D2D1CreateFactory Lib "D2d1.dll" (ByVal factoryType As D2D1_FACTORY_TYPE, ByRef riid As Any, ByRef pFactoryOptions As Any, ppUnk As IUnknown) As Long
        [ Description ("Creates a rotation transformation that rotates by the specified angle about the specified point.") ]
        Public Declare Sub D2D1MakeRotateMatrix Lib "D2d1.dll" (ByVal angle As Single, ByVal centerX As Single, ByVal centerY As Single, ByRef matrix As D2D1_MATRIX_3X2_F)
        [ Description ("Creates a skew transformation that has the specified x-axis angle, y-axis angle, and center point.") ]
        Public Declare Sub D2D1MakeSkewMatrix Lib "D2d1.dll" (ByVal angleX As Single, ByVal angleY As Single, ByVal centerX As Single, ByVal centerY As Single, ByRef matrix As D2D1_MATRIX_3X2_F)
        [ Description ("Indicates whether the specified matrix is invertible.") ]
        Public Declare Function D2D1IsMatrixInvertible Lib "D2d1.dll" (ByRef matrix As D2D1_MATRIX_3X2_F) As Long
        [ Description ("Tries to invert the specified matrix.") ]
        Public Declare Function D2D1InvertMatrix Lib "D2d1.dll" (ByRef matrix As D2D1_MATRIX_3X2_F) As Long


    Public Const DWRITE_ALPHA_MAX As Long = 255
    Public Const DWRITE_E_FILEFORMAT = &H88995000
    Public Const DWRITE_E_UNEXPECTED = &H88995001
    Public Const DWRITE_E_NOFONT = &H88995002
    Public Const DWRITE_E_FILENOTFOUND = &H88995003
    Public Const DWRITE_E_FILEACCESS = &H88995004
    Public Const DWRITE_E_FONTCOLLECTIONOBSOLETE = &H88995005
    Public Const DWRITE_E_ALREADYREGISTERED = &H88995006

    Public Declare Function DWriteCreateFactory Lib "Dwrite.dll" (ByVal factoryType As DWRITE_FACTORY_TYPE, ByRef iid As UUID, ppUnk As IUnknown) As Long

    Public Const FACILITY_D2D = 2201
    Public Const D2DERR_UNSUPPORTED_PIXEL_FORMAT = &H88982f80
    Public Const D2DERR_INSUFFICIENT_BUFFER = &H8007007a
    Public Const D2DERR_WRONG_STATE = &H88990001
    Public Const D2DERR_NOT_INITIALIZED = &H88990002
    Public Const D2DERR_UNSUPPORTED_OPERATION = &H88990003
    Public Const D2DERR_SCANNER_FAILED = &H88990004
    Public Const D2DERR_SCREEN_ACCESS_DENIED = &H88990005
    Public Const D2DERR_DISPLAY_STATE_INVALID = &H88990006
    Public Const D2DERR_ZERO_VECTOR = &H88990007
    Public Const D2DERR_INTERNAL_ERROR = &H88990008
    Public Const D2DERR_DISPLAY_FORMAT_NOT_SUPPORTED = &H88990009
    Public Const D2DERR_INVALID_CALL = &H8899000a
    Public Const D2DERR_NO_HARDWARE_DEVICE = &H8899000b
    Public Const D2DERR_RECREATE_TARGET = &H8899000c
    Public Const D2DERR_TOO_MANY_SHADER_ELEMENTS = &H8899000d
    Public Const D2DERR_SHADER_COMPILE_FAILED = &H8899000e
    Public Const D2DERR_MAX_TEXTURE_SIZE_EXCEEDED = &H8899000f
    Public Const D2DERR_UNSUPPORTED_VERSION = &H88990010
    Public Const D2DERR_BAD_NUMBER = &H88990011
    Public Const D2DERR_WRONG_FACTORY = &H88990012
    Public Const D2DERR_LAYER_ALREADY_IN_USE = &H88990013
    Public Const D2DERR_POP_CALL_DID_NOT_MATCH_PUSH = &H88990014
    Public Const D2DERR_WRONG_RESOURCE_DOMAIN = &H88990015
    Public Const D2DERR_PUSH_POP_UNBALANCED = &H88990016
    Public Const D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT = &H88990017
    Public Const D2DERR_INCOMPATIBLE_BRUSH_TYPES = &H88990018
    Public Const D2DERR_WIN32_ERROR = &H88990019
    Public Const D2DERR_TARGET_NOT_GDI_COMPATIBLE = &H8899001a
    Public Const D2DERR_TEXT_EFFECT_IS_WRONG_TYPE = &H8899001b
    Public Const D2DERR_TEXT_RENDERER_NOT_RELEASED = &H8899001c
    Public Const D2DERR_EXCEEDS_MAX_BITMAP_SIZE = &H8899001d
    
    Public Enum DWRITE_FONT_FACE_TYPE
        DWRITE_FONT_FACE_TYPE_CFF = 0                        ' &H00000000&
        DWRITE_FONT_FACE_TYPE_TRUETYPE = 1                   ' &H00000001&
        DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION = 2        ' &H00000002&
        DWRITE_FONT_FACE_TYPE_TYPE1 = 3                      ' &H00000003&
        DWRITE_FONT_FACE_TYPE_VECTOR = 4                     ' &H00000004&
        DWRITE_FONT_FACE_TYPE_BITMAP = 5                     ' &H00000005&
        DWRITE_FONT_FACE_TYPE_UNKNOWN = 6                    ' &H00000006&
    End Enum

    Public Enum DWRITE_FONT_WEIGHT
        DWRITE_FONT_WEIGHT_THIN = 100                        ' &H00000064&
        DWRITE_FONT_WEIGHT_EXTRA_LIGHT = 200                 ' &H000000C8&
        DWRITE_FONT_WEIGHT_ULTRA_LIGHT = 200                 ' &H000000C8&
        DWRITE_FONT_WEIGHT_LIGHT = 300                       ' &H0000012C&
        DWRITE_FONT_WEIGHT_NORMAL = 400                      ' &H00000190&
        DWRITE_FONT_WEIGHT_REGULAR = 400                     ' &H00000190&
        DWRITE_FONT_WEIGHT_MEDIUM = 500                      ' &H000001F4&
        DWRITE_FONT_WEIGHT_DEMI_BOLD = 600                   ' &H00000258&
        DWRITE_FONT_WEIGHT_SEMI_BOLD = 600                   ' &H00000258&
        DWRITE_FONT_WEIGHT_BOLD = 700                        ' &H000002BC&
        DWRITE_FONT_WEIGHT_EXTRA_BOLD = 800                  ' &H00000320&
        DWRITE_FONT_WEIGHT_ULTRA_BOLD = 800                  ' &H00000320&
        DWRITE_FONT_WEIGHT_BLACK = 900                       ' &H00000384&
        DWRITE_FONT_WEIGHT_HEAVY = 900                       ' &H00000384&
        DWRITE_FONT_WEIGHT_EXTRA_BLACK = 950                 ' &H000003B6&
        DWRITE_FONT_WEIGHT_ULTRA_BLACK = 950                 ' &H000003B6&
    End Enum

    Public Enum DWRITE_FONT_STRETCH
        DWRITE_FONT_STRETCH_UNDEFINED = 0                    ' &H00000000&
        DWRITE_FONT_STRETCH_ULTRA_CONDENSED = 1              ' &H00000001&
        DWRITE_FONT_STRETCH_EXTRA_CONDENSED = 2              ' &H00000002&
        DWRITE_FONT_STRETCH_CONDENSED = 3                    ' &H00000003&
        DWRITE_FONT_STRETCH_SEMI_CONDENSED = 4               ' &H00000004&
        DWRITE_FONT_STRETCH_NORMAL = 5                       ' &H00000005&
        DWRITE_FONT_STRETCH_MEDIUM = 5                       ' &H00000005&
        DWRITE_FONT_STRETCH_SEMI_EXPANDED = 6                ' &H00000006&
        DWRITE_FONT_STRETCH_EXPANDED = 7                     ' &H00000007&
        DWRITE_FONT_STRETCH_EXTRA_EXPANDED = 8               ' &H00000008&
        DWRITE_FONT_STRETCH_ULTRA_EXPANDED = 9               ' &H00000009&
    End Enum

    Public Enum DWRITE_FONT_STYLE
        DWRITE_FONT_STYLE_NORMAL = 0                         ' &H00000000&
        DWRITE_FONT_STYLE_OBLIQUE = 1                        ' &H00000001&
        DWRITE_FONT_STYLE_ITALIC = 2                         ' &H00000002&
    End Enum

    Public Enum DWRITE_MEASURING_MODE
        DWRITE_MEASURING_MODE_NATURAL = 0                    ' &H00000000&
        DWRITE_MEASURING_MODE_GDI_CLASSIC = 1                ' &H00000001&
        DWRITE_MEASURING_MODE_GDI_NATURAL = 2                ' &H00000002&
    End Enum

    Public Enum DWRITE_INFORMATIONAL_STRING_ID
        DWRITE_INFORMATIONAL_STRING_NONE = 0                 ' &H00000000&
        DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE = 1     ' &H00000001&
        DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS = 2      ' &H00000002&
        DWRITE_INFORMATIONAL_STRING_TRADEMARK = 3            ' &H00000003&
        DWRITE_INFORMATIONAL_STRING_MANUFACTURER = 4         ' &H00000004&
        DWRITE_INFORMATIONAL_STRING_DESIGNER = 5             ' &H00000005&
        DWRITE_INFORMATIONAL_STRING_DESIGNER_URL = 6         ' &H00000006&
        DWRITE_INFORMATIONAL_STRING_DESCRIPTION = 7          ' &H00000007&
        DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL = 8      ' &H00000008&
        DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION = 9  ' &H00000009&
        DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL = 10    ' &H0000000A&
        DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES = 11  ' &H0000000B&
        DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES = 12 ' &H0000000C&
        DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES = 13 ' &H0000000D&
        DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES = 14 ' &H0000000E&
        DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT = 15         ' &H0000000F&
    End Enum

    Public Enum DWRITE_FONT_SIMULATIONS
        DWRITE_FONT_SIMULATIONS_NONE = 0                     ' &H00000000&
        DWRITE_FONT_SIMULATIONS_BOLD = 1                     ' &H00000001&
        DWRITE_FONT_SIMULATIONS_OBLIQUE = 2                  ' &H00000002&
    End Enum

    Public Type DWRITE_FONT_METRICS
        designUnitsPerEm As Integer                          ' offset &H0000
        ascent As Integer                                    ' offset &H0002
        descent As Integer                                   ' offset &H0004
        lineGap As Integer                                   ' offset &H0006
        capHeight As Integer                                 ' offset &H0008
        xHeight As Integer                                   ' offset &H000A
        underlinePosition As Integer                         ' offset &H000C
        underlineThickness As Integer                        ' offset &H000E
        strikethroughPosition As Integer                     ' offset &H0010
        strikethroughThickness As Integer                    ' offset &H0012
    End Type                                                 ' LenB() = &H0014, Len() = &H0014, UDT Alignment = &H0002

    Public Enum DWRITE_PIXEL_GEOMETRY
        DWRITE_PIXEL_GEOMETRY_FLAT = 0                       ' &H00000000&
        DWRITE_PIXEL_GEOMETRY_RGB = 1                        ' &H00000001&
        DWRITE_PIXEL_GEOMETRY_BGR = 2                        ' &H00000002&
    End Enum

    Public Enum DWRITE_RENDERING_MODE
        DWRITE_RENDERING_MODE_DEFAULT = 0                    ' &H00000000&
        DWRITE_RENDERING_MODE_ALIASED = 1                    ' &H00000001&
        DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC = 2      ' &H00000002&
        DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL = 3      ' &H00000003&
        DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL = 4          ' &H00000004&
        DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC = 5 ' &H00000005&
        DWRITE_RENDERING_MODE_OUTLINE = 6                    ' &H00000006&
    End Enum

    Public Enum DWRITE_SCRIPT_SHAPES
        DWRITE_SCRIPT_SHAPES_DEFAULT = 0                     ' &H00000000&
        DWRITE_SCRIPT_SHAPES_NO_VISUAL = 1                   ' &H00000001&
    End Enum

    Public Type DWRITE_SCRIPT_ANALYSIS
        Script As Integer                                    ' offset &H0000
                         ' offset &H0002
        shapes As DWRITE_SCRIPT_SHAPES                ' offset &H0004
    End Type                                                 ' LenB() = &H0008, Len() = &H0006, UDT Alignment = &H0004

    Public Type DWRITE_SHAPING_TEXT_PROPERTIES
        bitfield As Integer                                  ' offset &H0000
    End Type                                                 ' LenB() = &H0002, Len() = &H0002, UDT Alignment = &H0002

    Public Type DWRITE_SHAPING_GLYPH_PROPERTIES
        flags As Integer                                     ' offset &H0000
    End Type                                                 ' LenB() = &H0002, Len() = &H0002, UDT Alignment = &H0002

    Public Type DWRITE_GLYPH_OFFSET
        advanceOffset As Single                              ' offset &H0000
        ascenderOffset As Single                             ' offset &H0004
    End Type                                                 ' LenB() = &H0008, Len() = &H0008, UDT Alignment = &H0004

    Public Enum DWRITE_NUMBER_SUBSTITUTION_METHOD
        DWRITE_NUMBER_SUBSTITUTION_METHOD_FROM_CULTURE = 0   ' &H00000000&
        DWRITE_NUMBER_SUBSTITUTION_METHOD_CONTEXTUAL = 1     ' &H00000001&
        DWRITE_NUMBER_SUBSTITUTION_METHOD_NONE = 2           ' &H00000002&
        DWRITE_NUMBER_SUBSTITUTION_METHOD_NATIONAL = 3       ' &H00000003&
        DWRITE_NUMBER_SUBSTITUTION_METHOD_TRADITIONAL = 4    ' &H00000004&
    End Enum

    Public Type DWRITE_MATRIX
        m11 As Single                                        ' offset &H0000
        m12 As Single                                        ' offset &H0004
        m21 As Single                                        ' offset &H0008
        m22 As Single                                        ' offset &H000C
        dx As Single                                         ' offset &H0010
        dy As Single                                         ' offset &H0014
    End Type                                                 ' LenB() = &H0018, Len() = &H0018, UDT Alignment = &H0004

    Public Type DWRITE_GLYPH_RUN
        fontFace As IDWriteFontFace                   ' offset &H0000
        fontEmSize As Single                                 ' offset &H0004
        glyphCount As Long                                   ' offset &H0008
        pglyphIndices As LongPtr                                ' offset &H000C
        pglyphAdvances As LongPtr                               ' offset &H0010
        pglyphOffsets As LongPtr                                ' offset &H0014
        isSideways As Long                                   ' offset &H0018
        bidiLevel As Long                                    ' offset &H001C
    End Type                                                 ' LenB() = &H0020, Len() = &H0020, UDT Alignment = &H0004

    Public Type DWRITE_GLYPH_RUN_DESCRIPTION
        plocaleName As LongPtr                                  ' offset &H0000
        pString As LongPtr                                      ' offset &H0004
        stringLength As Long                                 ' offset &H0008
        pclusterMap As LongPtr                                  ' offset &H000C
        textPosition As Long                                 ' offset &H0010
    End Type                                                 ' LenB() = &H0014, Len() = &H0014, UDT Alignment = &H0004

    Public Enum DWRITE_TEXT_ALIGNMENT
        DWRITE_TEXT_ALIGNMENT_LEADING = 0                    ' &H00000000&
        DWRITE_TEXT_ALIGNMENT_TRAILING = 1                   ' &H00000001&
        DWRITE_TEXT_ALIGNMENT_CENTER = 2                     ' &H00000002&
    End Enum

    Public Enum DWRITE_PARAGRAPH_ALIGNMENT
        DWRITE_PARAGRAPH_ALIGNMENT_NEAR = 0                  ' &H00000000&
        DWRITE_PARAGRAPH_ALIGNMENT_FAR = 1                   ' &H00000001&
        DWRITE_PARAGRAPH_ALIGNMENT_CENTER = 2                ' &H00000002&
    End Enum

    Public Enum DWRITE_WORD_WRAPPING
        DWRITE_WORD_WRAPPING_WRAP = 0                        ' &H00000000&
        DWRITE_WORD_WRAPPING_NO_WRAP = 1                     ' &H00000001&
    End Enum

    Public Enum DWRITE_READING_DIRECTION
        DWRITE_READING_DIRECTION_LEFT_TO_RIGHT = 0           ' &H00000000&
        DWRITE_READING_DIRECTION_RIGHT_TO_LEFT = 1           ' &H00000001&
    End Enum

    Public Enum DWRITE_FLOW_DIRECTION
        DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM = 0              ' &H00000000&
    End Enum

    Public Enum DWRITE_TRIMMING_GRANULARITY
        DWRITE_TRIMMING_GRANULARITY_NONE = 0                 ' &H00000000&
        DWRITE_TRIMMING_GRANULARITY_CHARACTER = 1            ' &H00000001&
        DWRITE_TRIMMING_GRANULARITY_WORD = 2                 ' &H00000002&
    End Enum

    Public Type DWRITE_TRIMMING
        granularity As DWRITE_TRIMMING_GRANULARITY    ' offset &H0000
        delimiter As Long                                    ' offset &H0004
        delimiterCount As Long                               ' offset &H0008
    End Type                                                 ' LenB() = &H000C, Len() = &H000C, UDT Alignment = &H0004

    Public Type DWRITE_UNDERLINE
        width As Single                                      ' offset &H0000
        thickness As Single                                  ' offset &H0004
        Offset As Single                                     ' offset &H0008
        runHeight As Single                                  ' offset &H000C
        readingDirection As DWRITE_READING_DIRECTION  ' offset &H0010
        flowDirection As DWRITE_FLOW_DIRECTION        ' offset &H0014
        plocaleName As Long                                  ' offset &H0018
        measuringMode As DWRITE_MEASURING_MODE        ' offset &H001C
    End Type                                                 ' LenB() = &H0020, Len() = &H0020, UDT Alignment = &H0004

    Public Type DWRITE_STRIKETHROUGH
        width As Single                                      ' offset &H0000
        thickness As Single                                  ' offset &H0004
        Offset As Single                                     ' offset &H0008
        readingDirection As DWRITE_READING_DIRECTION  ' offset &H000C
        flowDirection As DWRITE_FLOW_DIRECTION        ' offset &H0010
        plocaleName As Long                                  ' offset &H0014
        measuringMode As DWRITE_MEASURING_MODE        ' offset &H0018
    End Type                                                 ' LenB() = &H001C, Len() = &H001C, UDT Alignment = &H0004

    Public Type DWRITE_INLINE_OBJECT_METRICS
        width As Single                                      ' offset &H0000
        Height As Single                                     ' offset &H0004
        baseline As Single                                   ' offset &H0008
        supportsSideways As Long                             ' offset &H000C
    End Type                                                 ' LenB() = &H0010, Len() = &H0010, UDT Alignment = &H0004

    Public Type DWRITE_OVERHANG_METRICS
        Left As Single                                       ' offset &H0000
        Top As Single                                        ' offset &H0004
        Right As Single                                      ' offset &H0008
        Bottom As Single                                     ' offset &H000C
    End Type                                                 ' LenB() = &H0010, Len() = &H0010, UDT Alignment = &H0004

    Public Enum DWRITE_BREAK_CONDITION
        DWRITE_BREAK_CONDITION_NEUTRAL = 0                   ' &H00000000&
        DWRITE_BREAK_CONDITION_CAN_BREAK = 1                 ' &H00000001&
        DWRITE_BREAK_CONDITION_MAY_NOT_BREAK = 2             ' &H00000002&
        DWRITE_BREAK_CONDITION_MUST_BREAK = 3                ' &H00000003&
    End Enum

    Public Enum DWRITE_LINE_SPACING_METHOD
        DWRITE_LINE_SPACING_METHOD_DEFAULT = 0               ' &H00000000&
        DWRITE_LINE_SPACING_METHOD_UNIFORM = 1               ' &H00000001&
    End Enum

Public Enum DWRITE_FONT_FEATURE_TAG
	DWRITE_FONT_FEATURE_TAG_ALTERNATIVE_FRACTIONS = &H63726661
	DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS_FROM_CAPITALS = &H63703263
	DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS_FROM_CAPITALS = &H63733263
	DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_ALTERNATES = &H746c6163
	DWRITE_FONT_FEATURE_TAG_CASE_SENSITIVE_FORMS = &H65736163
	DWRITE_FONT_FEATURE_TAG_GLYPH_COMPOSITION_DECOMPOSITION = &H706d6363
	DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_LIGATURES = &H67696c63
	DWRITE_FONT_FEATURE_TAG_CAPITAL_SPACING = &H70737063
	DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_SWASH = &H68777363
	DWRITE_FONT_FEATURE_TAG_CURSIVE_POSITIONING = &H73727563
	DWRITE_FONT_FEATURE_TAG_DEFAULT = &H746c6664
	DWRITE_FONT_FEATURE_TAG_DISCRETIONARY_LIGATURES = &H67696c64
	DWRITE_FONT_FEATURE_TAG_EXPERT_FORMS = &H74707865
	DWRITE_FONT_FEATURE_TAG_FRACTIONS = &H63617266
	DWRITE_FONT_FEATURE_TAG_FULL_WIDTH = &H64697766
	DWRITE_FONT_FEATURE_TAG_HALF_FORMS = &H666c6168
	DWRITE_FONT_FEATURE_TAG_HALANT_FORMS = &H6e6c6168
	DWRITE_FONT_FEATURE_TAG_ALTERNATE_HALF_WIDTH = &H746c6168
	DWRITE_FONT_FEATURE_TAG_HISTORICAL_FORMS = &H74736968
	DWRITE_FONT_FEATURE_TAG_HORIZONTAL_KANA_ALTERNATES = &H616e6b68
	DWRITE_FONT_FEATURE_TAG_HISTORICAL_LIGATURES = &H67696c68
	DWRITE_FONT_FEATURE_TAG_HALF_WIDTH = &H64697768
	DWRITE_FONT_FEATURE_TAG_HOJO_KANJI_FORMS = &H6f6a6f68
	DWRITE_FONT_FEATURE_TAG_JIS04_FORMS = &H3430706a
	DWRITE_FONT_FEATURE_TAG_JIS78_FORMS = &H3837706a
	DWRITE_FONT_FEATURE_TAG_JIS83_FORMS = &H3338706a
	DWRITE_FONT_FEATURE_TAG_JIS90_FORMS = &H3039706a
	DWRITE_FONT_FEATURE_TAG_KERNING = &H6e72656b
	DWRITE_FONT_FEATURE_TAG_STANDARD_LIGATURES = &H6167696c
	DWRITE_FONT_FEATURE_TAG_LINING_FIGURES = &H6d756e6c
	DWRITE_FONT_FEATURE_TAG_LOCALIZED_FORMS = &H6c636f6c
	DWRITE_FONT_FEATURE_TAG_MARK_POSITIONING = &H6b72616d
	DWRITE_FONT_FEATURE_TAG_MATHEMATICAL_GREEK = &H6b72676d
	DWRITE_FONT_FEATURE_TAG_MARK_TO_MARK_POSITIONING = &H6b6d6b6d
	DWRITE_FONT_FEATURE_TAG_ALTERNATE_ANNOTATION_FORMS = &H746c616e
	DWRITE_FONT_FEATURE_TAG_NLC_KANJI_FORMS = &H6b636c6e
	DWRITE_FONT_FEATURE_TAG_OLD_STYLE_FIGURES = &H6d756e6f
	DWRITE_FONT_FEATURE_TAG_ORDINALS = &H6e64726f
	DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_ALTERNATE_WIDTH = &H746c6170
	DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS = &H70616370
	DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_FIGURES = &H6d756e70
	DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_WIDTHS = &H64697770
	DWRITE_FONT_FEATURE_TAG_QUARTER_WIDTHS = &H64697771
	DWRITE_FONT_FEATURE_TAG_REQUIRED_LIGATURES = &H67696c72
	DWRITE_FONT_FEATURE_TAG_RUBY_NOTATION_FORMS = &H79627572
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_ALTERNATES = &H746c6173
	DWRITE_FONT_FEATURE_TAG_SCIENTIFIC_INFERIORS = &H666e6973
	DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS = &H70636d73
	DWRITE_FONT_FEATURE_TAG_SIMPLIFIED_FORMS = &H6c706d73
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1 = &H31307373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_2 = &H32307373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_3 = &H33307373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_4 = &H34307373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_5 = &H35307373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_6 = &H36307373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_7 = &H37307373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_8 = &H38307373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_9 = &H39307373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_10 = &H30317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_11 = &H31317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_12 = &H32317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_13 = &H33317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_14 = &H34317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_15 = &H35317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_16 = &H36317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_17 = &H37317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_18 = &H38317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_19 = &H39317373
	DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_20 = &H30327373
	DWRITE_FONT_FEATURE_TAG_SUBSCRIPT = &H73627573
	DWRITE_FONT_FEATURE_TAG_SUPERSCRIPT = &H73707573
	DWRITE_FONT_FEATURE_TAG_SWASH = &H68737773
	DWRITE_FONT_FEATURE_TAG_TITLING = &H6c746974
	DWRITE_FONT_FEATURE_TAG_TRADITIONAL_NAME_FORMS = &H6d616e74
	DWRITE_FONT_FEATURE_TAG_TABULAR_FIGURES = &H6d756e74
	DWRITE_FONT_FEATURE_TAG_TRADITIONAL_FORMS = &H64617274
	DWRITE_FONT_FEATURE_TAG_THIRD_WIDTHS = &H64697774
	DWRITE_FONT_FEATURE_TAG_UNICASE = &H63696e75
	DWRITE_FONT_FEATURE_TAG_SLASHED_ZERO = &H6f72657a
End Enum

    Public Type DWRITE_FONT_FEATURE
        nameTag As DWRITE_FONT_FEATURE_TAG            ' offset &H0000
        Parameter As Long                                    ' offset &H0004
    End Type                                                 ' LenB() = &H0008, Len() = &H0008, UDT Alignment = &H0004

    Public Enum DWRITE_FONT_FILE_TYPE
        DWRITE_FONT_FILE_TYPE_UNKNOWN = 0                    ' &H00000000&
        DWRITE_FONT_FILE_TYPE_CFF = 1                        ' &H00000001&
        DWRITE_FONT_FILE_TYPE_TRUETYPE = 2                   ' &H00000002&
        DWRITE_FONT_FILE_TYPE_TRUETYPE_COLLECTION = 3        ' &H00000003&
        DWRITE_FONT_FILE_TYPE_TYPE1_PFM = 4                  ' &H00000004&
        DWRITE_FONT_FILE_TYPE_TYPE1_PFB = 5                  ' &H00000005&
        DWRITE_FONT_FILE_TYPE_VECTOR = 6                     ' &H00000006&
        DWRITE_FONT_FILE_TYPE_BITMAP = 7                     ' &H00000007&
    End Enum

    Public Type DWRITE_LINE_METRICS
        Length As Long                                       ' offset &H0000
        trailingWhitespaceLength As Long                     ' offset &H0004
        newlineLength As Long                                ' offset &H0008
        Height As Single                                     ' offset &H000C
        baseline As Single                                   ' offset &H0010
        isTrimmed As Long                                    ' offset &H0014
    End Type                                                 ' LenB() = &H0018, Len() = &H0018, UDT Alignment = &H0004

    Public Type DWRITE_TEXT_METRICS
        Left As Single                                       ' offset &H0000
        Top As Single                                        ' offset &H0004
        width As Single                                      ' offset &H0008
        widthIncludingTrailingWhitespace As Single           ' offset &H000C
        Height As Single                                     ' offset &H0010
        layoutWidth As Single                                ' offset &H0014
        layoutHeight As Single                               ' offset &H0018
        maxBidiReorderingDepth As Long                       ' offset &H001C
        lineCount As Long                                    ' offset &H0020
    End Type                                                 ' LenB() = &H0024, Len() = &H0024, UDT Alignment = &H0004

    Public Type DWRITE_CLUSTER_METRICS
        width As Single                                      ' offset &H0000
        Length As Integer                                    ' offset &H0004
        flags As Integer                                     ' offset &H0006
    End Type                                                 ' LenB() = &H0008, Len() = &H0008, UDT Alignment = &H0004

    Public Type DWRITE_HIT_TEST_METRICS
        textPosition As Long                                 ' offset &H0000
        Length As Long                                       ' offset &H0004
        Left As Single                                       ' offset &H0008
        Top As Single                                        ' offset &H000C
        width As Single                                      ' offset &H0010
        Height As Single                                     ' offset &H0014
        bidiLevel As Long                                    ' offset &H0018
        isText As Long                                       ' offset &H001C
        isTrimmed As Long                                    ' offset &H0020
    End Type                                                 ' LenB() = &H0024, Len() = &H0024, UDT Alignment = &H0004

    Public Enum DWRITE_FACTORY_TYPE
        DWRITE_FACTORY_TYPE_SHARED = 0                       ' &H00000000&
        DWRITE_FACTORY_TYPE_ISOLATED = 1                     ' &H00000001&
    End Enum

    Public Enum DWRITE_CLUSTER_METRICS_FLAGS
        canWrapLineAfter = 1                                 ' &H00000001&
        isWhitespace = 2                                     ' &H00000002&
        isNewline = 4                                        ' &H00000004&
        isSoftHyphen = 8                                     ' &H00000008&
        isRightToLeft = 16                                   ' &H00000010&
    End Enum

    Public Enum DWRITE_SHAPING_GLYPH_PROPERTIES_FLAGS
        isClusterStart = 16                                  ' &H00000010&
        isDiacritic = 32                                     ' &H00000020&
        isZeroWidthSpace = 64                                ' &H00000040&
        justification_mask = 15                              ' &H0000000F&
    End Enum

    Public Enum DWRITE_SHAPING_TEXT_PROPERTIES_FLAGS
        isShapedAlone = 1                                    ' &H00000001&
    End Enum

    Public Enum DWRITE_LINE_BREAKPOINT_FLAGS
        breakConditionBefore_mask = 3                        ' &H00000003&
        breakConditionBefore_shift = 1                       ' &H00000001&
        breakConditionAfter_mask = 12                        ' &H0000000C&
        breakConditionAfter_shift = 4                        ' &H00000004&
        lbisWhitespace = 16                                  ' &H00000010&
        lbisSoftHyphen = 32                                  ' &H00000020&
    End Enum

    Public Type DWRITE_GLYPH_METRICS
        leftSideBearing As Long                              ' offset &H0000
        advanceWidth As Long                                 ' offset &H0004
        rightSideBearing As Long                             ' offset &H0008
        topSideBearing As Long                               ' offset &H000C
        advanceHeight As Long                                ' offset &H0010
        bottomSideBearing As Long                            ' offset &H0014
        verticalOriginY As Long                              ' offset &H0018
    End Type                                                 ' LenB() = &H001C, Len() = &H001C, UDT Alignment = &H0004

    Public Type DWRITE_TEXT_RANGE
        startPosition As Long                                ' offset &H0000
        Length As Long                                       ' offset &H0004
    End Type                                                 ' LenB() = &H0008, Len() = &H0008, UDT Alignment = &H0004

    Public Type DWRITE_TYPOGRAPHIC_FEATURES
        ' WARNING: length and alignment calculations might be incorrect, as the Type contains a member with an unsupported datatype
        features As LongPtr                            ' offset &H0000
        featureCount As Long                                 ' offset &H0004
    End Type                                                 ' LenB() = &H0008, Len() = &H0004, UDT Alignment = &H0004

    Public Type DWRITE_LINE_BREAKPOINT
        flags As Byte                                        ' offset &H0000
    End Type                                                 ' LenB() = &H0001, Len() = &H0001, UDT Alignment = &H0001

    Public Enum DWRITE_TEXTURE_TYPE
        DWRITE_TEXTURE_ALIASED_1x1 = 0                       ' &H00000000&
        DWRITE_TEXTURE_CLEARTYPE_3x1 = 1                     ' &H00000001&
    End Enum


    Public Type D2D1_COLOR_F
        r As Single                                          ' offset &H0000
        g As Single                                          ' offset &H0004
        b As Single                                          ' offset &H0008
        a As Single                                          ' offset &H000C
    End Type                                                 ' LenB() = &H0010, Len() = &H0010, UDT Alignment = &H0004

    Public Type D2D1_POINT_2U
        x As Long                                            ' offset &H0000
        y As Long                                            ' offset &H0004
    End Type                                                 ' LenB() = &H0008, Len() = &H0008, UDT Alignment = &H0004

    Public Type D2D1_POINT_2F
        x As Single                                          ' offset &H0000
        y As Single                                          ' offset &H0004
    End Type                                                 ' LenB() = &H0008, Len() = &H0008, UDT Alignment = &H0004

    Public Type D2D1_RECT_F
        Left As Single                                       ' offset &H0000
        Top As Single                                        ' offset &H0004
        Right As Single                                      ' offset &H0008
        Bottom As Single                                     ' offset &H000C
    End Type                                                 ' LenB() = &H0010, Len() = &H0010, UDT Alignment = &H0004

    Public Type D2D1_RECT_U
        Left As Long                                         ' offset &H0000
        Top As Long                                          ' offset &H0004
        Right As Long                                        ' offset &H0008
        Bottom As Long                                       ' offset &H000C
    End Type                                                 ' LenB() = &H0010, Len() = &H0010, UDT Alignment = &H0004

    Public Type D2D1_SIZE_F
        width As Single                                      ' offset &H0000
        Height As Single                                     ' offset &H0004
    End Type                                                 ' LenB() = &H0008, Len() = &H0008, UDT Alignment = &H0004

    Public Type D2D1_SIZE_U
        width As Long                                        ' offset &H0000
        Height As Long                                       ' offset &H0004
    End Type                                                 ' LenB() = &H0008, Len() = &H0008, UDT Alignment = &H0004

    Public Type D2D1_MATRIX_3X2_F
        m_11 As Single                                       ' offset &H0000
        m_12 As Single                                       ' offset &H0004
        m_21 As Single                                       ' offset &H0008
        m_22 As Single                                       ' offset &H000C
        m_31 As Single                                       ' offset &H0010
        m_32 As Single                                       ' offset &H0014
    End Type                                                 ' LenB() = &H0018, Len() = &H0018, UDT Alignment = &H0004

    Public Type D2D1_TRIANGLE
        point1 As D2D1_POINT_2F                       ' offset &H0000
        point2 As D2D1_POINT_2F                       ' offset &H0008
        point3 As D2D1_POINT_2F                       ' offset &H0010
    End Type                                                 ' LenB() = &H0018, Len() = &H0018, UDT Alignment = &H0004

    Public Enum D2D1_COMBINE_MODE
        D2D1_COMBINE_MODE_UNION = 0                          ' &H00000000&
        D2D1_COMBINE_MODE_INTERSECT = 1                      ' &H00000001&
        D2D1_COMBINE_MODE_XOR = 2                            ' &H00000002&
        D2D1_COMBINE_MODE_EXCLUDE = 3                        ' &H00000003&
        D2D1_COMBINE_MODE_FORCE_DWORD = -1                   ' &HFFFFFFFF&
    End Enum

    Public Type D2D1_ROUNDED_RECT
        RECT As D2D1_RECT_F                           ' offset &H0000
        radiusX As Single                                    ' offset &H0010
        radiusY As Single                                    ' offset &H0014
    End Type                                                 ' LenB() = &H0018, Len() = &H0018, UDT Alignment = &H0004

    Public Type D2D1_ELLIPSE
        POINT As D2D1_POINT_2F                        ' offset &H0000
        radiusX As Single                                    ' offset &H0008
        radiusY As Single                                    ' offset &H000C
    End Type                                                 ' LenB() = &H0010, Len() = &H0010, UDT Alignment = &H0004

    Public Enum D2D1_FILL_MODE
        D2D1_FILL_MODE_ALTERNATE = 0                         ' &H00000000&
        D2D1_FILL_MODE_WINDING = 1                           ' &H00000001&
        D2D1_FILL_MODE_FORCE_DWORD = -1                      ' &HFFFFFFFF&
    End Enum

    Public Enum D2D1_PATH_SEGMENT
        D2D1_PATH_SEGMENT_NONE = 0                           ' &H00000000&
        D2D1_PATH_SEGMENT_FORCE_UNSTROKED = 1                ' &H00000001&
        D2D1_PATH_SEGMENT_FORCE_ROUND_LINE_JOIN = 2          ' &H00000002&
        D2D1_PATH_SEGMENT_FORCE_DWORD = -1                   ' &HFFFFFFFF&
    End Enum

    Public Enum D2D1_FIGURE_BEGIN
        D2D1_FIGURE_BEGIN_FILLED = 0                         ' &H00000000&
        D2D1_FIGURE_BEGIN_HOLLOW = 1                         ' &H00000001&
        D2D1_FIGURE_BEGIN_FORCE_DWORD = -1                   ' &HFFFFFFFF&
    End Enum

    Public Type D2D1_BEZIER_SEGMENT
        point1 As D2D1_POINT_2F                       ' offset &H0000
        point2 As D2D1_POINT_2F                       ' offset &H0008
        point3 As D2D1_POINT_2F                       ' offset &H0010
    End Type                                                 ' LenB() = &H0018, Len() = &H0018, UDT Alignment = &H0004

    Public Enum D2D1_FIGURE_END
        D2D1_FIGURE_END_OPEN = 0                             ' &H00000000&
        D2D1_FIGURE_END_CLOSED = 1                           ' &H00000001&
        D2D1_FIGURE_END_FORCE_DWORD = -1                     ' &HFFFFFFFF&
    End Enum

    Public Type D2D1_QUADRATIC_BEZIER_SEGMENT
        point1 As D2D1_POINT_2F                       ' offset &H0000
        point2 As D2D1_POINT_2F                       ' offset &H0008
    End Type                                                 ' LenB() = &H0010, Len() = &H0010, UDT Alignment = &H0004

    Public Enum D2D1_SWEEP_DIRECTION
        D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE = 0           ' &H00000000&
        D2D1_SWEEP_DIRECTION_CLOCKWISE = 1                   ' &H00000001&
        D2D1_SWEEP_DIRECTION_FORCE_DWORD = -1                ' &HFFFFFFFF&
    End Enum

    Public Enum D2D1_ARC_SIZE
        D2D1_ARC_SIZE_SMALL = 0                              ' &H00000000&
        D2D1_ARC_SIZE_LARGE = 1                              ' &H00000001&
        D2D1_ARC_SIZE_FORCE_DWORD = -1                       ' &HFFFFFFFF&
    End Enum

    Public Type D2D1_ARC_SEGMENT
        POINT As D2D1_POINT_2F                        ' offset &H0000
        SIZE As D2D1_SIZE_F                           ' offset &H0008
        rotationAngle As Single                              ' offset &H0010
        sweepDirection As D2D1_SWEEP_DIRECTION        ' offset &H0014
        arcSize As D2D1_ARC_SIZE                      ' offset &H0018
    End Type                                                 ' LenB() = &H001C, Len() = &H001C, UDT Alignment = &H0004

    Public Enum D2D1_CAP_STYLE
        D2D1_CAP_STYLE_FLAT = 0                              ' &H00000000&
        D2D1_CAP_STYLE_SQUARE = 1                            ' &H00000001&
        D2D1_CAP_STYLE_ROUND = 2                             ' &H00000002&
        D2D1_CAP_STYLE_TRIANGLE = 3                          ' &H00000003&
        D2D1_CAP_STYLE_FORCE_DWORD = -1                      ' &HFFFFFFFF&
    End Enum

    Public Enum D2D1_LINE_JOIN
        D2D1_LINE_JOIN_MITER = 0                             ' &H00000000&
        D2D1_LINE_JOIN_BEVEL = 1                             ' &H00000001&
        D2D1_LINE_JOIN_ROUND = 2                             ' &H00000002&
        D2D1_LINE_JOIN_MITER_OR_BEVEL = 3                    ' &H00000003&
        D2D1_LINE_JOIN_FORCE_DWORD = -1                      ' &HFFFFFFFF&
    End Enum

    Public Enum D2D1_DASH_STYLE
        D2D1_DASH_STYLE_SOLID = 0                            ' &H00000000&
        D2D1_DASH_STYLE_DASH = 1                             ' &H00000001&
        D2D1_DASH_STYLE_DOT = 2                              ' &H00000002&
        D2D1_DASH_STYLE_DASH_DOT = 3                         ' &H00000003&
        D2D1_DASH_STYLE_DASH_DOT_DOT = 4                     ' &H00000004&
        D2D1_DASH_STYLE_CUSTOM = 5                           ' &H00000005&
        D2D1_DASH_STYLE_FORCE_DWORD = -1                     ' &HFFFFFFFF&
    End Enum

    Public Enum D2D1_GEOMETRY_RELATION
        D2D1_GEOMETRY_RELATION_UNKNOWN = 0                   ' &H00000000&
        D2D1_GEOMETRY_RELATION_DISJOINT = 1                  ' &H00000001&
        D2D1_GEOMETRY_RELATION_IS_CONTAINED = 2              ' &H00000002&
        D2D1_GEOMETRY_RELATION_CONTAINS = 3                  ' &H00000003&
        D2D1_GEOMETRY_RELATION_OVERLAP = 4                   ' &H00000004&
        D2D1_GEOMETRY_RELATION_FORCE_DWORD = -1              ' &HFFFFFFFF&
    End Enum

    Public Enum D2D1_GEOMETRY_SIMPLIFICATION_OPTION
        D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES = 0 ' &H00000000&
        D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES = 1        ' &H00000001&
        D2D1_GEOMETRY_SIMPLIFICATION_OPTION_FORCE_DWORD = -1 ' &HFFFFFFFF&
    End Enum

    Public Type D2D1_STROKE_STYLE_PROPERTIES
        startCap As D2D1_CAP_STYLE                    ' offset &H0000
        endCap As D2D1_CAP_STYLE                      ' offset &H0004
        dashCap As D2D1_CAP_STYLE                     ' offset &H0008
        lineJoin As D2D1_LINE_JOIN                    ' offset &H000C
        miterLimit As Single                                 ' offset &H0010
        dashStyle As D2D1_DASH_STYLE                  ' offset &H0014
        dashOffset As Single                                 ' offset &H0018
    End Type                                                 ' LenB() = &H001C, Len() = &H001C, UDT Alignment = &H0004

    Public Enum D2D1_ANTIALIAS_MODE
        D2D1_ANTIALIAS_MODE_PER_PRIMITIVE = 0                ' &H00000000&
        D2D1_ANTIALIAS_MODE_ALIASED = 1                      ' &H00000001&
        D2D1_ANTIALIAS_MODE_FORCE_DWORD = -1                 ' &HFFFFFFFF&
    End Enum

    Public Enum D2D1_TEXT_ANTIALIAS_MODE
        D2D1_TEXT_ANTIALIAS_MODE_DEFAULT = 0                 ' &H00000000&
        D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE = 1               ' &H00000001&
        D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE = 2               ' &H00000002&
        D2D1_TEXT_ANTIALIAS_MODE_ALIASED = 3                 ' &H00000003&
        D2D1_TEXT_ANTIALIAS_MODE_FORCE_DWORD = -1            ' &HFFFFFFFF&
    End Enum

    Public Type D2D1_DRAWING_STATE_DESCRIPTION
        antialiasMode As D2D1_ANTIALIAS_MODE          ' offset &H0000
        textAntialiasMode As D2D1_TEXT_ANTIALIAS_MODE ' offset &H0004
        tag1 As LongLong                                     ' offset &H0008
        tag2 As LongLong                                     ' offset &H0010
        transform As D2D1_MATRIX_3X2_F                ' offset &H0018
    End Type                                                 ' LenB() = &H0030, Len() = &H0030, UDT Alignment = &H0004

    Public Enum D2D1_RENDER_TARGET_TYPE
        D2D1_RENDER_TARGET_TYPE_DEFAULT = 0                  ' &H00000000&
        D2D1_RENDER_TARGET_TYPE_SOFTWARE = 1                 ' &H00000001&
        D2D1_RENDER_TARGET_TYPE_HARDWARE = 2                 ' &H00000002&
        D2D1_RENDER_TARGET_TYPE_FORCE_DWORD = -1             ' &HFFFFFFFF&
    End Enum

    Public Enum D2D1_RENDER_TARGET_USAGE
        D2D1_RENDER_TARGET_USAGE_NONE = 0                    ' &H00000000&
        D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING = 1   ' &H00000001&
        D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE = 2          ' &H00000002&
        D2D1_RENDER_TARGET_USAGE_FORCE_DWORD = -1            ' &HFFFFFFFF&
    End Enum

    Public Enum D2D1_FEATURE_LEVEL
        D2D1_FEATURE_LEVEL_DEFAULT = 0                       ' &H00000000&
        D2D1_FEATURE_LEVEL_9 = 37120                         ' &H00009100&
        D2D1_FEATURE_LEVEL_10 = 40960                        ' &H0000A000&
        D2D1_FEATURE_LEVEL_FORCE_DWORD = -1                  ' &HFFFFFFFF&
    End Enum

    Public Enum D2D1_ALPHA_MODE
        D2D1_ALPHA_MODE_UNKNOWN = 0                          ' &H00000000&
        D2D1_ALPHA_MODE_PREMULTIPLIED = 1                    ' &H00000001&
        D2D1_ALPHA_MODE_STRAIGHT = 2                         ' &H00000002&
        D2D1_ALPHA_MODE_IGNORE = 3                           ' &H00000003&
        D2D1_ALPHA_MODE_FORCE_DWORD = -1                     ' &HFFFFFFFF&
    End Enum


Public Enum D2D1_CHANNEL_SELECTOR
        D2D1_CHANNEL_SELECTOR_R = 0                          ' &H00000000&
        D2D1_CHANNEL_SELECTOR_G = 1                          ' &H00000001&
        D2D1_CHANNEL_SELECTOR_B = 2                          ' &H00000002&
        D2D1_CHANNEL_SELECTOR_A = 3                          ' &H00000003&
        D2D1_CHANNEL_SELECTOR_FORCE_DWORD = -1               ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_BITMAPSOURCE_ORIENTATION
        D2D1_BITMAPSOURCE_ORIENTATION_DEFAULT = 1            ' &H00000001&
        D2D1_BITMAPSOURCE_ORIENTATION_FLIP_HORIZONTAL = 2    ' &H00000002&
        D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180 = 3 ' &H00000003&
        D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = 4 ' &H00000004&
        D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = 5 ' &H00000005&
        D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90 = 6 ' &H00000006&
        D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL = 7 ' &H00000007&
        D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270 = 8 ' &H00000008&
        D2D1_BITMAPSOURCE_ORIENTATION_FORCE_DWORD = -1       ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_GAUSSIANBLUR_PROP
        D2D1_GAUSSIANBLUR_PROP_STANDARD_DEVIATION = 0        ' &H00000000&
        D2D1_GAUSSIANBLUR_PROP_OPTIMIZATION = 1              ' &H00000001&
        D2D1_GAUSSIANBLUR_PROP_BORDER_MODE = 2               ' &H00000002&
        D2D1_GAUSSIANBLUR_PROP_FORCE_DWORD = -1              ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_GAUSSIANBLUR_OPTIMIZATION
        D2D1_GAUSSIANBLUR_OPTIMIZATION_SPEED = 0             ' &H00000000&
        D2D1_GAUSSIANBLUR_OPTIMIZATION_BALANCED = 1          ' &H00000001&
        D2D1_GAUSSIANBLUR_OPTIMIZATION_QUALITY = 2           ' &H00000002&
        D2D1_GAUSSIANBLUR_OPTIMIZATION_FORCE_DWORD = -1      ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_DIRECTIONALBLUR_PROP
        D2D1_DIRECTIONALBLUR_PROP_STANDARD_DEVIATION = 0     ' &H00000000&
        D2D1_DIRECTIONALBLUR_PROP_ANGLE = 1                  ' &H00000001&
        D2D1_DIRECTIONALBLUR_PROP_OPTIMIZATION = 2           ' &H00000002&
        D2D1_DIRECTIONALBLUR_PROP_BORDER_MODE = 3            ' &H00000003&
        D2D1_DIRECTIONALBLUR_PROP_FORCE_DWORD = -1           ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_DIRECTIONALBLUR_OPTIMIZATION
        D2D1_DIRECTIONALBLUR_OPTIMIZATION_SPEED = 0          ' &H00000000&
        D2D1_DIRECTIONALBLUR_OPTIMIZATION_BALANCED = 1       ' &H00000001&
        D2D1_DIRECTIONALBLUR_OPTIMIZATION_QUALITY = 2        ' &H00000002&
        D2D1_DIRECTIONALBLUR_OPTIMIZATION_FORCE_DWORD = -1   ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_SHADOW_PROP
        D2D1_SHADOW_PROP_BLUR_STANDARD_DEVIATION = 0         ' &H00000000&
        D2D1_SHADOW_PROP_COLOR = 1                           ' &H00000001&
        D2D1_SHADOW_PROP_OPTIMIZATION = 2                    ' &H00000002&
        D2D1_SHADOW_PROP_FORCE_DWORD = -1                    ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_SHADOW_OPTIMIZATION
        D2D1_SHADOW_OPTIMIZATION_SPEED = 0                   ' &H00000000&
        D2D1_SHADOW_OPTIMIZATION_BALANCED = 1                ' &H00000001&
        D2D1_SHADOW_OPTIMIZATION_QUALITY = 2                 ' &H00000002&
        D2D1_SHADOW_OPTIMIZATION_FORCE_DWORD = -1            ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_BLEND_PROP
        D2D1_BLEND_PROP_MODE = 0                             ' &H00000000&
        D2D1_BLEND_PROP_FORCE_DWORD = -1                     ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_BLEND_MODE
        D2D1_BLEND_MODE_MULTIPLY = 0                         ' &H00000000&
        D2D1_BLEND_MODE_SCREEN = 1                           ' &H00000001&
        D2D1_BLEND_MODE_DARKEN = 2                           ' &H00000002&
        D2D1_BLEND_MODE_LIGHTEN = 3                          ' &H00000003&
        D2D1_BLEND_MODE_DISSOLVE = 4                         ' &H00000004&
        D2D1_BLEND_MODE_COLOR_BURN = 5                       ' &H00000005&
        D2D1_BLEND_MODE_LINEAR_BURN = 6                      ' &H00000006&
        D2D1_BLEND_MODE_DARKER_COLOR = 7                     ' &H00000007&
        D2D1_BLEND_MODE_LIGHTER_COLOR = 8                    ' &H00000008&
        D2D1_BLEND_MODE_COLOR_DODGE = 9                      ' &H00000009&
        D2D1_BLEND_MODE_LINEAR_DODGE = 10                    ' &H0000000A&
        D2D1_BLEND_MODE_OVERLAY = 11                         ' &H0000000B&
        D2D1_BLEND_MODE_SOFT_LIGHT = 12                      ' &H0000000C&
        D2D1_BLEND_MODE_HARD_LIGHT = 13                      ' &H0000000D&
        D2D1_BLEND_MODE_VIVID_LIGHT = 14                     ' &H0000000E&
        D2D1_BLEND_MODE_LINEAR_LIGHT = 15                    ' &H0000000F&
        D2D1_BLEND_MODE_PIN_LIGHT = 16                       ' &H00000010&
        D2D1_BLEND_MODE_HARD_MIX = 17                        ' &H00000011&
        D2D1_BLEND_MODE_DIFFERENCE = 18                      ' &H00000012&
        D2D1_BLEND_MODE_EXCLUSION = 19                       ' &H00000013&
        D2D1_BLEND_MODE_HUE = 20                             ' &H00000014&
        D2D1_BLEND_MODE_SATURATION = 21                      ' &H00000015&
        D2D1_BLEND_MODE_COLOR = 22                           ' &H00000016&
        D2D1_BLEND_MODE_LUMINOSITY = 23                      ' &H00000017&
        D2D1_BLEND_MODE_SUBTRACT = 24                        ' &H00000018&
        D2D1_BLEND_MODE_DIVISION = 25                        ' &H00000019&
        D2D1_BLEND_MODE_FORCE_DWORD = -1                     ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_SATURATION_PROP
        D2D1_SATURATION_PROP_SATURATION = 0                  ' &H00000000&
        D2D1_SATURATION_PROP_FORCE_DWORD = -1                ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_HUEROTATION_PROP
        D2D1_HUEROTATION_PROP_ANGLE = 0                      ' &H00000000&
        D2D1_HUEROTATION_PROP_FORCE_DWORD = -1               ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_COLORMATRIX_PROP
        D2D1_COLORMATRIX_PROP_COLOR_MATRIX = 0               ' &H00000000&
        D2D1_COLORMATRIX_PROP_ALPHA_MODE = 1                 ' &H00000001&
        D2D1_COLORMATRIX_PROP_CLAMP_OUTPUT = 2               ' &H00000002&
        D2D1_COLORMATRIX_PROP_FORCE_DWORD = -1               ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_BITMAPSOURCE_PROP
        D2D1_BITMAPSOURCE_PROP_WIC_BITMAP_SOURCE = 0         ' &H00000000&
        D2D1_BITMAPSOURCE_PROP_SCALE = 1                     ' &H00000001&
        D2D1_BITMAPSOURCE_PROP_INTERPOLATION_MODE = 2        ' &H00000002&
        D2D1_BITMAPSOURCE_PROP_ENABLE_DPI_CORRECTION = 3     ' &H00000003&
        D2D1_BITMAPSOURCE_PROP_ALPHA_MODE = 4                ' &H00000004&
        D2D1_BITMAPSOURCE_PROP_ORIENTATION = 5               ' &H00000005&
        D2D1_BITMAPSOURCE_PROP_FORCE_DWORD = -1              ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_COMPOSITE_MODE
        D2D1_COMPOSITE_MODE_SOURCE_OVER = 0                  ' &H00000000&
        D2D1_COMPOSITE_MODE_DESTINATION_OVER = 1             ' &H00000001&
        D2D1_COMPOSITE_MODE_SOURCE_IN = 2                    ' &H00000002&
        D2D1_COMPOSITE_MODE_DESTINATION_IN = 3               ' &H00000003&
        D2D1_COMPOSITE_MODE_SOURCE_OUT = 4                   ' &H00000004&
        D2D1_COMPOSITE_MODE_DESTINATION_OUT = 5              ' &H00000005&
        D2D1_COMPOSITE_MODE_SOURCE_ATOP = 6                  ' &H00000006&
        D2D1_COMPOSITE_MODE_DESTINATION_ATOP = 7             ' &H00000007&
        D2D1_COMPOSITE_MODE_XOR = 8                          ' &H00000008&
        D2D1_COMPOSITE_MODE_PLUS = 9                         ' &H00000009&
        D2D1_COMPOSITE_MODE_SOURCE_COPY = 10                 ' &H0000000A&
        D2D1_COMPOSITE_MODE_BOUNDED_SOURCE_COPY = 11         ' &H0000000B&
        D2D1_COMPOSITE_MODE_MASK_INVERT = 12                 ' &H0000000C&
        D2D1_COMPOSITE_MODE_FORCE_DWORD = -1                 ' &HFFFFFFFF&
    End Enum
    
Public Enum D2D1_BITMAPSOURCE_INTERPOLATION_MODE
        D2D1_BITMAPSOURCE_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0 ' &H00000000&
        D2D1_BITMAPSOURCE_INTERPOLATION_MODE_LINEAR = 1      ' &H00000001&
        D2D1_BITMAPSOURCE_INTERPOLATION_MODE_CUBIC = 2       ' &H00000002&
        D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FANT = 6        ' &H00000006&
        D2D1_BITMAPSOURCE_INTERPOLATION_MODE_MIPMAP_LINEAR = 7 ' &H00000007&
        D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FORCE_DWORD = -1 ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_BITMAPSOURCE_ALPHA_MODE
        D2D1_BITMAPSOURCE_ALPHA_MODE_PREMULTIPLIED = 1       ' &H00000001&
        D2D1_BITMAPSOURCE_ALPHA_MODE_STRAIGHT = 2            ' &H00000002&
        D2D1_BITMAPSOURCE_ALPHA_MODE_FORCE_DWORD = -1        ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_COMPOSITE_PROP
        D2D1_COMPOSITE_PROP_MODE = 0                         ' &H00000000&
        D2D1_COMPOSITE_PROP_FORCE_DWORD = -1                 ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_3DTRANSFORM_PROP
        D2D1_3DTRANSFORM_PROP_INTERPOLATION_MODE = 0         ' &H00000000&
        D2D1_3DTRANSFORM_PROP_BORDER_MODE = 1                ' &H00000001&
        D2D1_3DTRANSFORM_PROP_TRANSFORM_MATRIX = 2           ' &H00000002&
        D2D1_3DTRANSFORM_PROP_FORCE_DWORD = -1               ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_3DTRANSFORM_INTERPOLATION_MODE
        D2D1_3DTRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0 ' &H00000000&
        D2D1_3DTRANSFORM_INTERPOLATION_MODE_LINEAR = 1       ' &H00000001&
        D2D1_3DTRANSFORM_INTERPOLATION_MODE_CUBIC = 2        ' &H00000002&
        D2D1_3DTRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3 ' &H00000003&
        D2D1_3DTRANSFORM_INTERPOLATION_MODE_ANISOTROPIC = 4  ' &H00000004&
        D2D1_3DTRANSFORM_INTERPOLATION_MODE_FORCE_DWORD = -1 ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_3DPERSPECTIVETRANSFORM_PROP
        D2D1_3DPERSPECTIVETRANSFORM_PROP_INTERPOLATION_MODE = 0 ' &H00000000&
        D2D1_3DPERSPECTIVETRANSFORM_PROP_BORDER_MODE = 1     ' &H00000001&
        D2D1_3DPERSPECTIVETRANSFORM_PROP_DEPTH = 2           ' &H00000002&
        D2D1_3DPERSPECTIVETRANSFORM_PROP_PERSPECTIVE_ORIGIN = 3 ' &H00000003&
        D2D1_3DPERSPECTIVETRANSFORM_PROP_LOCAL_OFFSET = 4    ' &H00000004&
        D2D1_3DPERSPECTIVETRANSFORM_PROP_GLOBAL_OFFSET = 5   ' &H00000005&
        D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION_ORIGIN = 6 ' &H00000006&
        D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION = 7        ' &H00000007&
        D2D1_3DPERSPECTIVETRANSFORM_PROP_FORCE_DWORD = -1    ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE
        D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0 ' &H00000000&
        D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_LINEAR = 1 ' &H00000001&
        D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_CUBIC = 2 ' &H00000002&
        D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3 ' &H00000003&
        D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC = 4 ' &H00000004&
        D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_FORCE_DWORD = -1 ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_2DAFFINETRANSFORM_PROP
        D2D1_2DAFFINETRANSFORM_PROP_INTERPOLATION_MODE = 0   ' &H00000000&
        D2D1_2DAFFINETRANSFORM_PROP_BORDER_MODE = 1          ' &H00000001&
        D2D1_2DAFFINETRANSFORM_PROP_TRANSFORM_MATRIX = 2     ' &H00000002&
        D2D1_2DAFFINETRANSFORM_PROP_SHARPNESS = 3            ' &H00000003&
        D2D1_2DAFFINETRANSFORM_PROP_FORCE_DWORD = -1         ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE
        D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0 ' &H00000000&
        D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_LINEAR = 1 ' &H00000001&
        D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_CUBIC = 2  ' &H00000002&
        D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3 ' &H00000003&
        D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC = 4 ' &H00000004&
        D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5 ' &H00000005&
        D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_FORCE_DWORD = -1 ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_DPICOMPENSATION_PROP
        D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE = 0     ' &H00000000&
        D2D1_DPICOMPENSATION_PROP_BORDER_MODE = 1            ' &H00000001&
        D2D1_DPICOMPENSATION_PROP_INPUT_DPI = 2              ' &H00000002&
        D2D1_DPICOMPENSATION_PROP_FORCE_DWORD = -1           ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_DPICOMPENSATION_INTERPOLATION_MODE
        D2D1_DPICOMPENSATION_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0 ' &H00000000&
        D2D1_DPICOMPENSATION_INTERPOLATION_MODE_LINEAR = 1   ' &H00000001&
        D2D1_DPICOMPENSATION_INTERPOLATION_MODE_CUBIC = 2    ' &H00000002&
        D2D1_DPICOMPENSATION_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3 ' &H00000003&
        D2D1_DPICOMPENSATION_INTERPOLATION_MODE_ANISOTROPIC = 4 ' &H00000004&
        D2D1_DPICOMPENSATION_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5 ' &H00000005&
        D2D1_DPICOMPENSATION_INTERPOLATION_MODE_FORCE_DWORD = -1 ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_SCALE_PROP
        D2D1_SCALE_PROP_SCALE = 0                            ' &H00000000&
        D2D1_SCALE_PROP_CENTER_POINT = 1                     ' &H00000001&
        D2D1_SCALE_PROP_INTERPOLATION_MODE = 2               ' &H00000002&
        D2D1_SCALE_PROP_BORDER_MODE = 3                      ' &H00000003&
        D2D1_SCALE_PROP_SHARPNESS = 4                        ' &H00000004&
        D2D1_SCALE_PROP_FORCE_DWORD = -1                     ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_SCALE_INTERPOLATION_MODE
        D2D1_SCALE_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0   ' &H00000000&
        D2D1_SCALE_INTERPOLATION_MODE_LINEAR = 1             ' &H00000001&
        D2D1_SCALE_INTERPOLATION_MODE_CUBIC = 2              ' &H00000002&
        D2D1_SCALE_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3 ' &H00000003&
        D2D1_SCALE_INTERPOLATION_MODE_ANISOTROPIC = 4        ' &H00000004&
        D2D1_SCALE_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5 ' &H00000005&
        D2D1_SCALE_INTERPOLATION_MODE_FORCE_DWORD = -1       ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_TURBULENCE_PROP
        D2D1_TURBULENCE_PROP_OFFSET = 0                      ' &H00000000&
        D2D1_TURBULENCE_PROP_SIZE = 1                        ' &H00000001&
        D2D1_TURBULENCE_PROP_BASE_FREQUENCY = 2              ' &H00000002&
        D2D1_TURBULENCE_PROP_NUM_OCTAVES = 3                 ' &H00000003&
        D2D1_TURBULENCE_PROP_SEED = 4                        ' &H00000004&
        D2D1_TURBULENCE_PROP_NOISE = 5                       ' &H00000005&
        D2D1_TURBULENCE_PROP_STITCHABLE = 6                  ' &H00000006&
        D2D1_TURBULENCE_PROP_FORCE_DWORD = -1                ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_TURBULENCE_NOISE
        D2D1_TURBULENCE_NOISE_FRACTAL_SUM = 0                ' &H00000000&
        D2D1_TURBULENCE_NOISE_TURBULENCE = 1                 ' &H00000001&
        D2D1_TURBULENCE_NOISE_FORCE_DWORD = -1               ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_DISPLACEMENTMAP_PROP
        D2D1_DISPLACEMENTMAP_PROP_SCALE = 0                  ' &H00000000&
        D2D1_DISPLACEMENTMAP_PROP_X_CHANNEL_SELECT = 1       ' &H00000001&
        D2D1_DISPLACEMENTMAP_PROP_Y_CHANNEL_SELECT = 2       ' &H00000002&
        D2D1_DISPLACEMENTMAP_PROP_FORCE_DWORD = -1           ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_COLORMANAGEMENT_PROP
        D2D1_COLORMANAGEMENT_PROP_SOURCE_COLOR_CONTEXT = 0   ' &H00000000&
        D2D1_COLORMANAGEMENT_PROP_SOURCE_RENDERING_INTENT = 1 ' &H00000001&
        D2D1_COLORMANAGEMENT_PROP_DESTINATION_COLOR_CONTEXT = 2 ' &H00000002&
        D2D1_COLORMANAGEMENT_PROP_DESTINATION_RENDERING_INTENT = 3 ' &H00000003&
        D2D1_COLORMANAGEMENT_PROP_ALPHA_MODE = 4             ' &H00000004&
        D2D1_COLORMANAGEMENT_PROP_QUALITY = 5                ' &H00000005&
        D2D1_COLORMANAGEMENT_PROP_FORCE_DWORD = -1           ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_COLORMANAGEMENT_ALPHA_MODE
        D2D1_COLORMANAGEMENT_ALPHA_MODE_PREMULTIPLIED = 1    ' &H00000001&
        D2D1_COLORMANAGEMENT_ALPHA_MODE_STRAIGHT = 2         ' &H00000002&
        D2D1_COLORMANAGEMENT_ALPHA_MODE_FORCE_DWORD = -1     ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_COLORMANAGEMENT_QUALITY
        D2D1_COLORMANAGEMENT_QUALITY_PROOF = 0               ' &H00000000&
        D2D1_COLORMANAGEMENT_QUALITY_NORMAL = 1              ' &H00000001&
        D2D1_COLORMANAGEMENT_QUALITY_BEST = 2                ' &H00000002&
        D2D1_COLORMANAGEMENT_QUALITY_FORCE_DWORD = -1        ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_COLORMANAGEMENT_RENDERING_INTENT
        D2D1_COLORMANAGEMENT_RENDERING_INTENT_PERCEPTUAL = 0 ' &H00000000&
        D2D1_COLORMANAGEMENT_RENDERING_INTENT_RELATIVE_COLORIMETRIC = 1 ' &H00000001&
        D2D1_COLORMANAGEMENT_RENDERING_INTENT_SATURATION = 2 ' &H00000002&
        D2D1_COLORMANAGEMENT_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC = 3 ' &H00000003&
        D2D1_COLORMANAGEMENT_RENDERING_INTENT_FORCE_DWORD = -1 ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_HISTOGRAM_PROP
        D2D1_HISTOGRAM_PROP_NUM_BINS = 0                     ' &H00000000&
        D2D1_HISTOGRAM_PROP_CHANNEL_SELECT = 1               ' &H00000001&
        D2D1_HISTOGRAM_PROP_HISTOGRAM_OUTPUT = 2             ' &H00000002&
        D2D1_HISTOGRAM_PROP_FORCE_DWORD = -1                 ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_POINTSPECULAR_PROP
        D2D1_POINTSPECULAR_PROP_LIGHT_POSITION = 0           ' &H00000000&
        D2D1_POINTSPECULAR_PROP_SPECULAR_EXPONENT = 1        ' &H00000001&
        D2D1_POINTSPECULAR_PROP_SPECULAR_CONSTANT = 2        ' &H00000002&
        D2D1_POINTSPECULAR_PROP_SURFACE_SCALE = 3            ' &H00000003&
        D2D1_POINTSPECULAR_PROP_COLOR = 4                    ' &H00000004&
        D2D1_POINTSPECULAR_PROP_KERNEL_UNIT_LENGTH = 5       ' &H00000005&
        D2D1_POINTSPECULAR_PROP_SCALE_MODE = 6               ' &H00000006&
        D2D1_POINTSPECULAR_PROP_FORCE_DWORD = -1             ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_POINTSPECULAR_SCALE_MODE
        D2D1_POINTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR = 0   ' &H00000000&
        D2D1_POINTSPECULAR_SCALE_MODE_LINEAR = 1             ' &H00000001&
        D2D1_POINTSPECULAR_SCALE_MODE_CUBIC = 2              ' &H00000002&
        D2D1_POINTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3 ' &H00000003&
        D2D1_POINTSPECULAR_SCALE_MODE_ANISOTROPIC = 4        ' &H00000004&
        D2D1_POINTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC = 5 ' &H00000005&
        D2D1_POINTSPECULAR_SCALE_MODE_FORCE_DWORD = -1       ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_SPOTSPECULAR_PROP
        D2D1_SPOTSPECULAR_PROP_LIGHT_POSITION = 0            ' &H00000000&
        D2D1_SPOTSPECULAR_PROP_POINTS_AT = 1                 ' &H00000001&
        D2D1_SPOTSPECULAR_PROP_FOCUS = 2                     ' &H00000002&
        D2D1_SPOTSPECULAR_PROP_LIMITING_CONE_ANGLE = 3       ' &H00000003&
        D2D1_SPOTSPECULAR_PROP_SPECULAR_EXPONENT = 4         ' &H00000004&
        D2D1_SPOTSPECULAR_PROP_SPECULAR_CONSTANT = 5         ' &H00000005&
        D2D1_SPOTSPECULAR_PROP_SURFACE_SCALE = 6             ' &H00000006&
        D2D1_SPOTSPECULAR_PROP_COLOR = 7                     ' &H00000007&
        D2D1_SPOTSPECULAR_PROP_KERNEL_UNIT_LENGTH = 8        ' &H00000008&
        D2D1_SPOTSPECULAR_PROP_SCALE_MODE = 9                ' &H00000009&
        D2D1_SPOTSPECULAR_PROP_FORCE_DWORD = -1              ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_SPOTSPECULAR_SCALE_MODE
        D2D1_SPOTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR = 0    ' &H00000000&
        D2D1_SPOTSPECULAR_SCALE_MODE_LINEAR = 1              ' &H00000001&
        D2D1_SPOTSPECULAR_SCALE_MODE_CUBIC = 2               ' &H00000002&
        D2D1_SPOTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3 ' &H00000003&
        D2D1_SPOTSPECULAR_SCALE_MODE_ANISOTROPIC = 4         ' &H00000004&
        D2D1_SPOTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC = 5  ' &H00000005&
        D2D1_SPOTSPECULAR_SCALE_MODE_FORCE_DWORD = -1        ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_DISTANTSPECULAR_PROP
        D2D1_DISTANTSPECULAR_PROP_AZIMUTH = 0                ' &H00000000&
        D2D1_DISTANTSPECULAR_PROP_ELEVATION = 1              ' &H00000001&
        D2D1_DISTANTSPECULAR_PROP_SPECULAR_EXPONENT = 2      ' &H00000002&
        D2D1_DISTANTSPECULAR_PROP_SPECULAR_CONSTANT = 3      ' &H00000003&
        D2D1_DISTANTSPECULAR_PROP_SURFACE_SCALE = 4          ' &H00000004&
        D2D1_DISTANTSPECULAR_PROP_COLOR = 5                  ' &H00000005&
        D2D1_DISTANTSPECULAR_PROP_KERNEL_UNIT_LENGTH = 6     ' &H00000006&
        D2D1_DISTANTSPECULAR_PROP_SCALE_MODE = 7             ' &H00000007&
        D2D1_DISTANTSPECULAR_PROP_FORCE_DWORD = -1           ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_DISTANTSPECULAR_SCALE_MODE
        D2D1_DISTANTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR = 0 ' &H00000000&
        D2D1_DISTANTSPECULAR_SCALE_MODE_LINEAR = 1           ' &H00000001&
        D2D1_DISTANTSPECULAR_SCALE_MODE_CUBIC = 2            ' &H00000002&
        D2D1_DISTANTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3 ' &H00000003&
        D2D1_DISTANTSPECULAR_SCALE_MODE_ANISOTROPIC = 4      ' &H00000004&
        D2D1_DISTANTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC = 5 ' &H00000005&
        D2D1_DISTANTSPECULAR_SCALE_MODE_FORCE_DWORD = -1     ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_POINTDIFFUSE_PROP
        D2D1_POINTDIFFUSE_PROP_LIGHT_POSITION = 0            ' &H00000000&
        D2D1_POINTDIFFUSE_PROP_DIFFUSE_CONSTANT = 1          ' &H00000001&
        D2D1_POINTDIFFUSE_PROP_SURFACE_SCALE = 2             ' &H00000002&
        D2D1_POINTDIFFUSE_PROP_COLOR = 3                     ' &H00000003&
        D2D1_POINTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = 4        ' &H00000004&
        D2D1_POINTDIFFUSE_PROP_SCALE_MODE = 5                ' &H00000005&
        D2D1_POINTDIFFUSE_PROP_FORCE_DWORD = -1              ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_POINTDIFFUSE_SCALE_MODE
        D2D1_POINTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR = 0    ' &H00000000&
        D2D1_POINTDIFFUSE_SCALE_MODE_LINEAR = 1              ' &H00000001&
        D2D1_POINTDIFFUSE_SCALE_MODE_CUBIC = 2               ' &H00000002&
        D2D1_POINTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3 ' &H00000003&
        D2D1_POINTDIFFUSE_SCALE_MODE_ANISOTROPIC = 4         ' &H00000004&
        D2D1_POINTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC = 5  ' &H00000005&
        D2D1_POINTDIFFUSE_SCALE_MODE_FORCE_DWORD = -1        ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_SPOTDIFFUSE_PROP
        D2D1_SPOTDIFFUSE_PROP_LIGHT_POSITION = 0             ' &H00000000&
        D2D1_SPOTDIFFUSE_PROP_POINTS_AT = 1                  ' &H00000001&
        D2D1_SPOTDIFFUSE_PROP_FOCUS = 2                      ' &H00000002&
        D2D1_SPOTDIFFUSE_PROP_LIMITING_CONE_ANGLE = 3        ' &H00000003&
        D2D1_SPOTDIFFUSE_PROP_DIFFUSE_CONSTANT = 4           ' &H00000004&
        D2D1_SPOTDIFFUSE_PROP_SURFACE_SCALE = 5              ' &H00000005&
        D2D1_SPOTDIFFUSE_PROP_COLOR = 6                      ' &H00000006&
        D2D1_SPOTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = 7         ' &H00000007&
        D2D1_SPOTDIFFUSE_PROP_SCALE_MODE = 8                 ' &H00000008&
        D2D1_SPOTDIFFUSE_PROP_FORCE_DWORD = -1               ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_SPOTDIFFUSE_SCALE_MODE
        D2D1_SPOTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR = 0     ' &H00000000&
        D2D1_SPOTDIFFUSE_SCALE_MODE_LINEAR = 1               ' &H00000001&
        D2D1_SPOTDIFFUSE_SCALE_MODE_CUBIC = 2                ' &H00000002&
        D2D1_SPOTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3  ' &H00000003&
        D2D1_SPOTDIFFUSE_SCALE_MODE_ANISOTROPIC = 4          ' &H00000004&
        D2D1_SPOTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC = 5   ' &H00000005&
        D2D1_SPOTDIFFUSE_SCALE_MODE_FORCE_DWORD = -1         ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_DISTANTDIFFUSE_PROP
        D2D1_DISTANTDIFFUSE_PROP_AZIMUTH = 0                 ' &H00000000&
        D2D1_DISTANTDIFFUSE_PROP_ELEVATION = 1               ' &H00000001&
        D2D1_DISTANTDIFFUSE_PROP_DIFFUSE_CONSTANT = 2        ' &H00000002&
        D2D1_DISTANTDIFFUSE_PROP_SURFACE_SCALE = 3           ' &H00000003&
        D2D1_DISTANTDIFFUSE_PROP_COLOR = 4                   ' &H00000004&
        D2D1_DISTANTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = 5      ' &H00000005&
        D2D1_DISTANTDIFFUSE_PROP_SCALE_MODE = 6              ' &H00000006&
        D2D1_DISTANTDIFFUSE_PROP_FORCE_DWORD = -1            ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_DISTANTDIFFUSE_SCALE_MODE
        D2D1_DISTANTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR = 0  ' &H00000000&
        D2D1_DISTANTDIFFUSE_SCALE_MODE_LINEAR = 1            ' &H00000001&
        D2D1_DISTANTDIFFUSE_SCALE_MODE_CUBIC = 2             ' &H00000002&
        D2D1_DISTANTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3 ' &H00000003&
        D2D1_DISTANTDIFFUSE_SCALE_MODE_ANISOTROPIC = 4       ' &H00000004&
        D2D1_DISTANTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC = 5 ' &H00000005&
        D2D1_DISTANTDIFFUSE_SCALE_MODE_FORCE_DWORD = -1      ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_FLOOD_PROP
        D2D1_FLOOD_PROP_COLOR = 0                            ' &H00000000&
        D2D1_FLOOD_PROP_FORCE_DWORD = -1                     ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_LINEARTRANSFER_PROP
        D2D1_LINEARTRANSFER_PROP_RED_Y_INTERCEPT = 0         ' &H00000000&
        D2D1_LINEARTRANSFER_PROP_RED_SLOPE = 1               ' &H00000001&
        D2D1_LINEARTRANSFER_PROP_RED_DISABLE = 2             ' &H00000002&
        D2D1_LINEARTRANSFER_PROP_GREEN_Y_INTERCEPT = 3       ' &H00000003&
        D2D1_LINEARTRANSFER_PROP_GREEN_SLOPE = 4             ' &H00000004&
        D2D1_LINEARTRANSFER_PROP_GREEN_DISABLE = 5           ' &H00000005&
        D2D1_LINEARTRANSFER_PROP_BLUE_Y_INTERCEPT = 6        ' &H00000006&
        D2D1_LINEARTRANSFER_PROP_BLUE_SLOPE = 7              ' &H00000007&
        D2D1_LINEARTRANSFER_PROP_BLUE_DISABLE = 8            ' &H00000008&
        D2D1_LINEARTRANSFER_PROP_ALPHA_Y_INTERCEPT = 9       ' &H00000009&
        D2D1_LINEARTRANSFER_PROP_ALPHA_SLOPE = 10            ' &H0000000A&
        D2D1_LINEARTRANSFER_PROP_ALPHA_DISABLE = 11          ' &H0000000B&
        D2D1_LINEARTRANSFER_PROP_CLAMP_OUTPUT = 12           ' &H0000000C&
        D2D1_LINEARTRANSFER_PROP_FORCE_DWORD = -1            ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_GAMMATRANSFER_PROP
        D2D1_GAMMATRANSFER_PROP_RED_AMPLITUDE = 0            ' &H00000000&
        D2D1_GAMMATRANSFER_PROP_RED_EXPONENT = 1             ' &H00000001&
        D2D1_GAMMATRANSFER_PROP_RED_OFFSET = 2               ' &H00000002&
        D2D1_GAMMATRANSFER_PROP_RED_DISABLE = 3              ' &H00000003&
        D2D1_GAMMATRANSFER_PROP_GREEN_AMPLITUDE = 4          ' &H00000004&
        D2D1_GAMMATRANSFER_PROP_GREEN_EXPONENT = 5           ' &H00000005&
        D2D1_GAMMATRANSFER_PROP_GREEN_OFFSET = 6             ' &H00000006&
        D2D1_GAMMATRANSFER_PROP_GREEN_DISABLE = 7            ' &H00000007&
        D2D1_GAMMATRANSFER_PROP_BLUE_AMPLITUDE = 8           ' &H00000008&
        D2D1_GAMMATRANSFER_PROP_BLUE_EXPONENT = 9            ' &H00000009&
        D2D1_GAMMATRANSFER_PROP_BLUE_OFFSET = 10             ' &H0000000A&
        D2D1_GAMMATRANSFER_PROP_BLUE_DISABLE = 11            ' &H0000000B&
        D2D1_GAMMATRANSFER_PROP_ALPHA_AMPLITUDE = 12         ' &H0000000C&
        D2D1_GAMMATRANSFER_PROP_ALPHA_EXPONENT = 13          ' &H0000000D&
        D2D1_GAMMATRANSFER_PROP_ALPHA_OFFSET = 14            ' &H0000000E&
        D2D1_GAMMATRANSFER_PROP_ALPHA_DISABLE = 15           ' &H0000000F&
        D2D1_GAMMATRANSFER_PROP_CLAMP_OUTPUT = 16            ' &H00000010&
        D2D1_GAMMATRANSFER_PROP_FORCE_DWORD = -1             ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_TABLETRANSFER_PROP
        D2D1_TABLETRANSFER_PROP_RED_TABLE = 0                ' &H00000000&
        D2D1_TABLETRANSFER_PROP_RED_DISABLE = 1              ' &H00000001&
        D2D1_TABLETRANSFER_PROP_GREEN_TABLE = 2              ' &H00000002&
        D2D1_TABLETRANSFER_PROP_GREEN_DISABLE = 3            ' &H00000003&
        D2D1_TABLETRANSFER_PROP_BLUE_TABLE = 4               ' &H00000004&
        D2D1_TABLETRANSFER_PROP_BLUE_DISABLE = 5             ' &H00000005&
        D2D1_TABLETRANSFER_PROP_ALPHA_TABLE = 6              ' &H00000006&
        D2D1_TABLETRANSFER_PROP_ALPHA_DISABLE = 7            ' &H00000007&
        D2D1_TABLETRANSFER_PROP_CLAMP_OUTPUT = 8             ' &H00000008&
        D2D1_TABLETRANSFER_PROP_FORCE_DWORD = -1             ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_DISCRETETRANSFER_PROP
        D2D1_DISCRETETRANSFER_PROP_RED_TABLE = 0             ' &H00000000&
        D2D1_DISCRETETRANSFER_PROP_RED_DISABLE = 1           ' &H00000001&
        D2D1_DISCRETETRANSFER_PROP_GREEN_TABLE = 2           ' &H00000002&
        D2D1_DISCRETETRANSFER_PROP_GREEN_DISABLE = 3         ' &H00000003&
        D2D1_DISCRETETRANSFER_PROP_BLUE_TABLE = 4            ' &H00000004&
        D2D1_DISCRETETRANSFER_PROP_BLUE_DISABLE = 5          ' &H00000005&
        D2D1_DISCRETETRANSFER_PROP_ALPHA_TABLE = 6           ' &H00000006&
        D2D1_DISCRETETRANSFER_PROP_ALPHA_DISABLE = 7         ' &H00000007&
        D2D1_DISCRETETRANSFER_PROP_CLAMP_OUTPUT = 8          ' &H00000008&
        D2D1_DISCRETETRANSFER_PROP_FORCE_DWORD = -1          ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_CONVOLVEMATRIX_PROP
        D2D1_CONVOLVEMATRIX_PROP_KERNEL_UNIT_LENGTH = 0      ' &H00000000&
        D2D1_CONVOLVEMATRIX_PROP_SCALE_MODE = 1              ' &H00000001&
        D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_X = 2           ' &H00000002&
        D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_Y = 3           ' &H00000003&
        D2D1_CONVOLVEMATRIX_PROP_KERNEL_MATRIX = 4           ' &H00000004&
        D2D1_CONVOLVEMATRIX_PROP_DIVISOR = 5                 ' &H00000005&
        D2D1_CONVOLVEMATRIX_PROP_BIAS = 6                    ' &H00000006&
        D2D1_CONVOLVEMATRIX_PROP_KERNEL_OFFSET = 7           ' &H00000007&
        D2D1_CONVOLVEMATRIX_PROP_PRESERVE_ALPHA = 8          ' &H00000008&
        D2D1_CONVOLVEMATRIX_PROP_BORDER_MODE = 9             ' &H00000009&
        D2D1_CONVOLVEMATRIX_PROP_CLAMP_OUTPUT = 10           ' &H0000000A&
        D2D1_CONVOLVEMATRIX_PROP_FORCE_DWORD = -1            ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_CONVOLVEMATRIX_SCALE_MODE
        D2D1_CONVOLVEMATRIX_SCALE_MODE_NEAREST_NEIGHBOR = 0  ' &H00000000&
        D2D1_CONVOLVEMATRIX_SCALE_MODE_LINEAR = 1            ' &H00000001&
        D2D1_CONVOLVEMATRIX_SCALE_MODE_CUBIC = 2             ' &H00000002&
        D2D1_CONVOLVEMATRIX_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3 ' &H00000003&
        D2D1_CONVOLVEMATRIX_SCALE_MODE_ANISOTROPIC = 4       ' &H00000004&
        D2D1_CONVOLVEMATRIX_SCALE_MODE_HIGH_QUALITY_CUBIC = 5 ' &H00000005&
        D2D1_CONVOLVEMATRIX_SCALE_MODE_FORCE_DWORD = -1      ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_BRIGHTNESS_PROP
        D2D1_BRIGHTNESS_PROP_WHITE_POINT = 0                 ' &H00000000&
        D2D1_BRIGHTNESS_PROP_BLACK_POINT = 1                 ' &H00000001&
        D2D1_BRIGHTNESS_PROP_FORCE_DWORD = -1                ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_ARITHMETICCOMPOSITE_PROP
        D2D1_ARITHMETICCOMPOSITE_PROP_COEFFICIENTS = 0       ' &H00000000&
        D2D1_ARITHMETICCOMPOSITE_PROP_CLAMP_OUTPUT = 1       ' &H00000001&
        D2D1_ARITHMETICCOMPOSITE_PROP_FORCE_DWORD = -1       ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_CROP_PROP
        D2D1_CROP_PROP_RECT = 0                              ' &H00000000&
        D2D1_CROP_PROP_BORDER_MODE = 1                       ' &H00000001&
        D2D1_CROP_PROP_FORCE_DWORD = -1                      ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_BORDER_PROP
        D2D1_BORDER_PROP_EDGE_MODE_X = 0                     ' &H00000000&
        D2D1_BORDER_PROP_EDGE_MODE_Y = 1                     ' &H00000001&
        D2D1_BORDER_PROP_FORCE_DWORD = -1                    ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_BORDER_EDGE_MODE
        D2D1_BORDER_EDGE_MODE_CLAMP = 0                      ' &H00000000&
        D2D1_BORDER_EDGE_MODE_WRAP = 1                       ' &H00000001&
        D2D1_BORDER_EDGE_MODE_MIRROR = 2                     ' &H00000002&
        D2D1_BORDER_EDGE_MODE_FORCE_DWORD = -1               ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_MORPHOLOGY_PROP
        D2D1_MORPHOLOGY_PROP_MODE = 0                        ' &H00000000&
        D2D1_MORPHOLOGY_PROP_WIDTH = 1                       ' &H00000001&
        D2D1_MORPHOLOGY_PROP_HEIGHT = 2                      ' &H00000002&
        D2D1_MORPHOLOGY_PROP_FORCE_DWORD = -1                ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_MORPHOLOGY_MODE
        D2D1_MORPHOLOGY_MODE_ERODE = 0                       ' &H00000000&
        D2D1_MORPHOLOGY_MODE_DILATE = 1                      ' &H00000001&
        D2D1_MORPHOLOGY_MODE_FORCE_DWORD = -1                ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_TILE_PROP
        D2D1_TILE_PROP_RECT = 0                              ' &H00000000&
        D2D1_TILE_PROP_FORCE_DWORD = -1                      ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_ATLAS_PROP
        D2D1_ATLAS_PROP_INPUT_RECT = 0                       ' &H00000000&
        D2D1_ATLAS_PROP_INPUT_PADDING_RECT = 1               ' &H00000001&
        D2D1_ATLAS_PROP_FORCE_DWORD = -1                     ' &HFFFFFFFF&
    End Enum

Public Enum D2D1_OPACITYMETADATA_PROP
        D2D1_OPACITYMETADATA_PROP_INPUT_OPAQUE_RECT = 0      ' &H00000000&
        D2D1_OPACITYMETADATA_PROP_FORCE_DWORD = -1           ' &HFFFFFFFF&
    End Enum

    Public Type D2D1_PIXEL_FORMAT
        Format As DXGI_FORMAT                         ' offset &H0000
        AlphaMode As D2D1_ALPHA_MODE                  ' offset &H0004
    End Type                                                 ' LenB() = &H0008, Len() = &H0008, UDT Alignment = &H0004

    Public Type D2D1_RENDER_TARGET_PROPERTIES
        nType As D2D1_RENDER_TARGET_TYPE               ' offset &H0000
        PixelFormat As D2D1_PIXEL_FORMAT              ' offset &H0004
        DpiX As Single                                       ' offset &H000C
        DpiY As Single                                       ' offset &H0010
        usage As D2D1_RENDER_TARGET_USAGE             ' offset &H0014
        minLevel As D2D1_FEATURE_LEVEL                ' offset &H0018
    End Type                                                 ' LenB() = &H001C, Len() = &H001C, UDT Alignment = &H0004

    Public Type D2D1_BITMAP_PROPERTIES
        PixelFormat As D2D1_PIXEL_FORMAT              ' offset &H0000
        DpiX As Single                                       ' offset &H0008
        DpiY As Single                                       ' offset &H000C
    End Type                                                 ' LenB() = &H0010, Len() = &H0010, UDT Alignment = &H0004

    Public Type D2D1_GRADIENT_STOP
        position As Single                                   ' offset &H0000
        color As D2D1_COLOR_F                         ' offset &H0004
    End Type                                                 ' LenB() = &H0014, Len() = &H0014, UDT Alignment = &H0004

    Public Enum D2D1_GAMMA
        D2D1_GAMMA_2_2 = 0                                   ' &H00000000&
        D2D1_GAMMA_1_0 = 1                                   ' &H00000001&
        D2D1_GAMMA_FORCE_DWORD = -1                          ' &HFFFFFFFF&
    End Enum

    Public Enum D2D1_EXTEND_MODE
        D2D1_EXTEND_MODE_CLAMP = 0                           ' &H00000000&
        D2D1_EXTEND_MODE_WRAP = 1                            ' &H00000001&
        D2D1_EXTEND_MODE_MIRROR = 2                          ' &H00000002&
        D2D1_EXTEND_MODE_FORCE_DWORD = -1                    ' &HFFFFFFFF&
    End Enum

    Public Enum D2D1_BITMAP_INTERPOLATION_MODE
        D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0  ' &H00000000&
        D2D1_BITMAP_INTERPOLATION_MODE_LINEAR = 1            ' &H00000001&
        D2D1_BITMAP_INTERPOLATION_MODE_FORCE_DWORD = -1      ' &HFFFFFFFF&
    End Enum

    Public Type D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES
        startPoint As D2D1_POINT_2F                   ' offset &H0000
        endPoint As D2D1_POINT_2F                     ' offset &H0008
    End Type                                                 ' LenB() = &H0010, Len() = &H0010, UDT Alignment = &H0004

    Public Type D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES
        center As D2D1_POINT_2F                       ' offset &H0000
        gradientOriginOffset As D2D1_POINT_2F         ' offset &H0008
        radiusX As Single                                    ' offset &H0010
        radiusY As Single                                    ' offset &H0014
    End Type                                                 ' LenB() = &H0018, Len() = &H0018, UDT Alignment = &H0004

    Public Type D2D_RECT_F
        Left As Single                                       ' offset &H0000
        Top As Single                                        ' offset &H0004
        Right As Single                                      ' offset &H0008
        Bottom As Single                                     ' offset &H000C
    End Type

    Public Type D2D1_VECTOR_2F
        x As Single                                          ' offset &H0000
        y As Single                                          ' offset &H0004
    End Type

    Public Type D2D_MATRIX_5X4_F
        m(0 To 4, 0 To 3) As Single                          ' offset &H0000
    End Type                                                 ' LenB() = &H0050, Len() = &H0050, UDT Alignment = &H0004

    Public Type D2D_VECTOR_4F
        x As Single                                          ' offset &H0000
        y As Single                                          ' offset &H0004
        z As Single                                          ' offset &H0008
        w As Single                                          ' offset &H000C
    End Type
    
    Public Enum D2D1_COLORMATRIX_ALPHA_MODE
        D2D1_COLORMATRIX_ALPHA_MODE_PREMULTIPLIED = 1        ' &H00000001&
        D2D1_COLORMATRIX_ALPHA_MODE_STRAIGHT = 2             ' &H00000002&
        D2D1_COLORMATRIX_ALPHA_MODE_FORCE_DWORD = -1         ' &HFFFFFFFF&
    End Enum
        
    Public Enum D2D1_BORDER_MODE
        D2D1_BORDER_MODE_SOFT = 0                            ' &H00000000&
        D2D1_BORDER_MODE_HARD = 1                            ' &H00000001&
        D2D1_BORDER_MODE_FORCE_DWORD = -1                    ' &HFFFFFFFF&
    End Enum
        
    Public Enum D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS
        D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE = 0       ' &H00000000&
        D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE = 1 ' &H00000001&
        D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_FORCE_DWORD = -1 ' &HFFFFFFFF&
    End Enum

    Public Enum D2D1_OPACITY_MASK_CONTENT
        D2D1_OPACITY_MASK_CONTENT_GRAPHICS = 0               ' &H00000000&
        D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL = 1           ' &H00000001&
        D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE = 2    ' &H00000002&
        D2D1_OPACITY_MASK_CONTENT_FORCE_DWORD = -1           ' &HFFFFFFFF&
    End Enum

    Public Enum D2D1_DRAW_TEXT_OPTIONS
        D2D1_DRAW_TEXT_OPTIONS_NO_SNAP = 1                   ' &H00000001&
        D2D1_DRAW_TEXT_OPTIONS_CLIP = 2                      ' &H00000002&
        D2D1_DRAW_TEXT_OPTIONS_NONE = 0                      ' &H00000000&
        D2D1_DRAW_TEXT_OPTIONS_FORCE_DWORD = -1              ' &HFFFFFFFF&
    End Enum

    Public Enum D2D1_LAYER_OPTIONS
        D2D1_LAYER_OPTIONS_NONE = 0                          ' &H00000000&
        D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE = 1      ' &H00000001&
        D2D1_LAYER_OPTIONS_FORCE_DWORD = -1                  ' &HFFFFFFFF&
    End Enum

    Public Type D2D1_LAYER_PARAMETERS
        contentBounds As D2D1_RECT_F                  ' offset &H0000
        geometricMask As ID2D1Geometry                ' offset &H0010
        maskAntialiasMode As D2D1_ANTIALIAS_MODE      ' offset &H0014
        maskTransform As D2D1_MATRIX_3X2_F            ' offset &H0018
        opacity As Single                                    ' offset &H0030
        opacityBrush As ID2D1Brush                    ' offset &H0034
        layerOptions As D2D1_LAYER_OPTIONS            ' offset &H0038
    End Type                                                 ' LenB() = &H003C, Len() = &H003C, UDT Alignment = &H0004

    Public Enum D2D1_PRESENT_OPTIONS
        D2D1_PRESENT_OPTIONS_NONE = 0                        ' &H00000000&
        D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS = 1             ' &H00000001&
        D2D1_PRESENT_OPTIONS_IMMEDIATELY = 2                 ' &H00000002&
        D2D1_PRESENT_OPTIONS_FORCE_DWORD = -1                ' &HFFFFFFFF&
    End Enum

    Public Type D2D1_HWND_RENDER_TARGET_PROPERTIES
        hwnd As LongPtr                                         ' offset &H0000
        pixelSize As D2D1_SIZE_U                      ' offset &H0004
        presentOptions As D2D1_PRESENT_OPTIONS        ' offset &H000C
    End Type                                                 ' LenB() = &H0010, Len() = &H0010, UDT Alignment = &H0004

    Public Enum D2D1_WINDOW_STATE
        D2D1_WINDOW_STATE_NONE = 0                           ' &H00000000&
        D2D1_WINDOW_STATE_OCCLUDED = 1                       ' &H00000001&
        D2D1_WINDOW_STATE_FORCE_DWORD = -1                   ' &HFFFFFFFF&
    End Enum

    Public Enum D2D1_DC_INITIALIZE_MODE
        D2D1_DC_INITIALIZE_MODE_COPY = 0                     ' &H00000000&
        D2D1_DC_INITIALIZE_MODE_CLEAR = 1                    ' &H00000001&
        D2D1_DC_INITIALIZE_MODE_FORCE_DWORD = -1             ' &HFFFFFFFF&
    End Enum

    Public Enum D2D1_DEBUG_LEVEL
        D2D1_DEBUG_LEVEL_NONE = 0                            ' &H00000000&
        D2D1_DEBUG_LEVEL_ERROR = 1                           ' &H00000001&
        D2D1_DEBUG_LEVEL_WARNING = 2                         ' &H00000002&
        D2D1_DEBUG_LEVEL_INFORMATION = 3                     ' &H00000003&
        D2D1_DEBUG_LEVEL_FORCE_DWORD = -1                    ' &HFFFFFFFF&
    End Enum

    Public Enum D2D1_FACTORY_TYPE
        D2D1_FACTORY_TYPE_SINGLE_THREADED = 0                ' &H00000000&
        D2D1_FACTORY_TYPE_MULTI_THREADED = 1                 ' &H00000001&
        D2D1_FACTORY_TYPE_FORCE_DWORD = -1                   ' &HFFFFFFFF&
    End Enum

    Public Type D2D1_BRUSH_PROPERTIES
        opacity As Single                                    ' offset &H0000
        transform As D2D1_MATRIX_3X2_F                ' offset &H0004
    End Type                                                 ' LenB() = &H001C, Len() = &H001C, UDT Alignment = &H0004

    Public Type D2D1_BITMAP_BRUSH_PROPERTIES
        extendModeX As D2D1_EXTEND_MODE               ' offset &H0000
        extendModeY As D2D1_EXTEND_MODE               ' offset &H0004
        InterpolationMode As D2D1_BITMAP_INTERPOLATION_MODE ' offset &H0008
    End Type                                                 ' LenB() = &H000C, Len() = &H000C, UDT Alignment = &H0004

    Public Type D2D1_FACTORY_OPTIONS
        debugLevel As D2D1_DEBUG_LEVEL                ' offset &H0000
    End Type

Public Const FACDXGI As Long = 2170
Public Const DXGI_CPU_ACCESS_NONE As Long = 0
Public Const DXGI_CPU_ACCESS_DYNAMIC As Long = 1
Public Const DXGI_CPU_ACCESS_READ_WRITE As Long = 2
Public Const DXGI_CPU_ACCESS_SCRATCH As Long = 3
Public Const DXGI_CPU_ACCESS_FIELD As Long = 15
Public Const DXGI_USAGE_SHADER_INPUT As Long = 16
Public Const DXGI_USAGE_RENDER_TARGET_OUTPUT As Long = 32
Public Const DXGI_USAGE_BACK_BUFFER As Long = 64
Public Const DXGI_USAGE_SHARED As Long = 128
Public Const DXGI_USAGE_READ_ONLY As Long = 256
Public Const DXGI_USAGE_DISCARD_ON_PRESENT As Long = 512
Public Const DXGI_USAGE_UNORDERED_ACCESS As Long = 1024
Public Const DXGI_RESOURCE_PRIORITY_MINIMUM As Long = 671088640
Public Const DXGI_RESOURCE_PRIORITY_LOW As Long = 1342177280
Public Const DXGI_RESOURCE_PRIORITY_NORMAL As Long = 2013265920
Public Const DXGI_RESOURCE_PRIORITY_HIGH As Long = -1610612736
Public Const DXGI_RESOURCE_PRIORITY_MAXIMUM As Long = -939524096
Public Const DXGI_MAX_SWAP_CHAIN_BUFFERS As Long = 16
Public Const DXGI_PRESENT_TEST As Long = 1
Public Const DXGI_PRESENT_DO_NOT_SEQUENCE As Long = 2
Public Const DXGI_PRESENT_RESTART As Long = 4
Public Const DXGI_PRESENT_DO_NOT_WAIT As Long = 8
Public Const DXGI_PRESENT_STEREO_PREFER_RIGHT As Long = 16
Public Const DXGI_PRESENT_STEREO_TEMPORARY_MONO As Long = 32
Public Const DXGI_PRESENT_RESTRICT_TO_OUTPUT As Long = 64
Public Const DXGI_PRESENT_USE_DURATION As Long = 256
Public Const DXGI_PRESENT_ALLOW_TEARING As Long = 512
Public Const DXGI_MWA_NO_WINDOW_CHANGES As Long = 1
Public Const DXGI_MWA_NO_ALT_ENTER As Long = 2
Public Const DXGI_MWA_NO_PRINT_SCREEN As Long = 4
Public Const DXGI_MWA_VALID As Long = 7
Public Const DXGI_ENUM_MODES_STEREO As Long = 4
Public Const DXGI_ENUM_MODES_DISABLED_STEREO As Long = 8
Public Const DXGI_SHARED_RESOURCE_READ As Long = -2147483648
Public Const DXGI_SHARED_RESOURCE_WRITE As Long = 1
Public Const DXGI_STANDARD_MULTISAMPLE_QUALITY_PATTERN As Long = -1
Public Const DXGI_CENTER_MULTISAMPLE_QUALITY_PATTERN As Long = -2

 Public Declare Function CreateDXGIFactory Lib "dxgi.dll" (ByRef riid As UUID, ByRef ppFactory As Any) As Long
Public Declare Function CreateDXGIFactory1 Lib "dxgi.dll" (ByRef riid As UUID, ByRef ppFactory As Any) As Long
Public Declare Function CreateDXGIFactory2 Lib "dxgi.dll" (ByVal flags As Long, ByRef riid As UUID, ByRef ppFactory As Any) As Long
Public Declare Function DXGIGetDebugInterface1 Lib "dxgi.dll" (ByVal flags As Long, ByRef riid As UUID, ByRef pDebug As Any) As Long


Public Type DXGI_RATIONAL
        Numerator As Long                                    ' offset &H0000
        Denominator As Long                                  ' offset &H0004
    End Type                                                 ' LenB() = &H0008, Len() = &H0008, UDT Alignment = &H0004

Public Type DXGI_SAMPLE_DESC
        Count As Long                                        ' offset &H0000
        Quality As Long                                      ' offset &H0004
    End Type                                                 ' LenB() = &H0008, Len() = &H0008, UDT Alignment = &H0004

  Public Type DXGI_MATRIX_3X2_F
        m_11 As Single                                        ' offset &H0000
        m_12 As Single                                        ' offset &H0004
        m_21 As Single                                        ' offset &H0008
        m_22 As Single                                        ' offset &H000C
        m_31 As Single                                        ' offset &H0010
        m_32 As Single                                        ' offset &H0014
    End Type                                                 ' LenB() = &H0018, Len() = &H0018, UDT Alignment = &H0004
    
Public Enum DXGI_COLOR_SPACE_TYPE
        DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709 = 0          ' &H00000000&
        DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709 = 1          ' &H00000001&
        DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709 = 2        ' &H00000002&
        DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020 = 3       ' &H00000003&
        DXGI_COLOR_SPACE_RESERVED = 4                        ' &H00000004&
        DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601 = 5   ' &H00000005&
        DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601 = 6      ' &H00000006&
        DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601 = 7        ' &H00000007&
        DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709 = 8      ' &H00000008&
        DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709 = 9        ' &H00000009&
        DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020 = 10    ' &H0000000A&
        DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020 = 11      ' &H0000000B&
        DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020 = 12      ' &H0000000C&
        DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_LEFT_P2020 = 13  ' &H0000000D&
        DXGI_COLOR_SPACE_RGB_STUDIO_G2084_NONE_P2020 = 14    ' &H0000000E&
        DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_TOPLEFT_P2020 = 15 ' &H0000000F&
        DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_TOPLEFT_P2020 = 16 ' &H00000010&
        DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P2020 = 17        ' &H00000011&
        DXGI_COLOR_SPACE_YCBCR_STUDIO_GHLG_TOPLEFT_P2020 = 18 ' &H00000012&
        DXGI_COLOR_SPACE_YCBCR_FULL_GHLG_TOPLEFT_P2020 = 19  ' &H00000013&
        DXGI_COLOR_SPACE_RGB_STUDIO_G24_NONE_P709 = 20       ' &H00000014&
        DXGI_COLOR_SPACE_RGB_STUDIO_G24_NONE_P2020 = 21      ' &H00000015&
        DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_LEFT_P709 = 22     ' &H00000016&
        DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_LEFT_P2020 = 23    ' &H00000017&
        DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_TOPLEFT_P2020 = 24 ' &H00000018&
        DXGI_COLOR_SPACE_CUSTOM = -1                         ' &HFFFFFFFF&
    End Enum

Public Type DXGI_RGB
        Red As Single                                        ' offset &H0000
        Green As Single                                      ' offset &H0004
        Blue As Single                                       ' offset &H0008
    End Type                                                 ' LenB() = &H000C, Len() = &H000C, UDT Alignment = &H0004

Public Type D3DCOLORVALUE
        r As Single                                          ' offset &H0000
        g As Single                                          ' offset &H0004
        b As Single                                          ' offset &H0008
        a As Single                                          ' offset &H000C
    End Type                                                 ' LenB() = &H0010, Len() = &H0010, UDT Alignment = &H0004

Public Type DXGI_GAMMA_CONTROL
        Scale As DXGI_RGB                             ' offset &H0000
        Offset As DXGI_RGB                            ' offset &H000C
        GammaCurve(0 To 1024) As DXGI_RGB             ' offset &H0018
    End Type                                                 ' LenB() = &H3024, Len() = &H3024, UDT Alignment = &H0004

Public Type DXGI_GAMMA_CONTROL_CAPABILITIES
        ScaleAndOffsetSupported As Long               ' offset &H0000
        MaxConvertedValue As Single                          ' offset &H0004
        MinConvertedValue As Single                          ' offset &H0008
        NumGammaControlPoints As Long                        ' offset &H000C
        ControlPointPositions(0 To 1024) As Single           ' offset &H0010
    End Type                                                 ' LenB() = &H1014, Len() = &H1014, UDT Alignment = &H0004

Public Enum DXGI_MODE_SCANLINE_ORDER
        DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED = 0             ' &H00000000&
        DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE = 1             ' &H00000001&
        DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST = 2       ' &H00000002&
        DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST = 3       ' &H00000003&
    End Enum

Public Enum DXGI_MODE_SCALING
        DXGI_MODE_SCALING_UNSPECIFIED = 0                    ' &H00000000&
        DXGI_MODE_SCALING_CENTERED = 1                       ' &H00000001&
        DXGI_MODE_SCALING_STRETCHED = 2                      ' &H00000002&
    End Enum

Public Enum DXGI_MODE_ROTATION
        DXGI_MODE_ROTATION_UNSPECIFIED = 0                   ' &H00000000&
        DXGI_MODE_ROTATION_IDENTITY = 1                      ' &H00000001&
        DXGI_MODE_ROTATION_ROTATE90 = 2                      ' &H00000002&
        DXGI_MODE_ROTATION_ROTATE180 = 3                     ' &H00000003&
        DXGI_MODE_ROTATION_ROTATE270 = 4                     ' &H00000004&
    End Enum

Public Type DXGI_MODE_DESC
        width As Long                                        ' offset &H0000
        Height As Long                                       ' offset &H0004
        RefreshRate As DXGI_RATIONAL                  ' offset &H0008
        Format As DXGI_FORMAT                         ' offset &H0010
        ScanlineOrdering As DXGI_MODE_SCANLINE_ORDER  ' offset &H0014
        Scaling As DXGI_MODE_SCALING                  ' offset &H0018
    End Type                                                 ' LenB() = &H001C, Len() = &H001C, UDT Alignment = &H0004

Public Type DXGI_FRAME_STATISTICS
        PresentCount As Long                                 ' offset &H0000
        PresentRefreshCount As Long                          ' offset &H0004
        SyncRefreshCount As Long                             ' offset &H0008
        SyncQPCTime As LARGE_INTEGER                  ' offset &H000C
        SyncGPUTime As LARGE_INTEGER                  ' offset &H0014
    End Type                                                 ' LenB() = &H001C, Len() = &H001C, UDT Alignment = &H0004

Public Type DXGI_MAPPED_RECT
        pitch As Long                                        ' offset &H0000
        pBits As LongPtr                                        ' offset &H0004
    End Type                                                 ' LenB() = &H0008, Len() = &H0008, UDT Alignment = &H0004

Public Type DXGI_ADAPTER_DESC
        Description(0 To 127) As Integer                     ' offset &H0000
        VendorId As Long                                     ' offset &H0100
        deviceId As Long                                     ' offset &H0104
        SubSysId As Long                                     ' offset &H0108
        Revision As Long                                     ' offset &H010C
        DedicatedVideoMemory As LongPtr                         ' offset &H0110
        DedicatedSystemMemory As LongPtr                        ' offset &H0114
        SharedSystemMemory As LongPtr                           ' offset &H0118
        AdapterLuid As LUID                           ' offset &H011C
    End Type                                                 ' LenB() = &H0124, Len() = &H0124, UDT Alignment = &H0004

Public Type DXGI_OUTPUT_DESC
        DeviceName(0 To 31) As Integer                       ' offset &H0000
        DesktopCoordinates As RECT                    ' offset &H0040
        AttachedToDesktop As Long                     ' offset &H0050
        rotation As DXGI_MODE_ROTATION                ' offset &H0054
        monitor As LongPtr                                     ' offset &H0058
    End Type                                                 ' LenB() = &H005C, Len() = &H005C, UDT Alignment = &H0004

Public Type DXGI_SHARED_RESOURCE
        Handle As LongPtr                                       ' offset &H0000
    End Type                                                 ' LenB() = &H0004, Len() = &H0004, UDT Alignment = &H0004

Public Enum DXGI_RESIDENCY
        DXGI_RESIDENCY_FULLY_RESIDENT = 1                    ' &H00000001&
        DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY = 2         ' &H00000002&
        DXGI_RESIDENCY_EVICTED_TO_DISK = 3                   ' &H00000003&
    End Enum

Public Type DXGI_SURFACE_DESC
        width As Long                                        ' offset &H0000
        Height As Long                                       ' offset &H0004
        Format As DXGI_FORMAT                         ' offset &H0008
        SampleDesc As DXGI_SAMPLE_DESC                ' offset &H000C
    End Type                                                 ' LenB() = &H0014, Len() = &H0014, UDT Alignment = &H0004

Public Enum DXGI_SWAP_EFFECT
        DXGI_SWAP_EFFECT_DISCARD = 0                         ' &H00000000&
        DXGI_SWAP_EFFECT_SEQUENTIAL = 1                      ' &H00000001&
        DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL = 3                 ' &H00000003&
        DXGI_SWAP_EFFECT_FLIP_DISCARD = 4                    ' &H00000004&
    End Enum

Public Enum DXGI_SWAP_CHAIN_FLAG
        DXGI_SWAP_CHAIN_FLAG_NONPREROTATED = 1               ' &H00000001&
        DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH = 2           ' &H00000002&
        DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE = 4              ' &H00000004&
        DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT = 8          ' &H00000008&
        DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER = 16 ' &H00000010&
        DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY = 32               ' &H00000020&
        DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT = 64 ' &H00000040&
        DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER = 128          ' &H00000080&
        DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO = 256          ' &H00000100&
        DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO = 512                 ' &H00000200&
        DXGI_SWAP_CHAIN_FLAG_HW_PROTECTED = 1024             ' &H00000400&
        DXGI_SWAP_CHAIN_FLAG_ALLOW_TEARING = 2048            ' &H00000800&
        DXGI_SWAP_CHAIN_FLAG_RESTRICTED_TO_ALL_HOLOGRAPHIC_DISPLAYS = 4096 ' &H00001000&
    End Enum

Public Enum DXGI_OFFER_RESOURCE_PRIORITY
        DXGI_OFFER_RESOURCE_PRIORITY_LOW = 1                 ' &H00000001&
        DXGI_OFFER_RESOURCE_PRIORITY_NORMAL = 2              ' &H00000002&
        DXGI_OFFER_RESOURCE_PRIORITY_HIGH = 3                ' &H00000003&
    End Enum
    
Public Type DXGI_SWAP_CHAIN_DESC
        BufferDesc As DXGI_MODE_DESC                  ' offset &H0000
        SampleDesc As DXGI_SAMPLE_DESC                ' offset &H001C
        BufferUsage As Long                                  ' offset &H0024
        BufferCount As Long                                  ' offset &H0028
        OutputWindow As LongPtr                                 ' offset &H002C
        Windowed As Long                              ' offset &H0030
        SwapEffect As DXGI_SWAP_EFFECT                ' offset &H0034
        flags As Long                                        ' offset &H0038
    End Type                                                 ' LenB() = &H003C, Len() = &H003C, UDT Alignment = &H0004

Public Enum DXGI_ADAPTER_FLAG
        DXGI_ADAPTER_FLAG_NONE = 0                           ' &H00000000&
        DXGI_ADAPTER_FLAG_REMOTE = 1                         ' &H00000001&
        DXGI_ADAPTER_FLAG_SOFTWARE = 2                       ' &H00000002&
        DXGI_ADAPTER_FLAG_FORCE_DWORD = -1                   ' &HFFFFFFFF&
    End Enum

Public Type DXGI_ADAPTER_DESC1
        Description(0 To 127) As Integer                     ' offset &H0000
        VendorId As Long                                     ' offset &H0100
        deviceId As Long                                     ' offset &H0104
        SubSysId As Long                                     ' offset &H0108
        Revision As Long                                     ' offset &H010C
        DedicatedVideoMemory As LongPtr                         ' offset &H0110
        DedicatedSystemMemory As LongPtr                        ' offset &H0114
        SharedSystemMemory As LongPtr                           ' offset &H0118
        AdapterLuid As LUID                           ' offset &H011C
        flags As Long                                        ' offset &H0124
    End Type                                                 ' LenB() = &H0128, Len() = &H0128, UDT Alignment = &H0004

Public Type DXGI_DISPLAY_COLOR_SPACE
        PrimaryCoordinates(0 To 7, 0 To 1) As Single         ' offset &H0000
        WhitePoints(0 To 15, 0 To 1) As Single               ' offset &H0040
    End Type                                                 ' LenB() = &H00C0, Len() = &H00C0, UDT Alignment = &H0004

Public Type DXGI_OUTDUPL_MOVE_RECT
        SourcePoint As POINT                          ' offset &H0000
        DestinationRect As RECT                       ' offset &H0008
    End Type                                                 ' LenB() = &H0018, Len() = &H0018, UDT Alignment = &H0004

Public Type DXGI_OUTDUPL_DESC
        ModeDesc As DXGI_MODE_DESC                    ' offset &H0000
        rotation As DXGI_MODE_ROTATION                ' offset &H001C
        DesktopImageInSystemMemory As Long            ' offset &H0020
    End Type                                                 ' LenB() = &H0024, Len() = &H0024, UDT Alignment = &H0004

Public Type DXGI_OUTDUPL_POINTER_POSITION
        position As POINT                             ' offset &H0000
        Visible As Long                               ' offset &H0008
    End Type                                                 ' LenB() = &H000C, Len() = &H000C, UDT Alignment = &H0004

Public Enum DXGI_OUTDUPL_POINTER_SHAPE_TYPE
        DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MONOCHROME = 1       ' &H00000001&
        DXGI_OUTDUPL_POINTER_SHAPE_TYPE_COLOR = 2            ' &H00000002&
        DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MASKED_COLOR = 4     ' &H00000004&
    End Enum

Public Type DXGI_OUTDUPL_POINTER_SHAPE_INFO
        type As Long                                         ' offset &H0000
        width As Long                                        ' offset &H0004
        Height As Long                                       ' offset &H0008
        pitch As Long                                        ' offset &H000C
        HotSpot As POINT                              ' offset &H0010
    End Type                                                 ' LenB() = &H0018, Len() = &H0018, UDT Alignment = &H0004

Public Type DXGI_OUTDUPL_FRAME_INFO
        LastPresentTime As LARGE_INTEGER              ' offset &H0000
        LastMouseUpdateTime As LARGE_INTEGER          ' offset &H0008
        AccumulatedFrames As Long                            ' offset &H0010
        RectsCoalesced As Long                        ' offset &H0014
        ProtectedContentMaskedOut As Long             ' offset &H0018
        PointerPosition As DXGI_OUTDUPL_POINTER_POSITION ' offset &H001C
        TotalMetadataBufferSize As Long                      ' offset &H0028
        PointerShapeBufferSize As Long                       ' offset &H002C
    End Type                                                 ' LenB() = &H0030, Len() = &H0030, UDT Alignment = &H0004

Public Enum DXGI_ALPHA_MODE
        DXGI_ALPHA_MODE_UNSPECIFIED = 0                      ' &H00000000&
        DXGI_ALPHA_MODE_PREMULTIPLIED = 1                    ' &H00000001&
        DXGI_ALPHA_MODE_STRAIGHT = 2                         ' &H00000002&
        DXGI_ALPHA_MODE_IGNORE = 3                           ' &H00000003&
        DXGI_ALPHA_MODE_FORCE_DWORD = -1                     ' &HFFFFFFFF&
    End Enum

Public Type DXGI_MODE_DESC1
        width As Long                                        ' offset &H0000
        Height As Long                                       ' offset &H0004
        RefreshRate As DXGI_RATIONAL                  ' offset &H0008
        Format As DXGI_FORMAT                         ' offset &H0010
        ScanlineOrdering As DXGI_MODE_SCANLINE_ORDER  ' offset &H0014
        Scaling As DXGI_MODE_SCALING                  ' offset &H0018
        Stereo As Long                                ' offset &H001C
    End Type                                                 ' LenB() = &H0020, Len() = &H0020, UDT Alignment = &H0004

Public Enum DXGI_SCALING
        DXGI_SCALING_STRETCH = 0                             ' &H00000000&
        DXGI_SCALING_NONE = 1                                ' &H00000001&
        DXGI_SCALING_ASPECT_RATIO_STRETCH = 2                ' &H00000002&
    End Enum

Public Type DXGI_SWAP_CHAIN_DESC1
        width As Long                                        ' offset &H0000
        Height As Long                                       ' offset &H0004
        Format As DXGI_FORMAT                         ' offset &H0008
        Stereo As Long                                ' offset &H000C
        SampleDesc As DXGI_SAMPLE_DESC                ' offset &H0010
        BufferUsage As Long                                  ' offset &H0018
        BufferCount As Long                                  ' offset &H001C
        Scaling As DXGI_SCALING                       ' offset &H0020
        SwapEffect As DXGI_SWAP_EFFECT                ' offset &H0024
        AlphaMode As DXGI_ALPHA_MODE                  ' offset &H0028
        flags As Long                                        ' offset &H002C
    End Type                                                 ' LenB() = &H0030, Len() = &H0030, UDT Alignment = &H0004

Public Type DXGI_SWAP_CHAIN_FULLSCREEN_DESC
        RefreshRate As DXGI_RATIONAL                  ' offset &H0000
        ScanlineOrdering As DXGI_MODE_SCANLINE_ORDER  ' offset &H0008
        Scaling As DXGI_MODE_SCALING                  ' offset &H000C
        Windowed As Long                              ' offset &H0010
    End Type                                                 ' LenB() = &H0014, Len() = &H0014, UDT Alignment = &H0004

Public Type DXGI_PRESENT_PARAMETERS
        DirtyRectsCount As Long                              ' offset &H0000
        pDirtyRects As LongPtr                                  ' offset &H0004
        pScrollRect As LongPtr                                  ' offset &H0008
        pScrollOffset As LongPtr                                ' offset &H000C
    End Type                                                 ' LenB() = &H0010, Len() = &H0010, UDT Alignment = &H0004

Public Enum DXGI_GRAPHICS_PREEMPTION_GRANULARITY
        DXGI_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY = 0     ' &H00000000&
        DXGI_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY = 1      ' &H00000001&
        DXGI_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY = 2       ' &H00000002&
        DXGI_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY = 3          ' &H00000003&
        DXGI_GRAPHICS_PREEMPTION_INSTRUCTION_BOUNDARY = 4    ' &H00000004&
    End Enum

Public Enum DXGI_COMPUTE_PREEMPTION_GRANULARITY
        DXGI_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY = 0      ' &H00000000&
        DXGI_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY = 1        ' &H00000001&
        DXGI_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY = 2    ' &H00000002&
        DXGI_COMPUTE_PREEMPTION_THREAD_BOUNDARY = 3          ' &H00000003&
        DXGI_COMPUTE_PREEMPTION_INSTRUCTION_BOUNDARY = 4     ' &H00000004&
    End Enum

Public Type DXGI_ADAPTER_DESC2
        Description(0 To 127) As Integer                     ' offset &H0000
        VendorId As Long                                     ' offset &H0100
        deviceId As Long                                     ' offset &H0104
        SubSysId As Long                                     ' offset &H0108
        Revision As Long                                     ' offset &H010C
        DedicatedVideoMemory As LongPtr                         ' offset &H0110
        DedicatedSystemMemory As LongPtr                        ' offset &H0114
        SharedSystemMemory As LongPtr                           ' offset &H0118
        AdapterLuid As LUID                           ' offset &H011C
        flags As Long                                        ' offset &H0124
        GraphicsPreemptionGranularity As DXGI_GRAPHICS_PREEMPTION_GRANULARITY ' offset &H0128
        ComputePreemptionGranularity As DXGI_COMPUTE_PREEMPTION_GRANULARITY ' offset &H012C
    End Type

    
Public Type DXGI_DECODE_SWAP_CHAIN_DESC
        flags As Long                                        ' offset &H0000
    End Type                                                 ' LenB() = &H0004, Len() = &H0004, UDT Alignment = &H0004

Public Enum DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS
        DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_NOMINAL_RANGE = 1 ' &H00000001&
        DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_BT709 = 2         ' &H00000002&
        DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_xvYCC = 4         ' &H00000004&
    End Enum

Public Enum DXGI_FRAME_PRESENTATION_MODE
        DXGI_FRAME_PRESENTATION_MODE_COMPOSED = 0            ' &H00000000&
        DXGI_FRAME_PRESENTATION_MODE_OVERLAY = 1             ' &H00000001&
        DXGI_FRAME_PRESENTATION_MODE_NONE = 2                ' &H00000002&
        DXGI_FRAME_PRESENTATION_MODE_COMPOSITION_FAILURE = 3 ' &H00000003&
    End Enum

Public Type DXGI_FRAME_STATISTICS_MEDIA
        PresentCount As Long                                 ' offset &H0000
        PresentRefreshCount As Long                          ' offset &H0004
        SyncRefreshCount As Long                             ' offset &H0008
        SyncQPCTime As LARGE_INTEGER                  ' offset &H000C
        SyncGPUTime As LARGE_INTEGER                  ' offset &H0014
        CompositionMode As DXGI_FRAME_PRESENTATION_MODE ' offset &H001C
        ApprovedPresentDuration As Long                      ' offset &H0020
    End Type                                                 ' LenB() = &H0024, Len() = &H0024, UDT Alignment = &H0004

Public Enum DXGI_OVERLAY_SUPPORT_FLAG
        DXGI_OVERLAY_SUPPORT_FLAG_DIRECT = 1                 ' &H00000001&
        DXGI_OVERLAY_SUPPORT_FLAG_SCALING = 2                ' &H00000002&
    End Enum

Public Enum DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG
        DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_PRESENT = 1 ' &H00000001&
        DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_OVERLAY_PRESENT = 2 ' &H00000002&
    End Enum

Public Enum DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG
        DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG_PRESENT = 1    ' &H00000001&
    End Enum

Public Enum DXGI_MEMORY_SEGMENT_GROUP
        DXGI_MEMORY_SEGMENT_GROUP_LOCAL = 0                  ' &H00000000&
        DXGI_MEMORY_SEGMENT_GROUP_NON_LOCAL = 1              ' &H00000001&
    End Enum

Public Type DXGI_QUERY_VIDEO_MEMORY_INFO
        Budget As LongLong                                   ' offset &H0000
        CurrentUsage As LongLong                             ' offset &H0008
        AvailableForReservation As LongLong                  ' offset &H0010
        CurrentReservation As LongLong                       ' offset &H0018
    End Type                                                 ' LenB() = &H0020, Len() = &H0020, UDT Alignment = &H0004

Public Enum DXGI_OUTDUPL_FLAG
        DXGI_OUTDUPL_COMPOSITED_UI_CAPTURE_ONLY = 1          ' &H00000001&
    End Enum

Public Enum DXGI_HDR_METADATA_TYPE
        DXGI_HDR_METADATA_TYPE_NONE = 0                      ' &H00000000&
        DXGI_HDR_METADATA_TYPE_HDR10 = 1                     ' &H00000001&
    End Enum

Public Type DXGI_HDR_METADATA_HDR10
        RedPrimary(0 To 1) As Integer                        ' offset &H0000
        GreenPrimary(0 To 1) As Integer                      ' offset &H0004
        BluePrimary(0 To 1) As Integer                       ' offset &H0008
        WhitePoint(0 To 1) As Integer                        ' offset &H000C
        MaxMasteringLuminance As Long                        ' offset &H0010
        MinMasteringLuminance As Long                        ' offset &H0014
        MaxContentLightLevel As Integer                      ' offset &H0018
        MaxFrameAverageLightLevel As Integer                 ' offset &H001A
    End Type                                                 ' LenB() = &H001C, Len() = &H001C, UDT Alignment = &H0004

Public Enum DXGI_OFFER_RESOURCE_FLAGS
        DXGI_OFFER_RESOURCE_FLAG_ALLOW_DECOMMIT = 1          ' &H00000001&
    End Enum

Public Enum DXGI_RECLAIM_RESOURCE_RESULTS
        DXGI_RECLAIM_RESOURCE_RESULT_OK = 0                  ' &H00000000&
        DXGI_RECLAIM_RESOURCE_RESULT_DISCARDED = 1           ' &H00000001&
        DXGI_RECLAIM_RESOURCE_RESULT_NOT_COMMITTED = 2       ' &H00000002&
    End Enum


Public Enum DXGI_FEATURE
        DXGI_FEATURE_PRESENT_ALLOW_TEARING = 0               ' &H00000000&
    End Enum


Public Enum DXGI_ADAPTER_FLAG3
        DXGI_ADAPTER_FLAG3_NONE = 0                          ' &H00000000&
        DXGI_ADAPTER_FLAG3_REMOTE = 1                        ' &H00000001&
        DXGI_ADAPTER_FLAG3_SOFTWARE = 2                      ' &H00000002&
        DXGI_ADAPTER_FLAG3_ACG_COMPATIBLE = 4                ' &H00000004&
        DXGI_ADAPTER_FLAG3_SUPPORT_MONITORED_FENCES = 8      ' &H00000008&
        DXGI_ADAPTER_FLAG3_SUPPORT_NON_MONITORED_FENCES = 16 ' &H00000010&
        DXGI_ADAPTER_FLAG3_KEYED_MUTEX_CONFORMANCE = 32      ' &H00000020&
        DXGI_ADAPTER_FLAG3_FORCE_DWORD = -1                  ' &HFFFFFFFF&
    End Enum

Public Type DXGI_ADAPTER_DESC3
        Description(0 To 127) As Integer                     ' offset &H0000
        VendorId As Long                                     ' offset &H0100
        deviceId As Long                                     ' offset &H0104
        SubSysId As Long                                     ' offset &H0108
        Revision As Long                                     ' offset &H010C
        DedicatedVideoMemory As LongPtr                         ' offset &H0110
        DedicatedSystemMemory As LongPtr                        ' offset &H0114
        SharedSystemMemory As LongPtr                           ' offset &H0118
        AdapterLuid As LUID                           ' offset &H011C
        flags As DXGI_ADAPTER_FLAG3                   ' offset &H0124
        GraphicsPreemptionGranularity As DXGI_GRAPHICS_PREEMPTION_GRANULARITY ' offset &H0128
        ComputePreemptionGranularity As DXGI_COMPUTE_PREEMPTION_GRANULARITY ' offset &H012C
    End Type                                                 ' LenB() = &H0130, Len() = &H0130, UDT Alignment = &H0004

Public Type DXGI_OUTPUT_DESC1
        DeviceName(0 To 31) As Integer                       ' offset &H0000
        DesktopCoordinates As RECT                    ' offset &H0040
        AttachedToDesktop As Long                     ' offset &H0050
        rotation As DXGI_MODE_ROTATION                ' offset &H0054
        monitor As LongPtr                                      ' offset &H0058
        BitsPerColor As Long                                 ' offset &H005C
        ColorSpace As DXGI_COLOR_SPACE_TYPE           ' offset &H0060
        RedPrimary(0 To 1) As Single                         ' offset &H0064
        GreenPrimary(0 To 1) As Single                       ' offset &H006C
        BluePrimary(0 To 1) As Single                        ' offset &H0074
        WhitePoint(0 To 1) As Single                         ' offset &H007C
        MinLuminance As Single                               ' offset &H0084
        MaxLuminance As Single                               ' offset &H0088
        MaxFullFrameLuminance As Single                      ' offset &H008C
    End Type                                                 ' LenB() = &H0090, Len() = &H0090, UDT Alignment = &H0004

Public Enum DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAGS
        DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_FULLSCREEN = 1 ' &H00000001&
        DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_WINDOWED = 2  ' &H00000002&
        DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_CURSOR_STRETCHED = 4 ' &H00000004&
    End Enum
    
Public Type D2D_MATRIX_4X4_F
        m(0 To 3, 0 To 3) As Single                          ' offset &H0000
    End Type
    
Public Enum DCOMPOSITION_BITMAP_INTERPOLATION_MODE
        DCOMPOSITION_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0 ' &H00000000&
        DCOMPOSITION_BITMAP_INTERPOLATION_MODE_LINEAR = 1    ' &H00000001&
        DCOMPOSITION_BITMAP_INTERPOLATION_MODE_INHERIT = -1  ' &HFFFFFFFF&
    End Enum

Public Enum DCOMPOSITION_BORDER_MODE
        DCOMPOSITION_BORDER_MODE_SOFT = 0                    ' &H00000000&
        DCOMPOSITION_BORDER_MODE_HARD = 1                    ' &H00000001&
        DCOMPOSITION_BORDER_MODE_INHERIT = -1                ' &HFFFFFFFF&
    End Enum

Public Enum DCOMPOSITION_COMPOSITE_MODE
        DCOMPOSITION_COMPOSITE_MODE_SOURCE_OVER = 0          ' &H00000000&
        DCOMPOSITION_COMPOSITE_MODE_DESTINATION_INVERT = 1   ' &H00000001&
        DCOMPOSITION_COMPOSITE_MODE_MIN_BLEND = 2            ' &H00000002&
        DCOMPOSITION_COMPOSITE_MODE_INHERIT = -1             ' &HFFFFFFFF&
    End Enum

Public Enum DCOMPOSITION_BACKFACE_VISIBILITY
        DCOMPOSITION_BACKFACE_VISIBILITY_VISIBLE = 0         ' &H00000000&
        DCOMPOSITION_BACKFACE_VISIBILITY_HIDDEN = 1          ' &H00000001&
        DCOMPOSITION_BACKFACE_VISIBILITY_INHERIT = -1        ' &HFFFFFFFF&
    End Enum

Public Enum DCOMPOSITION_OPACITY_MODE
        DCOMPOSITION_OPACITY_MODE_LAYER = 0                  ' &H00000000&
        DCOMPOSITION_OPACITY_MODE_MULTIPLY = 1               ' &H00000001&
        DCOMPOSITION_OPACITY_MODE_INHERIT = -1               ' &HFFFFFFFF&
    End Enum

Public Enum DCOMPOSITION_DEPTH_MODE
        DCOMPOSITION_DEPTH_MODE_TREE = 0                     ' &H00000000&
        DCOMPOSITION_DEPTH_MODE_SPATIAL = 1                  ' &H00000001&
        DCOMPOSITION_DEPTH_MODE_SORTED = 3                   ' &H00000003&
        DCOMPOSITION_DEPTH_MODE_INHERIT = -1                 ' &HFFFFFFFF&
    End Enum

Public Type DCOMPOSITION_FRAME_STATISTICS
        lastFrameTime As LARGE_INTEGER                ' offset &H0000
        currentCompositionRate As DXGI_RATIONAL       ' offset &H0008
        currentTime As LARGE_INTEGER                  ' offset &H0010
        timeFrequency As LARGE_INTEGER                ' offset &H0018
        nextEstimatedFrameTime As LARGE_INTEGER       ' offset &H0020
    End Type                                                 ' LenB() = &H0028, Len() = &H0028, UDT Alignment = &H0004

Public Const COMPOSITIONOBJECT_READ As Long = 1
Public Const COMPOSITIONOBJECT_WRITE As Long = 2
Public Const COMPOSITIONOBJECT_ALL_ACCESS As Long = 3

Public Declare Function DCompositionCreateDevice Lib "dcomp.dll" (ByVal dxgiDevice As IDXGIDevice, ByRef iid As UUID, ByRef dcompositionDevice As Any) As Long
Public Declare Function DCompositionCreateDevice2 Lib "dcomp.dll" (ByVal renderingDevice As IUnknown, ByRef iid As UUID, ByRef dcompositionDevice As Any) As Long
Public Declare Function DCompositionCreateDevice3 Lib "dcomp.dll" (ByVal renderingDevice As IUnknown, ByRef iid As UUID, ByRef dcompositionDevice As Any) As Long
Public Declare Function DCompositionCreateSurfaceHandle Lib "dcomp.dll" (ByVal desiredAccess As Long, ByRef securityAttributes As SECURITY_ATTRIBUTES, ByRef surfaceHandle As LongPtr) As Long
Public Declare Function DCompositionAttachMouseWheelToHwnd Lib "dcomp.dll" (ByVal visual As IDCompositionVisual, ByVal hwnd As LongPtr, ByVal Enable As Long) As Long
Public Declare Function DCompositionAttachMouseDragToHwnd Lib "dcomp.dll" (ByVal visual As IDCompositionVisual, ByVal hwnd As LongPtr, ByVal Enable As Long) As Long
    
    
Public Type D3DMATRIX
        m(0 To 3, 0 To 3) As Single                          ' offset &H0000
    End Type
                                                 ' LenB() = &H0040, Len() = &H0040, UDT Alignment = &H0004
Public Type D2D_MATRIX_3X2_F
        m11 As Single                                        ' offset &H0000
        m12 As Single                                        ' offset &H0004
        m21 As Single                                        ' offset &H0008
        m22 As Single                                        ' offset &H000C
        dx As Single                                         ' offset &H0010
        dy As Single                                         ' offset &H0014
    End Type
    
    
Public Enum D2D1_COLORS
	AliceBlue = &HF0F8FF
	AntiqueWhite = &HFAEBD7
	Aqua = &H00FFFF&
	Aquamarine = &H7FFFD4
	Azure = &HF0FFFF
	Beige = &HF5F5DC
	Bisque = &HFFE4C4
	Black = &H000000
	BlanchedAlmond = &HFFEBCD
	Blue = &H0000FF
	BlueViolet = &H8A2BE2
	Brown = &HA52A2A
	BurlyWood = &HDEB887
	CadetBlue = &H5F9EA0
	Chartreuse = &H7FFF00
	Chocolate = &HD2691E
	Coral = &HFF7F50
	CornflowerBlue = &H6495ED
	Cornsilk = &HFFF8DC
	Crimson = &HDC143C
	Cyan = &H00FFFF&
	DarkBlue = &H00008B
	DarkCyan = &H008B8B&
	DarkGoldenrod = &HB8860B
	DarkGray = &HA9A9A9
	DarkGreen = &H006400
	DarkKhaki = &HBDB76B
	DarkMagenta = &H8B008B
	DarkOliveGreen = &H556B2F
	DarkOrange = &HFF8C00
	DarkOrchid = &H9932CC
	DarkRed = &H8B0000
	DarkSalmon = &HE9967A
	DarkSeaGreen = &H8FBC8F
	DarkSlateBlue = &H483D8B
	DarkSlateGray = &H2F4F4F
	DarkTurquoise = &H00CED1&
	DarkViolet = &H9400D3
	DeepPink = &HFF1493
	DeepSkyBlue = &H00BFFF&
	DimGray = &H696969
	DodgerBlue = &H1E90FF
	Firebrick = &HB22222
	FloralWhite = &HFFFAF0
	ForestGreen = &H228B22
	Fuchsia = &HFF00FF
	Gainsboro = &HDCDCDC
	GhostWhite = &HF8F8FF
	Gold = &HFFD700
	Goldenrod = &HDAA520
	Gray = &H808080
	Green = &H008000&
	GreenYellow = &HADFF2F
	Honeydew = &HF0FFF0
	HotPink = &HFF69B4
	IndianRed = &HCD5C5C
	Indigo = &H4B0082
	Ivory = &HFFFFF0
	Khaki = &HF0E68C
	Lavender = &HE6E6FA
	LavenderBlush = &HFFF0F5
	LawnGreen = &H7CFC00
	LemonChiffon = &HFFFACD
	LightBlue = &HADD8E6
	LightCoral = &HF08080
	LightCyan = &HE0FFFF
	LightGoldenrodYellow = &HFAFAD2
	LightGreen = &H90EE90
	LightGray = &HD3D3D3
	LightPink = &HFFB6C1
	LightSalmon = &HFFA07A
	LightSeaGreen = &H20B2AA
	LightSkyBlue = &H87CEFA
	LightSlateGray = &H778899
	LightSteelBlue = &HB0C4DE
	LightYellow = &HFFFFE0
	Lime = &H00FF00&
	LimeGreen = &H32CD32
	Linen = &HFAF0E6
	Magenta = &HFF00FF
	Maroon = &H800000
	MediumAquamarine = &H66CDAA
	MediumBlue = &H0000CD
	MediumOrchid = &HBA55D3
	MediumPurple = &H9370DB
	MediumSeaGreen = &H3CB371
	MediumSlateBlue = &H7B68EE
	MediumSpringGreen = &H00FA9A&
	MediumTurquoise = &H48D1CC
	MediumVioletRed = &HC71585
	MidnightBlue = &H191970
	MintCream = &HF5FFFA
	MistyRose = &HFFE4E1
	Moccasin = &HFFE4B5
	NavajoWhite = &HFFDEAD
	Navy = &H000080
	OldLace = &HFDF5E6
	Olive = &H808000
	OliveDrab = &H6B8E23
	Orange = &HFFA500
	OrangeRed = &HFF4500
	Orchid = &HDA70D6
	PaleGoldenrod = &HEEE8AA
	PaleGreen = &H98FB98
	PaleTurquoise = &HAFEEEE
	PaleVioletRed = &HDB7093
	PapayaWhip = &HFFEFD5
	PeachPuff = &HFFDAB9
	Peru = &HCD853F
	Pink = &HFFC0CB
	Plum = &HDDA0DD
	PowderBlue = &HB0E0E6
	Purple = &H800080
	Red = &HFF0000
	RosyBrown = &HBC8F8F
	RoyalBlue = &H4169E1
	SaddleBrown = &H8B4513
	Salmon = &HFA8072
	SandyBrown = &HF4A460
	SeaGreen = &H2E8B57
	SeaShell = &HFFF5EE
	Sienna = &HA0522D
	Silver = &HC0C0C0
	SkyBlue = &H87CEEB
	SlateBlue = &H6A5ACD
	SlateGray = &H708090
	Snow = &HFFFAFA
	SpringGreen = &H00FF7F&
	SteelBlue = &H4682B4
	Tan = &HD2B48C
	Teal = &H008080&
	Thistle = &HD8BFD8
	Tomato = &HFF6347
	Turquoise = &H40E0D0
	Violet = &HEE82EE
	Wheat = &HF5DEB3
	White = &HFFFFFF
	WhiteSmoke = &HF5F5F5
	Yellow = &HFFFF00
	YellowGreen = &H9ACD32
End Enum


Public Function CLSID_D2D12DAffineTransform() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D12DAffineTransform, &H6AA97485, &H6354, &H4cfc, &H90, &H8C, &HE4, &HA7, &H4F, &H62, &HC9, &H6C)
End Function
Public Function CLSID_D2D13DPerspectiveTransform() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D13DPerspectiveTransform, &HC2844D0B, &H3D86, &H46e7, &H85, &HBA, &H52, &H6C, &H92, &H40, &HF3, &HFB)
End Function
Public Function CLSID_D2D13DTransform() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D13DTransform, &He8467b04, &Hec61, &H4b8a, &Hb5, &Hde, &Hd4, &Hd7, &H3d, &Heb, &Hea, &H5a)
End Function
Public Function CLSID_D2D1ArithmeticComposite() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1ArithmeticComposite, &Hfc151437, &H049a, &H4784, &Ha2, &H4a, &Hf1, &Hc4, &Hda, &Hf2, &H09, &H87)
End Function
Public Function CLSID_D2D1Atlas() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1Atlas, &H913e2be4, &Hfdcf, &H4fe2, &Ha5, &Hf0, &H24, &H54, &Hf1, &H4f, &Hf4, &H8)
End Function
Public Function CLSID_D2D1BitmapSource() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1BitmapSource, &H5fb6c24d, &Hc6dd, &H4231, &H94, &H4, &H50, &Hf4, &Hd5, &Hc3, &H25, &H2d)
End Function
Public Function CLSID_D2D1Blend() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1Blend, &H81c5b77b, &H13f8, &H4cdd, &Had, &H20, &Hc8, &H90, &H54, &H7a, &Hc6, &H5d)
End Function
Public Function CLSID_D2D1Border() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1Border, &H2A2D49C0, &H4ACF, &H43c7, &H8C, &H6A, &H7C, &H4A, &H27, &H87, &H4D, &H27)
End Function
Public Function CLSID_D2D1Brightness() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1Brightness, &H8cea8d1e, &H77b0, &H4986, &Hb3, &Hb9, &H2f, &H0c, &H0e, &Hae, &H78, &H87)
End Function
Public Function CLSID_D2D1ColorManagement() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1ColorManagement, &H1A28524C, &HFDD6, &H4AA4, &HAE, &H8F, &H83, &H7E, &HB8, &H26, &H7B, &H37)
End Function
Public Function CLSID_D2D1ColorMatrix() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1ColorMatrix, &H921F03D6, &H641C, &H47DF, &H85, &H2D, &HB4, &HBB, &H61, &H53, &HAE, &H11)
End Function
Public Function CLSID_D2D1Composite() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1Composite, &H48fc9f51, &Hf6ac, &H48f1, &H8b, &H58, &H3b, &H28, &Hac, &H46, &Hf7, &H6d)
End Function
Public Function CLSID_D2D1ConvolveMatrix() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1ConvolveMatrix, &H407f8c08, &H5533, &H4331, &Ha3, &H41, &H23, &Hcc, &H38, &H77, &H84, &H3e)
End Function
Public Function CLSID_D2D1Crop() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1Crop, &HE23F7110, &H0E9A, &H4324, &HAF, &H47, &H6A, &H2C, &H0C, &H46, &HF3, &H5B)
End Function
Public Function CLSID_D2D1DirectionalBlur() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1DirectionalBlur, &H174319a6, &H58e9, &H49b2, &Hbb, &H63, &Hca, &Hf2, &Hc8, &H11, &Ha3, &Hdb)
End Function
Public Function CLSID_D2D1DiscreteTransfer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1DiscreteTransfer, &H90866fcd, &H488e, &H454b, &Haf, &H06, &He5, &H04, &H1b, &H66, &Hc3, &H6c)
End Function
Public Function CLSID_D2D1DisplacementMap() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1DisplacementMap, &Hedc48364, &H417, &H4111, &H94, &H50, &H43, &H84, &H5f, &Ha9, &Hf8, &H90)
End Function
Public Function CLSID_D2D1DistantDiffuse() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1DistantDiffuse, &H3e7efd62, &Ha32d, &H46d4, &Ha8, &H3c, &H52, &H78, &H88, &H9a, &Hc9, &H54)
End Function
Public Function CLSID_D2D1DistantSpecular() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1DistantSpecular, &H428c1ee5, &H77b8, &H4450, &H8a, &Hb5, &H72, &H21, &H9c, &H21, &Hab, &Hda)
End Function
Public Function CLSID_D2D1DpiCompensation() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1DpiCompensation, &H6c26c5c7, &H34e0, &H46fc, &H9c, &Hfd, &He5, &H82, &H37, &H6, &He2, &H28)
End Function
Public Function CLSID_D2D1Flood() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1Flood, &H61c23c20, &Hae69, &H4d8e, &H94, &Hcf, &H50, &H07, &H8d, &Hf6, &H38, &Hf2)
End Function
Public Function CLSID_D2D1GammaTransfer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1GammaTransfer, &H409444c4, &Hc419, &H41a0, &Hb0, &Hc1, &H8c, &Hd0, &Hc0, &Ha1, &H8e, &H42)
End Function
Public Function CLSID_D2D1GaussianBlur() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1GaussianBlur, &H1feb6d69, &H2fe6, &H4ac9, &H8c, &H58, &H1d, &H7f, &H93, &He7, &Ha6, &Ha5)
End Function
Public Function CLSID_D2D1Scale() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1Scale, &H9daf9369, &H3846, &H4d0e, &Ha4, &H4e, &Hc, &H60, &H79, &H34, &Ha5, &Hd7)
End Function
Public Function CLSID_D2D1Histogram() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1Histogram, &H881db7d0, &Hf7ee, &H4d4d, &Ha6, &Hd2, &H46, &H97, &Hac, &Hc6, &H6e, &He8)
End Function
Public Function CLSID_D2D1HueRotation() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1HueRotation, &H0f4458ec, &H4b32, &H491b, &H9e, &H85, &Hbd, &H73, &Hf4, &H4d, &H3e, &Hb6)
End Function
Public Function CLSID_D2D1LinearTransfer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1LinearTransfer, &Had47c8fd, &H63ef, &H4acc, &H9b, &H51, &H67, &H97, &H9c, &H03, &H6c, &H06)
End Function
Public Function CLSID_D2D1LuminanceToAlpha() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1LuminanceToAlpha, &H41251ab7, &H0beb, &H46f8, &H9d, &Ha7, &H59, &He9, &H3f, &Hcc, &He5, &Hde)
End Function
Public Function CLSID_D2D1Morphology() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1Morphology, &Heae6c40d, &H626a, &H4c2d, &Hbf, &Hcb, &H39, &H10, &H01, &Hab, &He2, &H02)
End Function
Public Function CLSID_D2D1OpacityMetadata() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1OpacityMetadata, &H6c53006a, &H4450, &H4199, &Haa, &H5b, &Had, &H16, &H56, &Hfe, &Hce, &H5e)
End Function
Public Function CLSID_D2D1PointDiffuse() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1PointDiffuse, &Hb9e303c3, &Hc08c, &H4f91, &H8b, &H7b, &H38, &H65, &H6b, &Hc4, &H8c, &H20)
End Function
Public Function CLSID_D2D1PointSpecular() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1PointSpecular, &H09c3ca26, &H3ae2, &H4f09, &H9e, &Hbc, &Hed, &H38, &H65, &Hd5, &H3f, &H22)
End Function
Public Function CLSID_D2D1Premultiply() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1Premultiply, &H06eab419, &Hdeed, &H4018, &H80, &Hd2, &H3e, &H1d, &H47, &H1a, &Hde, &Hb2)
End Function
Public Function CLSID_D2D1Saturation() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1Saturation, &H5cb2d9cf, &H327d, &H459f, &Ha0, &Hce, &H40, &Hc0, &Hb2, &H08, &H6b, &Hf7)
End Function
Public Function CLSID_D2D1Shadow() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1Shadow, &HC67EA361, &H1863, &H4e69, &H89, &HDB, &H69, &H5D, &H3E, &H9A, &H5B, &H6B)
End Function
Public Function CLSID_D2D1SpotDiffuse() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1SpotDiffuse, &H818a1105, &H7932, &H44f4, &Haa, &H86, &H08, &Hae, &H7b, &H2f, &H2c, &H93)
End Function
Public Function CLSID_D2D1SpotSpecular() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1SpotSpecular, &Hedae421e, &H7654, &H4a37, &H9d, &Hb8, &H71, &Hac, &Hc1, &Hbe, &Hb3, &Hc1)
End Function
Public Function CLSID_D2D1TableTransfer() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1TableTransfer, &H5bf818c3, &H5e43, &H48cb, &Hb6, &H31, &H86, &H83, &H96, &Hd6, &Ha1, &Hd4)
End Function
Public Function CLSID_D2D1Tile() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1Tile, &HB0784138, &H3B76, &H4bc5, &HB1, &H3B, &H0F, &HA2, &HAD, &H02, &H65, &H9F)
End Function
Public Function CLSID_D2D1Turbulence() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1Turbulence, &HCF2BB6AE, &H889A, &H4ad7, &HBA, &H29, &HA2, &HFD, &H73, &H2C, &H9F, &HC9)
End Function
Public Function CLSID_D2D1UnPremultiply() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(CLSID_D2D1UnPremultiply, &Hfb9ac489, &Had8d, &H41ed, &H99, &H99, &Hbb, &H63, &H47, &Hd1, &H10, &Hf7)
End Function

Attribute VB_Name = "mDirectX"
Option Explicit

'modDirectX - IIDs for DirectWrite and Direct2D


Public Function IID_ID2D1Factory() As UUID
'{06152247-6F50-465A-9245-118BFD3B6007}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6152247, CInt(&H6F50), CInt(&H465A), &H92, &H45, &H11, &H8B, &HFD, &H3B, &H60, &H7)
IID_ID2D1Factory = iid
End Function
Public Function IID_ID2D1RectangleGeometry() As UUID
'{2CD906A2-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906A2, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1RectangleGeometry = iid
End Function
Public Function IID_ID2D1Geometry() As UUID
'{2CD906A1-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906A1, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1Geometry = iid
End Function
Public Function IID_ID2D1Resource() As UUID
'{2CD90691-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD90691, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1Resource = iid
End Function
Public Function IID_ID2D1StrokeStyle() As UUID
'{2CD9069D-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD9069D, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1StrokeStyle = iid
End Function
Public Function IID_ID2D1SimplifiedGeometrySink() As UUID
'{2CD9069E-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD9069E, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1SimplifiedGeometrySink = iid
End Function
Public Function IID_ID2D1TessellationSink() As UUID
'{2CD906C1-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906C1, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1TessellationSink = iid
End Function
Public Function IID_ID2D1RoundedRectangleGeometry() As UUID
'{2CD906A3-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906A3, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1RoundedRectangleGeometry = iid
End Function
Public Function IID_ID2D1EllipseGeometry() As UUID
'{2CD906A4-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906A4, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1EllipseGeometry = iid
End Function
Public Function IID_ID2D1GeometryGroup() As UUID
'{2CD906A6-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906A6, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1GeometryGroup = iid
End Function
Public Function IID_ID2D1TransformedGeometry() As UUID
'{2CD906BB-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906BB, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1TransformedGeometry = iid
End Function
Public Function IID_ID2D1PathGeometry() As UUID
'{2CD906A5-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906A5, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1PathGeometry = iid
End Function
Public Function IID_ID2D1GeometrySink() As UUID
'{2CD9069F-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD9069F, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1GeometrySink = iid
End Function
Public Function IID_ID2D1DrawingStateBlock() As UUID
'{28506E39-EBF6-46A1-BB47-FD85565AB957}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H28506E39, CInt(&HEBF6), CInt(&H46A1), &HBB, &H47, &HFD, &H85, &H56, &H5A, &HB9, &H57)
IID_ID2D1DrawingStateBlock = iid
End Function
Public Function IID_ID2D1RenderTarget() As UUID
'{2CD90694-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD90694, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1RenderTarget = iid
End Function
Public Function IID_ID2D1Bitmap() As UUID
'{A2296057-EA42-4099-983B-539FB6505426}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA2296057, CInt(&HEA42), CInt(&H4099), &H98, &H3B, &H53, &H9F, &HB6, &H50, &H54, &H26)
IID_ID2D1Bitmap = iid
End Function
Public Function IID_ID2D1BitmapBrush() As UUID
'{2CD906AA-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906AA, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1BitmapBrush = iid
End Function
Public Function IID_ID2D1Brush() As UUID
'{2CD906A8-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906A8, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1Brush = iid
End Function
Public Function IID_ID2D1SolidColorBrush() As UUID
'{2CD906A9-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906A9, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1SolidColorBrush = iid
End Function
Public Function IID_ID2D1GradientStopCollection() As UUID
'{2CD906A7-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906A7, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1GradientStopCollection = iid
End Function
Public Function IID_ID2D1LinearGradientBrush() As UUID
'{2CD906AB-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906AB, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1LinearGradientBrush = iid
End Function
Public Function IID_ID2D1RadialGradientBrush() As UUID
'{2CD906AC-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906AC, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1RadialGradientBrush = iid
End Function
Public Function IID_ID2D1BitmapRenderTarget() As UUID
'{2CD90695-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD90695, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1BitmapRenderTarget = iid
End Function
Public Function IID_ID2D1Layer() As UUID
'{2CD9069B-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD9069B, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1Layer = iid
End Function
Public Function IID_ID2D1Mesh() As UUID
'{2CD906C2-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD906C2, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1Mesh = iid
End Function
Public Function IID_ID2D1HwndRenderTarget() As UUID
'{2CD90698-12E2-11DC-9FED-001143A055F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD90698, CInt(&H12E2), CInt(&H11DC), &H9F, &HED, &H0, &H11, &H43, &HA0, &H55, &HF9)
IID_ID2D1HwndRenderTarget = iid
End Function
Public Function IID_ID2D1DCRenderTarget() As UUID
'{1C51BC64-DE61-46FD-9899-63A5D8F03950}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1C51BC64, CInt(&HDE61), CInt(&H46FD), &H98, &H99, &H63, &HA5, &HD8, &HF0, &H39, &H50)
IID_ID2D1DCRenderTarget = iid
End Function
Public Function IID_ID2D1GdiInteropRenderTarget() As UUID
'{E0DB51C3-6F77-4BAE-B3D5-E47509B35838}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE0DB51C3, CInt(&H6F77), CInt(&H4BAE), &HB3, &HD5, &HE4, &H75, &H9, &HB3, &H58, &H38)
IID_ID2D1GdiInteropRenderTarget = iid
End Function




Public Function IID_IDWriteFactory() As UUID
'{B859EE5A-D838-4B5B-A2E8-1ADC7D93DB48}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB859EE5A, CInt(&HD838), CInt(&H4B5B), &HA2, &HE8, &H1A, &HDC, &H7D, &H93, &HDB, &H48)
IID_IDWriteFactory = iid
End Function
Public Function IID_IDWriteFontCollection() As UUID
'{A84CEE02-3EEA-4EEE-A827-87C1A02A0FCC}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA84CEE02, CInt(&H3EEA), CInt(&H4EEE), &HA8, &H27, &H87, &HC1, &HA0, &H2A, &HF, &HCC)
IID_IDWriteFontCollection = iid
End Function
Public Function IID_IDWriteFontFamily() As UUID
'{DA20D8EF-812A-4C43-9802-62EC4ABD7ADD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDA20D8EF, CInt(&H812A), CInt(&H4C43), &H98, &H2, &H62, &HEC, &H4A, &HBD, &H7A, &HDD)
IID_IDWriteFontFamily = iid
End Function
Public Function IID_IDWriteFontList() As UUID
'{1A0D8438-1D97-4EC1-AEF9-A2FB86ED6ACB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1A0D8438, CInt(&H1D97), CInt(&H4EC1), &HAE, &HF9, &HA2, &HFB, &H86, &HED, &H6A, &HCB)
IID_IDWriteFontList = iid
End Function
Public Function IID_IDWriteFont() As UUID
'{ACD16696-8C14-4F5D-877E-FE3FC1D32737}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HACD16696, CInt(&H8C14), CInt(&H4F5D), &H87, &H7E, &HFE, &H3F, &HC1, &HD3, &H27, &H37)
IID_IDWriteFont = iid
End Function
Public Function IID_IDWriteLocalizedStrings() As UUID
'{08256209-099A-4B34-B86D-C22B110E7771}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8256209, CInt(&H99A), CInt(&H4B34), &HB8, &H6D, &HC2, &H2B, &H11, &HE, &H77, &H71)
IID_IDWriteLocalizedStrings = iid
End Function
Public Function IID_IDWriteFontFace() As UUID
'{5F49804D-7024-4D43-BFA9-D25984F53849}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5F49804D, CInt(&H7024), CInt(&H4D43), &HBF, &HA9, &HD2, &H59, &H84, &HF5, &H38, &H49)
IID_IDWriteFontFace = iid
End Function
Public Function IID_IDWriteRenderingParams() As UUID
'{2F0DA53A-2ADD-47CD-82EE-D9EC34688E75}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2F0DA53A, CInt(&H2ADD), CInt(&H47CD), &H82, &HEE, &HD9, &HEC, &H34, &H68, &H8E, &H75)
IID_IDWriteRenderingParams = iid
End Function
Public Function IID_IDWriteFontCollectionLoader() As UUID
'{CCA920E4-52F0-492B-BFA8-29C72EE0A468}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCCA920E4, CInt(&H52F0), CInt(&H492B), &HBF, &HA8, &H29, &HC7, &H2E, &HE0, &HA4, &H68)
IID_IDWriteFontCollectionLoader = iid
End Function
Public Function IID_IDWriteFontFileEnumerator() As UUID
'{72755049-5FF7-435D-8348-4BE97CFA6C7C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H72755049, CInt(&H5FF7), CInt(&H435D), &H83, &H48, &H4B, &HE9, &H7C, &HFA, &H6C, &H7C)
IID_IDWriteFontFileEnumerator = iid
End Function
Public Function IID_IDWriteFontFile() As UUID
'{739D886A-CEF5-47DC-8769-1A8B41BEBBB0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H739D886A, CInt(&HCEF5), CInt(&H47DC), &H87, &H69, &H1A, &H8B, &H41, &HBE, &HBB, &HB0)
IID_IDWriteFontFile = iid
End Function
Public Function IID_IDWriteFontFileLoader() As UUID
'{727CAD4E-D6AF-4C9E-8A08-D695B11CAA49}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H727CAD4E, CInt(&HD6AF), CInt(&H4C9E), &H8A, &H8, &HD6, &H95, &HB1, &H1C, &HAA, &H49)
IID_IDWriteFontFileLoader = iid
End Function
Public Function IID_IDWriteFontFileStream() As UUID
'{6D4865FE-0AB8-4D91-8F62-5DD6BE34A3E0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6D4865FE, CInt(&HAB8), CInt(&H4D91), &H8F, &H62, &H5D, &HD6, &HBE, &H34, &HA3, &HE0)
IID_IDWriteFontFileStream = iid
End Function
Public Function IID_IDWriteTextFormat() As UUID
'{9C906818-31D7-4FD3-A151-7C5E225DB55A}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9C906818, CInt(&H31D7), CInt(&H4FD3), &HA1, &H51, &H7C, &H5E, &H22, &H5D, &HB5, &H5A)
IID_IDWriteTextFormat = iid
End Function
Public Function IID_IDWriteInlineObject() As UUID
'{8339FDE3-106F-47AB-8373-1C6295EB10B3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8339FDE3, CInt(&H106F), CInt(&H47AB), &H83, &H73, &H1C, &H62, &H95, &HEB, &H10, &HB3)
IID_IDWriteInlineObject = iid
End Function
Public Function IID_IDWriteTextRenderer() As UUID
'{EF8A8135-5CC6-45FE-8825-C5A0724EB819}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEF8A8135, CInt(&H5CC6), CInt(&H45FE), &H88, &H25, &HC5, &HA0, &H72, &H4E, &HB8, &H19)
IID_IDWriteTextRenderer = iid
End Function
Public Function IID_IDWritePixelSnapping() As UUID
'{EAF3A2DA-ECF4-4D24-B644-B34F6842024B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEAF3A2DA, CInt(&HECF4), CInt(&H4D24), &HB6, &H44, &HB3, &H4F, &H68, &H42, &H2, &H4B)
IID_IDWritePixelSnapping = iid
End Function
Public Function IID_IDWriteTypography() As UUID
'{55F1112B-1DC2-4B3C-9541-F46894ED85B6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H55F1112B, CInt(&H1DC2), CInt(&H4B3C), &H95, &H41, &HF4, &H68, &H94, &HED, &H85, &HB6)
IID_IDWriteTypography = iid
End Function
Public Function IID_IDWriteGdiInterop() As UUID
'{1EDD9491-9853-4299-898F-6432983B6F3A}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1EDD9491, CInt(&H9853), CInt(&H4299), &H89, &H8F, &H64, &H32, &H98, &H3B, &H6F, &H3A)
IID_IDWriteGdiInterop = iid
End Function
Public Function IID_IDWriteBitmapRenderTarget() As UUID
'{5E5A32A3-8DFF-4773-9FF6-0696EAB77267}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5E5A32A3, CInt(&H8DFF), CInt(&H4773), &H9F, &HF6, &H6, &H96, &HEA, &HB7, &H72, &H67)
IID_IDWriteBitmapRenderTarget = iid
End Function
Public Function IID_IDWriteTextLayout() As UUID
'{53737037-6D14-410B-9BFE-0B182BB70961}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H53737037, CInt(&H6D14), CInt(&H410B), &H9B, &HFE, &HB, &H18, &H2B, &HB7, &H9, &H61)
IID_IDWriteTextLayout = iid
End Function
Public Function IID_IDWriteTextAnalyzer() As UUID
'{B7E6163E-7F46-43B4-84B3-E4E6249C365D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB7E6163E, CInt(&H7F46), CInt(&H43B4), &H84, &HB3, &HE4, &HE6, &H24, &H9C, &H36, &H5D)
IID_IDWriteTextAnalyzer = iid
End Function
Public Function IID_IDWriteTextAnalysisSource() As UUID
'{688E1A58-5094-47C8-ADC8-FBCEA60AE92B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H688E1A58, CInt(&H5094), CInt(&H47C8), &HAD, &HC8, &HFB, &HCE, &HA6, &HA, &HE9, &H2B)
IID_IDWriteTextAnalysisSource = iid
End Function
Public Function IID_IDWriteNumberSubstitution() As UUID
'{14885CC9-BAB0-4F90-B6ED-5C366A2CD03D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H14885CC9, CInt(&HBAB0), CInt(&H4F90), &HB6, &HED, &H5C, &H36, &H6A, &H2C, &HD0, &H3D)
IID_IDWriteNumberSubstitution = iid
End Function
Public Function IID_IDWriteTextAnalysisSink() As UUID
'{5810CD44-0CA0-4701-B3FA-BEC5182AE4F6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5810CD44, CInt(&HCA0), CInt(&H4701), &HB3, &HFA, &HBE, &HC5, &H18, &H2A, &HE4, &HF6)
IID_IDWriteTextAnalysisSink = iid
End Function
Public Function IID_IDWriteGlyphRunAnalysis() As UUID
'{7D97DBF7-E085-42D4-81E3-6A883BDED118}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7D97DBF7, CInt(&HE085), CInt(&H42D4), &H81, &HE3, &H6A, &H88, &H3B, &HDE, &HD1, &H18)
IID_IDWriteGlyphRunAnalysis = iid
End Function
Public Function IID_IDWriteLocalFontFileLoader() As UUID
'{B2D9F3EC-C9FE-4A11-A2EC-D86208F7C0A2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB2D9F3EC, CInt(&HC9FE), CInt(&H4A11), &HA2, &HEC, &HD8, &H62, &H8, &HF7, &HC0, &HA2)
IID_IDWriteLocalFontFileLoader = iid
End Function

Public Function IID_IDXGIObject() As UUID
'{aec22fb8-76f3-4639-9be0-28eb43a67a2e}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Haec22fb8, CInt(&H76f3), CInt(&H4639), &H9b, &He0, &H28, &Heb, &H43, &Ha6, &H7a, &H2e)
IID_IDXGIObject = iid
End Function
Public Function IID_IDXGIDeviceSubObject() As UUID
'{3d3e0379-f9de-4d58-bb6c-18d62992f1a6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3d3e0379, CInt(&Hf9de), CInt(&H4d58), &Hbb, &H6c, &H18, &Hd6, &H29, &H92, &Hf1, &Ha6)
IID_IDXGIDeviceSubObject = iid
End Function
Public Function IID_IDXGIResource() As UUID
'{035f3ab4-482e-4e50-b41f-8a7f8bd8960b}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H035f3ab4, CInt(&H482e), CInt(&H4e50), &Hb4, &H1f, &H8a, &H7f, &H8b, &Hd8, &H96, &H0b)
IID_IDXGIResource = iid
End Function
Public Function IID_IDXGIKeyedMutex() As UUID
'{9d8e1289-d7b3-465f-8126-250e349af85d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9d8e1289, CInt(&Hd7b3), CInt(&H465f), &H81, &H26, &H25, &H0e, &H34, &H9a, &Hf8, &H5d)
IID_IDXGIKeyedMutex = iid
End Function
Public Function IID_IDXGISurface() As UUID
'{cafcb56c-6ac3-4889-bf47-9e23bbd260ec}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hcafcb56c, CInt(&H6ac3), CInt(&H4889), &Hbf, &H47, &H9e, &H23, &Hbb, &Hd2, &H60, &Hec)
IID_IDXGISurface = iid
End Function
Public Function IID_IDXGISurface1() As UUID
'{4AE63092-6327-4c1b-80AE-BFE12EA32B86}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4AE63092, CInt(&H6327), CInt(&H4c1b), &H80, &HAE, &HBF, &HE1, &H2E, &HA3, &H2B, &H86)
IID_IDXGISurface1 = iid
End Function
Public Function IID_IDXGIAdapter() As UUID
'{2411e7e1-12ac-4ccf-bd14-9798e8534dc0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2411e7e1, CInt(&H12ac), CInt(&H4ccf), &Hbd, &H14, &H97, &H98, &He8, &H53, &H4d, &Hc0)
IID_IDXGIAdapter = iid
End Function
Public Function IID_IDXGIOutput() As UUID
'{ae02eedb-c735-4690-8d52-5a8dc20213aa}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hae02eedb, CInt(&Hc735), CInt(&H4690), &H8d, &H52, &H5a, &H8d, &Hc2, &H02, &H13, &Haa)
IID_IDXGIOutput = iid
End Function
Public Function IID_IDXGISwapChain() As UUID
'{310d36a0-d2e7-4c0a-aa04-6a9d23b8886a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H310d36a0, CInt(&Hd2e7), CInt(&H4c0a), &Haa, &H04, &H6a, &H9d, &H23, &Hb8, &H88, &H6a)
IID_IDXGISwapChain = iid
End Function
Public Function IID_IDXGIFactory() As UUID
'{7b7166ec-21c7-44ae-b21a-c9ae321ae369}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7b7166ec, CInt(&H21c7), CInt(&H44ae), &Hb2, &H1a, &Hc9, &Hae, &H32, &H1a, &He3, &H69)
IID_IDXGIFactory = iid
End Function
Public Function IID_IDXGIDevice() As UUID
'{54ec77fa-1377-44e6-8c32-88fd5f44c84c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H54ec77fa, CInt(&H1377), CInt(&H44e6), &H8c, &H32, &H88, &Hfd, &H5f, &H44, &Hc8, &H4c)
IID_IDXGIDevice = iid
End Function
Public Function IID_IDXGIFactory1() As UUID
'{770aae78-f26f-4dba-a829-253c83d1b387}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H770aae78, CInt(&Hf26f), CInt(&H4dba), &Ha8, &H29, &H25, &H3c, &H83, &Hd1, &Hb3, &H87)
IID_IDXGIFactory1 = iid
End Function
Public Function IID_IDXGIAdapter1() As UUID
'{29038f61-3839-4626-91fd-086879011a05}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H29038f61, CInt(&H3839), CInt(&H4626), &H91, &Hfd, &H08, &H68, &H79, &H01, &H1a, &H05)
IID_IDXGIAdapter1 = iid
End Function
Public Function IID_IDXGIDevice1() As UUID
'{77db970f-6276-48ba-ba28-070143b4392c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H77db970f, CInt(&H6276), CInt(&H48ba), &Hba, &H28, &H07, &H01, &H43, &Hb4, &H39, &H2c)
IID_IDXGIDevice1 = iid
End Function
Public Function IID_IDXGIDisplayControl() As UUID
'{ea9dbf1a-c88e-4486-854a-98aa0138f30c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hea9dbf1a, CInt(&Hc88e), CInt(&H4486), &H85, &H4a, &H98, &Haa, &H01, &H38, &Hf3, &H0c)
IID_IDXGIDisplayControl = iid
End Function
Public Function IID_IDXGIOutputDuplication() As UUID
'{191cfac3-a341-470d-b26e-a864f428319c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H191cfac3, CInt(&Ha341), CInt(&H470d), &Hb2, &H6e, &Ha8, &H64, &Hf4, &H28, &H31, &H9c)
IID_IDXGIOutputDuplication = iid
End Function
Public Function IID_IDXGISurface2() As UUID
'{aba496dd-b617-4cb8-a866-bc44d7eb1fa2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Haba496dd, CInt(&Hb617), CInt(&H4cb8), &Ha8, &H66, &Hbc, &H44, &Hd7, &Heb, &H1f, &Ha2)
IID_IDXGISurface2 = iid
End Function
Public Function IID_IDXGIResource1() As UUID
'{30961379-4609-4a41-998e-54fe567ee0c1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H30961379, CInt(&H4609), CInt(&H4a41), &H99, &H8e, &H54, &Hfe, &H56, &H7e, &He0, &Hc1)
IID_IDXGIResource1 = iid
End Function
Public Function IID_IDXGIDevice2() As UUID
'{05008617-fbfd-4051-a790-144884b4f6a9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H05008617, CInt(&Hfbfd), CInt(&H4051), &Ha7, &H90, &H14, &H48, &H84, &Hb4, &Hf6, &Ha9)
IID_IDXGIDevice2 = iid
End Function
Public Function IID_IDXGISwapChain1() As UUID
'{790a45f7-0d42-4876-983a-0a55cfe6f4aa}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H790a45f7, CInt(&H0d42), CInt(&H4876), &H98, &H3a, &H0a, &H55, &Hcf, &He6, &Hf4, &Haa)
IID_IDXGISwapChain1 = iid
End Function
Public Function IID_IDXGIFactory2() As UUID
'{50c83a1c-e072-4c48-87b0-3630fa36a6d0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H50c83a1c, CInt(&He072), CInt(&H4c48), &H87, &Hb0, &H36, &H30, &Hfa, &H36, &Ha6, &Hd0)
IID_IDXGIFactory2 = iid
End Function
Public Function IID_IDXGIAdapter2() As UUID
'{0AA1AE0A-FA0E-4B84-8644-E05FF8E5ACB5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H0AA1AE0A, CInt(&HFA0E), CInt(&H4B84), &H86, &H44, &HE0, &H5F, &HF8, &HE5, &HAC, &HB5)
IID_IDXGIAdapter2 = iid
End Function
Public Function IID_IDXGIOutput1() As UUID
'{00cddea8-939b-4b83-a340-a685226666cc}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H00cddea8, CInt(&H939b), CInt(&H4b83), &Ha3, &H40, &Ha6, &H85, &H22, &H66, &H66, &Hcc)
IID_IDXGIOutput1 = iid
End Function
Public Function IID_IDXGIDevice3() As UUID
'{6007896c-3244-4afd-bf18-a6d3beda5023}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6007896c, CInt(&H3244), CInt(&H4afd), &Hbf, &H18, &Ha6, &Hd3, &Hbe, &Hda, &H50, &H23)
IID_IDXGIDevice3 = iid
End Function
Public Function IID_IDXGISwapChain2() As UUID
'{a8be2ac4-199f-4946-b331-79599fb98de7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Ha8be2ac4, CInt(&H199f), CInt(&H4946), &Hb3, &H31, &H79, &H59, &H9f, &Hb9, &H8d, &He7)
IID_IDXGISwapChain2 = iid
End Function
Public Function IID_IDXGIOutput2() As UUID
'{595e39d1-2724-4663-99b1-da969de28364}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H595e39d1, CInt(&H2724), CInt(&H4663), &H99, &Hb1, &Hda, &H96, &H9d, &He2, &H83, &H64)
IID_IDXGIOutput2 = iid
End Function
Public Function IID_IDXGIFactory3() As UUID
'{25483823-cd46-4c7d-86ca-47aa95b837bd}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H25483823, CInt(&Hcd46), CInt(&H4c7d), &H86, &Hca, &H47, &Haa, &H95, &Hb8, &H37, &Hbd)
IID_IDXGIFactory3 = iid
End Function
Public Function IID_IDXGIDecodeSwapChain() As UUID
'{2633066b-4514-4c7a-8fd8-12ea98059d18}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2633066b, CInt(&H4514), CInt(&H4c7a), &H8f, &Hd8, &H12, &Hea, &H98, &H05, &H9d, &H18)
IID_IDXGIDecodeSwapChain = iid
End Function
Public Function IID_IDXGIFactoryMedia() As UUID
'{41e7d1f2-a591-4f7b-a2e5-fa9c843e1c12}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H41e7d1f2, CInt(&Ha591), CInt(&H4f7b), &Ha2, &He5, &Hfa, &H9c, &H84, &H3e, &H1c, &H12)
IID_IDXGIFactoryMedia = iid
End Function
Public Function IID_IDXGISwapChainMedia() As UUID
'{dd95b90b-f05f-4f6a-bd65-25bfb264bd84}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hdd95b90b, CInt(&Hf05f), CInt(&H4f6a), &Hbd, &H65, &H25, &Hbf, &Hb2, &H64, &Hbd, &H84)
IID_IDXGISwapChainMedia = iid
End Function
Public Function IID_IDXGIOutput3() As UUID
'{8a6bb301-7e7e-41F4-a8e0-5b32f7f99b18}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8a6bb301, CInt(&H7e7e), CInt(&H41F4), &Ha8, &He0, &H5b, &H32, &Hf7, &Hf9, &H9b, &H18)
IID_IDXGIOutput3 = iid
End Function
Public Function IID_IDXGISwapChain3() As UUID
'{94d99bdb-f1f8-4ab0-b236-7da0170edab1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H94d99bdb, CInt(&Hf1f8), CInt(&H4ab0), &Hb2, &H36, &H7d, &Ha0, &H17, &H0e, &Hda, &Hb1)
IID_IDXGISwapChain3 = iid
End Function
Public Function IID_IDXGIOutput4() As UUID
'{dc7dca35-2196-414d-9F53-617884032a60}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Hdc7dca35, CInt(&H2196), CInt(&H414d), &H9F, &H53, &H61, &H78, &H84, &H03, &H2a, &H60)
IID_IDXGIOutput4 = iid
End Function
Public Function IID_IDXGIFactory4() As UUID
'{1bc6ea02-ef36-464f-bf0c-21ca39e5168a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1bc6ea02, CInt(&Hef36), CInt(&H464f), &Hbf, &H0c, &H21, &Hca, &H39, &He5, &H16, &H8a)
IID_IDXGIFactory4 = iid
End Function
Public Function IID_IDXGIAdapter3() As UUID
'{645967A4-1392-4310-A798-8053CE3E93FD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H645967A4, CInt(&H1392), CInt(&H4310), &HA7, &H98, &H80, &H53, &HCE, &H3E, &H93, &HFD)
IID_IDXGIAdapter3 = iid
End Function
Public Function IID_IDXGIOutput5() As UUID
'{80A07424-AB52-42EB-833C-0C42FD282D98}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H80A07424, CInt(&HAB52), CInt(&H42EB), &H83, &H3C, &H0C, &H42, &HFD, &H28, &H2D, &H98)
IID_IDXGIOutput5 = iid
End Function
Public Function IID_IDXGISwapChain4() As UUID
'{3D585D5A-BD4A-489E-B1F4-3DBCB6452FFB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3D585D5A, CInt(&HBD4A), CInt(&H489E), &HB1, &HF4, &H3D, &HBC, &HB6, &H45, &H2F, &HFB)
IID_IDXGISwapChain4 = iid
End Function
Public Function IID_IDXGIDevice4() As UUID
'{95B4F95F-D8DA-4CA4-9EE6-3B76D5968A10}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H95B4F95F, CInt(&HD8DA), CInt(&H4CA4), &H9E, &HE6, &H3B, &H76, &HD5, &H96, &H8A, &H10)
IID_IDXGIDevice4 = iid
End Function
Public Function IID_IDXGIFactory5() As UUID
'{7632e1f5-ee65-4dca-87fd-84cd75f8838d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7632e1f5, CInt(&Hee65), CInt(&H4dca), &H87, &Hfd, &H84, &Hcd, &H75, &Hf8, &H83, &H8d)
IID_IDXGIFactory5 = iid
End Function
Public Function IID_IDXGIAdapter4() As UUID
'{3c8d99d1-4fbf-4181-a82c-af66bf7bd24e}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3c8d99d1, CInt(&H4fbf), CInt(&H4181), &Ha8, &H2c, &Haf, &H66, &Hbf, &H7b, &Hd2, &H4e)
IID_IDXGIAdapter4 = iid
End Function
Public Function IID_IDXGIOutput6() As UUID
'{068346e8-aaec-4b84-add7-137f513f77a1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H068346e8, CInt(&Haaec), CInt(&H4b84), &Had, &Hd7, &H13, &H7f, &H51, &H3f, &H77, &Ha1)
IID_IDXGIOutput6 = iid
End Function

Public Function IID_IDCompositionDevice() As UUID
'{C37EA93A-E7AA-450D-B16F-9746CB0407F3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC37EA93A, CInt(&HE7AA), CInt(&H450D), &HB1, &H6F, &H97, &H46, &HCB, &H04, &H07, &HF3)
IID_IDCompositionDevice = iid
End Function
Public Function IID_IDCompositionTarget() As UUID
'{eacdd04c-117e-4e17-88f4-d1b12b0e3d89}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &Heacdd04c, CInt(&H117e), CInt(&H4e17), &H88, &Hf4, &Hd1, &Hb1, &H2b, &H0e, &H3d, &H89)
IID_IDCompositionTarget = iid
End Function
Public Function IID_IDCompositionVisual() As UUID
'{4d93059d-097b-4651-9a60-f0f25116e2f3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4d93059d, CInt(&H097b), CInt(&H4651), &H9a, &H60, &Hf0, &Hf2, &H51, &H16, &He2, &Hf3)
IID_IDCompositionVisual = iid
End Function
Public Function IID_IDCompositionEffect() As UUID
'{EC81B08F-BFCB-4e8d-B193-A915587999E8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEC81B08F, CInt(&HBFCB), CInt(&H4e8d), &HB1, &H93, &HA9, &H15, &H58, &H79, &H99, &HE8)
IID_IDCompositionEffect = iid
End Function
Public Function IID_IDCompositionTransform3D() As UUID
'{71185722-246B-41f2-AAD1-0443F7F4BFC2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H71185722, CInt(&H246B), CInt(&H41f2), &HAA, &HD1, &H04, &H43, &HF7, &HF4, &HBF, &HC2)
IID_IDCompositionTransform3D = iid
End Function
Public Function IID_IDCompositionTransform() As UUID
'{FD55FAA7-37E0-4c20-95D2-9BE45BC33F55}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFD55FAA7, CInt(&H37E0), CInt(&H4c20), &H95, &HD2, &H9B, &HE4, &H5B, &HC3, &H3F, &H55)
IID_IDCompositionTransform = iid
End Function
Public Function IID_IDCompositionTranslateTransform() As UUID
'{06791122-C6F0-417d-8323-269E987F5954}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H06791122, CInt(&HC6F0), CInt(&H417d), &H83, &H23, &H26, &H9E, &H98, &H7F, &H59, &H54)
IID_IDCompositionTranslateTransform = iid
End Function
Public Function IID_IDCompositionScaleTransform() As UUID
'{71FDE914-40EF-45ef-BD51-68B037C339F9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H71FDE914, CInt(&H40EF), CInt(&H45ef), &HBD, &H51, &H68, &HB0, &H37, &HC3, &H39, &HF9)
IID_IDCompositionScaleTransform = iid
End Function
Public Function IID_IDCompositionRotateTransform() As UUID
'{641ED83C-AE96-46c5-90DC-32774CC5C6D5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H641ED83C, CInt(&HAE96), CInt(&H46c5), &H90, &HDC, &H32, &H77, &H4C, &HC5, &HC6, &HD5)
IID_IDCompositionRotateTransform = iid
End Function
Public Function IID_IDCompositionSkewTransform() As UUID
'{E57AA735-DCDB-4c72-9C61-0591F58889EE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE57AA735, CInt(&HDCDB), CInt(&H4c72), &H9C, &H61, &H05, &H91, &HF5, &H88, &H89, &HEE)
IID_IDCompositionSkewTransform = iid
End Function
Public Function IID_IDCompositionMatrixTransform() As UUID
'{16CDFF07-C503-419c-83F2-0965C7AF1FA6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H16CDFF07, CInt(&HC503), CInt(&H419c), &H83, &HF2, &H09, &H65, &HC7, &HAF, &H1F, &HA6)
IID_IDCompositionMatrixTransform = iid
End Function
Public Function IID_IDCompositionEffectGroup() As UUID
'{A7929A74-E6B2-4bd6-8B95-4040119CA34D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA7929A74, CInt(&HE6B2), CInt(&H4bd6), &H8B, &H95, &H40, &H40, &H11, &H9C, &HA3, &H4D)
IID_IDCompositionEffectGroup = iid
End Function
Public Function IID_IDCompositionTranslateTransform3D() As UUID
'{91636D4B-9BA1-4532-AAF7-E3344994D788}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H91636D4B, CInt(&H9BA1), CInt(&H4532), &HAA, &HF7, &HE3, &H34, &H49, &H94, &HD7, &H88)
IID_IDCompositionTranslateTransform3D = iid
End Function
Public Function IID_IDCompositionScaleTransform3D() As UUID
'{2A9E9EAD-364B-4b15-A7C4-A1997F78B389}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2A9E9EAD, CInt(&H364B), CInt(&H4b15), &HA7, &HC4, &HA1, &H99, &H7F, &H78, &HB3, &H89)
IID_IDCompositionScaleTransform3D = iid
End Function
Public Function IID_IDCompositionRotateTransform3D() As UUID
'{D8F5B23F-D429-4a91-B55A-D2F45FD75B18}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD8F5B23F, CInt(&HD429), CInt(&H4a91), &HB5, &H5A, &HD2, &HF4, &H5F, &HD7, &H5B, &H18)
IID_IDCompositionRotateTransform3D = iid
End Function
Public Function IID_IDCompositionMatrixTransform3D() As UUID
'{4B3363F0-643B-41b7-B6E0-CCF22D34467C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4B3363F0, CInt(&H643B), CInt(&H41b7), &HB6, &HE0, &HCC, &HF2, &H2D, &H34, &H46, &H7C)
IID_IDCompositionMatrixTransform3D = iid
End Function
Public Function IID_IDCompositionClip() As UUID
'{64AC3703-9D3F-45ec-A109-7CAC0E7A13A7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H64AC3703, CInt(&H9D3F), CInt(&H45ec), &HA1, &H09, &H7C, &HAC, &H0E, &H7A, &H13, &HA7)
IID_IDCompositionClip = iid
End Function
Public Function IID_IDCompositionRectangleClip() As UUID
'{9842AD7D-D9CF-4908-AED7-48B51DA5E7C2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9842AD7D, CInt(&HD9CF), CInt(&H4908), &HAE, &HD7, &H48, &HB5, &H1D, &HA5, &HE7, &HC2)
IID_IDCompositionRectangleClip = iid
End Function
Public Function IID_IDCompositionSurface() As UUID
'{BB8A4953-2C99-4F5A-96F5-4819027FA3AC}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBB8A4953, CInt(&H2C99), CInt(&H4F5A), &H96, &HF5, &H48, &H19, &H02, &H7F, &HA3, &HAC)
IID_IDCompositionSurface = iid
End Function
Public Function IID_IDCompositionVirtualSurface() As UUID
'{AE471C51-5F53-4A24-8D3E-D0C39C30B3F0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAE471C51, CInt(&H5F53), CInt(&H4A24), &H8D, &H3E, &HD0, &HC3, &H9C, &H30, &HB3, &HF0)
IID_IDCompositionVirtualSurface = iid
End Function
Public Function IID_IDCompositionDevice2() As UUID
'{75F6468D-1B8E-447C-9BC6-75FEA80B5B25}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H75F6468D, CInt(&H1B8E), CInt(&H447C), &H9B, &HC6, &H75, &HFE, &HA8, &H0B, &H5B, &H25)
IID_IDCompositionDevice2 = iid
End Function
Public Function IID_IDCompositionDesktopDevice() As UUID
'{5F4633FE-1E08-4CB8-8C75-CE24333F5602}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5F4633FE, CInt(&H1E08), CInt(&H4CB8), &H8C, &H75, &HCE, &H24, &H33, &H3F, &H56, &H02)
IID_IDCompositionDesktopDevice = iid
End Function
Public Function IID_IDCompositionDeviceDebug() As UUID
'{A1A3C64A-224F-4A81-9773-4F03A89D3C6C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA1A3C64A, CInt(&H224F), CInt(&H4A81), &H97, &H73, &H4F, &H03, &HA8, &H9D, &H3C, &H6C)
IID_IDCompositionDeviceDebug = iid
End Function
Public Function IID_IDCompositionSurfaceFactory() As UUID
'{E334BC12-3937-4E02-85EB-FCF4EB30D2C8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE334BC12, CInt(&H3937), CInt(&H4E02), &H85, &HEB, &HFC, &HF4, &HEB, &H30, &HD2, &HC8)
IID_IDCompositionSurfaceFactory = iid
End Function
Public Function IID_IDCompositionVisual2() As UUID
'{E8DE1639-4331-4B26-BC5F-6A321D347A85}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE8DE1639, CInt(&H4331), CInt(&H4B26), &HBC, &H5F, &H6A, &H32, &H1D, &H34, &H7A, &H85)
IID_IDCompositionVisual2 = iid
End Function
Public Function IID_IDCompositionVisualDebug() As UUID
'{FED2B808-5EB4-43A0-AEA3-35F65280F91B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFED2B808, CInt(&H5EB4), CInt(&H43A0), &HAE, &HA3, &H35, &HF6, &H52, &H80, &HF9, &H1B)
IID_IDCompositionVisualDebug = iid
End Function
Public Function IID_IDCompositionVisual3() As UUID
'{2775F462-B6C1-4015-B0BE-B3E7D6A4976D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2775F462, CInt(&HB6C1), CInt(&H4015), &HB0, &HBE, &HB3, &HE7, &HD6, &HA4, &H97, &H6D)
IID_IDCompositionVisual3 = iid
End Function
Public Function IID_IDCompositionDevice3() As UUID
'{0987CB06-F916-48BF-8D35-CE7641781BD9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H0987CB06, CInt(&HF916), CInt(&H48BF), &H8D, &H35, &HCE, &H76, &H41, &H78, &H1B, &HD9)
IID_IDCompositionDevice3 = iid
End Function
Public Function IID_IDCompositionFilterEffect() As UUID
'{30C421D5-8CB2-4E9F-B133-37BE270D4AC2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H30C421D5, CInt(&H8CB2), CInt(&H4E9F), &HB1, &H33, &H37, &HBE, &H27, &H0D, &H4A, &HC2)
IID_IDCompositionFilterEffect = iid
End Function
Public Function IID_IDCompositionGaussianBlurEffect() As UUID
'{45D4D0B7-1BD4-454E-8894-2BFA68443033}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H45D4D0B7, CInt(&H1BD4), CInt(&H454E), &H88, &H94, &H2B, &HFA, &H68, &H44, &H30, &H33)
IID_IDCompositionGaussianBlurEffect = iid
End Function
Public Function IID_IDCompositionBrightnessEffect() As UUID
'{6027496E-CB3A-49AB-934F-D798DA4F7DA6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6027496E, CInt(&HCB3A), CInt(&H49AB), &H93, &H4F, &HD7, &H98, &HDA, &H4F, &H7D, &HA6)
IID_IDCompositionBrightnessEffect = iid
End Function
Public Function IID_IDCompositionColorMatrixEffect() As UUID
'{C1170A22-3CE2-4966-90D4-55408BFC84C4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC1170A22, CInt(&H3CE2), CInt(&H4966), &H90, &HD4, &H55, &H40, &H8B, &HFC, &H84, &HC4)
IID_IDCompositionColorMatrixEffect = iid
End Function
Public Function IID_IDCompositionShadowEffect() As UUID
'{4AD18AC0-CFD2-4C2F-BB62-96E54FDB6879}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4AD18AC0, CInt(&HCFD2), CInt(&H4C2F), &HBB, &H62, &H96, &HE5, &H4F, &HDB, &H68, &H79)
IID_IDCompositionShadowEffect = iid
End Function
Public Function IID_IDCompositionHueRotationEffect() As UUID
'{6DB9F920-0770-4781-B0C6-381912F9D167}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6DB9F920, CInt(&H0770), CInt(&H4781), &HB0, &HC6, &H38, &H19, &H12, &HF9, &HD1, &H67)
IID_IDCompositionHueRotationEffect = iid
End Function
Public Function IID_IDCompositionSaturationEffect() As UUID
'{A08DEBDA-3258-4FA4-9F16-9174D3FE93B1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA08DEBDA, CInt(&H3258), CInt(&H4FA4), &H9F, &H16, &H91, &H74, &HD3, &HFE, &H93, &HB1)
IID_IDCompositionSaturationEffect = iid
End Function
Public Function IID_IDCompositionTurbulenceEffect() As UUID
'{A6A55BDA-C09C-49F3-9193-A41922C89715}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA6A55BDA, CInt(&HC09C), CInt(&H49F3), &H91, &H93, &HA4, &H19, &H22, &HC8, &H97, &H15)
IID_IDCompositionTurbulenceEffect = iid
End Function
Public Function IID_IDCompositionLinearTransferEffect() As UUID
'{4305EE5B-C4A0-4C88-9385-67124E017683}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4305EE5B, CInt(&HC4A0), CInt(&H4C88), &H93, &H85, &H67, &H12, &H4E, &H01, &H76, &H83)
IID_IDCompositionLinearTransferEffect = iid
End Function
Public Function IID_IDCompositionTableTransferEffect() As UUID
'{9B7E82E2-69C5-4EB4-A5F5-A7033F5132CD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9B7E82E2, CInt(&H69C5), CInt(&H4EB4), &HA5, &HF5, &HA7, &H03, &H3F, &H51, &H32, &HCD)
IID_IDCompositionTableTransferEffect = iid
End Function
Public Function IID_IDCompositionCompositeEffect() As UUID
'{576616C0-A231-494D-A38D-00FD5EC4DB46}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H576616C0, CInt(&HA231), CInt(&H494D), &HA3, &H8D, &H00, &HFD, &H5E, &HC4, &HDB, &H46)
IID_IDCompositionCompositeEffect = iid
End Function
Public Function IID_IDCompositionBlendEffect() As UUID
'{33ECDC0A-578A-4A11-9C14-0CB90517F9C5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H33ECDC0A, CInt(&H578A), CInt(&H4A11), &H9C, &H14, &H0C, &HB9, &H05, &H17, &HF9, &HC5)
IID_IDCompositionBlendEffect = iid
End Function
Public Function IID_IDCompositionArithmeticCompositeEffect() As UUID
'{3B67DFA8-E3DD-4E61-B640-46C2F3D739DC}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3B67DFA8, CInt(&HE3DD), CInt(&H4E61), &HB6, &H40, &H46, &HC2, &HF3, &HD7, &H39, &HDC)
IID_IDCompositionArithmeticCompositeEffect = iid
End Function
Public Function IID_IDCompositionAffineTransform2DEffect() As UUID
'{0B74B9E8-CDD6-492F-BBBC-5ED32157026D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H0B74B9E8, CInt(&HCDD6), CInt(&H492F), &HBB, &HBC, &H5E, &HD3, &H21, &H57, &H02, &H6D)
IID_IDCompositionAffineTransform2DEffect = iid
End Function
Public Function IID_IDCompositionAnimation() As UUID
'{CBFD91D9-51B2-45e4-B3DE-D19CCFB863C5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCBFD91D9, CInt(&H51B2), CInt(&H45e4), &HB3, &HDE, &HD1, &H9C, &HCF, &HB8, &H63, &HC5)
IID_IDCompositionAnimation = iid
End Function


End Module