'ShellLib - OLE
'OLE interfaces for use with InPlaceActiveObject hooking
'Note: These conform with OLEGuids.tlb definitions 
'DEPENDENCIES: slShellCore

[ InterfaceId ("00000115-0000-0000-C000-000000000046") ]
Interface IOleInPlaceUIWindow Extends IOleWindow
    Sub GetBorder(ByVal lpRectBorder As LongPtr)
    Sub RequestBorderSpace(ByVal pBorderWidths As LongPtr)
    Sub SetBorderSpace(ByVal pBorderWidths As LongPtr)
    Sub SetActiveObject(ByVal pActiveObject As IOleInPlaceActiveObject, ByVal pszObjectName As String)
End Interface
[ InterfaceId ("00000117-0000-0000-C000-000000000046") ]
Interface IOleInPlaceActiveObject Extends IUnknownUnrestricted
    Sub GetWindow(phWnd As LongPtr)
    Sub ContextSensitiveHelp(ByVal fEnterMode As Long)
    Sub TranslateAccelerator(ByVal lpMsg As LongPtr)
    Sub OnFrameWindowActivate(ByVal fActivate As Long)
    Sub OnDocWindowActivate(ByVal fActivate As Long)
    Sub ResizeBorder(ByVal lpRectBorder As LongPtr, ByVal pUIWindow As IOleInPlaceUIWindow, ByVal fFrameWindow As Long)
    Sub EnableModeless(ByVal fEnable As Long)
End Interface
[ InterfaceId ("38584260-0CFB-45E7-8FBB-5D20B311F5B8") ]
Interface IOleInPlaceActiveObjectVB Extends IDispatch
    Sub TranslateAccelerator(Handled As Boolean, RetVal As Long, ByVal hWnd As LongPtr, ByVal wMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr, ByVal Shift As Long)
End Interface

[ InterfaceId ("0000011a-0000-0000-C000-000000000046") ]
Interface IParseDisplayName Extends stdole.IUnknown
    Sub ParseDisplayName(ByVal pbc As IBindCtx, ByVal pszDisplayName As LongPtr, pchEaten As Long, ppmkOut As IMoniker)
End Interface

[ InterfaceId ("0000011b-0000-0000-C000-000000000046") ]
Interface IOleContainer Extends IParseDisplayName
    [ PreserveSig ] Function EnumObjects(ByVal grfFlags As Long, ppenum As IEnumUnknown) As Long
    Sub LockContainer(ByVal fLock As Long)
End Interface

[ InterfaceId ("00000104-0000-0000-C000-000000000046") ]
Interface IEnumOLEVERB Extends stdole.IUnknown
    Sub Next(ByVal celt As Long, rgelt As LongPtr, pceltFetched As Long)
    Sub Skip(ByVal celt As Long)
    Sub Reset()
    Sub Clone(ppEnum As IEnumOLEVERB)
End Interface


[ InterfaceId ("00000118-0000-0000-C000-000000000046") ]
Interface IOleClientSite Extends stdole.IUnknown
    Sub SaveObject()
    Sub GetMoniker(ByVal dwAssign As Long, ByVal dwWhichMoniker As Long, ppmk As IMoniker)
    Sub GetContainer(ppContainer As IOleContainer)
    Sub ShowObject()
    Sub OnShowWindow(ByVal fShow As Long)
    Sub RequestNewObjectLayout()
End Interface

[ InterfaceId ("00000112-0000-0000-C000-000000000046") ]
Interface IOleObject Extends stdole.IUnknown
    Sub SetClientSite(ByVal pClientSite As IOleClientSite)
    Function GetClientSite() As IOleClientSite
    Sub SetHostNames(ByVal szContainerApp As LongPtr, ByVal szontainerObj As LongPtr)
    Sub Close(ByVal dwSaveOption As Long)
    Sub SetMoniker(ByVal dwWhichMoniker As Long, ByVal pmk As IMoniker)
    Sub GetMoniker(ByVal dwAssign As Long, ByVal dwWhichMoniker As Long, ppmk As IMoniker)
    Sub InitFromData(ByVal pDataObject As IDataObject, ByVal fCreation As Long, ByVal dwReserved As Long)
    Sub GetClipboardData(ByVal dwReserved As Long, ppDataObject As IDataObject)
    Sub DoVerb(ByVal iVerb As Long, lpmsg As MSG, ByVal pActiveSite As IOleClientSite, ByVal lindex As Long, ByVal hwndParent As LongPtr, lprcPosRect As RECT)
    [ PreserveSig ] Function EnumVerbs(ppEnumOleVerb As IEnumOLEVERB) As Long
    Sub Update()
    [ PreserveSig ] Function IsUpToDate() As Long
    Sub GetUserClassID(pClsid As UUID)
    Sub GetUserType(ByVal dwFormOfType, pszUserType As LongPtr)
    Sub SetExtent(ByVal dwDrawAspect As Long, psizel As SIZE)
    Sub GetExtent(ByVal dwDrawAspect As Long, psizel As SIZE)
    Sub Advise(ByVal pAdvSink As IAdviseSink, pdwConnection As Long)
    Sub Unadvise(ByVal dwConnection As Long)
    Sub EnumAdvise(ppenumAdvise As IEnumSTATDATA)
    Sub GetMiscStatus(ByVal dwAspect As Long, pdwStatus As Long)
    Sub SetColorScheme(pLogpal As LOGPALETTE)
End Interface

[ InterfaceId ("00000116-0000-0000-C000-000000000046") ]
Interface IOleInPlaceFrame Extends IOleInPlaceUIWindow
    Sub InsertMenus(ByVal hMenuShared As LongPtr, lpMenuWidths As OLEMENUGROUPWIDTHS)
    Sub SetMenu(ByVal hMenuShared As LongPtr, ByVal holeMenu As LongPtr, ByVal hwndActiveObject As LongPtr)
    Sub RemoveMenus(ByVal hMenuShared As LongPtr)
    Sub SetStatusText(ByVal pszStatusText As LongPtr)
    Sub EnableModeless(ByVal fEnable As Long)
    Sub TranslateAccelerator(lpmsg As MSG, ByVal wID As Integer)
    
End Interface



[ InterfaceId ("00000119-0000-0000-C000-000000000046") ]
Interface IOleInPlaceSite Extends IOleWindow
    Sub CanInPlaceActivate()
    Sub OnInPlaceActivate()
    Sub OnUIActivate()
    Sub GetWindowContext(ppFrame As IOleInPlaceFrame, ppDoc As IOleInPlaceUIWindow, ByVal lprcPosRect As LongPtr, ByVal lprcClipRect As LongPtr, ByVal lpFrameInfo As LongPtr)
    Sub Scroll(scrollExtant As LongLong)
    Sub OnUIDeactivate(ByVal fUndoable As Long)
    Sub OnInPlaceDeactivate()
    Sub DiscardUndoState()
    Sub DeactivateAndUndo()
    Sub OnPosRectChange(lprcPosRect As RECT)
End Interface

Module slOLE
Public Type OLEVERB
	lVerb As Long
	lpszVerbName As LongPtr
	fuFlags As Long
	grfAttribs As Long
End Type

Public Type PALETTEENTRY
	peRed As BYTE
	peGreen As BYTE
	peBlue As BYTE
	peFlags As BYTE
End Type
Public Type LOGPALETTE
	palVersion As Integer
	palNumEntries As integer
	palPalEntry(0) As PALETTEENTRY
End Type

Public Type OLEINPLACEFRAMEINFO
	cb As Long
	fMDIApp As Long
	hwndFrame As LongPtr
	haccel As LongPtr
	cAccelEntries As Long
End Type
Public Type OLERECT
	Left As Long
	Top As Long
	Right As Long
	Bottom As Long
End Type

Public Type OLECLSID
	Data1 As Long
	Data2 As Integer
	Data3 As Integer
	Data4(0 To 7) As Byte
End Type

Public Type OLEPOINT
    x As Long
    y As Long
End Type


End Module