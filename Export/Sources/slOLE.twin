'ShellLib - OLE
'OLE interfaces for use with InPlaceActiveObject hooking
'Note: These conform with tlb definitions 
'DEPENDENCIES: slShellCore

[ InterfaceId ("00000115-0000-0000-C000-000000000046") ]
Interface IOleInPlaceUIWindow Extends IOleWindow
    Sub GetBorder(ByVal lpRectBorder As LongPtr)
    Sub RequestBorderSpace(ByVal pBorderWidths As LongPtr)
    Sub SetBorderSpace(ByVal pBorderWidths As LongPtr)
    Sub SetActiveObject(ByVal pActiveObject As IOleInPlaceActiveObject, ByVal pszObjectName As String)
End Interface
[ InterfaceId ("00000117-0000-0000-C000-000000000046") ]
Interface IOleInPlaceActiveObject Extends IUnknownUnrestricted
    Sub GetWindow(phWnd As LongPtr)
    Sub ContextSensitiveHelp(ByVal fEnterMode As Long)
    Sub TranslateAccelerator(ByVal lpMsg As LongPtr)
    Sub OnFrameWindowActivate(ByVal fActivate As Long)
    Sub OnDocWindowActivate(ByVal fActivate As Long)
    Sub ResizeBorder(ByVal lpRectBorder As LongPtr, ByVal pUIWindow As IOleInPlaceUIWindow, ByVal fFrameWindow As Long)
    Sub EnableModeless(ByVal fEnable As Long)
End Interface
[ InterfaceId ("38584260-0CFB-45E7-8FBB-5D20B311F5B8") ]
Interface IOleInPlaceActiveObjectVB Extends IDispatch
    Sub TranslateAccelerator(Handled As Boolean, RetVal As Long, ByVal hWnd As LongPtr, ByVal wMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr, ByVal Shift As Long)
End Interface

[ InterfaceId ("0000011a-0000-0000-C000-000000000046") ]
Interface IParseDisplayName Extends stdole.IUnknown
    Sub ParseDisplayName(ByVal pbc As IBindCtx, ByVal pszDisplayName As LongPtr, pchEaten As Long, ppmkOut As IMoniker)
End Interface

[ InterfaceId ("0000011b-0000-0000-C000-000000000046") ]
Interface IOleContainer Extends IParseDisplayName
    [ PreserveSig ] Function EnumObjects(ByVal grfFlags As Long, ppenum As IEnumUnknown) As Long
    Sub LockContainer(ByVal fLock As Long)
End Interface

[ InterfaceId ("0000011E-0000-0000-C000-000000000046") ]
Interface IOleCache Extends stdole.IUnknown
    Function Cache(ByRef pformatetc As FORMATETC, ByVal ADVF As ADVF) As Long
    Sub Uncache(ByVal dwConnection As Long)
    Function EnumCache() As IEnumSTATDATA
    Sub InitCache(ByVal pDataObject As IDataObject)
    Sub SetData(ByRef pformatetc As FORMATETC, ByRef pmedium As STGMEDIUM, ByVal fRelease As Long)
End Interface

[ InterfaceId ("B722BCCB-4E68-101B-A2BC-00AA00404770") ]
Interface IOleCommandTarget Extends stdole.IUnknown
    Sub QueryStatus(ByRef pguidCmdGroup As Any, ByVal cCmds As Long, ByRef prgCmds As OLECMD, ByRef pCmdText As OLECMDTEXT)
    Sub Exec(ByRef pguidCmdGroup As Any, ByVal nCmdID As Long, Optional ByVal nCmdexecopt As OLECMDEXECOPT = 0, Optional ByRef pvaIn As Variant = 0, Optional ByRef pvaOut As Variant = 0)
End Interface

[ InterfaceId ("B196B28B-BAB4-101A-B69C-00AA00341D07") ]
Interface ISpecifyPropertyPages Extends stdole.IUnknown
    Sub GetPages(ByRef pPages As CAUUID)
End Interface

[ InterfaceId ("0000011D-0000-0000-C000-000000000046") ]
Interface IOleLink Extends stdole.IUnknown
    Sub SetUpdateOptions(ByVal dwUpdateOpt As OLEUPDATE)
    Function GetUpdateOptions() As OLEUPDATE
    Sub SetSourceMoniker(ByVal pmk As IMoniker, ByRef rclsid As UUID)
    Function GetSourceMoniker() As IMoniker
    Sub SetSourceDisplayName(ByVal pszStatusText As String)
    Function GetSourceDisplayName() As LongPtr
    Sub BindToSource(ByVal bindflags As OLELINKBIND, ByVal pbc As IBindCtx)
    [ PreserveSig ]
    Function BindIfRunning() As Long
    Function GetBoundSource() As stdole.IUnknown
    [ PreserveSig ]
    Function UnbindSource() As Long
    Sub Update(ByVal pbc As IBindCtx)
End Interface












[ InterfaceId ("00000104-0000-0000-C000-000000000046") ]
Interface IEnumOLEVERB Extends stdole.IUnknown
    Sub Next(ByVal celt As Long, rgelt As LongPtr, pceltFetched As Long)
    Sub Skip(ByVal celt As Long)
    Sub Reset()
    Sub Clone(ppEnum As IEnumOLEVERB)
End Interface


[ InterfaceId ("00000118-0000-0000-C000-000000000046") ]
Interface IOleClientSite Extends stdole.IUnknown
    Sub SaveObject()
    Sub GetMoniker(ByVal dwAssign As Long, ByVal dwWhichMoniker As Long, ppmk As IMoniker)
    Sub GetContainer(ppContainer As IOleContainer)
    Sub ShowObject()
    Sub OnShowWindow(ByVal fShow As Long)
    Sub RequestNewObjectLayout()
End Interface

[ InterfaceId ("00000112-0000-0000-C000-000000000046") ]
Interface IOleObject Extends stdole.IUnknown
    Sub SetClientSite(ByVal pClientSite As IOleClientSite)
    Function GetClientSite() As IOleClientSite
    Sub SetHostNames(ByVal szContainerApp As LongPtr, ByVal szontainerObj As LongPtr)
    Sub Close(ByVal dwSaveOption As Long)
    Sub SetMoniker(ByVal dwWhichMoniker As Long, ByVal pmk As IMoniker)
    Sub GetMoniker(ByVal dwAssign As Long, ByVal dwWhichMoniker As Long, ppmk As IMoniker)
    Sub InitFromData(ByVal pDataObject As IDataObject, ByVal fCreation As Long, ByVal dwReserved As Long)
    Sub GetClipboardData(ByVal dwReserved As Long, ppDataObject As IDataObject)
    Sub DoVerb(ByVal iVerb As Long, lpmsg As MSG, ByVal pActiveSite As IOleClientSite, ByVal lindex As Long, ByVal hwndParent As LongPtr, lprcPosRect As RECT)
    [ PreserveSig ] Function EnumVerbs(ppEnumOleVerb As IEnumOLEVERB) As Long
    Sub Update()
    [ PreserveSig ] Function IsUpToDate() As Long
    Sub GetUserClassID(pClsid As UUID)
    Sub GetUserType(ByVal dwFormOfType, pszUserType As LongPtr)
    Sub SetExtent(ByVal dwDrawAspect As Long, psizel As SIZE)
    Sub GetExtent(ByVal dwDrawAspect As Long, psizel As SIZE)
    Sub Advise(ByVal pAdvSink As IAdviseSink, pdwConnection As Long)
    Sub Unadvise(ByVal dwConnection As Long)
    Sub EnumAdvise(ppenumAdvise As IEnumSTATDATA)
    Sub GetMiscStatus(ByVal dwAspect As Long, pdwStatus As Long)
    Sub SetColorScheme(pLogpal As LOGPALETTE)
End Interface

[ InterfaceId ("00000116-0000-0000-C000-000000000046") ]
Interface IOleInPlaceFrame Extends IOleInPlaceUIWindow
    Sub InsertMenus(ByVal hMenuShared As LongPtr, lpMenuWidths As OLEMENUGROUPWIDTHS)
    Sub SetMenu(ByVal hMenuShared As LongPtr, ByVal holeMenu As LongPtr, ByVal hwndActiveObject As LongPtr)
    Sub RemoveMenus(ByVal hMenuShared As LongPtr)
    Sub SetStatusText(ByVal pszStatusText As LongPtr)
    Sub EnableModeless(ByVal fEnable As Long)
    Sub TranslateAccelerator(lpmsg As MSG, ByVal wID As Integer)
End Interface

[ InterfaceId ("00000113-0000-0000-C000-000000000046") ]
Interface IOleInPlaceObject Extends IOleWindow
    Sub InPlaceDeactivate()
    Sub UIDeactivate()
    Sub SetObjectRects(ByVal lprcPosRect As LongPtr, ByVal lprcClipRect As LongPtr)
    Sub ReactivateAndUndo()
End Interface

[ InterfaceId ("B196B288-BAB4-101A-B69C-00AA00341D07") ]
Interface IOleControl Extends stdole.IUnknown
    [ PreserveSig ]
    Function GetControlInfo(ByRef pCI As CONTROLINFO) As Long
    [ PreserveSig ]
    Function OnMnemonic(ByRef pMsg As MSG) As Long
    Sub OnAmbientPropertyChange(ByVal DispID As Long)
    Sub FreezeEvents(ByVal bFreeze As Long)
End Interface
[ InterfaceId ("C895C8F9-6564-4123-8760-529F72AB9322") ]
'[ DualInterface]
Interface IOleControlVB Extends IDispatchUnrestricted2
    [ DispId (1) ]
    /* voffset &H0038*/ Sub GetControlInfo(ByRef Handled As Boolean, ByRef AccelCount As Integer, ByRef AccelTable As LongPtr, ByRef Flags As Long)
    [ DispId (2) ]
    /* voffset &H0040*/ Sub OnMnemonic(ByRef Handled As Boolean, ByVal hWnd As LongPtr, ByVal wMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr, ByVal Shift As Long)
End Interface
    
    
[ InterfaceId ("00000119-0000-0000-C000-000000000046") ]
Interface IOleInPlaceSite Extends IOleWindow
    Sub CanInPlaceActivate()
    Sub OnInPlaceActivate()
    Sub OnUIActivate()
    Sub GetWindowContext(ppFrame As IOleInPlaceFrame, ppDoc As IOleInPlaceUIWindow, ByVal lprcPosRect As LongPtr, ByVal lprcClipRect As LongPtr, ByVal lpFrameInfo As LongPtr)
    Sub Scroll(scrollExtant As LongLong)
    Sub OnUIDeactivate(ByVal fUndoable As Long)
    Sub OnInPlaceDeactivate()
    Sub DiscardUndoState()
    Sub DeactivateAndUndo()
    Sub OnPosRectChange(lprcPosRect As RECT)
End Interface

[ InterfaceId ("376BD3AA-3845-101B-84ED-08002B2EC713") ]
Interface IPerPropertyBrowsing Extends stdole.IUnknown
    [ PreserveSig ]
    /* voffset &H0018*/ Function GetDisplayString(ByVal DispID As Long, ByRef pDisplayName As LongPtr) As Long
    [ PreserveSig ]
    /* voffset &H0020*/ Function MapPropertyToPage(ByVal DispID As Long, ByRef pCLSID As UUID) As Long
    [ PreserveSig ]
    /* voffset &H0028*/ Function GetPredefinedStrings(ByVal DispID As Long, ByRef pCaStringsOut As CALPOLESTR, ByRef pCaCookiesOut As CADWORD) As Long
    [ PreserveSig ]
    /* voffset &H0030*/ Function GetPredefinedValue(ByVal DispID As Long, ByVal dwCookie As Long, ByRef pVarOut As Variant) As Long
End Interface
[ InterfaceId ("D5D3BBE3-DB60-4522-AF5B-D767FE736DDB") ]
'[ DualInterface]
Interface IPerPropertyBrowsingVB Extends IDispatchUnrestricted2
    [ DispId (1) ]
    /* voffset &H0038*/ Sub GetDisplayString(ByRef Handled As Boolean, ByVal DispID As Long, ByRef DisplayName As String)
    [ DispId (2) ]
    /* voffset &H0040*/ Sub GetPredefinedStrings(ByRef Handled As Boolean, ByVal DispID As Long, ByRef StringsOut As String(), ByRef CookiesOut As Long())
    [ DispId (3) ]
    /* voffset &H0048*/ Sub GetPredefinedValue(ByRef Handled As Boolean, ByVal DispID As Long, ByVal Cookie As Long, ByRef Value As Variant)
End Interface


    [ InterfaceId ("00020D00-0000-0000-C000-000000000046") ]
    Interface IRichEditOle Extends stdole.IUnknown
        /* voffset &H0018*/ Function GetClientSite() As IOleClientSite
        [ PreserveSig ]
        /* voffset &H0020*/ Function GetObjectCount() As Long
        [ PreserveSig ]
        /* voffset &H0028*/ Function GetLinkCount() As Long
        [ PreserveSig ]
        /* voffset &H0030*/ Function GetObject(ByVal iob As Long, ByRef pREOBJECT As Any, ByVal dwFlags As REO_GETOBJ) As Long
        [ PreserveSig ]
        /* voffset &H0038*/ Function InsertObject(ByRef pREOBJECT As Any) As Long
        [ PreserveSig ]
        /* voffset &H0040*/ Function ConvertObject(ByVal iob As Long, ByRef pCLSIDNew As OLECLSID, ByVal pstrUserTypeNew As String) As Long
        [ PreserveSig ]
        /* voffset &H0048*/ Function ActivateAs(ByRef pCLSID As OLECLSID, ByRef pCLSIDAs As OLECLSID) As Long
        [ PreserveSig ]
        /* voffset &H0050*/ Function SetHostNames(ByVal pstrContainerApp As String, ByVal pstrContainerObj As String) As Long
        [ PreserveSig ]
        /* voffset &H0058*/ Function SetLinkAvailable(ByVal iob As Long, ByVal fAvailable As Long) As Long
        [ PreserveSig ]
        /* voffset &H0060*/ Function SetDvaspect(ByVal iob As Long, ByVal dvAspect As DVASPECT) As Long
        [ PreserveSig ]
        /* voffset &H0068*/ Function HandsOffStorage(ByVal iob As Long) As Long
        [ PreserveSig ]
        /* voffset &H0070*/ Function SaveCompleted(ByVal iob As Long, ByVal pStorage As IStorage) As Long
        [ PreserveSig ]
        /* voffset &H0078*/ Function InPlaceDeactivate() As Long
        [ PreserveSig ]
        /* voffset &H0080*/ Function ContextSensitiveHelp(ByVal fEnterMode As Long) As Long
        [ PreserveSig ]
        /* voffset &H0088*/ Function GetClipboardData(ByVal lpCharRange As LongPtr, ByVal RECO As RECO_FLAGS, ByRef ppDataObject As IDataObject) As Long
        [ PreserveSig ]
        /* voffset &H0090*/ Function ImportDataObject(ByVal pDataObject As IDataObject, ByVal CF As Integer, ByVal hMetaPict As LongPtr) As Long
    End Interface

    [ InterfaceId ("00020D03-0000-0000-C000-000000000046") ]
    Interface IRichEditOleCallback Extends stdole.IUnknown
        /* voffset &H0018*/ Sub GetNewStorage(ByRef ppStorage As IStorage)
        /* voffset &H0020*/ Sub GetInPlaceContext(ByRef ppFrame As IOleInPlaceFrame, ByRef ppDoc As IOleInPlaceUIWindow, ByRef pFrameInfo As OLEINPLACEFRAMEINFO)
        /* voffset &H0028*/ Sub ShowContainerUI(ByVal fShow As Long)
        /* voffset &H0030*/ Sub QueryInsertObject(ByRef pCLSID As OLECLSID, ByVal pStorage As IStorage, ByVal CharPos As Long)
        /* voffset &H0038*/ Sub DeleteObject(ByVal LpOleObject As LongPtr)
        /* voffset &H0040*/ Sub QueryAcceptData(ByVal pDataObject As IDataObject, ByRef CF As Integer, ByVal RECO As RECO_FLAGS, ByVal fReally As Long, ByVal hMetaPict As LongPtr)
        /* voffset &H0048*/ Sub ContextSensitiveHelp(ByVal fEnterMode As Long)
        /* voffset &H0050*/ Sub GetClipboardData(ByVal lpCharRange As LongPtr, ByVal RECO As RECO_FLAGS, ByRef ppDataObject As IDataObject)
        /* voffset &H0058*/ Sub GetDragDropEffect(ByVal fDrag As Long, ByVal KeyState As Long, ByRef dwEffect As Long)
        /* voffset &H0060*/ Sub GetContextMenu(ByVal SelType As Integer, ByVal LpOleObject As LongPtr, ByVal lpCharRange As LongPtr, ByRef hMenu As LongPtr)
    End Interface

    [ InterfaceId ("B196B289-BAB4-101A-B69C-00AA00341D07") ]
    Interface IOleControlSite Extends stdole.IUnknown
        /* voffset &H0018*/ Sub OnControlInfoChanged()
        /* voffset &H0020*/ Sub LockInPlaceActive(ByVal fLock As Long)
        /* voffset &H0028*/ Function GetExtendedControl() As Object
        /* voffset &H0030*/ Sub TransformCoords(ByRef pPtlHimetric As POINT, ByRef pPtfContainer As POINTF, ByVal dwFlags As XFORMCOORDS)
        /* voffset &H0038*/ Sub TranslateAccelerator(ByRef pMsg As MSG, ByVal grfModifiers As KEYMODIFIERS)
        /* voffset &H0040*/ Sub OnFocus(ByVal fGotFocus As Long)
        /* voffset &H0048*/ Sub ShowPropertyFrame()
    End Interface
    
   [ InterfaceId ("8CC497C0-A1DF-11CE-8098-00AA0047BE5D") ]
    '[ DualInterface]
    Interface ITextDocument Extends IDispatch
        [ DispId (0) ]
        /* voffset &H0038*/ Property Get Name() As String
        [ DispId (1) ]
        /* voffset &H0040*/ Property Get Selection() As ITextSelection
        [ DispId (2) ]
        /* voffset &H0048*/ Property Get StoryCount() As Long
        [ DispId (3) ]
        /* voffset &H0050*/ Property Get StoryRanges() As ITextStoryRanges
        [ DispId (4) ]
        /* voffset &H0058*/ Property Get Saved() As Long
        [ DispId (4) ]
        /* voffset &H0060*/ Property Let Saved(ByVal pValue As Long)
        [ DispId (5) ]
        /* voffset &H0068*/ Property Get DefaultTabStop() As Single
        [ DispId (5) ]
        /* voffset &H0070*/ Property Let DefaultTabStop(ByVal pValue As Single)
        [ DispId (6) ]
        /* voffset &H0078*/ Sub New()
        [ DispId (7) ]
        /* voffset &H0080*/ Sub Open(ByRef pVar As Variant, ByVal flags As tomOpenFlags, Optional ByVal CodePage As Long = 0)
        [ DispId (8) ]
        /* voffset &H0088*/ Sub Save(ByRef pVar As Variant, ByVal flags As tomOpenFlags, Optional ByVal CodePage As Long = 0)
        [ DispId (9) ]
        /* voffset &H0090*/ Function Freeze() As Long
        [ DispId (10) ]
        /* voffset &H0098*/ Function Unfreeze() As Long
        [ DispId (11) ]
        /* voffset &H00A0*/ Sub BeginEditCollection()
        [ DispId (12) ]
        /* voffset &H00A8*/ Sub EndEditCollection()
        [ DispId (13) ]
        /* voffset &H00B0*/ Function Undo(ByVal Count As Long) As Long
        [ DispId (14) ]
        /* voffset &H00B8*/ Function Redo(ByVal Count As Long) As Long
        [ DispId (15) ]
        /* voffset &H00C0*/ Function Range(Optional ByVal cp1 As Long = 0, Optional ByVal cp2 As Long = -1) As ITextRange
        [ DispId (16) ]
        /* voffset &H00C8*/ Function RangeFromPoint(ByVal x As Long, ByVal y As Long) As ITextRange
    End Interface

    [ InterfaceId ("8CC497C2-A1DF-11CE-8098-00AA0047BE5D") ]
   '[ DualInterface]
    Interface ITextRange Extends IDispatch
        [ DispId (0) ]
        /* voffset &H0038*/ Property Get Text() As String
        [ DispId (0) ]
        /* voffset &H0040*/ Property Let Text(ByVal pBSTR As String)
        [ DispId (513) ]
        /* voffset &H0048*/ Property Get CHAR() As Long
        [ DispId (513) ]
        /* voffset &H0050*/ Property Let CHAR(ByVal pch As Long)
        [ DispId (514) ]
        /* voffset &H0058*/ Property Get Duplicate() As ITextRange
        [ DispId (515) ]
        /* voffset &H0060*/ Property Get FormattedText() As ITextRange
        [ DispId (515) ]
        /* voffset &H0068*/ Property Let FormattedText(ByVal ppRange As ITextRange)
        [ DispId (516) ]
        /* voffset &H0070*/ Property Get Start() As Long
        [ DispId (516) ]
        /* voffset &H0078*/ Property Let Start(ByVal pcpFirst As Long)
        [ DispId (517) ]
        /* voffset &H0080*/ Property Get end() As Long
        [ DispId (517) ]
        /* voffset &H0088*/ Property Let end(ByVal pcpLim As Long)
        [ DispId (518) ]
        /* voffset &H0090*/ Property Get Font() As ITextFont
        [ DispId (518) ]
        /* voffset &H0098*/ Property Let Font(ByVal pFont As ITextFont)
        [ DispId (519) ]
        /* voffset &H00A0*/ Property Get Para() As ITextPara
        [ DispId (519) ]
        /* voffset &H00A8*/ Property Let Para(ByVal pPara As ITextPara)
        [ DispId (520) ]
        /* voffset &H00B0*/ Property Get StoryLength() As Long
        [ DispId (521) ]
        /* voffset &H00B8*/ Property Get StoryType() As tomStories
        [ DispId (528) ]
        /* voffset &H00C0*/ Sub Collapse(ByVal bStart As Long)
        [ DispId (529) ]
        /* voffset &H00C8*/ Function Expand(ByVal Unit As tomUnits) As Long
        [ DispId (530) ]
        /* voffset &H00D0*/ Function GetIndex(ByVal Unit As tomUnits) As Long
        [ DispId (531) ]
        /* voffset &H00D8*/ Sub SetIndex(ByVal Unit As tomUnits, ByVal index As Long, ByVal Extend As tomExtend)
        [ DispId (532) ]
        /* voffset &H00E0*/ Sub SetRange(ByVal cpActive As Long, ByVal cpOther As Long)
        [ DispId (533) ]
        /* voffset &H00E8*/ Function InRange(ByVal pRange As ITextRange) As Long
        [ DispId (534) ]
        /* voffset &H00F0*/ Function InStory(ByVal pRange As ITextRange) As Long
        [ DispId (535) ]
        /* voffset &H00F8*/ Function IsEqual(ByVal pRange As ITextRange) As Long
        [ DispId (536) ]
        /* voffset &H0100*/ Sub Select()
        [ DispId (537) ]
        /* voffset &H0108*/ Function StartOf(ByVal Unit As tomUnits, ByVal Extend As tomExtend) As Long
        [ DispId (544) ]
        /* voffset &H0110*/ Function EndOf(ByVal Unit As tomUnits, ByVal Extend As tomExtend) As Long
        [ DispId (545) ]
        /* voffset &H0118*/ Function Move(ByVal Unit As tomUnits, ByVal Count As Long) As Long
        [ DispId (546) ]
        /* voffset &H0120*/ Function MoveStart(ByVal Unit As tomUnits, ByVal Count As Long) As Long
        [ DispId (547) ]
        /* voffset &H0128*/ Function MoveEnd(ByVal Unit As tomUnits, ByVal Count As Long) As Long
        [ DispId (548) ]
        /* voffset &H0130*/ Function MoveWhile(ByRef Cset As Variant, ByVal Count As Long) As Long
        [ DispId (549) ]
        /* voffset &H0138*/ Function MoveStartWhile(ByRef Cset As Variant, ByVal Count As Long) As Long
        [ DispId (550) ]
        /* voffset &H0140*/ Function MoveEndWhile(ByRef Cset As Variant, ByVal Count As Long) As Long
        [ DispId (551) ]
        /* voffset &H0148*/ Function MoveUntil(ByRef Cset As Variant, ByVal Count As Long) As Long
        [ DispId (552) ]
        /* voffset &H0150*/ Function MoveStartUntil(ByRef Cset As Variant, ByVal Count As Long) As Long
        [ DispId (553) ]
        /* voffset &H0158*/ Function MoveEndUntil(ByRef Cset As Variant, ByVal Count As Long) As Long
        [ DispId (560) ]
        /* voffset &H0160*/ Function FindText(ByVal bstr As String, ByVal cch As Long, ByVal flags As tomFindFlags) As Long
        [ DispId (561) ]
        /* voffset &H0168*/ Function FindTextStart(ByVal bstr As String, ByVal cch As Long, ByVal flags As tomFindFlags) As Long
        [ DispId (562) ]
        /* voffset &H0170*/ Function FindTextEnd(ByVal bstr As String, ByVal cch As Long, ByVal flags As tomFindFlags) As Long
        [ DispId (563) ]
        /* voffset &H0178*/ Function Delete(ByVal Unit As tomUnits, ByVal Count As Long) As Long
        [ DispId (564) ]
        /* voffset &H0180*/ Sub Cut(ByRef pVar As Variant)
        [ DispId (565) ]
        /* voffset &H0188*/ Sub Copy(ByRef pVar As Variant)
        [ DispId (566) ]
        /* voffset &H0190*/ Sub Paste(ByRef pVar As Variant, ByVal Format As Long)
        [ DispId (567) ]
        /* voffset &H0198*/ Function CanPaste(ByRef pVar As Variant, ByVal Format As Long) As Long
        [ DispId (568) ]
        /* voffset &H01A0*/ Function CanEdit() As Long
        [ DispId (569) ]
        /* voffset &H01A8*/ Sub ChangeCase(ByVal type As Long)
        [ DispId (576) ]
        /* voffset &H01B0*/ Sub GetPoint(ByVal type As Long, ByRef px As Long, ByRef py As Long)
        [ DispId (577) ]
        /* voffset &H01B8*/ Sub SetPoint(ByVal x As Long, ByVal y As Long, ByVal type As Long, ByVal Extend As tomExtend)
        [ DispId (578) ]
        /* voffset &H01C0*/ Sub ScrollIntoView(ByVal Value As Long)
        [ DispId (579) ]
        /* voffset &H01C8*/ Function GetEmbeddedObject() As IUnknown
    End Interface

    [ InterfaceId ("8CC497C1-A1DF-11CE-8098-00AA0047BE5D") ]
    '[ DualInterface]
    Interface ITextSelection Extends ITextRange
        [ DispId (257) ]
        /* voffset &H01D0*/ Property Get flags() As tomSelectionFlags
        [ DispId (257) ]
        /* voffset &H01D8*/ Property Let flags(ByVal pFlags As tomSelectionFlags)
        [ DispId (258) ]
        /* voffset &H01E0*/ Property Get type() As Long
        [ DispId (259) ]
        /* voffset &H01E8*/ Function MoveLeft(ByVal Unit As tomUnits, ByVal Count As Long, ByVal Extend As tomExtend) As Long
        [ DispId (260) ]
        /* voffset &H01F0*/ Function MoveRight(ByVal Unit As tomUnits, ByVal Count As Long, ByVal Extend As tomExtend) As Long
        [ DispId (261) ]
        /* voffset &H01F8*/ Function MoveUp(ByVal Unit As tomUnits, ByVal Count As Long, ByVal Extend As tomExtend) As Long
        [ DispId (262) ]
        /* voffset &H0200*/ Function MoveDown(ByVal Unit As tomUnits, ByVal Count As Long, ByVal Extend As tomExtend) As Long
        [ DispId (263) ]
        /* voffset &H0208*/ Function HomeKey(ByVal Unit As tomUnits, ByVal Extend As tomExtend) As Long
        [ DispId (264) ]
        /* voffset &H0210*/ Function EndKey(ByVal Unit As tomUnits, ByVal Extend As tomExtend) As Long
        [ DispId (265) ]
        /* voffset &H0218*/ Sub TypeText(ByVal bstr As String)
    End Interface

    [ InterfaceId ("8CC497C3-A1DF-11CE-8098-00AA0047BE5D") ]
    '[ DualInterface]
    Interface ITextFont Extends IDispatch
        [ DispId (0) ]
        /* voffset &H0038*/ Property Get Duplicate() As ITextFont
        [ DispId (0) ]
        /* voffset &H0040*/ Property Let Duplicate(ByVal ppFont As ITextFont)
        [ DispId (769) ]
        /* voffset &H0048*/ Function CanChange() As Long
        [ DispId (770) ]
        /* voffset &H0050*/ Function IsEqual(ByVal pFont As ITextFont) As Long
        [ DispId (771) ]
        /* voffset &H0058*/ Sub Reset(ByVal Value As Long)
        [ DispId (772) ]
        /* voffset &H0060*/ Property Get Style() As Long
        [ DispId (772) ]
        /* voffset &H0068*/ Property Let Style(ByVal pValue As Long)
        [ DispId (773) ]
        /* voffset &H0070*/ Property Get AllCaps() As Long
        [ DispId (773) ]
        /* voffset &H0078*/ Property Let AllCaps(ByVal pValue As Long)
        [ DispId (774) ]
        /* voffset &H0080*/ Property Get Animation() As tomAnimation
        [ DispId (774) ]
        /* voffset &H0088*/ Property Let Animation(ByVal pValue As tomAnimation)
        [ DispId (775) ]
        /* voffset &H0090*/ Property Get BackColor() As Long
        [ DispId (775) ]
        /* voffset &H0098*/ Property Let BackColor(ByVal pValue As Long)
        [ DispId (776) ]
        /* voffset &H00A0*/ Property Get Bold() As Long
        [ DispId (776) ]
        /* voffset &H00A8*/ Property Let Bold(ByVal pValue As Long)
        [ DispId (777) ]
        /* voffset &H00B0*/ Property Get Emboss() As Long
        [ DispId (777) ]
        /* voffset &H00B8*/ Property Let Emboss(ByVal pValue As Long)
        [ DispId (784) ]
        /* voffset &H00C0*/ Property Get ForeColor() As Long
        [ DispId (784) ]
        /* voffset &H00C8*/ Property Let ForeColor(ByVal pValue As Long)
        [ DispId (785) ]
        /* voffset &H00D0*/ Property Get Hidden() As Long
        [ DispId (785) ]
        /* voffset &H00D8*/ Property Let Hidden(ByVal pValue As Long)
        [ DispId (786) ]
        /* voffset &H00E0*/ Property Get Engrave() As Long
        [ DispId (786) ]
        /* voffset &H00E8*/ Property Let Engrave(ByVal pValue As Long)
        [ DispId (787) ]
        /* voffset &H00F0*/ Property Get Italic() As Long
        [ DispId (787) ]
        /* voffset &H00F8*/ Property Let Italic(ByVal pValue As Long)
        [ DispId (788) ]
        /* voffset &H0100*/ Property Get Kerning() As Single
        [ DispId (788) ]
        /* voffset &H0108*/ Property Let Kerning(ByVal pValue As Single)
        [ DispId (789) ]
        /* voffset &H0110*/ Property Get LanguageID() As Long
        [ DispId (789) ]
        /* voffset &H0118*/ Property Let LanguageID(ByVal pValue As Long)
        [ DispId (790) ]
        /* voffset &H0120*/ Property Get Name() As String
        [ DispId (790) ]
        /* voffset &H0128*/ Property Let Name(ByVal pBSTR As String)
        [ DispId (791) ]
        /* voffset &H0130*/ Property Get Outline() As Long
        [ DispId (791) ]
        /* voffset &H0138*/ Property Let Outline(ByVal pValue As Long)
        [ DispId (792) ]
        /* voffset &H0140*/ Property Get position() As Single
        [ DispId (792) ]
        /* voffset &H0148*/ Property Let position(ByVal pValue As Single)
        [ DispId (793) ]
        /* voffset &H0150*/ Property Get Protected() As Long
        [ DispId (793) ]
        /* voffset &H0158*/ Property Let Protected(ByVal pValue As Long)
        [ DispId (800) ]
        /* voffset &H0160*/ Property Get Shadow() As Long
        [ DispId (800) ]
        /* voffset &H0168*/ Property Let Shadow(ByVal pValue As Long)
        [ DispId (801) ]
        /* voffset &H0170*/ Property Get SIZE() As Single
        [ DispId (801) ]
        /* voffset &H0178*/ Property Let SIZE(ByVal pValue As Single)
        [ DispId (802) ]
        /* voffset &H0180*/ Property Get SmallCaps() As Long
        [ DispId (802) ]
        /* voffset &H0188*/ Property Let SmallCaps(ByVal pValue As Long)
        [ DispId (803) ]
        /* voffset &H0190*/ Property Get Spacing() As Single
        [ DispId (803) ]
        /* voffset &H0198*/ Property Let Spacing(ByVal pValue As Single)
        [ DispId (804) ]
        /* voffset &H01A0*/ Property Get StrikeThrough() As Long
        [ DispId (804) ]
        /* voffset &H01A8*/ Property Let StrikeThrough(ByVal pValue As Long)
        [ DispId (805) ]
        /* voffset &H01B0*/ Property Get Subscript() As Long
        [ DispId (805) ]
        /* voffset &H01B8*/ Property Let Subscript(ByVal pValue As Long)
        [ DispId (806) ]
        /* voffset &H01C0*/ Property Get Superscript() As Long
        [ DispId (806) ]
        /* voffset &H01C8*/ Property Let Superscript(ByVal pValue As Long)
        [ DispId (807) ]
        /* voffset &H01D0*/ Property Get Underline() As Long
        [ DispId (807) ]
        /* voffset &H01D8*/ Property Let Underline(ByVal pValue As Long)
        [ DispId (808) ]
        /* voffset &H01E0*/ Property Get Weight() As Long
        [ DispId (808) ]
        /* voffset &H01E8*/ Property Let Weight(ByVal pValue As Long)
    End Interface

    [ InterfaceId ("8CC497C4-A1DF-11CE-8098-00AA0047BE5D") ]
    '[ DualInterface]
    Interface ITextPara Extends IDispatch
        [ DispId (0) ]
        /* voffset &H0038*/ Property Get Duplicate() As ITextPara
        [ DispId (0) ]
        /* voffset &H0040*/ Property Let Duplicate(ByVal ppPara As ITextPara)
        [ DispId (1025) ]
        /* voffset &H0048*/ Function CanChange() As Long
        [ DispId (1026) ]
        /* voffset &H0050*/ Function IsEqual(ByVal pPara As ITextPara) As Long
        [ DispId (1027) ]
        /* voffset &H0058*/ Sub Reset(ByVal Value As Long)
        [ DispId (1028) ]
        /* voffset &H0060*/ Property Get Style() As Long
        [ DispId (1028) ]
        /* voffset &H0068*/ Property Let Style(ByVal pValue As Long)
        [ DispId (1029) ]
        /* voffset &H0070*/ Property Get Alignment() As tomAlign
        [ DispId (1029) ]
        /* voffset &H0078*/ Property Let Alignment(ByVal pValue As tomAlign)
        [ DispId (1030) ]
        /* voffset &H0080*/ Property Get Hyphenation() As Long
        [ DispId (1030) ]
        /* voffset &H0088*/ Property Let Hyphenation(ByVal pValue As Long)
        [ DispId (1031) ]
        /* voffset &H0090*/ Property Get FirstLineIndent() As Single
        [ DispId (1032) ]
        /* voffset &H0098*/ Property Get KeepTogether() As Long
        [ DispId (1032) ]
        /* voffset &H00A0*/ Property Let KeepTogether(ByVal pValue As Long)
        [ DispId (1033) ]
        /* voffset &H00A8*/ Property Get KeepWithNext() As Long
        [ DispId (1033) ]
        /* voffset &H00B0*/ Property Let KeepWithNext(ByVal pValue As Long)
        [ DispId (1040) ]
        /* voffset &H00B8*/ Property Get LeftIndent() As Single
        [ DispId (1041) ]
        /* voffset &H00C0*/ Property Get LineSpacing() As Single
        [ DispId (1042) ]
        /* voffset &H00C8*/ Property Get LineSpacingRule() As tomLineSpacingRules
        [ DispId (1043) ]
        /* voffset &H00D0*/ Property Get ListAlignment() As Long
        [ DispId (1043) ]
        /* voffset &H00D8*/ Property Let ListAlignment(ByVal pValue As Long)
        [ DispId (1044) ]
        /* voffset &H00E0*/ Property Get ListLevelIndex() As Long
        [ DispId (1044) ]
        /* voffset &H00E8*/ Property Let ListLevelIndex(ByVal pValue As Long)
        [ DispId (1045) ]
        /* voffset &H00F0*/ Property Get ListStart() As Long
        [ DispId (1045) ]
        /* voffset &H00F8*/ Property Let ListStart(ByVal pValue As Long)
        [ DispId (1046) ]
        /* voffset &H0100*/ Property Get ListTab() As Single
        [ DispId (1046) ]
        /* voffset &H0108*/ Property Let ListTab(ByVal pValue As Single)
        [ DispId (1047) ]
        /* voffset &H0110*/ Property Get ListType() As tomList
        [ DispId (1047) ]
        /* voffset &H0118*/ Property Let ListType(ByVal pValue As tomList)
        [ DispId (1048) ]
        /* voffset &H0120*/ Property Get NoLineNumber() As Long
        [ DispId (1048) ]
        /* voffset &H0128*/ Property Let NoLineNumber(ByVal pValue As Long)
        [ DispId (1049) ]
        /* voffset &H0130*/ Property Get PageBreakBefore() As Long
        [ DispId (1049) ]
        /* voffset &H0138*/ Property Let PageBreakBefore(ByVal pValue As Long)
        [ DispId (1056) ]
        /* voffset &H0140*/ Property Get RightIndent() As Single
        [ DispId (1056) ]
        /* voffset &H0148*/ Property Let RightIndent(ByVal pValue As Single)
        [ DispId (1057) ]
        /* voffset &H0150*/ Sub SetIndents(ByVal StartIndent As Single, ByVal LeftIndent As Single, ByVal RightIndent As Single)
        [ DispId (1058) ]
        /* voffset &H0158*/ Sub SetLineSpacing(ByVal LineSpacingRule As tomLineSpacingRules, ByVal LineSpacing As Single)
        [ DispId (1059) ]
        /* voffset &H0160*/ Property Get SpaceAfter() As Single
        [ DispId (1059) ]
        /* voffset &H0168*/ Property Let SpaceAfter(ByVal pValue As Single)
        [ DispId (1060) ]
        /* voffset &H0170*/ Property Get SpaceBefore() As Single
        [ DispId (1060) ]
        /* voffset &H0178*/ Property Let SpaceBefore(ByVal pValue As Single)
        [ DispId (1061) ]
        /* voffset &H0180*/ Property Get WidowControl() As Long
        [ DispId (1061) ]
        /* voffset &H0188*/ Property Let WidowControl(ByVal pValue As Long)
        [ DispId (1062) ]
        /* voffset &H0190*/ Property Get TabCount() As Long
        [ DispId (1063) ]
        /* voffset &H0198*/ Sub AddTab(ByVal tbPos As Single, ByVal tbAlign As Long, ByVal tbLeader As Long)
        [ DispId (1064) ]
        /* voffset &H01A0*/ Sub ClearAllTabs()
        [ DispId (1065) ]
        /* voffset &H01A8*/ Sub DeleteTab(ByVal tbPos As Single)
        [ DispId (1072) ]
        /* voffset &H01B0*/ Sub GetTab(ByVal iTab As Long, ByRef ptbPos As Single, ByRef ptbAlign As Long, ByRef ptbLeader As Long)
    End Interface

    [ InterfaceId ("8CC497C5-A1DF-11CE-8098-00AA0047BE5D") ]
    '[ DualInterface]
    Interface ITextStoryRanges Extends IDispatch
        [ DispId (-4), Restricted ]
        /* voffset &H0038*/ Function _NewEnum() As Variant
        [ DispId (0) ]
        /* voffset &H0040*/ Function Item(ByVal index As Long) As ITextRange
        [ DispId (2) ]
        /* voffset &H0048*/ Property Get Count() As Long
    End Interface
       
    [ InterfaceId ("B722BCC5-4E68-101B-A2BC-00AA00404770") ]
    Interface IOleDocument Extends stdole.IUnknown
        /* voffset &H0018*/ Function CreateView(ByVal pIPSite As IOleInPlaceSite, ByVal pStm As IStream, ByVal dwReserved As Long) As IOleDocumentView
        /* voffset &H0020*/ Function GetDocMiscStatus() As Long
        /* voffset &H0028*/ Sub EnumViews(ByRef ppenum As IEnumOleDocumentViews, ByRef ppView As IOleDocumentView)
    End Interface

    [ InterfaceId ("B722BCC7-4E68-101B-A2BC-00AA00404770") ]
    Interface IOleDocumentSite Extends stdole.IUnknown
        /* voffset &H0018*/ Sub ActivateMe(ByVal pViewToActivate As IOleDocumentView)
    End Interface

    [ InterfaceId ("B722BCC6-4E68-101B-A2BC-00AA00404770") ]
    Interface IOleDocumentView Extends stdole.IUnknown
        /* voffset &H0018*/ Sub SetInPlaceSite(ByVal pIPSite As IOleInPlaceSite)
        /* voffset &H0020*/ Function GetInPlaceSite() As IOleInPlaceSite
        /* voffset &H0028*/ Function GetDocument() As stdole.IUnknown
        /* voffset &H0030*/ Sub SetRect(ByRef prcView As RECT)
        /* voffset &H0038*/ Sub GetRect(ByRef prcView As RECT)
        /* voffset &H0040*/ Sub SetRectComplex(ByRef prcView As RECT, ByRef prcHScroll As RECT, ByRef prcVScroll As RECT, ByRef prcSizeBox As RECT)
        /* voffset &H0048*/ Sub Show(ByVal fShow As Long)
        /* voffset &H0050*/ Sub UIActivate(ByVal fUIActivate As Long)
        /* voffset &H0058*/ Sub Open()
        /* voffset &H0060*/ Sub CloseView(Optional ByVal dwReserved As Long = 0)
        /* voffset &H0068*/ Sub SaveViewState(ByVal pStm As IStream)
        /* voffset &H0070*/ Sub ApplyViewState(ByVal pStm As IStream)
        /* voffset &H0078*/ Function Clone(ByVal pIPSiteNew As IOleInPlaceSite) As IOleDocumentView
    End Interface

    [ InterfaceId ("B722BCC8-4E68-101B-A2BC-00AA00404770") ]
    Interface IEnumOleDocumentViews Extends stdole.IUnknown
        [ PreserveSig ]
        /* voffset &H0018*/ Function Next(ByVal cViews As Long, ByRef rgpView As IOleDocumentView, Optional ByRef pcFetched As Long = 0) As Long
        /* voffset &H0020*/ Sub Skip(ByVal cViews As Long)
        /* voffset &H0028*/ Sub Reset()
        /* voffset &H0030*/ Function Clone() As IEnumOleDocumentViews
    End Interface

    [ InterfaceId ("B722BCCA-4E68-101B-A2BC-00AA00404770") ]
    Interface IContinueCallback Extends stdole.IUnknown
        /* voffset &H0018*/ Sub FContinue()
        /* voffset &H0020*/ Sub FContinuePrinting(ByVal nCntPrinted As Long, ByVal nCurPage As Long, ByVal pwszPrintStatus As LongPtr)
    End Interface

    [ InterfaceId ("B722BCC9-4E68-101B-A2BC-00AA00404770") ]
    Interface IPrint Extends stdole.IUnknown
        /* voffset &H0018*/ Sub SetInitialPageNum(ByVal nFirstPage As Long)
        /* voffset &H0020*/ Sub GetPageInfo(ByRef pnFirstPage As Long, ByRef pcPages As Long)
        /* voffset &H0028*/ Sub Print(ByVal grfFlags As PRINTFLAG, ByRef pptd As DVTARGETDEVICE, ByRef ppPageSet As PAGESET, ByRef pstgmOptions As STGMEDIUM, ByVal pCallback As IContinueCallback, ByVal nFirstPage As Long, ByRef pcPagesPrinted As Long, ByRef pnLastPage As Long)
    End Interface
    
    
    
Module slOLE

Public Enum DOCMISC
	DOCMISC_CANCREATEMULTIPLEVIEWS = 1
	DOCMISC_SUPPORTCOMPLEXRECTANGLES = 2
	DOCMISC_CANTOPENEDIT = 4 ' fails the IOleDocumentView::Open  method
	DOCMISC_NOFILESUPPORT = 8 '  does not support read/writing to a file
End Enum

Public Enum PRINTFLAG
	PRINTFLAG_MAYBOTHERUSER = 1
	PRINTFLAG_PROMPTUSER = 2
	PRINTFLAG_USERMAYCHANGEPRINTER = 4
	PRINTFLAG_RECOMPOSETODEVICE = 8
	PRINTFLAG_DONTACTUALLYPRINT = 16
	PRINTFLAG_FORCEPROPERTIES = 32
	PRINTFLAG_PRINTTOFILE = 64
End Enum

Public Type PAGERANGE
	nFromPage As LONG
	nToPage As LONG
End Type

Public Type PAGESET
	cbStruct As LONG
	fOddPages As Long
	fEvenPages As Long
	cPageRange As LONG
	rgPages(0 To 0) As PAGERANGE
End Type



Public Enum tomOpenFlags
	tomRTF = 1
	tomText = 2
	tomHTML = 3
	tomWordDocument = 4
	tomCreateNew = 16
	tomCreateAlways = 32
	tomOpenExisting = 48
	tomOpenAlways = 64
	tomTruncateExisting = 80
	tomReadOnly = 256
	tomShareDenyRead = 512
	tomShareDenyWrite = 1024
	tomPasteFile = 4096
End Enum

Public Enum tomLineSpacingRules
	tomLineSpaceSingle = 0
	tomLineSpace1pt5 = 1
	tomLineSpaceDouble = 2
	tomLineSpaceAtLeast = 3
	tomLineSpaceExactly = 4
	tomLineSpaceMultiple = 5
End Enum

Public Enum tomAlign
	tomAlignLeft = 0
	tomAlignCenter = 1
	tomAlignRight = 2
	tomAlignJustify = 3
	tomAlignDecimal = 3
	tomAlignBar = 4
End Enum

Public Enum tomSelection
	tomNoSelection = 0
	tomSelectionIP = 1
	tomSelectionNormal = 2
	tomSelectionFrame = 3
	tomSelectionColumn = 4
	tomSelectionRow = 5
	tomSelectionBlock = 6
	tomSelectionInlineShape = 7
	tomSelectionShape = 8
End Enum

Public Enum tomBool
	tomFalse = 0
	tomTrue = &Hffffffff
	tomToggle = &Hff676982
End Enum

Public Enum tomColor
	tomAutoColor = &Hff676983
End Enum

Public Enum tomResetFlags
	tomDefault = &Hff676984
	tomUndefined = &Hff676981
End Enum

Public Enum tomMove
	tomBackward = &Hc0000001
	tomForward = &H3fffffff
End Enum

Public Enum tomExtend
	tomMove = 0
	tomExtend = 1
End Enum

Public Enum tomSelectionFlags
	tomSelStartActive = 1
	tomSelAtEOL = 2
	tomSelOvertype = 4
	tomSelActive = 8
	tomSelReplace = 16
End Enum

Public Enum tomStartEnd
	tomEnd = 0
	tomStart = 32
End Enum

Public Enum tomCollapse
	tomCollapseEnd = 0
	tomCollapseStart = 1
End Enum

Public Enum tomUnderline
	tomNone = 0
	tomSingle = 1
	tomWords = 2
	tomDouble = 3
	tomDotted = 4
End Enum

Public Enum tomTabSpace
	tomSpaces = 0
	tomDots = 1
	tomDashes = 2
	tomLines = 3
End Enum

Public Enum tomTabs
	tomTabBack = &Hfffffffd
	tomTabNext = &Hfffffffe
	tomTabHere = &Hffffffff
End Enum

Public Enum tomList
	tomListNone = 0
	tomListBullet = 1
	tomListNumberAsArabic = 2
	tomListNumberAsLCLetter = 3
	tomListNumberAsUCLetter = 4
	tomListNumberAsLCRoman = 5
	tomListNumberAsUCRoman = 6
	tomListNumberAsSequence = 7
	tomListParentheses = &H00010000
	tomListPeriod = &H00020000
	tomListPlain = &H00030000
End Enum

Public Enum tomUnits
	tomCharacter = 1
	tomWord = 2
	tomSentence = 3
	tomParagraph = 4
	tomLine = 5
	tomStory = 6
	tomScreen = 7
	tomSection = 8
	tomColumn = 9
	tomRow = 10
	tomWindow = 11
	tomCell = 12
	tomCharFormat = 13
	tomParaFormat = 14
	tomTable = 15
	tomObject = 16
End Enum

Public Enum tomFindFlags
	tomMatchWord = 2
	tomMatchCase = 4
	tomMatchPattern = 8
End Enum

Public Enum tomStories
	tomUnknownStory = 0
	tomMainTextStory = 1
	tomFootnotesStory = 2
	tomEndnotesStory = 3
	tomCommentsStory = 4
	tomTextFrameStory = 5
	tomEvenPagesHeaderStory = 6
	tomPrimaryHeaderStory = 7
	tomEvenPagesFooterStory = 8
	tomPrimaryFooterStory = 9
	tomFirstPageHeaderStory = 10
	tomFirstPageFooterStory = 11
End Enum

Public Enum tomAnimation
	tomNoAnimation = 0
	tomLasVegasLights = 1
	tomBlinkingBackground = 2
	tomSparkleText = 3
	tomMarchingBlackAnts = 4
	tomMarchingRedAnts = 5
	tomShimmer = 6
	tomWipeDown = 7
	tomWipeRight = 8
	tomAnimationMax = 8
End Enum

Public Enum tomCase
	tomLowerCase = 0
	tomUpperCase = 1
	tomTitleCase = 2
	tomSentenceCase = 4
	tomToggleCase = 5
End Enum

Public Enum REO_GETOBJ
	REO_GETOBJ_NO_INTERFACES = 0
	REO_GETOBJ_POLEOBJ = 1
	REO_GETOBJ_PSTG = 2
	REO_GETOBJ_POLESITE = 4
	REO_GETOBJ_ALL_INTERFACES = 7
End Enum

Public Enum REO_IOB
	REO_IOB_SELECTION = &Hffffffff
	REO_CP_SELECTION = &Hffffffff
	REO_IOB_USE_CP = &Hfffffffe
End Enum

Public Enum REO_FLAGS
	REO_NULL = (&H00000000)
	REO_READWRITEMASK = (&H000007FF)
	REO_CANROTATE = (&H00000080)
	REO_OWNERDRAWSELECT = (&H00000040)
	REO_DONTNEEDPALETTE = (&H00000020)
	REO_BLANK = (&H00000010)
	REO_DYNAMICSIZE = (&H00000008)
	REO_INVERTEDSELECT = (&H00000004)
	REO_BELOWBASELINE = (&H00000002)
	REO_RESIZABLE = (&H00000001)
	REO_USEASBACKGROUND = (&H00000400)
	REO_WRAPTEXTAROUND = (&H00000200)
	REO_ALIGNTORIGHT = (&H00000100)
	REO_LINK = (&H80000000)
	REO_STATIC = (&H40000000)
	REO_SELECTED = (&H08000000)
	REO_OPEN = (&H04000000)
	REO_INPLACEACTIVE = (&H02000000)
	REO_HILITED = (&H01000000)
	REO_LINKAVAILABLE = (&H00800000)
	REO_GETMETAFILE = (&H00400000)
End Enum

Public Enum RECO_FLAGS
	RECO_PASTE = 0
	RECO_DROP = 1
	RECO_COPY = 2
	RECO_CUT = 3
	RECO_DRAG = 4
End Enum

Public Type REOBJECT
	cbStruct As long
	cp As long
	clsid As UUID
	poleobj As IOleObject
	pstg As IStorage
	polesite As IOleClientSite
	sizel As SIZE
	DVASPECT As DVASPECT
	dwFlags As REO_FLAGS
	dwUser As long
End Type

Public Type CHARRANGE
	start As long
	End As long
End Type


Public Enum OLECMDF
	OLECMDF_SUPPORTED = &H00000001
	OLECMDF_ENABLED = &H00000002
	OLECMDF_LATCHED = &H00000004
	OLECMDF_NINCHED = &H00000008
	OLECMDF_INVISIBLE = &H00000010
	OLECMDF_DEFHIDEONCTXTMENU = &H00000020
End Enum

Public Type OLECMD
	cmdID As LONG
	cmdf As OLECMDF
End Type

Public Enum OLECMDTEXTF
	OLECMDTEXTF_NONE = 0
	OLECMDTEXTF_NAME = 1
	OLECMDTEXTF_STATUS = 2
End Enum

Public Type OLECMDTEXT
	cmdtextf As OLECMDTEXTF
	cwActual As LONG
	cwBuf As LONG ' size in wide chars of the buffer for text
	rgwz(0 To 511) As BYTE ' Array into which callee writes the text
End Type

Public Enum OLECMDEXECOPT
	OLECMDEXECOPT_DODEFAULT = 0
	OLECMDEXECOPT_PROMPTUSER = 1
	OLECMDEXECOPT_DONTPROMPTUSER = 2
	OLECMDEXECOPT_SHOWHELP = 3
End Enum

Public Enum OLECMDID
	OLECMDID_OPEN = 1
	OLECMDID_NEW = 2
	OLECMDID_SAVE = 3
	OLECMDID_SAVEAS = 4
	OLECMDID_SAVECOPYAS = 5
	OLECMDID_PRINT = 6
	OLECMDID_PRINTPREVIEW = 7
	OLECMDID_PAGESETUP = 8
	OLECMDID_SPELL = 9
	OLECMDID_PROPERTIES = 10
	OLECMDID_CUT = 11
	OLECMDID_COPY = 12
	OLECMDID_PASTE = 13
	OLECMDID_PASTESPECIAL = 14
	OLECMDID_UNDO = 15
	OLECMDID_REDO = 16
	OLECMDID_SELECTALL = 17
	OLECMDID_CLEARSELECTION = 18
	OLECMDID_ZOOM = 19
	OLECMDID_GETZOOMRANGE = 20
	OLECMDID_UPDATECOMMANDS = 21
	OLECMDID_REFRESH = 22
	OLECMDID_STOP = 23
	OLECMDID_HIDETOOLBARS = 24
	OLECMDID_SETPROGRESSMAX = 25
	OLECMDID_SETPROGRESSPOS = 26
	OLECMDID_SETPROGRESSTEXT = 27
	OLECMDID_SETTITLE = 28
	OLECMDID_SETDOWNLOADSTATE = 29
	OLECMDID_STOPDOWNLOAD = 30
	OLECMDID_ONTOOLBARACTIVATED = 31
	OLECMDID_FIND = 32
	OLECMDID_DELETE = 33
	OLECMDID_HTTPEQUIV = 34
	OLECMDID_HTTPEQUIV_DONE = 35
	OLECMDID_ENABLE_INTERACTION = 36
	OLECMDID_ONUNLOAD = 37
	OLECMDID_PROPERTYBAG2 = 38
	OLECMDID_PREREFRESH = 39
	OLECMDID_SHOWSCRIPTERROR = 40
	OLECMDID_SHOWMESSAGE = 41
	OLECMDID_SHOWFIND = 42
	OLECMDID_SHOWPAGESETUP = 43
	OLECMDID_SHOWPRINT = 44
	OLECMDID_CLOSE = 45
	OLECMDID_ALLOWUILESSSAVEAS = 46
	OLECMDID_DONTDOWNLOADCSS = 47
	OLECMDID_UPDATEPAGESTATUS = 48
	OLECMDID_PRINT2 = 49
	OLECMDID_PRINTPREVIEW2 = 50
	OLECMDID_SETPRINTTEMPLATE = 51
	OLECMDID_GETPRINTTEMPLATE = 52
	OLECMDID_PAGEACTIONBLOCKED = 55
	OLECMDID_PAGEACTIONUIQUERY = 56
	OLECMDID_FOCUSVIEWCONTROLS = 57
	OLECMDID_FOCUSVIEWCONTROLSQUERY = 58
	OLECMDID_SHOWPAGEACTIONMENU = 59
	OLECMDID_ADDTRAVELENTRY = 60
	OLECMDID_UPDATETRAVELENTRY = 61
	OLECMDID_UPDATEBACKFORWARDSTATE = 62
	OLECMDID_OPTICAL_ZOOM = 63
	OLECMDID_OPTICAL_GETZOOMRANGE = 64
	OLECMDID_WINDOWSTATECHANGED = 65
	OLECMDID_ACTIVEXINSTALLSCOPE = 66
	OLECMDID_UPDATETRAVELENTRY_DATARECOVERY = 67
End Enum

Public Enum OLECMDERR
	OLECMDERR_E_FIRST = &H80040100
	OLECMDERR_E_NOTSUPPORTED = &H80040100
	OLECMDERR_E_DISABLED = &H80040101
	OLECMDERR_E_NOHELP = &H80040102
	OLECMDERR_E_CANCELED = &H80040103
	OLECMDERR_E_UNKNOWNGROUP = &H80040104
End Enum

Public Enum OLEUPDATE
	OLEUPDATE_ALWAYS = 1
	OLEUPDATE_ONCALL = 3
End Enum

Public Enum OLELINKBIND
	OLELINKBIND_EVENIFCLASSDIFF = 1 ' for IOleLink::BindToSource
End Enum




Public Type POINTF
	x As Single
	y As Single
End Type

Public Enum XFORMCOORDS
	XFORMCOORDS_POSITION = &H1
	XFORMCOORDS_SIZE = &H2
	XFORMCOORDS_HIMETRICTOCONTAINER = &H4
	XFORMCOORDS_CONTAINERTOHIMETRIC = &H8
	XFORMCOORDS_EVENTCOMPAT = &H10
End Enum

Public Enum KEYMODIFIERS
	KEYMOD_SHIFT = &H00000001
	KEYMOD_CONTROL = &H00000002
	KEYMOD_ALT = &H00000004
End Enum

Public Type OLEVERB
	lVerb As Long
	lpszVerbName As LongPtr
	fuFlags As Long
	grfAttribs As Long
End Type

Public Type PALETTEENTRY
	peRed As BYTE
	peGreen As BYTE
	peBlue As BYTE
	peFlags As BYTE
End Type
Public Type LOGPALETTE
	palVersion As Integer
	palNumEntries As integer
	palPalEntry(0) As PALETTEENTRY
End Type

Public Type OLEINPLACEFRAMEINFO
	cb As Long
	fMDIApp As Long
	hwndFrame As LongPtr
	haccel As LongPtr
	cAccelEntries As Long
End Type
Public Type OLERECT
	Left As Long
	Top As Long
	Right As Long
	Bottom As Long
End Type

Public Type OLECLSID
	Data1 As Long
	Data2 As Integer
	Data3 As Integer
	Data4(0 To 7) As Byte
End Type

Public Type OLEPOINT
    x As Long
    y As Long
End Type

Public Type CAUUID
    cElems As Long
    pElems As LongPtr
End Type

Public Type CALPOLESTR
    cElems As Long
    pElems As LongPtr
End Type
'Public Alias OLECALPOLESTR As CALPOLESTR

Public Type CADWORD
    cElems As Long
    pElems As LongPtr
End Type
'Public Alias OLECADWORD As CADWORD

Public Type CONTROLINFO
    cb As Long
    hAccel As LongPtr
    cAccel As Integer
    dwFlags As Long
End Type
'Public Alias OLECONTROLINFO As CONTROLINFO
'Public Alias OLEACCELMSG As MSG
End Module