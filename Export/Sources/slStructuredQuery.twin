'slShellLib - structuredquery.idl and related
[ InterfaceId ("a0ffbc28-5482-4366-be27-3e81e78e06c2") ]
Interface ISearchFolderItemFactory Extends stdole.IUnknown
    Sub SetDisplayName(ByVal pszDisplayName As LongPtr)
    Sub SetFolderIdType(ftid As UUID)
    Sub SetFolderLogicalViewMode(ByVal flvm As FOLDERLOGICALVIEWMODE)
    Sub SetIconSize(ByVal iIconSize As Long)
    Sub SetVisibleColumns(ByVal cVisibleColumn As Long, rgKey As PROPERTYKEY)
    Sub SetSortColumns(ByVal cSortColumns As Long, rgSortColumns As SORTCOLUMN)
    Sub SetGroupColumn(KeyGroup As PROPERTYKEY)
    Sub SetStacks(ByVal cStackKeys As Long, rgStackKeys As PROPERTYKEY)
    Sub SetScope(ByVal psiaScope As IShellItemArray)
    Sub SetCondition(ByVal pCondition As ICondition)
    Sub GetShellItem(riid As UUID, ppv As Any)
    Sub GetIDList(ppidl As LongPtr)
End Interface

[ InterfaceId ("4FDEF69C-DBC9-454e-9910-B34F3C64B510") ]
Interface IRichChunk Extends stdole.IUnknown
    Sub GetData(pLength As Long, ppsz As LongPtr, pValue As Variant)
End Interface

[ InterfaceId ("0FC988D4-C935-4b97-A973-46282EA175C8") ]
Interface ICondition Extends IPersistStream
    Function GetConditionType() As CONDITION_TYPE
    Sub GetSubConditions(riid As UUID, ppv As any)
    Sub GetComparisonInfo(ppszPropertyName As LongPtr, pcop As CONDITION_OPERATION, ppropvar As Variant)
    Function GetValueType() As LongPtr
    Function GetValueNormalization() As LongPtr
    Sub GetInputTerms(ppPropertyTerm As IRichChunk, ppOperationTerm As IRichChunk, ppValueTerm As IRichChunk)
    Function Clone() As ICondition
End Interface

[ InterfaceId ("0DB8851D-2E5B-47eb-9208-D28C325A01D7") ]
Interface ICondition2 Extends ICondition
    Sub GetLocale(ppszLocaleName As LongPtr)
    Sub GetLeafConditionInfo(ppropkey As PROPERTYKEY, pcop As CONDITION_OPERATION, ppropvar As Variant)
End Interface

[ InterfaceId ("A5EFE073-B16F-474f-9F3E-9F8B497A3E08") ]
Interface IConditionFactory Extends stdole.IUnknown
    Sub MakeNot(ByVal pcSub As ICondition, ByVal fSimplify As Long, ppcResult As ICondition)
    Function MakeAndOr(ByVal ct As CONDITION_TYPE, ByVal peuSubs As IEnumUnknown, ByVal fSimplify As Long) As ICondition
    Sub MakeLeaf(ByVal pszPropertyName As LongPtr, ByVal cop As CONDITION_OPERATION, ByVal pszValueType As LongPtr, ppropvar As Variant, ByVal pPropertyNameTerm As IRichChunk, ByVal pOperationTerm As IRichChunk, ByVal pValueTerm As IRichChunk, ByVal fExpand As Long, ppcResult As ICondition)
    Sub Resolve(ByVal pc As ICondition, ByVal sqro As STRUCTURED_QUERY_RESOLVE_OPTION, pstReferenceTime As SYSTEMTIME, ppcResolved As ICondition)
End Interface

[ InterfaceId ("71D222E1-432F-429e-8C13-B6DAFDE5077A") ]
Interface IConditionFactory2 Extends IConditionFactory
    Sub CreateTrueFalse(ByVal fVal As Long, ByVal cco As CONDITION_CREATION_OPTIONS, riid As UUID, ppv As any)
    Sub CreateNegation(ByVal pcSub As ICondition, ByVal cco As CONDITION_CREATION_OPTIONS, riid As UUID, ppv As any)
    Sub CreateCompoundFromObjectArray(ByVal ct As CONDITION_TYPE, ByVal poaSubs As IObjectArray, ByVal cco As CONDITION_CREATION_OPTIONS, riid As UUID, ppv As any)
    Sub CreateCompoundFromArray(ByVal ct As CONDITION_TYPE, ppcondSubs As ICondition, ByVal cSubs As Long, ByVal cco As CONDITION_CREATION_OPTIONS, riid As UUID, ppv As any)
    Sub CreateStringLeaf(propkey As PROPERTYKEY, ByVal cop As CONDITION_OPERATION, ByVal pszValue As LongPtr, ByVal pszLocaleName As LongPtr, ByVal cco As CONDITION_CREATION_OPTIONS, riid As UUID, ppv As any)
    Sub CreateIntegerLeaf(propkey As PROPERTYKEY, ByVal cop As CONDITION_OPERATION, ByVal lValue As Long, ByVal cco As CONDITION_CREATION_OPTIONS, riid As UUID, ppv As any)
    Sub CreateBooleanLeaf(propkey As PROPERTYKEY, ByVal cop As CONDITION_OPERATION, ByVal fValue As Long, ByVal cco As CONDITION_CREATION_OPTIONS, riid As UUID, ppv As any)
    Sub CreateLeaf(propkey As PROPERTYKEY, ByVal cop As CONDITION_OPERATION, propvar As Variant, ByVal pszSemanticType As LongPtr, ByVal pszLocaleName As LongPtr, ByVal pPropertyNameTree As IRichChunk, ByVal pOperationTerm As IRichChunk, ByVal pValueTerm As IRichChunk, ByVal cco As CONDITION_CREATION_OPTIONS, riid As UUID, ppv As any)
    Sub ResolveCondition(ByVal pc As ICondition, ByVal sqro As STRUCTURED_QUERY_RESOLVE_OPTION, pstReferenceTime As SYSTEMTIME, riid As UUID, ppv As any)
End Interface

[ InterfaceId ("2EBDEE67-3505-43f8-9946-EA44ABC8E5B0") ]
Interface IQueryParser Extends stdole.IUnknown
    Function Parse(ByVal pszInputString As LongPtr, ByVal pCustomProperties As IEnumUnknown) As IQuerySolution
    Sub SetOption(ByVal option As STRUCTURED_QUERY_SINGLE_OPTION, pOptionValue As Variant)
    Function GetOption(ByVal option As STRUCTURED_QUERY_SINGLE_OPTION) As Variant
    Sub SetMultiOption(ByVal option As STRUCTURED_QUERY_MULTIOPTION, ByVal pszOptionKey As LongPtr, pOptionValue As Variant)
    Function GetSchemaProvider() As ISchemaProvider
    Sub RestateToString(ByVal pCondition As ICondition, ByVal fUseEnglish As Long, ppszQueryString As LongPtr)
    Function ParsePropertyValue(ByVal pszPropertyName As LongPtr, ByVal pszInputString As LongPtr) As IQuerySolution
    Sub RestatePropertyValueToString(ByVal pCondition As ICondition, ByVal fUseEnglish As Long, ppszPropertyName As LongPtr, ppszQueryString As LongPtr)
End Interface

[ InterfaceId ("D6EBC66B-8921-4193-AFDD-A1789FB7FF57") ]
Interface IQuerySolution Extends IConditionFactory
    Sub GetQuery(ppQueryNode As ICondition, ppMainType As IEntity)
    Sub GetErrors(riid As UUID, ppParseErrors As any)
    Sub GetLexicalData(ppszInputString As LongPtr, ppTokens As ITokenCollection, plcid As Long, ppWordBreaker As IUnknownUnrestricted)
    
End Interface

[ InterfaceId ("92D2CC58-4386-45a3-B98C-7E0CE64A4117") ]
Interface IConditionGenerator Extends stdole.IUnknown
    Sub Initialize(ByVal pSchemaProvider As ISchemaProvider)
    Sub RecognizeNamedEntities(ByVal pszInputString As LongPtr, ByVal lcidUserLocale As Long, ByVal pTokenCollection As ITokenCollection, pNamedEntities As INamedEntityCollector)
    Function GenerateForLeaf(ByVal pConditionFactory As IConditionFactory, ByVal pszPropertyName As LongPtr, ByVal cop As CONDITION_OPERATION, ByVal pszValueType As LongPtr, ByVal pszValue As LongPtr, ByVal pszValue2 As LongPtr, ByVal pPropertyNameTree As IRichChunk, ByVal pOperationTerm As IRichChunk, ByVal pValueTerm As IRichChunk, ByVal automaticWildcard As Long, pNoStringQuery As Long) As ICondition
    Function DefaultPhrase(ByVal pszValueType As LongPtr, ppropvar As Variant, ByVal fUseEnglish As Long) As LongPtr
End Interface

[ InterfaceId ("6BF0A714-3C18-430b-8B5D-83B1C234D3DB") ]
Interface IInterval Extends stdole.IUnknown
    Sub GetLimits(pilkLower As INTERVAL_LIMIT_KIND, ppropvarLower As Variant, pilkUpper As INTERVAL_LIMIT_KIND, ppropvarUpper As Variant)
End Interface

[ InterfaceId ("780102B0-C43B-4876-BC7B-5E9BA5C88794") ]
Interface IMetaData Extends stdole.IUnknown
    Sub GetData(pkey As PROPERTYKEY, ppszValue As LongPtr)
End Interface

[ InterfaceId ("24264891-E80B-4fd3-B7CE-4FF2FAE8931F") ]
Interface IEntity Extends stdole.IUnknown
    Function Name() As LongPtr
    Function Base() As IEntity
    Sub Relationships(riid As UUID, pRelationships As any)
    Function GetRelationship(ByVal pszRelationName As LongPtr) As IRelationship
    Sub MetaData(riid As UUID, pMetaData As any)
    Sub NamedEntities(riid As UUID, pNamedEntities As any)
    Function GetNamedEntity(ByVal pszValue As LongPtr) As INamedEntity
    Function DefaultPhrase() As LongPtr
End Interface

[ InterfaceId ("2769280B-5108-498c-9C7F-A51239B63147") ]
Interface IRelationship Extends stdole.IUnknown
    Function Name() As LongPtr
    Function IsReal() As Long
    Function Destination() As IEntity
    Sub MetaData(riid As UUID, pMetaData As any)
    Function DefaultPhrase() As LongPtr
End Interface

[ InterfaceId ("ABDBD0B1-7D54-49fb-AB5C-BFF4130004CD") ]
Interface INamedEntity Extends stdole.IUnknown
    Function GetValue() As LongPtr
    Function DefaultPhrase() As LongPtr
End Interface

[ InterfaceId ("8CF89BCB-394C-49b2-AE28-A59DD4ED7F68") ]
Interface ISchemaProvider Extends stdole.IUnknown
    Sub Entities(riid As UUID, pEntities As any)
    Function RootEntity() As IEntity
    Function GetEntity(ByVal pszEntityName As LongPtr) As IEntity
    Sub MetaData(riid As UUID, pMetaData As any)
    Sub Localize(ByVal lcid As Long, ByVal pSchemaLocalizerSupport As ISchemaLocalizerSupport)
    Sub SaveBinary(ByVal pszSchemaBinaryPath As LongPtr)
    Sub LookupAuthoredNamedEntity(ByVal pEntity As IEntity, ByVal pszInputString As LongPtr, ByVal pTokenCollection As ITokenCollection, ByVal cTokensBegin As Long, pcTokensLength As Long, ppszValue As LongPtr)
End Interface

[ InterfaceId ("22D8B4F2-F577-4adb-A335-C2AE88416FAB") ]
Interface ITokenCollection Extends stdole.IUnknown
    Sub NumberOfTokens(pCount As Long)
    Sub GetToken(ByVal i As Long, pBegin As Long, pLength As Long, ppsz As LongPtr)
End Interface

[ InterfaceId ("AF2440F6-8AFC-47d0-9A7F-396A0ACFB43D") ]
Interface INamedEntityCollector Extends stdole.IUnknown
    Sub Add(ByVal beginSpan As Long, ByVal EndSpan As Long, ByVal beginActual As Long, ByVal EndActual As Long, ByVal pType As IEntity, ByVal pszValue As LongPtr, ByVal certainty As NAMED_ENTITY_CERTAINTY)
End Interface

[ InterfaceId ("CA3FDCA2-BFBE-4eed-90D7-0CAEF0A1BDA1") ]
Interface ISchemaLocalizerSupport Extends stdole.IUnknown
    Function Localize(ByVal pszGlobalString As LongPtr) As LongPtr 'ppszLocalString
End Interface

[ InterfaceId ("A879E3C4-AF77-44fb-8F37-EBD1487CF920") ]
Interface IQueryParserManager Extends stdole.IUnknown
    Sub CreateLoadedParser(ByVal pszCatalog As LongPtr, ByVal langidForKeywords As Integer, riid As UUID, ppQueryParser As any)
    Sub InitializeOptions(ByVal fUnderstandNQS As Long, ByVal fAutoWildcard As Long, ByVal pQueryParser As IQueryParser)
    Sub SetOption(ByVal option As QUERY_PARSER_MANAGER_OPTION, pOptionValue As Variant)
End Interface



Module slStructuredQuery

Public Enum STRUCTURED_QUERY_RESOLVE_OPTION
	SQRO_DEFAULT = &H00000000 ' None of the below.
	SQRO_DONT_RESOLVE_DATETIME = &H00000001
	SQRO_ALWAYS_ONE_INTERVAL = &H00000002
	SQRO_DONT_SIMPLIFY_CONDITION_TREES = &H00000004
	SQRO_DONT_MAP_RELATIONS = &H00000008
	SQRO_DONT_RESOLVE_RANGES = &H00000010
	SQRO_DONT_REMOVE_UNRESTRICTED_KEYWORDS = &H00000020 ' An unrestricted keyword is a keyword that is not associated with a value to make a real condition.
	SQRO_DONT_SPLIT_WORDS = &H00000040 ' If this flag is set, groups of words that are not separated by whitespace
	'  will be kept together and it is up to the consumer of the parse result to do any
	'  additional separation. (Note that it is possible through this interface to obtain
	'  how the input string was broken into words as well as the word breaker used.)
	'  If this flag is not set, then each word will end up in a separate condition tree node.
	SQRO_IGNORE_PHRASE_ORDER = &H00000080 ' If this flag is set, a full-text query for a phrase will disregard the order of the words in the phrase.
                                        ' In this case, the query from:"foo bar" will behave like from:(foo bar).
	SQRO_ADD_VALUE_TYPE_FOR_PLAIN_VALUES = &H00000100 ' Normally only unresolved named entities have a semantic type but this flag causes a semantic type
                                                        ' to be added for leaves with a numeric, Boolean, date/time or string value.
	SQRO_ADD_ROBUST_ITEM_NAME = &H00000200 ' Work around known issues in word breakers, adding conditions on PKEY_ItemNameDisplay as needed.
End Enum

Public Enum STRUCTURED_QUERY_SYNTAX
	SQS_NO_SYNTAX
	SQS_ADVANCED_QUERY_SYNTAX
	SQS_NATURAL_QUERY_SYNTAX
End Enum

Public Enum CONDITION_TYPE
	CT_AND_CONDITION   '// AND of subconditions
	CT_OR_CONDITION    '// OR of subconditions
	CT_NOT_CONDITION   '// NOT of a single subcondition
	CT_LEAF_CONDITION  '// No subcondition: property, operation, value.
End Enum

Public Enum CONDITION_CREATION_OPTIONS
	CONDITION_CREATION_DEFAULT = &H00000000
	CONDITION_CREATION_NONE = &H00000000
	CONDITION_CREATION_SIMPLIFY = &H00000001
	CONDITION_CREATION_VECTOR_AND = &H00000002
	CONDITION_CREATION_VECTOR_OR = &H00000004
	CONDITION_CREATION_VECTOR_LEAF = &H00000008
	CONDITION_CREATION_USE_CONTENT_LOCALE = &H00000010
End Enum

Public Enum STRUCTURED_QUERY_SINGLE_OPTION
	SQSO_SCHEMA ' The value should be VT_LPWSTR and the path to a file containing a schema binary.

	SQSO_LOCALE_WORD_BREAKING ' The value must be VT_EMPTY (the default) or a VT_UI4 that is an LCID. It is used
							   ' as the locale of contents (not keywords) in the query to be searched for, when no
							   ' other information is available. The default value is the current keyboard locale.
							   ' Retrieving the value always returns a VT_UI4.

	SQSO_WORD_BREAKER ' This option is used to override the default word breaker used when identifying keywords
							 ' in queries. The default word breaker is chosen according to the language of the keywords
							 ' (cf. SQSO_LANGUAGE_KEYWORDS below). When setting this option, the value should be VT_EMPTY
							 ' for using the default word breaker, or a VT_UNKNOWN with an object supporting
							 ' the IWordBreaker interface. Retrieving the option always returns a VT_UNKNOWN with an object
							 ' supporting the IWordBreaker interface.

	SQSO_NATURAL_SYNTAX ' The value should be VT_EMPTY or VT_BOOL with VARIANT_TRUE to allow natural query
							 ' syntax (the default) or VT_BOOL with VARIANT_FALSE to allow only advanced query syntax.
							 ' Retrieving the option always returns a VT_BOOL.
							 ' This option is now deprecated, use SQSO_SYNTAX.

	SQSO_AUTOMATIC_WILDCARD ' The value should be VT_BOOL with VARIANT_TRUE to generate query expressions
							 ' as if each word in the query had a star appended to it (unless followed by punctuation
							 ' other than a parenthesis), or VT_EMPTY or VT_BOOL with VARIANT_FALSE to
							 ' use the words as they are (the default). A word-wheeling application
							 ' will generally want to set this option to true.
							 ' Retrieving the option always returns a VT_BOOL.

	SQSO_TRACE_LEVEL ' Reserved. The value should be VT_EMPTY (the default) or VT_I4.
							 ' Retrieving the option always returns a VT_I4.

	SQSO_LANGUAGE_KEYWORDS ' The value must be a VT_UI4 that is a LANGID. It defaults to the default user UI language.

	SQSO_SYNTAX ' The value must be a VT_UI4 that is a STRUCTURED_QUERY_SYNTAX value.
							 ' It defaults to SQS_NATURAL_QUERY_SYNTAX.

	SQSO_TIME_ZONE ' The value must be a VT_BLOB that is a copy of a TIME_ZONE_INFORMATION structure.
							 ' It defaults to the current time zone.

	SQSO_IMPLICIT_CONNECTOR ' This setting decides what connector should be assumed between conditions when none is specified.
							 ' The value must be a VT_UI4 that is a CONDITION_TYPE. Only CT_AND_CONDITION and CT_OR_CONDITION
							 ' are valid. It defaults to CT_AND_CONDITION.

	SQSO_CONNECTOR_CASE ' This setting decides whether there are special requirements on the case of connector keywords (such
							 ' as AND or OR). The value must be a VT_UI4 that is a CASE_REQUIREMENT value.
							 ' It defaults to CASE_REQUIREMENT_UPPER_IF_AQS.
End Enum

Public Enum STRUCTURED_QUERY_MULTIOPTION
	SQMO_VIRTUAL_PROPERTY   ' The key should be property name P. The value should be a
							 ' VT_UNKNOWN with an IEnumVARIANT which has two values: a VT_BSTR that is another
							 ' property name Q and a VT_I4 that is a CONDITION_OPERATION cop. A predicate with
							 ' property name P, some operation and a value V will then be replaced by a predicate
							 ' with property name Q, operation cop and value V before further processing happens.

	SQMO_DEFAULT_PROPERTY   ' The key should be a value type name V. The value should be a
							 ' VT_LPWSTR with a property name P. A predicate with no property name and a value of type
							 ' V (or any subtype of V) will then use property P.

	SQMO_GENERATOR_FOR_TYPE ' The key should be a value type name V. The value should be a
							 ' VT_UNKNOWN with a IConditionGenerator G. The GenerateForLeaf method of
							 ' G will then be applied to any predicate with value type V and if it returns a query
							 ' expression, that will be used. If it returns NULL, normal processing will be used
							 ' instead.

	SQMO_MAP_PROPERTY       ' The key should be a property name P. The value should be a VT_VECTOR|VT_LPWSTR,
							 ' where each string is a property name. The count must be at least one. This "map" will be
							 ' added to those of the loaded schema and used during resolution. A second call with the
							 ' same key will replace the current map. If the value is VT_NULL, the map will be removed.
End Enum

Public Enum STRUCTURED_QUERY_PARSE_ERROR
	SQPE_NONE
	SQPE_EXTRA_OPENING_PARENTHESIS ' A spurious (
	SQPE_EXTRA_CLOSING_PARENTHESIS ' A spurious )
	SQPE_IGNORED_MODIFIER ' A spurious NOT, <, >=, etc.
	SQPE_IGNORED_CONNECTOR ' A spurious AND or OR.
	SQPE_IGNORED_KEYWORD ' A spurious property.
	SQPE_UNHANDLED ' Something else.
End Enum

Public Enum CASE_REQUIREMENT
	CASE_REQUIREMENT_ANY ' Keywords are recognized regardless of case.
	CASE_REQUIREMENT_UPPER_IF_AQS ' Keywords are recognized only if uppercase, when AQS is the syntax, regardless of case otherwise.
End Enum

Public Enum INTERVAL_LIMIT_KIND
	ILK_EXPLICIT_INCLUDED
	ILK_EXPLICIT_EXCLUDED
	ILK_NEGATIVE_INFINITY
	ILK_POSITIVE_INFINITY
End Enum

Public Enum QUERY_PARSER_MANAGER_OPTION
	QPMO_SCHEMA_BINARY_NAME                 ' The value must be VT_LPWSTR and be the name of the file containing a schema binary.
											 ' The default value depends on the catalog. For the SystemIndex catalog it is
											 ' "StructuredQuerySchema.bin".

	QPMO_PRELOCALIZED_SCHEMA_BINARY_PATH     ' The value must be either a VT_BOOL or a VT_LPWSTR. If it is a VT_BOOL and the value
											 ' IS VARIANT_FALSE, a prelocalized schema binary path will not be used. If it is VARIANT_TRUE,
											 ' a default prelocalized schema binary path will be used, depending on the catalog.
											 ' If it is a VT_LPWSTR, the value should be a full folder part (though an LCID may be
											 ' appended to it according to the QPMO_APPEND_LCID_TO_LOCALIZED_PATH setting).
											 ' The default is VT_BOOL with VARIANT_TRUE; the actual path is
											 ' "%COMMONAPPDATA%\Microsoft\Windows" (note though that environment variables in the
											 ' given string will not be expanded).

	QPMO_UNLOCALIZED_SCHEMA_BINARY_PATH      ' The value must be VT_LPWSTR and be the full path of a folder in which an unlocalized
											 ' schema binary resides and can be read.
											 ' The default value is the expansion of "%SYSTEMROOT%\System32" (note though
											 ' that environment variables in the given string will not be expanded).

	QPMO_LOCALIZED_SCHEMA_BINARY_PATH        ' The value must be VT_LPWSTR and be the full path of a folder in which a localized
											 ' schema binary can be read, or written as necessary.
											 ' The default value is "%LOCALAPPDATA%\Microsoft\Windows" (note though
											 ' that environment variables in the given string will not be expanded).

	QPMO_APPEND_LCID_TO_LOCALIZED_PATH       ' The value must be a VT_BOOL. If it is VARIANT_TRUE, then the path(s) for localized
											 ' binary will have "\<LCID>" appended to it, e.g., "\1042". The default is VARIANT_TRUE.

	QPMO_LOCALIZER_SUPPORT                   ' The value must be a VT_UNKNOWN with an object supporting ISchemaLocalizerSupport.
											 ' It will be used instead of the default localizer support object which expects "global"
											 ' mnemonics to be on the form "@foo.dll,-12345" and will return the resourec with ID 12345
End Enum

Public Enum NAMED_ENTITY_CERTAINTY
	NEC_LOW    '// It could be this named entity but additional evidence advisable.
	NEC_MEDIUM '// It quite likely is this named entity; it is OK to use it.
	NEC_HIGH   '// It almost certainly is this named entity; it should be ok to toss other possibilities.
End Enum

Public Const sCLSID_ConditionFactory = "new: {E03E85B0-7BE3-4000-BA98-6C13DE9FA486}"
Public Const sCLSID_SearchFolderItemFactory= "new: {14010e02-bbbd-41f0-88e3-eda371216584}"
Public Const sCLSID_QueryParserManager = "new: {5088B39A-29B4-4d9d-8245-4EE289222F66}"
Public Const sCLSID_QueryParser = "new: {B72F8FD8-0FAB-4dd9-BDBF-245A6CE1485B}"
Public Const sCLSID_NegationCondition = "new: {8DE9C74C-605A-4acd-BEE3-2B222AA2D23D}"
Public Const sCLSID_CompoundCondition = "new: {116F8D13-101E-4fa5-84D4-FF8279381935}"
Public Const sCLSID_LeafCondition = "new: {52F15C89-5A17-48e1-BBCD-46A3F89C7CC2}"
Public Const sCLSID_Interval = "new: {D957171F-4BF9-4de2-BCD5-C70A7CA55836}"

End Module