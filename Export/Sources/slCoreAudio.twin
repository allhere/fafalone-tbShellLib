'tbShellLib - slCoreAudio :: Core Audio Interfaces, exp_audio.idl and mCoreAudio.bas

'100% complete re: oleexp, but oleexp was never complete for CoreAudio.
#Region "Interfaces"
[ InterfaceId ("7991EEC9-7E89-4D85-8390-6C703CEC60C0") ]
Interface IMMNotificationClient Extends stdole.IUnknown
    Sub OnDeviceStateChanged(ByVal pwstrDeviceId As LongPtr, ByVal dwNewState As DEVICE_STATE)
    Sub OnDeviceAdded(ByVal pwstrDeviceId As LongPtr)
    Sub OnDeviceRemoved(ByVal pwstrDeviceId As LongPtr)
    Sub OnDefaultDeviceChanged(ByVal flow As EDataFlow, ByVal role As ERole, ByVal pwstrDefaultDeviceId As LongPtr)
    #If Win64 Then
    Sub OnPropertyValueChanged(ByVal pwstrDeviceId As LongPtr, pK as PROPERTYKEY)
    #Else
    Sub OnPropertyValueChanged(ByVal pwstrDeviceId As LongPtr, ByVal key As Long, ByVal w12 As Long, ByVal b0123 As Long, ByVal b4567 As Long, ByVal pid As Long)
    #End If
End Interface

[ InterfaceId ("D666063F-1587-4E43-81F1-B948E807363F") ]
Interface IMMDevice Extends stdole.IUnknown
    [ PreserveSig ] Function Activate(iid As UUID, ByVal dwClsCtx As CLSCTX, pActivationParams As Variant, ppInterface As Any) As Long
    [ PreserveSig ] Function OpenPropertyStore(ByVal stgmAccess As STGM, ppProperties As IPropertyStore) As Long
    [ PreserveSig ] Function GetId(ppstrId As LongPtr) As Long
    [ PreserveSig ] Function GetState(pdwState As DEVICE_STATE) As Long
End Interface

[ InterfaceId ("0BD7A1BE-7A1A-44DB-8397-CC5392387B5E") ]
Interface IMMDeviceCollection Extends stdole.IUnknown
    [ PreserveSig ] Function GetCount(pcDevices As Long) As Long
    [ PreserveSig ] Function Item(ByVal nDevice As Long, ppDevice As IMMDevice) As Long
End Interface

[ InterfaceId ("1BE09788-6894-4089-8586-9A2A6C265AC5") ]
Interface IMMEndpoint Extends stdole.IUnknown
    [ PreserveSig ] Function GetDataFlow(pDataFlow As EDataFlow) As Long
End Interface

[ InterfaceId ("A95664D2-9614-4F35-A746-DE8DB63617E6") ]
Interface IMMDeviceEnumerator Extends stdole.IUnknown
    [ PreserveSig ] Function EnumAudioEndpoints(ByVal dataFlow As EDataFlow, ByVal dwStateMask As DEVICE_STATE, ppDevices As IMMDeviceCollection) As Long
    [ PreserveSig ] Function GetDefaultAudioEndpoint(ByVal dataFlow As EDataFlow, ByVal role As ERole, ppEndpoint As IMMDevice) As Long
    [ PreserveSig ] Function GetDevice(ByVal pwstrId As LongPtr, ppDevice As IMMDevice) As Long
    [ PreserveSig ] Function RegisterEndpointNotificationCallback(ByVal pClient As IMMNotificationClient) As Long
    [ PreserveSig ] Function UnregisterEndpointNotificationCallback(ByVal pClient As IMMNotificationClient) As Long
End Interface

[ InterfaceId ("3B0D0EA4-D0A9-4B0E-935B-09516746FAC0") ]
Interface IMMDeviceActivator Extends stdole.IUnknown
    [ PreserveSig ] Function Activate(iid As UUID, ByVal pDevice As IMMDevice, pActivationParams As Variant, ppInterface As Any) As Long
End Interface

[ InterfaceId ("41D949AB-9862-444A-80F6-C261334DA5EB") ]
Interface IActivateAudioInterfaceCompletionHandler Extends stdole.IUnknown
    Sub ActivateCompleted(ByVal activateOperation As IActivateAudioInterfaceAsyncOperation)
End Interface

[ InterfaceId ("72A22D78-CDE4-431D-B8CC-843A71199B6D") ]
Interface IActivateAudioInterfaceAsyncOperation Extends stdole.IUnknown
    Sub GetActivateResult(activateResult As Long, activatedInterface As stdole.IUnknown)
End Interface

[ InterfaceId ("657804FA-D6AD-4496-8A60-352752AF4F89") ]
Interface IAudioEndpointVolumeCallback Extends stdole.IUnknown
    Sub OnNotify(pNotify As AUDIO_VOLUME_NOTIFICATION_DATA)
End Interface

[ InterfaceId ("5CDF2C82-841E-4546-9722-0CF74078229A") ]
[ Description ("AudioEndpointVolume interface") ]
Interface IAudioEndpointVolume Extends stdole.IUnknown
    [ PreserveSig ] Function RegisterControlChangeNotify(ByVal pNotify As IAudioEndpointVolumeCallback) As Long
    [ PreserveSig ] Function UnregisterControlChangeNotify(ByVal pNotify As IAudioEndpointVolumeCallback) As Long
    [ PreserveSig ] Function GetChannelCount(pnChannelCount As Long) As Long
    [ PreserveSig ] Function SetMasterVolumeLevel(ByVal fLevelDB As Single, pguidEventContext As UUID) As Long
    [ PreserveSig ] Function SetMasterVolumeLevelScalar(ByVal fLevel As Single, pguidEventContext As UUID) As Long
    [ PreserveSig ] Function GetMasterVolumeLevel(pfLevelDB As Single) As Long
    [ PreserveSig ] Function GetMasterVolumeLevelScalar(pfLevel As Single) As Long
    [ PreserveSig ] Function SetChannelVolumeLevel(ByVal nChannel As Long, ByVal fLevelDB As Single, pguidEventContext As UUID) As Long
    [ PreserveSig ] Function SetChannelVolumeLevelScalar(ByVal nChannel As Long, ByVal fLevel As Single, pguidEventContext As UUID) As Long
    [ PreserveSig ] Function GetChannelVolumeLevel(ByVal nChannel As Long, pfLevelDB As Single) As Long
    [ PreserveSig ] Function GetChannelVolumeLevelScalar(ByVal nChannel As Long, pfLevel As Single) As Long
    [ PreserveSig ] Function SetMute(ByVal bMute As Long, pguidEventContext As UUID) As Long
    [ PreserveSig ] Function GetMute(pbMute As Long) As Long
    [ PreserveSig ] Function GetVolumeStepInfo(pnStep As Long, pnStepCount As Long) As Long
    [ PreserveSig ] Function VolumeStepUp(pguidEventContext As UUID) As Long
    [ PreserveSig ] Function VolumeStepDown(pguidEventContext As UUID) As Long
    [ PreserveSig ] Function QueryHardwareSupport(pdwHardwareSupportMask As Long) As Long
    [ PreserveSig ] Function GetVolumeRange(pflVolumeMindB As Single, pflVolumeMaxdB As Single, pflVolumeIncrementdB As Single) As Long
End Interface

[ InterfaceId ("66E11784-F695-4F28-A505-A7080081A78F") ]
Interface IAudioEndpointVolumeEx Extends IAudioEndpointVolume
    [ PreserveSig ] Function GetVolumeRangeChannel(ByVal iChannel As Long, pflVolumeMindB As Single, pflVolumeMaxdB As Single, pflVolumeIncrementdB As Single) As Long
End Interface

[ InterfaceId ("C02216F6-8C67-4B5B-9D00-D008E73E0064") ]
Interface IAudioMeterInformation Extends stdole.IUnknown
    Sub GetPeakValue(pfPeak As Single)
    Sub GetMeteringChannelCount(pnChannelCount As Long)
    Sub GetChannelsPeakValues(ByVal u32ChannelCount As Long, afPeakValues As Single)
    Sub QueryHardwareSupport(pdwHardwareSupportMask As Long)
End Interface

[ InterfaceId ("784CFD40-9F89-456E-A1A6-873B006A664E") ]
Interface IAudioEndpointFormatControl Extends stdole.IUnknown
    [ PreserveSig ] Function ResetToDefault(ByVal ResetFlags As Long) As Long
End Interface

[ InterfaceId ("28F54685-06FD-11D2-B27A-00A0C9223196") ]
Interface IKsControl Extends stdole.IUnknown
    Sub KsProperty(property As KSIDENTIFIER, ByVal PropertyLength As Long, PropertyData As any, ByVal DataLength As Long, BytesReturned As Long)
    Sub KsMethod(method As KSIDENTIFIER, ByVal MethodLength As Long, MethodData As Any, ByVal DataLength As Long, BytesReturned As Long)
    Sub KsEvent(event As KSIDENTIFIER, ByVal EventLength As Long, EventData As Any, ByVal DataLength As Long, BytesReturned As Long)
End Interface

[ InterfaceId ("7FB7B48F-531D-44A2-BCB3-5AD5A134B3DC") ]
Interface IAudioVolumeLevel Extends IPerChannelDbLevel
End Interface

[ InterfaceId ("BB11C46F-EC28-493C-B88A-5DB88062CE98") ]
Interface IAudioChannelConfig Extends stdole.IUnknown
    [ PreserveSig ] Function SetChannelConfig(ByVal dwConfig As Long, pguidEventContext As UUID) As Long
    Function GetChannelConfig() As Long
End Interface

[ InterfaceId ("7D8B1437-DD53-4350-9C1B-1EE2890BD938") ]
Interface IAudioLoudness Extends stdole.IUnknown
    [ PreserveSig ] Function GetEnabled(pbEnabled As Long) As Long
    [ PreserveSig ] Function SetEnabled(ByVal bEnabled As Long, pguidEventContext As UUID) As Long
End Interface

[ InterfaceId ("4F03DC02-5E6E-4653-8F72-A030C123D598") ]
Interface IAudioInputSelector Extends stdole.IUnknown
    [ PreserveSig ] Function GetSelection(pdIdSelected As Long) As Long
    [ PreserveSig ] Function SetSelection(ByVal nIdSelect As Long, pguidEventContext As UUID) As Long
End Interface

[ InterfaceId ("BB515F69-94A7-429e-8B9C-271B3F11A3AB") ]
Interface IAudioOutputSelector Extends stdole.IUnknown
    [ PreserveSig ] Function GetSelection(pdIdSelected As Long) As Long
    [ PreserveSig ] Function SetSelection(ByVal nIdSelect As Long, pguidEventContext As UUID) As Long
End Interface

[ InterfaceId ("DF45AEEA-B74A-4B6B-AFAD-2366B6AA012E") ]
Interface IAudioMute Extends stdole.IUnknown
    [ PreserveSig ] Function SetMute(ByVal bMute As Long, pguidEventContext As UUID) As Long
    [ PreserveSig ] Function GetMute(pbMute As Long) As Long
End Interface

[ InterfaceId ("C2F8E001-F205-4BC9-99BC-C13B1E048CCB") ]
Interface IPerChannelDbLevel Extends stdole.IUnknown
    [ PreserveSig ] Function GetChannelCount(pcChannels As Long) As Long
    [ PreserveSig ] Function GetLevelRange(ByVal nChannel As Long, pfMinLevelDB As Single, pfMaxLevelDB As Single, pfStepping As Single) As Long
    [ PreserveSig ] Function GetLevel(ByVal nChannel As Long, pfLevelDB As Single) As Long
    [ PreserveSig ] Function SetLevel(ByVal nChannel As Long, ByVal fLevelDB As Single, pguidEventContext As UUID) As Long
    [ PreserveSig ] Function SetLevelAllChannels(ByVal aLevelsDB As LongPtr, ByVal cChannels As Long, pguidEventContext As UUID) As Long
End Interface

[ InterfaceId ("A2B1A1D9-4DB3-425D-A2B2-BD335CB3E2E5") ]
Interface IAudioBass Extends IPerChannelDbLevel
End Interface

[ InterfaceId ("5E54B6D7-B44B-40D9-9A9E-E691D9CE6EDF") ]
Interface IAudioMidrange Extends IPerChannelDbLevel
End Interface

[ InterfaceId ("0A717812-694E-4907-B74B-BAFA5CFDCA7B") ]
Interface IAudioTreble Extends IPerChannelDbLevel
End Interface

[ InterfaceId ("85401FD4-6DE4-4b9d-9869-2D6753A82F3C") ]
Interface IAudioAutoGainControl Extends stdole.IUnknown
    [ PreserveSig ] Function GetEnabled(pbEnabled As Long) As Long
    [ PreserveSig ] Function SetEnabled(ByVal bEnabled As Long, pguidEventContext As UUID) As Long
End Interface

[ InterfaceId ("DD79923C-0599-45e0-B8B6-C8DF7DB6E796") ]
Interface IAudioPeakMeter Extends stdole.IUnknown
    [ PreserveSig ] Function GetChannelCount(pcChannels As Long) As Long
    [ PreserveSig ] Function GetLevel(ByVal nChannel As Long, pfLevel As Single) As Long
End Interface

[ InterfaceId ("3B22BCBF-2586-4af0-8583-205D391B807C") ]
Interface IDeviceSpecificProperty Extends stdole.IUnknown
    [ PreserveSig ] Function GetType(pVType As Integer) As Long
    [ PreserveSig ] Function GetValue(pvValue As any, pcbValue As Long) As Long
    [ PreserveSig ] Function SetValue(pvValue As any, ByVal cbValue As Long, pguidEventContext As UUID) As Long
    [ PreserveSig ] Function Get4BRange(plMin As Long, plMax As Long, plStepping As Long) As Long
End Interface

[ InterfaceId ("3CB4A69D-BB6F-4D2B-95B7-452D2C155DB5") ]
Interface IKsFormatSupport Extends stdole.IUnknown
    [ PreserveSig ] Function IsFormatSupported(pksFormat As KSDATAFORMAT, ByVal cbFormat As Long, pbSupported As Long) As Long
    [ PreserveSig ] Function GetDevicePreferredFormat(ppKsFormat As KSDATAFORMAT) As Long
End Interface

[ InterfaceId ("4509F757-2D46-4637-8E62-CE7DB944F57B") ]
Interface IKsJackDescription Extends stdole.IUnknown
    [ PreserveSig ] Function GetJackCount(pcJacks As Long) As Long
    [ PreserveSig ] Function GetJackDescription(ByVal nJack As Long, pDescription As KSJACK_DESCRIPTION) As Long
End Interface
[ InterfaceId ("478F3A9B-E0C9-4827-9228-6F5505FFE76A") ]
Interface IKsJackDescription2 Extends stdole.IUnknown
    [ PreserveSig ] Function GetJackCount(pcJacks As Long) As Long
    [ PreserveSig ] Function GetJackDescription2(ByVal nJack As Long, pDescription As KSJACK_DESCRIPTION2) As Long
End Interface

[ InterfaceId ("D9BD72ED-290F-4581-9FF3-61027A8FE532") ]
Interface IKsJackSinkInformation Extends stdole.IUnknown
    [ PreserveSig ] Function GetJackSinkInformation(pJackSinkInformation As KSJACK_SINK_INFORMATION) As Long
End Interface

[ InterfaceId ("C99AF463-D629-4EC4-8C00-E54D68154248") ]
Interface IKsJackContainerId Extends stdole.IUnknown
    [ PreserveSig ] Function GetJackContainerId(pJackContainerId As UUID) As Long
End Interface

[ InterfaceId ("6DAA848C-5EB0-45CC-AEA5-998A2CDA1FFB") ]
Interface IPartsList Extends stdole.IUnknown
    [ PreserveSig ] Function GetCount(pCount As Long) As Long
    [ PreserveSig ] Function GetPart(ByVal nIndex As Long, ppPart As IPart) As Long
End Interface

[ InterfaceId ("AE2DE0E4-5BCA-4F2D-AA46-5D13F8FDB3A9") ]
Interface IPart Extends stdole.IUnknown
    [ PreserveSig ] Function GetName(ppwstrName As LongPtr) As Long
    [ PreserveSig ] Function GetLocalId(pnId As Long) As Long
    [ PreserveSig ] Function GetGlobalId(ppwstrGlobalId As LongPtr) As Long
    [ PreserveSig ] Function GetPartType(pPartType As PartType) As Long
    [ PreserveSig ] Function GetSubType(pSubType As UUID) As Long
    [ PreserveSig ] Function GetControlInterfaceCount(pCount As Long) As Long
    [ PreserveSig ] Function GetControlInterface(ByVal nIndex As Long, ppInterfaceDesc As IControlInterface) As Long
    [ PreserveSig ] Function EnumPartsIncoming(ppParts As IPartsList) As Long
    [ PreserveSig ] Function EnumPartsOutgoing(ppParts As IPartsList) As Long
    [ PreserveSig ] Function GetTopologyObject(ppTopology As IDeviceTopology) As Long
    [ PreserveSig ] Function Activate(ByVal dwClsContext As Long, refiid As UUID, ppvObject As Any) As Long
    [ PreserveSig ] Function RegisterControlChangeCallback(riid As UUID, ByVal pNotify As IControlChangeNotify) As Long
    [ PreserveSig ] Function UnregisterControlChangeCallback(ByVal pNotify As IControlChangeNotify) As Long
End Interface

[ InterfaceId ("9c2c4058-23f5-41de-877a-df3af236a09e") ]
Interface IConnector Extends stdole.IUnknown
    [ PreserveSig ] Function GetType(pType As ConnectorType) As Long
    [ PreserveSig ] Function GetDataFlow(pFlow As DataFlow) As Long
    [ PreserveSig ] Function ConnectTo(ByVal pConnectTo As IConnector) As Long
    [ PreserveSig ] Function Disconnect() As Long
    [ PreserveSig ] Function IsConnected(pbConnected As Long) As Long
    [ PreserveSig ] Function GetConnectedTo(ppConTo As IConnector) As Long
    [ PreserveSig ] Function GetConnectorIdConnectedTo(ppwstrConnectorId As LongPtr) As Long
    [ PreserveSig ] Function GetDeviceIdConnectedTo(ppwstrDeviceId As LongPtr) As Long
End Interface

[ InterfaceId ("82149A85-DBA6-4487-86BB-EA8F7FEFCC71") ]
Interface ISubunit Extends stdole.IUnknown
End Interface

[ InterfaceId ("45d37c3f-5140-444a-ae24-400789f3cbf3") ]
Interface IControlInterface Extends stdole.IUnknown
    [ PreserveSig ] Function GetName(ppwstrName As LongPtr) As Long
    [ PreserveSig ] Function GetIID(pIID As UUID) As Long
End Interface

[ InterfaceId ("A09513ED-C709-4d21-BD7B-5F34C47F3947") ]
Interface IControlChangeNotify Extends stdole.IUnknown
    Sub OnNotify(ByVal dwSenderProcessId As Long, pguidEventContext As UUID)
End Interface

[ InterfaceId ("2A07407E-6497-4A18-9787-32F79BD0D98F") ]
Interface IDeviceTopology Extends stdole.IUnknown
    [ PreserveSig ] Function GetConnectorCount(pCount As Long) As Long
    [ PreserveSig ] Function GetConnector(ByVal nIndex As Long, ppConnector As IConnector) As Long
    [ PreserveSig ] Function GetSubunitCount(pCount As Long) As Long
    [ PreserveSig ] Function GetSubunit(ByVal nIndex As Long, ppSubunit As ISubunit) As Long
    [ PreserveSig ] Function GetPartById(ByVal nID As Long, ppPart As IPart) As Long
    [ PreserveSig ] Function GetDeviceId(ppwstrDeviceId As LongPtr) As Long
    [ PreserveSig ] Function GetSignalPath(ByVal pIPartFrom As IPart, ByVal pIPartTo As IPart, ByVal bRejectMixedPaths As Long, ppParts As IPartsList) As Long
End Interface

[ InterfaceId ("1CB9AD4C-DBFA-4c32-B178-C2F568A703B2") ]
Interface IAudioClient Extends stdole.IUnknown
    [ PreserveSig ] Function Initialize(ByVal ShareMode As AUDCLNT_SHAREMODE, ByVal StreamFlags As Long, ByVal hnsBufferDuration As LongLong, ByVal hnsPeriodicity As LongLong, pFormat As any, ByVal pAudioSessionGuid As LongPtr) As Long
    [ PreserveSig ] Function GetBufferSize(pNumBufferFrames As Long) As Long
    [ PreserveSig ] Function GetStreamLatency(phnsLatency As LongLong) As Long
    [ PreserveSig ] Function GetCurrentPadding(pNumPaddingFrames As Long) As Long
    [ PreserveSig ] Function IsFormatSupported(ByVal ShareMode As AUDCLNT_SHAREMODE, pFormat As Any, ppClosestMatch As LongPtr) As Long
    [ PreserveSig ] Function GetMixFormat(ppDeviceFormat As LongPtr) As Long
    [ PreserveSig ] Function GetDevicePeriod(phnsDefaultDevicePeriod As LongLong, phnsMinimumDevicePeriod As LongLong) As Long
    [ PreserveSig ] Function Start() As Long
    [ PreserveSig ] Function Stop() As Long
    [ PreserveSig ] Function Reset() As Long
    [ PreserveSig ] Function SetEventHandle(ByVal eventHandle As LongPtr) As Long
    [ PreserveSig ] Function GetService(riid As UUID, ppv As any) As Long
End Interface
[ InterfaceId ("726778CD-F60A-4eda-82DE-E47610CD78AA") ]
Interface IAudioClient2 Extends IAudioClient
    [ PreserveSig ] Function IsOffloadCapable(ByVal Category As AUDIO_STREAM_CATEGORY, pbOffloadCapable As Long) As Long
    [ PreserveSig ] Function SetClientProperties(pProperties As AudioClientProperties) As Long
    [ PreserveSig ] Function GetBufferSizeLimits(pFormat As Any, ByVal bEventDriven As Long, phnsMinBufferDuration As LongLong, phnsMaxBufferDuration As LongLong) As Long
End Interface
[ InterfaceId ("7ED4EE07-8E67-4CD4-8C1A-2B7A5987AD42") ]
Interface IAudioClient3 Extends IAudioClient2
    [ PreserveSig ] Function GetSharedModeEnginePeriod(pFormat As any, pDefaultPeriodInFrames As Long, pFundamentalPeriodInFrames As Long, pMinPeriodInFrames As Long, pMaxPeriodInFrames As Long) As Long
    [ PreserveSig ] Function GetCurrentSharedModeEnginePeriod(ppFormat As LongPtr, pCurrentPeriodInFrames As Long) As Long
    [ PreserveSig ] Function InitializeSharedAudioStream(ByVal StreamFlags As Long, ByVal PeriodInFrames As Long, pFormat As any, ByVal pAudioSessionGuid As LongPtr) As Long
End Interface

[ InterfaceId ("F294ACFC-3146-4483-A7BF-ADDCA7C260E2") ]
Interface IAudioRenderClient Extends stdole.IUnknown
    [ PreserveSig ] Function GetBuffer(ByVal NumFramesRequested As Long, ppData As LongPtr) As Long
    [ PreserveSig ] Function ReleaseBuffer(ByVal NumFramesWritten As Long, ByVal dwFlags As Long) As Long
End Interface

[ InterfaceId ("C8ADBD64-E71E-48a0-A4DE-185C395CD317") ]
Interface IAudioCaptureClient Extends stdole.IUnknown
    [ PreserveSig ] Function GetBuffer(ppData As LongPtr, pNumFramesTotal As Long, pdwFlags As Long, pu64DevicePosition As LongLong, pu64QPCPosition As LongLong) As Long
    [ PreserveSig ] Function ReleaseBuffer(ByVal NumFramesRead As Long) As Long
    [ PreserveSig ] Function GetNextPacketSize(pNumFramesInNextPacket As Long) As Long
End Interface

[ InterfaceId ("CD63314F-3FBA-4a1b-812C-EF96358728E7") ]
Interface IAudioClock Extends stdole.IUnknown
    [ PreserveSig ] Function GetFrequency(pu64Frequency As LongLong) As Long
    [ PreserveSig ] Function GetPosition(pu64Position As LongLong, pu64QPCPosition As LongLong) As Long
    [ PreserveSig ] Function GetCharacteristics(pdwCharacteristics As Long) As Long
End Interface

[ InterfaceId ("6f49ff73-6727-49ac-a008-d98cf5e70048") ]
Interface IAudioClock2 Extends stdole.IUnknown
    [ PreserveSig ] Function GetDevicePosition(DevicePosition As LongLong, QPCPosition As LongLong) As Long
End Interface

[ InterfaceId ("f6e4c0a0-46d9-4fb8-be21-57a3ef2b626c") ]
Interface IAudioClockAdjustment Extends stdole.IUnknown
    [ PreserveSig ] Function SetSampleRate(ByVal flSampleRate As Single) As Long
End Interface

[ InterfaceId ("87CE5498-68D6-44E5-9215-6DA47EF883D8") ]
Interface ISimpleAudioVolume Extends stdole.IUnknown
    [ PreserveSig ] Function SetMasterVolume(ByVal fLevel As Single, EventContext As UUID) As Long
    [ PreserveSig ] Function GetMasterVolume(pfLevel As Single) As Long
    [ PreserveSig ] Function SetMute(ByVal bMute As Long, EventContext As UUID) As Long
    [ PreserveSig ] Function GetMute(pbMute As Long) As Long
End Interface

[ InterfaceId ("93014887-242D-4068-8A15-CF5E93B90FE3") ]
Interface IAudioStreamVolume Extends stdole.IUnknown
    [ PreserveSig ] Function GetChannelCount(pdwCount As Long) As Long
    [ PreserveSig ] Function SetChannelVolume(ByVal dwIndex As Long, ByVal fLevel As Single) As Long
    [ PreserveSig ] Function GetChannelVolume(ByVal dwIndex As Long, pfLevel As Single) As Long
    [ PreserveSig ] Function SetAllVolumes(ByVal dwCount As Long, pfVolumes As Single) As Long
    [ PreserveSig ] Function GetAllVolumes(ByVal dwCount As Long, pfVolumes As Single) As Long
End Interface

[ InterfaceId ("1C158861-B533-4B30-B1CF-E853E51C59B8") ]
Interface IChannelAudioVolume Extends stdole.IUnknown
    [ PreserveSig ] Function GetChannelCount(pdwCount As Long) As Long
    [ PreserveSig ] Function SetChannelVolume(ByVal dwIndex As Long, ByVal fLevel As Single, EventContext As UUID) As Long
    [ PreserveSig ] Function GetChannelVolume(ByVal dwIndex As Long, pfLevel As Single) As Long
    [ PreserveSig ] Function SetAllVolumes(ByVal dwCount As Long, pfVolumes As Single, EventContext As UUID) As Long
    [ PreserveSig ] Function GetAllVolumes(ByVal dwCount As Long, pfVolumes As Single) As Long
End Interface

[ InterfaceId ("24918ACC-64B3-37C1-8CA9-74A66E9957A8") ]
Interface IAudioSessionEvents Extends stdole.IUnknown
    Sub OnDisplayNameChanged(ByVal lpszNewDisplayName As LongPtr, EventContext As UUID)
    Sub OnIconPathChanged(ByVal lpszNewIconPath As LongPtr, EventContext As UUID)
    Sub OnSimpleVolumeChanged(ByVal NewVolume As Single, ByVal NewMute As Long, EventContext As UUID)
    Sub OnChannelVolumeChanged(ByVal ChannelCount As Long, ByVal NewChannelVolumeArray As LongPtr, ByVal ChangedChannel As Long, EventContext As UUID)
    Sub OnGroupingParamChanged(NewGroupingParam As UUID, EventContext As UUID)
    Sub OnStateChanged(ByVal NewState As AudioSessionState)
    Sub OnSessionDisconnected(ByVal DisconnectReason As AudioSessionDisconnectReason)
End Interface

[ InterfaceId ("F4B1A599-7266-4319-A8CA-E70ACB11E8CD") ]
Interface IAudioSessionControl Extends stdole.IUnknown
    [ PreserveSig ] Function GetState(pRetVal As AudioSessionState) As Long
    [ PreserveSig ] Function GetDisplayName(pRetVal As LongPtr) As Long
    [ PreserveSig ] Function SetDisplayName(ByVal value As LongPtr, EventContext As UUID) As Long
    [ PreserveSig ] Function GetIconPath(pRetVal As LongPtr) As Long
    [ PreserveSig ] Function SetIconPath(ByVal value As LongPtr, EventContext As UUID) As Long
    [ PreserveSig ] Function GetGroupingParam(pRetVal As UUID) As Long
    [ PreserveSig ] Function SetGroupingParam(Override As UUID, EventContext As UUID) As Long
    [ PreserveSig ] Function RegisterAudioSessionNotification(ByVal NewNotifications As IAudioSessionEvents) As Long
    [ PreserveSig ] Function UnregisterAudioSessionNotification(ByVal NewNotifications As IAudioSessionEvents) As Long
End Interface
[ InterfaceId ("bfb7ff88-7239-4fc9-8fa2-07c950be9c6d") ]
Interface IAudioSessionControl2 Extends IAudioSessionControl
    [ PreserveSig ] Function GetSessionIdentifier(pRetVal As LongPtr) As Long
    [ PreserveSig ] Function GetSessionInstanceIdentifier(pRetVal As LongPtr) As Long
    [ PreserveSig ] Function GetProcessId(pRetVal As Long) As Long
    [ PreserveSig ] Function IsSystemSoundsSession() As Long
    [ PreserveSig ] Function SetDuckingPreference(ByVal optOut As Long) As Long
End Interface

[ InterfaceId ("BFA971F1-4D5E-40BB-935E-967039BFBEE4") ]
Interface IAudioSessionManager Extends stdole.IUnknown
    [ PreserveSig ] Function GetAudioSessionControl(AudioSessionGuid As UUID, ByVal streamFlags As Long, SessionControl As IAudioSessionControl) As Long
    [ PreserveSig ] Function GetSimpleAudioVolume(AudioSessionGuid As UUID, ByVal streamFlags As Long, AudioVolume As ISimpleAudioVolume) As Long
End Interface
[ InterfaceId ("77AA99A0-1BD6-484F-8BC7-2C654C9A9B6F") ]
Interface IAudioSessionManager2 Extends IAudioSessionManager
    Function GetSessionEnumerator() As IAudioSessionEnumerator
    [ PreserveSig ] Function RegisterSessionNotification(ByVal SessionNotifation As IAudioSessionNotification) As Long
    [ PreserveSig ] Function UnregisterSessionNotification(ByVal SessionNotifation As IAudioSessionNotification) As Long
    [ PreserveSig ] Function RegisterDuckNotification(ByVal lpszSessionId As LongPtr, ByVal duckNotification As IAudioVolumeDuckNotification) As Long
    [ PreserveSig ] Function UnregisterDuckNotification(ByVal duckNotification As IAudioVolumeDuckNotification) As Long
End Interface

[ InterfaceId ("C3B284D4-6D39-4359-B3CF-B56DDB3BB39C") ]
Interface IAudioVolumeDuckNotification Extends stdole.IUnknown
    Sub OnVolumeDuckNotification(ByVal SessionId As LongPtr, ByVal countCommunicationSessions As Long)
    Sub OnVolumeUnduckNotification(ByVal SessionId As LongPtr)
End Interface

[ InterfaceId ("641DD20B-4D41-49CC-ABA3-174B9477BB08") ]
Interface IAudioSessionNotification Extends stdole.IUnknown
    Sub OnSessionCreated(ByVal NewSession As IAudioSessionControl)
End Interface

[ InterfaceId ("E2F5BB11-0570-40CA-ACDD-3AA01277DEE8") ]
Interface IAudioSessionEnumerator Extends stdole.IUnknown
    [ PreserveSig ] Function GetCount(SessionCount As Long) As Long
    [ PreserveSig ] Function GetSession(ByVal SessionCount As Long, Session As IAudioSessionControl) As Long
End Interface

[ InterfaceId ("076A6922-D802-4F83-BAF6-409D9CA11BFE") ]
Interface IAudioLfxControl Extends stdole.IUnknown
    Sub SetLocalEffectsState(ByVal bEnabled As Long)
    Sub GetLocalEffectsState(pbEnabled As Long)
End Interface

[ InterfaceId ("F8520DD3-8F9D-4437-9861-62F584C33DD6") ]
Interface IAudioEndpointLastBufferControl Extends stdole.IUnknown
    [ PreserveSig ] Function IsLastBufferControlSupported() As Long
    Sub ReleaseOutputDataPointerForLastBuffer(pConnectionProperty As APO_CONNECTION_PROPERTY)
End Interface

[ InterfaceId ("5FA00F27-ADD6-499a-8A9D-6B98521FA75B") ]
Interface IAudioSystemEffects Extends stdole.IUnknown
    'Sub Initialize(ByVal cbDataSize As Long, pbyData As Byte) '??????????
End Interface
[ InterfaceId ("BAFE99D2-7436-44CE-9E0E-4D89AFBFFF56") ]
Interface IAudioSystemEffects2 Extends IAudioSystemEffects
    Sub GetEffectsList(ppEffectsIds As UUID, pcEffects As Long, ByVal Event As LongPtr)
End Interface

[ InterfaceId ("64F1DD49-71CA-4281-8672-3A9EDDD1D0B6") ]
Interface IAudioEndpointOffloadStreamVolume Extends stdole.IUnknown
    Sub GetVolumeChannelCount(pu32ChannelCount As Long)
    Sub SetChannelVolumes(ByVal u32ChannelCount As Long, pf32Volumes As Single, ByVal u32CurveType As AUDIO_CURVE_TYPE, pCurveDuration As LongLong)
    Sub GetChannelVolumes(ByVal u32ChannelCount As Long, pf32Volumes As Single)
End Interface

[ InterfaceId ("DFE21355-5EC2-40E0-8D6B-710AC3C00249") ]
Interface IAudioEndpointOffloadStreamMute Extends stdole.IUnknown
    Sub SetMute(ByVal bMute As Long)
    Sub GetMute(pbMute As Long)
End Interface

[ InterfaceId ("E1546DCE-9DD1-418B-9AB2-348CED161C86") ]
Interface IAudioEndpointOffloadStreamMeter Extends stdole.IUnknown
    Sub GetMeterChannelCount(pu32ChannelCount As Long)
    Sub GetMeteringData(ByVal u32ChannelCount As Long, pf32PeakValues As Single)
End Interface

[ InterfaceId ("EDDCE3E4-F3C1-453a-B461-223563CBD886") ]
Interface IHardwareAudioEngineBase Extends stdole.IUnknown
    Sub GetAvailableOffloadConnectorCount(ByVal pwstrDeviceId As LongPtr, ByVal uConnectorId As Long, pAvailableConnectInstanceCount As Long)
    Sub GetEngineFormat(ByVal pDevice As IMMDevice, ByVal bRequestDeviceFormat As Long, ppwfxFormat As LongPtr)
    Sub SetEngineDeviceFormat(ByVal pDevice As IMMDevice, ByVal pwfxFormat As LongPtr)
    Sub SetGfxState(ByVal pDevice As IMMDevice, ByVal bEnable As Long)
    Sub GetGfxState(ByVal pDevice As IMMDevice, pbEnable As Long)
End Interface

[ InterfaceId ("f8679f50-850a-41cf-9c72-430f290290c8") ]
Interface IPolicyConfig Extends stdole.IUnknown
    Sub GetMixFormat(ByVal lpszDeviceID As LongPtr, pFormat As LongPtr)
    Sub GetDeviceFormat(ByVal lpszDeviceID As LongPtr, ByVal bDefault As Long, pFormat As LongPtr)
    Sub ResetDeviceFormat(ByVal lpszDeviceID As LongPtr)
    Sub SetDeviceFormat(ByVal lpszDeviceID As LongPtr, pEndpointFormat As any, pMixFormat As any)
    Sub GetProcessingPeriod(ByVal lpszDeviceID As LongPtr, ByVal bDefault As Long, hnsDefaultDevicePeriod As LongLong, hnsMinimumDevicePeriod As LongLong)
    Sub SetProcessingPeriod(ByVal lpszDeviceID As LongPtr, hnsDevicePeriod As LongLong)
    Sub GetShareMode(ByVal lpszDeviceID As LongPtr, pMode As DeviceShareMode)
    Sub SetShareMode(ByVal lpszDeviceID As LongPtr, pMode As DeviceShareMode)
    Sub GetPropertyValue(ByVal lpszDeviceID As LongPtr, key As PROPERTYKEY, pValue As Variant)
    Sub SetPropertyValue(ByVal lpszDeviceID As LongPtr, key As PROPERTYKEY, pValue As Variant)
    Sub SetDefaultEndpoint(ByVal lpszDeviceID As LongPtr, ByVal role As ERole)
    Sub SetEndpointVisibility(ByVal lpszDeviceID As LongPtr, ByVal bVisible As Long)
End Interface
[ InterfaceId ("568B9108-44BF-40B4-9006-86AFE5B5A620") ]
Interface IPolicyConfigVista Extends stdole.IUnknown
    Sub GetMixFormat(ByVal lpszDeviceID As LongPtr, pFormat As LongPtr)
    Sub GetDeviceFormat(ByVal lpszDeviceID As LongPtr, ByVal bDefault As Long, pFormat As LongPtr)
    Sub ResetDeviceFormat(ByVal lpszDeviceID As LongPtr)
    Sub SetDeviceFormat(ByVal lpszDeviceID As LongPtr, pEndpointFormat As any, pMixFormat As any)
    Sub GetProcessingPeriod(ByVal lpszDeviceID As LongPtr, ByVal bDefault As Long, hnsDefaultDevicePeriod As LongLong, hnsMinimumDevicePeriod As LongLong)
    Sub SetProcessingPeriod(ByVal lpszDeviceID As LongPtr, hnsDevicePeriod As LongLong)
    Sub GetShareMode(ByVal lpszDeviceID As LongPtr, pMode As DeviceShareMode)
    Sub SetShareMode(ByVal lpszDeviceID As LongPtr, pMode As DeviceShareMode)
    Sub GetPropertyValue(ByVal lpszDeviceID As LongPtr, key As PROPERTYKEY, pValue As Variant)
    Sub SetPropertyValue(ByVal lpszDeviceID As LongPtr, key As PROPERTYKEY, pValue As Variant)
    Sub SetDefaultEndpoint(ByVal lpszDeviceID As LongPtr, ByVal role As ERole)
    Sub SetEndpointVisibility(ByVal lpszDeviceID As LongPtr, ByVal bVisible As Long)
End Interface
#End Region

#Region "Coclasses"
'CLSID_MMDeviceEnumerator 
[ CoClassId ("BCDE0395-E52F-467C-8E3D-C4579291692E") ]
CoClass MMDeviceEnumerator
	 [ Default ] Interface IMMDeviceEnumerator
End CoClass

'CLSID_DeviceTopology 
[ CoClassId ("1DF639D0-5EC1-47AA-9379-828DC1AA8C59") ]
CoClass DeviceTopology
	 [ Default ] Interface IDeviceTopology
End CoClass

'CLSID_PolicyConfigClient 
[ CoClassId ("870af99c-171d-4f9e-af0d-e63df40c2bc9") ]
CoClass PolicyConfigClient
	 [ Default ] Interface IPolicyConfig
End CoClass

'CLSID_CPolicyConfigVistaClient : VISTA ONLY, Win7+ uses PolicyConfigClient
[ CoClassId ("294935CE-F637-4E7C-A41B-AB255460B862") ]
[ Description ("For Windows Vista ONLY; for Win7 use PolicyConfigClient") ]
CoClass CPolicyConfigVistaClient
	 [ Default ] Interface IPolicyConfigVista
End CoClass
#End Region

#Region "MainDefs"

Module slCoreAudio

Public Enum AUDCLNT_RETURNCODES
	AUDCLNT_E_NOT_INITIALIZED = &H00000001
	AUDCLNT_E_ALREADY_INITIALIZED = &H00000002
	AUDCLNT_E_WRONG_ENDPOINT_TYPE = &H00000003
	AUDCLNT_E_DEVICE_INVALIDATED = &H00000004
	AUDCLNT_E_NOT_STOPPED = &H00000005
	AUDCLNT_E_BUFFER_TOO_LARGE = &H00000006
	AUDCLNT_E_OUT_OF_ORDER = &H00000007
	AUDCLNT_E_UNSUPPORTED_FORMAT = &H00000008
	AUDCLNT_E_INVALID_SIZE = &H00000009
	AUDCLNT_E_DEVICE_IN_USE = &H0000000A
	AUDCLNT_E_BUFFER_OPERATION_PENDING = &H0000000B
	AUDCLNT_E_THREAD_NOT_REGISTERED = &H0000000C
	AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED = &H0000000E
	AUDCLNT_E_ENDPOINT_CREATE_FAILED = &H0000000F
	AUDCLNT_E_SERVICE_NOT_RUNNING = &H00000010
	AUDCLNT_E_EVENTHANDLE_NOT_EXPECTED = &H00000011
	AUDCLNT_E_EXCLUSIVE_MODE_ONLY = &H00000012
	AUDCLNT_E_BUFDURATION_PERIOD_NOT_EQUAL = &H00000013
	AUDCLNT_E_EVENTHANDLE_NOT_SET = &H00000014
	AUDCLNT_E_INCORRECT_BUFFER_SIZE = &H00000015
	AUDCLNT_E_BUFFER_SIZE_ERROR = &H00000016
	AUDCLNT_E_CPUUSAGE_EXCEEDED = &H00000017
	AUDCLNT_E_BUFFER_ERROR = &H00000018
	AUDCLNT_E_BUFFER_SIZE_NOT_ALIGNED = &H00000019
	AUDCLNT_E_INVALID_DEVICE_PERIOD = &H00000020
	AUDCLNT_E_INVALID_STREAM_FLAG = &H00000021
	AUDCLNT_E_ENDPOINT_OFFLOAD_NOT_CAPABLE = &H00000022
	AUDCLNT_E_OUT_OF_OFFLOAD_RESOURCES = &H00000023
	AUDCLNT_E_OFFLOAD_MODE_ONLY = &H00000024
	AUDCLNT_E_NONOFFLOAD_MODE_ONLY = &H00000025
	AUDCLNT_E_RESOURCES_INVALIDATED = &H00000026
	AUDCLNT_E_RAW_MODE_UNSUPPORTED = &H00000027
	AUDCLNT_E_ENGINE_PERIODICITY_LOCKED = &H00000028
	AUDCLNT_E_ENGINE_FORMAT_LOCKED = &H00000029
	AUDCLNT_S_BUFFER_EMPTY = &H00000001
	AUDCLNT_S_THREAD_ALREADY_REGISTERED = &H00000002
	AUDCLNT_S_POSITION_STALLED = &H00000003
End Enum

Public Enum AUDCLNT_STREAMFLAGS
	AUDCLNT_STREAMFLAGS_CROSSPROCESS = &H00010000
	AUDCLNT_STREAMFLAGS_LOOPBACK = &H00020000
	AUDCLNT_STREAMFLAGS_EVENTCALLBACK = &H00040000
	AUDCLNT_STREAMFLAGS_NOPERSIST = &H00080000
	AUDCLNT_STREAMFLAGS_RATEADJUST = &H00100000
End Enum

Public Enum AUDCLNT_SESSIONFLAGS
	AUDCLNT_SESSIONFLAGS_EXPIREWHENUNOWNED = &H10000000
	AUDCLNT_SESSIONFLAGS_DISPLAY_HIDE = &H20000000
	AUDCLNT_SESSIONFLAGS_DISPLAY_HIDEWHENEXPIRED = &H40000000
End Enum

Public Enum DEVICE_STATE
	DEVICE_STATE_ACTIVE = &H00000001
	DEVICE_STATE_DISABLED = &H00000002
	DEVICE_STATE_NOTPRESENT = &H00000004
	DEVICE_STATE_UNPLUGGED = &H00000008
	DEVICE_STATEMASK_ALL = &H0000000f
End Enum

Public Enum ENDPOINT_SYSFX_STATUS
	ENDPOINT_SYSFX_ENABLED = &H00000000 ' System Effects are enabled.")
	ENDPOINT_SYSFX_DISABLED = &H00000001 ' System Effects are disabled.")
End Enum

Public Type DIRECTX_AUDIO_ACTIVATION_PARAMS
	cbDirectXAudioActivationParams As Long
	guidAudioSession As UUID
	dwAudioStreamFlags As Long
End Type

Public Enum EDataFlow
	eRender
	eCapture
	eAll
	EDataFlow_enum_count
End Enum

Public Enum ERole
    eConsole
    eMultimedia
    eCommunications
    ERole_enum_count
End Enum

Public Enum EndpointFormFactor
    RemoteNetworkDevice '// = 0
    Speakers
    LineLevel
    Headphones
    Microphone
    Headset
    Handset
    UnknownDigitalPassthrough
    SPDIF
    DigitalAudioDisplayDevice
    UnknownFormFactor
    EndpointFormFactor_enum_count
End Enum

Public Type AudioExtensionParams
	AddPageParam As LongPtr
	pEndpoint As IMMDevice
	pPnpInterface As IMMDevice
	pPnpDevnode As IMMDevice
End Type

Public Type AUDIO_VOLUME_NOTIFICATION_DATA
	guidEventContext As UUID ' Context associated with the originator of the event.
	bMuted As Long
	fMasterVolume As Single
	nChannels As Long
	afChannelVolumes(0 To 1) As Single
End Type

Public Type KSDATAFORMAT
	FormatSize As Long
	Flags As Long
	SampleSize As Long
	Reserved As Long
	MajorFormat As UUID
	SubFormat As UUID
	Specifier As UUID
End Type

Public Type KSIDENTIFIER
' typedef struct {
'   union {
'     struct {
'       GUID  Set;
'       ULONG Id;
'       ULONG Flags;
'     } _IDENTIFIER;
'     struct {
'       GUID  Set;
'       ULONG Id;
'       ULONG Flags;
'     };
'     LONGLONG Alignment;
'   };
' } KSIDENTIFIER, *PKSIDENTIFIER;
    unsupported_union(15) As byte
End Type

Public Enum EPcxConnectionType
	eConnTypeUnknown
	eConnType3Point5mm
	eConnTypeQuarter
	eConnTypeAtapiInternal
	eConnTypeRCA
	eConnTypeOptical
	eConnTypeOtherDigital
	eConnTypeOtherAnalog
	eConnTypeMultichannelAnalogDIN
	eConnTypeXlrProfessional
	eConnTypeRJ11Modem
	eConnTypeCombination
End Enum

Public Enum EPcxGeoLocation
    eGeoLocRear = &H1
    eGeoLocFront
    eGeoLocLeft
    eGeoLocRight
    eGeoLocTop
    eGeoLocBottom
    eGeoLocRearPanel
    eGeoLocRiser
    eGeoLocInsideMobileLid
    eGeoLocDrivebay
    eGeoLocHDMI
    eGeoLocOutsideMobileLid
    eGeoLocATAPI
    eGeoLocNotApplicable
    eGeoLocReserved6
End Enum

Public Enum EPcxGenLocation
    eGenLocPrimaryBox = 0
    eGenLocInternal
    eGenLocSeparate
    eGenLocOther
End Enum

Public Enum EPxcPortConnection
    ePortConnJack = 0
    ePortConnIntegratedDevice
    ePortConnBothIntegratedAndJack
    ePortConnUnknown
End Enum

Public Type KSJACK_DESCRIPTION
	ChannelMapping As Long
	Color As Long ' use RGB() macro to generate these
	ConnectionType As EPcxConnectionType
	GeoLocation As EPcxGeoLocation
	GenLocation As EPcxGenLocation
	PortConnection As EPxcPortConnection
	IsConnected As Long
End Type

Public Enum KSJACK_SINK_CONNECTIONTYPE
	KSJACK_SINK_CONNECTIONTYPE_HDMI = 0 ' HDMI
	KSJACK_SINK_CONNECTIONTYPE_DISPLAYPORT = 1 ' DisplayPort
End Enum

Public Type KSJACK_SINK_INFORMATION
	ConnType As KSJACK_SINK_CONNECTIONTYPE ' Connection Type
	ManufacturerId As Integer ' Sink manufacturer ID
	ProductId As Integer ' Sink product ID
	AudioLatency As Integer ' Sink audio latency
	HDCPCapable As Long ' HDCP Support
	AICapable As Long ' ACP Packet, ISRC1, and ISRC2 Support
	SinkDescriptionLength As Byte ' Monitor/Sink name length
	SinkDescription(0 To 31) As Integer ' Monitor/Sink name
	PortId As LUID ' Video port identifier
End Type

Public Type KSJACK_DESCRIPTION2
	DeviceStateInfo As Long ' Top 16 bits: Report current device state, active, streaming, idle, or hardware not ready
	                        ' Bottom 16 bits: detailed reason to further explain state in top 16 bits
	JackCapabilities As Long ' Report jack capabilities such as jack presence detection capability 
	                         ' or dynamic format changing capability
End Type

Public Enum DataFlow
    In
    Out
End Enum

Public Enum PartType
    Connector
    Subunit
End Enum

Public Enum ConnectorType
    Unknown_Connector
    Physical_Internal '// Tangible connector inside the device or PC. i.e. you have to open the case (of the PC or device) to see it
    Physical_External '// Tangible connector external to the device of PC, i.e. a jack
    Software_IO       ' // Connector that you can send/receive data to/from
    Software_Fixed    ' // Connector that is for topology parsing only.  Is involved in a permanent connection to another Fixed connector.
    Network           ' // A connector over IP
End Enum

Public Type WAVEFORMATEX
	wFormatTag As Integer '* format type */
	nChannels As Integer '* number of channels (i.e. mono, stereo...) */
	nSamplesPerSec As Long '* sample rate */
	nAvgBytesPerSec As Long '* for buffer estimation */
	nBlockAlign As Integer '* block size of data */
	wBitsPerSample As Integer '* Number of bits per sample of mono data */
	cbSize As Integer '* The count in bytes of the size of
	               'As extra information (after cbSize)
End Type
Public Type WAVEFORMATEXTENSIBLE
	Format As WAVEFORMATEX
	Samples As Integer
	dwChannelMask As Long
	SubFormat As UUID
End Type

Public Enum AUDCLNT_BUFFERFLAGS
	AUDCLNT_BUFFERFLAGS_DATA_DISCONTINUITY = &H01
	AUDCLNT_BUFFERFLAGS_SILENT = &H02
	AUDCLNT_BUFFERFLAGS_TIMESTAMP_ERROR = &H04
End Enum

Public Enum AUDCLNT_STREAMOPTIONS
	AUDCLNT_STREAMOPTIONS_NONE = &H00
	AUDCLNT_STREAMOPTIONS_RAW = &H01
	AUDCLNT_STREAMOPTIONS_MATCH_FORMAT = &H02
End Enum

Public Enum AudioSessionState
	AudioSessionStateInactive = 0
	AudioSessionStateActive = 1
	AudioSessionStateExpired = 2
End Enum

Public Enum AUDCLNT_SHAREMODE
	AUDCLNT_SHAREMODE_SHARED
	AUDCLNT_SHAREMODE_EXCLUSIVE
End Enum

Public Enum AUDIO_STREAM_CATEGORY
	AudioCategory_Other = 0
	AudioCategory_ForegroundOnlyMedia = 1
	AudioCategory_BackgroundCapableMedia = 2
	AudioCategory_Communications = 3
	AudioCategory_Alerts = 4
	AudioCategory_SoundEffects = 5
	AudioCategory_GameEffects = 6
	AudioCategory_GameMedia = 7
	AudioCategory_GameChat = 8
	AudioCategory_Speech = 9
	AudioCategory_Movie = 10
	AudioCategory_Media = 11
End Enum

Public Type AudioClientProperties
	cbSize As Long
	bIsOffload As Long
	eCategory As AUDIO_STREAM_CATEGORY
	Options As AUDCLNT_STREAMOPTIONS
End Type

Public Type AudioClient3ActivationParams
	tracingContextId As UUID
End Type

Public Enum AudioSessionDisconnectReason
	DisconnectReasonDeviceRemoval
	DisconnectReasonServerShutdown
	DisconnectReasonFormatChanged
	DisconnectReasonSessionLogoff
	DisconnectReasonSessionDisconnected
	DisconnectReasonExclusiveModeOverride
End Enum

Public Enum EndpointConnectorType
	eHostProcessConnector
	eOffloadConnector
	eLoopbackConnector
	eKeywordDetectorConnector
	eConnectorCount
End Enum

Public Type AUDIO_ENDPOINT_SHARED_CREATE_PARAMS
	' The size of the structure.
	u32Size As Long
	' SessionId
	u32TSSessionId As Long
	' Target endpoint connector type
	targetEndpointConnectorType As EndpointConnectorType
	' The format of the endpoint.
	wfxDeviceFormat As WAVEFORMATEX
End Type

Public Enum AE_POSITION_FLAGS
	'  POSITION_INVALID means that the position is invalid
	'  and should not be used.
	POSITION_INVALID = 0
	'  Position is valid. However there has been
	'  a disruption such as a glitch or state transition.
	'  This position is not correlated with the previous one.
	POSITION_DISCONTINUOUS = 1
	'  Position is valid. The previous packet
	'  and this packet aligns perfectly on the timeline.
	POSITION_CONTINUOUS = 2
	'  The QPC value associated with this position is not accurate
	'  within 300 Microseconds.
	POSITION_QPC_ERROR = 4
End Enum

Public Type AE_CURRENT_POSITION
	' Device position in frames.
	u64DevicePosition As LongLong
	' Stream position in frames used for capture to determine starting point.
	u64StreamPosition As LongLong
	' Current amount of padding (in frames) between the current position and the stream fill point.
	u64PaddingFrames As LongLong
	' Translated QPC Timer value taken at the time the frame position was checked.
	hnsQPCPosition As LongLong
	' Calculated value of the data rate at the point when position was set.
	f32FramesPerSecond As Double
	' Indicates the validity of the position information.
	Flag As AE_POSITION_FLAGS
End Type

Public Enum APO_BUFFER_FLAGS
	BUFFER_INVALID = 0
	BUFFER_VALID = 1
	BUFFER_SILENT = 2
End Enum

Public Type APO_CONNECTION_PROPERTY
	pBuffer As LongPtr
	u32ValidFrameCount As Long
	u32BufferFlags As APO_BUFFER_FLAGS
	u32Signature As Long
End Type

Public Enum AUDIO_CURVE_TYPE
	AUDIO_CURVE_TYPE_NONE = 0
	AUDIO_CURVE_TYPE_WINDOWS_FADE = 1
End Enum

Public Enum DeviceShareMode
	Shared
    Exclusive
End Enum


Public Const sCLSID_MMDeviceEnumerator = "new: {BCDE0395-E52F-467C-8E3D-C4579291692E}"
Public Const sCLSID_DeviceTopology = "new: {1DF639D0-5EC1-47AA-9379-828DC1AA8C59}"
Public Const sCLSID_PolicyConfigClient = "new: {870af99c-171d-4f9e-af0d-e63df40c2bc9}"
Public Const sCLSID_CPolicyConfigVistaClient = "new: {294935CE-F637-4E7C-A41B-AB255460B862}" 'VISTA ONLY


Public Const AUDIOCLOCK_CHARACTERISTIC_FIXED_FREQ = &H1

#End Region

#Region "mCoreAudio-Defs"
Public Function DEVINTERFACE_AUDIO_RENDER() As UUID
'{E6327CAD-DCEC-4949-AE8A-991E976A79D2}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE6327CAD, CInt(&HDCEC), CInt(&H4949), &HAE, &H8A, &H99, &H1E, &H97, &H6A, &H79, &HD2)
 DEVINTERFACE_AUDIO_RENDER = iid
End Function
Public Function DEVINTERFACE_AUDIO_CAPTURE() As UUID
'{2EEF81BE-33FA-4800-9670-1CD474972C3F}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2EEF81BE, CInt(&H33FA), CInt(&H4800), &H96, &H70, &H1C, &HD4, &H74, &H97, &H2C, &H3F)
 DEVINTERFACE_AUDIO_CAPTURE = iid
End Function
Public Function DEVINTERFACE_MIDI_OUTPUT() As UUID
'{6DC23320-AB33-4CE4-80D4-BBB3EBBF2814}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6DC23320, CInt(&HAB33), CInt(&H4CE4), &H80, &HD4, &HBB, &HB3, &HEB, &HBF, &H28, &H14)
 DEVINTERFACE_MIDI_OUTPUT = iid
End Function
Public Function DEVINTERFACE_MIDI_INPUT() As UUID
'{504BE32C-CCF6-4D2C-B73F-6F8B3747E22B}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H504BE32C, CInt(&HCCF6), CInt(&H4D2C), &HB7, &H3F, &H6F, &H8B, &H37, &H47, &HE2, &H2B)
 DEVINTERFACE_MIDI_INPUT = iid
End Function
Public Function EVENTCONTEXT_VOLUMESLIDER() As UUID
'{E2C2E9DE-09B1-4B04-84E5-07931225EE04}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE2C2E9DE, CInt(&H9B1), CInt(&H4B04), &H84, &HE5, &H7, &H93, &H12, &H25, &HEE, &H4)
 EVENTCONTEXT_VOLUMESLIDER = iid
End Function

Public Function IID_IMMNotificationClient() As UUID
'{7991EEC9-7E89-4D85-8390-6C703CEC60C0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7991EEC9, CInt(&H7E89), CInt(&H4D85), &H83, &H90, &H6C, &H70, &H3C, &HEC, &H60, &HC0)
IID_IMMNotificationClient = iid
End Function
Public Function IID_IMMDevice() As UUID
'{D666063F-1587-4E43-81F1-B948E807363F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD666063F, CInt(&H1587), CInt(&H4E43), &H81, &HF1, &HB9, &H48, &HE8, &H7, &H36, &H3F)
IID_IMMDevice = iid
End Function
Public Function IID_IMMDeviceCollection() As UUID
'{0BD7A1BE-7A1A-44DB-8397-CC5392387B5E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBD7A1BE, CInt(&H7A1A), CInt(&H44DB), &H83, &H97, &HCC, &H53, &H92, &H38, &H7B, &H5E)
IID_IMMDeviceCollection = iid
End Function
Public Function IID_IMMEndpoint() As UUID
'{1BE09788-6894-4089-8586-9A2A6C265AC5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1BE09788, CInt(&H6894), CInt(&H4089), &H85, &H86, &H9A, &H2A, &H6C, &H26, &H5A, &HC5)
IID_IMMEndpoint = iid
End Function
Public Function IID_IMMDeviceEnumerator() As UUID
'{A95664D2-9614-4F35-A746-DE8DB63617E6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA95664D2, CInt(&H9614), CInt(&H4F35), &HA7, &H46, &HDE, &H8D, &HB6, &H36, &H17, &HE6)
IID_IMMDeviceEnumerator = iid
End Function
Public Function IID_IMMDeviceActivator() As UUID
'{3B0D0EA4-D0A9-4B0E-935B-09516746FAC0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3B0D0EA4, CInt(&HD0A9), CInt(&H4B0E), &H93, &H5B, &H9, &H51, &H67, &H46, &HFA, &HC0)
IID_IMMDeviceActivator = iid
End Function
Public Function IID_IActivateAudioInterfaceCompletionHandler() As UUID
'{41D949AB-9862-444A-80F6-C261334DA5EB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H41D949AB, CInt(&H9862), CInt(&H444A), &H80, &HF6, &HC2, &H61, &H33, &H4D, &HA5, &HEB)
IID_IActivateAudioInterfaceCompletionHandler = iid
End Function
Public Function IID_IActivateAudioInterfaceAsyncOperation() As UUID
'{72A22D78-CDE4-431D-B8CC-843A71199B6D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H72A22D78, CInt(&HCDE4), CInt(&H431D), &HB8, &HCC, &H84, &H3A, &H71, &H19, &H9B, &H6D)
IID_IActivateAudioInterfaceAsyncOperation = iid
End Function
Public Function IID_IAudioEndpointVolumeCallback() As UUID
'{657804FA-D6AD-4496-8A60-352752AF4F89}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H657804FA, CInt(&HD6AD), CInt(&H4496), &H8A, &H60, &H35, &H27, &H52, &HAF, &H4F, &H89)
IID_IAudioEndpointVolumeCallback = iid
End Function
Public Function IID_IAudioEndpointVolume() As UUID
'{5CDF2C82-841E-4546-9722-0CF74078229A}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5CDF2C82, CInt(&H841E), CInt(&H4546), &H97, &H22, &HC, &HF7, &H40, &H78, &H22, &H9A)
IID_IAudioEndpointVolume = iid
End Function
Public Function IID_IAudioEndpointVolumeEx() As UUID
'{66E11784-F695-4F28-A505-A7080081A78F}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H66E11784, CInt(&HF695), CInt(&H4F28), &HA5, &H5, &HA7, &H8, &H0, &H81, &HA7, &H8F)
 IID_IAudioEndpointVolumeEx = iid
End Function
Public Function IID_IAudioMeterInformation() As UUID
'{C02216F6-8C67-4B5B-9D00-D008E73E0064}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC02216F6, CInt(&H8C67), CInt(&H4B5B), &H9D, &H0, &HD0, &H8, &HE7, &H3E, &H0, &H64)
IID_IAudioMeterInformation = iid
End Function
Public Function IID_IAudioEndpointFormatControl() As UUID
'{784CFD40-9F89-456E-A1A6-873B006A664E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H784CFD40, CInt(&H9F89), CInt(&H456E), &HA1, &HA6, &H87, &H3B, &H0, &H6A, &H66, &H4E)
IID_IAudioEndpointFormatControl = iid
End Function
Public Function IID_IKsControl() As UUID
'{28F54685-06FD-11D2-B27A-00A0C9223196}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H28F54685, CInt(&H6FD), CInt(&H11D2), &HB2, &H7A, &H0, &HA0, &HC9, &H22, &H31, &H96)
IID_IKsControl = iid
End Function
Public Function IID_IAudioVolumeLevel() As UUID
'{7FB7B48F-531D-44A2-BCB3-5AD5A134B3DC}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7FB7B48F, CInt(&H531D), CInt(&H44A2), &HBC, &HB3, &H5A, &HD5, &HA1, &H34, &HB3, &HDC)
IID_IAudioVolumeLevel = iid
End Function
Public Function IID_IAudioChannelConfig() As UUID
'{BB11C46F-EC28-493C-B88A-5DB88062CE98}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBB11C46F, CInt(&HEC28), CInt(&H493C), &HB8, &H8A, &H5D, &HB8, &H80, &H62, &HCE, &H98)
IID_IAudioChannelConfig = iid
End Function
Public Function IID_IAudioLoudness() As UUID
'{7D8B1437-DD53-4350-9C1B-1EE2890BD938}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7D8B1437, CInt(&HDD53), CInt(&H4350), &H9C, &H1B, &H1E, &HE2, &H89, &HB, &HD9, &H38)
IID_IAudioLoudness = iid
End Function
Public Function IID_IAudioInputSelector() As UUID
'{4F03DC02-5E6E-4653-8F72-A030C123D598}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4F03DC02, CInt(&H5E6E), CInt(&H4653), &H8F, &H72, &HA0, &H30, &HC1, &H23, &HD5, &H98)
IID_IAudioInputSelector = iid
End Function
Public Function IID_IAudioOutputSelector() As UUID
'{BB515F69-94A7-429e-8B9C-271B3F11A3AB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBB515F69, CInt(&H94A7), CInt(&H429E), &H8B, &H9C, &H27, &H1B, &H3F, &H11, &HA3, &HAB)
IID_IAudioOutputSelector = iid
End Function
Public Function IID_IAudioMute() As UUID
'{DF45AEEA-B74A-4B6B-AFAD-2366B6AA012E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDF45AEEA, CInt(&HB74A), CInt(&H4B6B), &HAF, &HAD, &H23, &H66, &HB6, &HAA, &H1, &H2E)
IID_IAudioMute = iid
End Function
Public Function IID_IPerChannelDbLevel() As UUID
'{C2F8E001-F205-4BC9-99BC-C13B1E048CCB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC2F8E001, CInt(&HF205), CInt(&H4BC9), &H99, &HBC, &HC1, &H3B, &H1E, &H4, &H8C, &HCB)
IID_IPerChannelDbLevel = iid
End Function
Public Function IID_IAudioBass() As UUID
'{A2B1A1D9-4DB3-425D-A2B2-BD335CB3E2E5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA2B1A1D9, CInt(&H4DB3), CInt(&H425D), &HA2, &HB2, &HBD, &H33, &H5C, &HB3, &HE2, &HE5)
IID_IAudioBass = iid
End Function
Public Function IID_IAudioMidrange() As UUID
'{5E54B6D7-B44B-40D9-9A9E-E691D9CE6EDF}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5E54B6D7, CInt(&HB44B), CInt(&H40D9), &H9A, &H9E, &HE6, &H91, &HD9, &HCE, &H6E, &HDF)
IID_IAudioMidrange = iid
End Function
Public Function IID_IAudioTreble() As UUID
'{0A717812-694E-4907-B74B-BAFA5CFDCA7B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA717812, CInt(&H694E), CInt(&H4907), &HB7, &H4B, &HBA, &HFA, &H5C, &HFD, &HCA, &H7B)
IID_IAudioTreble = iid
End Function
Public Function IID_IAudioAutoGainControl() As UUID
'{85401FD4-6DE4-4b9d-9869-2D6753A82F3C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H85401FD4, CInt(&H6DE4), CInt(&H4B9D), &H98, &H69, &H2D, &H67, &H53, &HA8, &H2F, &H3C)
IID_IAudioAutoGainControl = iid
End Function
Public Function IID_IAudioPeakMeter() As UUID
'{DD79923C-0599-45e0-B8B6-C8DF7DB6E796}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDD79923C, CInt(&H599), CInt(&H45E0), &HB8, &HB6, &HC8, &HDF, &H7D, &HB6, &HE7, &H96)
IID_IAudioPeakMeter = iid
End Function
Public Function IID_IDeviceSpecificProperty() As UUID
'{3B22BCBF-2586-4af0-8583-205D391B807C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3B22BCBF, CInt(&H2586), CInt(&H4AF0), &H85, &H83, &H20, &H5D, &H39, &H1B, &H80, &H7C)
IID_IDeviceSpecificProperty = iid
End Function
Public Function IID_IKsFormatSupport() As UUID
'{3CB4A69D-BB6F-4D2B-95B7-452D2C155DB5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3CB4A69D, CInt(&HBB6F), CInt(&H4D2B), &H95, &HB7, &H45, &H2D, &H2C, &H15, &H5D, &HB5)
IID_IKsFormatSupport = iid
End Function
Public Function IID_IKsJackDescription() As UUID
'{4509F757-2D46-4637-8E62-CE7DB944F57B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4509F757, CInt(&H2D46), CInt(&H4637), &H8E, &H62, &HCE, &H7D, &HB9, &H44, &HF5, &H7B)
IID_IKsJackDescription = iid
End Function
Public Function IID_IKsJackDescription2() As UUID
'{478F3A9B-E0C9-4827-9228-6F5505FFE76A}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H478F3A9B, CInt(&HE0C9), CInt(&H4827), &H92, &H28, &H6F, &H55, &H5, &HFF, &HE7, &H6A)
IID_IKsJackDescription2 = iid
End Function
Public Function IID_IKsJackSinkInformation() As UUID
'{D9BD72ED-290F-4581-9FF3-61027A8FE532}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD9BD72ED, CInt(&H290F), CInt(&H4581), &H9F, &HF3, &H61, &H2, &H7A, &H8F, &HE5, &H32)
IID_IKsJackSinkInformation = iid
End Function
Public Function IID_IKsJackContainerId() As UUID
'{C99AF463-D629-4EC4-8C00-E54D68154248}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC99AF463, CInt(&HD629), CInt(&H4EC4), &H8C, &H0, &HE5, &H4D, &H68, &H15, &H42, &H48)
IID_IKsJackContainerId = iid
End Function
Public Function IID_IPartsList() As UUID
'{6DAA848C-5EB0-45CC-AEA5-998A2CDA1FFB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6DAA848C, CInt(&H5EB0), CInt(&H45CC), &HAE, &HA5, &H99, &H8A, &H2C, &HDA, &H1F, &HFB)
IID_IPartsList = iid
End Function
Public Function IID_IPart() As UUID
'{AE2DE0E4-5BCA-4F2D-AA46-5D13F8FDB3A9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAE2DE0E4, CInt(&H5BCA), CInt(&H4F2D), &HAA, &H46, &H5D, &H13, &HF8, &HFD, &HB3, &HA9)
IID_IPart = iid
End Function
Public Function IID_IConnector() As UUID
'{9c2c4058-23f5-41de-877a-df3af236a09e}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9C2C4058, CInt(&H23F5), CInt(&H41DE), &H87, &H7A, &HDF, &H3A, &HF2, &H36, &HA0, &H9E)
IID_IConnector = iid
End Function
Public Function IID_ISubunit() As UUID
'{82149A85-DBA6-4487-86BB-EA8F7FEFCC71}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H82149A85, CInt(&HDBA6), CInt(&H4487), &H86, &HBB, &HEA, &H8F, &H7F, &HEF, &HCC, &H71)
IID_ISubunit = iid
End Function
Public Function IID_IControlInterface() As UUID
'{45d37c3f-5140-444a-ae24-400789f3cbf3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H45D37C3F, CInt(&H5140), CInt(&H444A), &HAE, &H24, &H40, &H7, &H89, &HF3, &HCB, &HF3)
IID_IControlInterface = iid
End Function
Public Function IID_IControlChangeNotify() As UUID
'{A09513ED-C709-4d21-BD7B-5F34C47F3947}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA09513ED, CInt(&HC709), CInt(&H4D21), &HBD, &H7B, &H5F, &H34, &HC4, &H7F, &H39, &H47)
IID_IControlChangeNotify = iid
End Function
Public Function IID_IDeviceTopology() As UUID
'{2A07407E-6497-4A18-9787-32F79BD0D98F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2A07407E, CInt(&H6497), CInt(&H4A18), &H97, &H87, &H32, &HF7, &H9B, &HD0, &HD9, &H8F)
IID_IDeviceTopology = iid
End Function
Public Function IID_IAudioClient() As UUID
'{1CB9AD4C-DBFA-4c32-B178-C2F568A703B2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1CB9AD4C, CInt(&HDBFA), CInt(&H4C32), &HB1, &H78, &HC2, &HF5, &H68, &HA7, &H3, &HB2)
IID_IAudioClient = iid
End Function
Public Function IID_IAudioClient2() As UUID
'{726778CD-F60A-4eda-82DE-E47610CD78AA}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H726778CD, CInt(&HF60A), CInt(&H4EDA), &H82, &HDE, &HE4, &H76, &H10, &HCD, &H78, &HAA)
IID_IAudioClient2 = iid
End Function
Public Function IID_IAudioClient3() As UUID
'{7ED4EE07-8E67-4CD4-8C1A-2B7A5987AD42}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7ED4EE07, CInt(&H8E67), CInt(&H4CD4), &H8C, &H1A, &H2B, &H7A, &H59, &H87, &HAD, &H42)
IID_IAudioClient3 = iid
End Function
Public Function IID_IAudioRenderClient() As UUID
'{F294ACFC-3146-4483-A7BF-ADDCA7C260E2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF294ACFC, CInt(&H3146), CInt(&H4483), &HA7, &HBF, &HAD, &HDC, &HA7, &HC2, &H60, &HE2)
IID_IAudioRenderClient = iid
End Function
Public Function IID_IAudioCaptureClient() As UUID
'{C8ADBD64-E71E-48a0-A4DE-185C395CD317}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC8ADBD64, CInt(&HE71E), CInt(&H48A0), &HA4, &HDE, &H18, &H5C, &H39, &H5C, &HD3, &H17)
IID_IAudioCaptureClient = iid
End Function
Public Function IID_IAudioClock() As UUID
'{CD63314F-3FBA-4a1b-812C-EF96358728E7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCD63314F, CInt(&H3FBA), CInt(&H4A1B), &H81, &H2C, &HEF, &H96, &H35, &H87, &H28, &HE7)
IID_IAudioClock = iid
End Function
Public Function IID_IAudioClock2() As UUID
'{6f49ff73-6727-49ac-a008-d98cf5e70048}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6F49FF73, CInt(&H6727), CInt(&H49AC), &HA0, &H8, &HD9, &H8C, &HF5, &HE7, &H0, &H48)
IID_IAudioClock2 = iid
End Function
Public Function IID_IAudioClockAdjustment() As UUID
'{f6e4c0a0-46d9-4fb8-be21-57a3ef2b626c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF6E4C0A0, CInt(&H46D9), CInt(&H4FB8), &HBE, &H21, &H57, &HA3, &HEF, &H2B, &H62, &H6C)
IID_IAudioClockAdjustment = iid
End Function
Public Function IID_ISimpleAudioVolume() As UUID
'{87CE5498-68D6-44E5-9215-6DA47EF883D8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H87CE5498, CInt(&H68D6), CInt(&H44E5), &H92, &H15, &H6D, &HA4, &H7E, &HF8, &H83, &HD8)
IID_ISimpleAudioVolume = iid
End Function
Public Function IID_IAudioStreamVolume() As UUID
'{93014887-242D-4068-8A15-CF5E93B90FE3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H93014887, CInt(&H242D), CInt(&H4068), &H8A, &H15, &HCF, &H5E, &H93, &HB9, &HF, &HE3)
IID_IAudioStreamVolume = iid
End Function
Public Function IID_IChannelAudioVolume() As UUID
'{1C158861-B533-4B30-B1CF-E853E51C59B8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1C158861, CInt(&HB533), CInt(&H4B30), &HB1, &HCF, &HE8, &H53, &HE5, &H1C, &H59, &HB8)
IID_IChannelAudioVolume = iid
End Function
Public Function IID_IAudioSessionEvents() As UUID
'{24918ACC-64B3-37C1-8CA9-74A66E9957A8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H24918ACC, CInt(&H64B3), CInt(&H37C1), &H8C, &HA9, &H74, &HA6, &H6E, &H99, &H57, &HA8)
IID_IAudioSessionEvents = iid
End Function
Public Function IID_IAudioSessionControl() As UUID
'{F4B1A599-7266-4319-A8CA-E70ACB11E8CD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF4B1A599, CInt(&H7266), CInt(&H4319), &HA8, &HCA, &HE7, &HA, &HCB, &H11, &HE8, &HCD)
IID_IAudioSessionControl = iid
End Function
Public Function IID_IAudioSessionControl2() As UUID
'{bfb7ff88-7239-4fc9-8fa2-07c950be9c6d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBFB7FF88, CInt(&H7239), CInt(&H4FC9), &H8F, &HA2, &H7, &HC9, &H50, &HBE, &H9C, &H6D)
IID_IAudioSessionControl2 = iid
End Function
Public Function IID_IAudioSessionManager() As UUID
'{BFA971F1-4D5E-40BB-935E-967039BFBEE4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBFA971F1, CInt(&H4D5E), CInt(&H40BB), &H93, &H5E, &H96, &H70, &H39, &HBF, &HBE, &HE4)
IID_IAudioSessionManager = iid
End Function
Public Function IID_IAudioVolumeDuckNotification() As UUID
'{C3B284D4-6D39-4359-B3CF-B56DDB3BB39C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC3B284D4, CInt(&H6D39), CInt(&H4359), &HB3, &HCF, &HB5, &H6D, &HDB, &H3B, &HB3, &H9C)
IID_IAudioVolumeDuckNotification = iid
End Function
Public Function IID_IAudioSessionNotification() As UUID
'{641DD20B-4D41-49CC-ABA3-174B9477BB08}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H641DD20B, CInt(&H4D41), CInt(&H49CC), &HAB, &HA3, &H17, &H4B, &H94, &H77, &HBB, &H8)
IID_IAudioSessionNotification = iid
End Function
Public Function IID_IAudioSessionEnumerator() As UUID
'{E2F5BB11-0570-40CA-ACDD-3AA01277DEE8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE2F5BB11, CInt(&H570), CInt(&H40CA), &HAC, &HDD, &H3A, &HA0, &H12, &H77, &HDE, &HE8)
IID_IAudioSessionEnumerator = iid
End Function
Public Function IID_IAudioSessionManager2() As UUID
'{77AA99A0-1BD6-484F-8BC7-2C654C9A9B6F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H77AA99A0, CInt(&H1BD6), CInt(&H484F), &H8B, &HC7, &H2C, &H65, &H4C, &H9A, &H9B, &H6F)
IID_IAudioSessionManager2 = iid
End Function
Public Function IID_IAudioLfxControl() As UUID
'{076A6922-D802-4F83-BAF6-409D9CA11BFE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H76A6922, CInt(&HD802), CInt(&H4F83), &HBA, &HF6, &H40, &H9D, &H9C, &HA1, &H1B, &HFE)
IID_IAudioLfxControl = iid
End Function
Public Function IID_IAudioEndpointLastBufferControl() As UUID
'{F8520DD3-8F9D-4437-9861-62F584C33DD6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF8520DD3, CInt(&H8F9D), CInt(&H4437), &H98, &H61, &H62, &HF5, &H84, &HC3, &H3D, &HD6)
IID_IAudioEndpointLastBufferControl = iid
End Function
Public Function IID_IAudioSystemEffects() As UUID
'{5FA00F27-ADD6-499a-8A9D-6B98521FA75B}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5FA00F27, CInt(&HADD6), CInt(&H499A), &H8A, &H9D, &H6B, &H98, &H52, &H1F, &HA7, &H5B)
IID_IAudioSystemEffects = iid
End Function
Public Function IID_IAudioSystemEffects2() As UUID
'{BAFE99D2-7436-44CE-9E0E-4D89AFBFFF56}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBAFE99D2, CInt(&H7436), CInt(&H44CE), &H9E, &HE, &H4D, &H89, &HAF, &HBF, &HFF, &H56)
IID_IAudioSystemEffects2 = iid
End Function
Public Function IID_IAudioEndpointOffloadStreamVolume() As UUID
'{64F1DD49-71CA-4281-8672-3A9EDDD1D0B6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H64F1DD49, CInt(&H71CA), CInt(&H4281), &H86, &H72, &H3A, &H9E, &HDD, &HD1, &HD0, &HB6)
IID_IAudioEndpointOffloadStreamVolume = iid
End Function
Public Function IID_IAudioEndpointOffloadStreamMute() As UUID
'{DFE21355-5EC2-40E0-8D6B-710AC3C00249}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDFE21355, CInt(&H5EC2), CInt(&H40E0), &H8D, &H6B, &H71, &HA, &HC3, &HC0, &H2, &H49)
IID_IAudioEndpointOffloadStreamMute = iid
End Function
Public Function IID_IAudioEndpointOffloadStreamMeter() As UUID
'{E1546DCE-9DD1-418B-9AB2-348CED161C86}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE1546DCE, CInt(&H9DD1), CInt(&H418B), &H9A, &HB2, &H34, &H8C, &HED, &H16, &H1C, &H86)
IID_IAudioEndpointOffloadStreamMeter = iid
End Function
Public Function IID_IHardwareAudioEngineBase() As UUID
'{EDDCE3E4-F3C1-453a-B461-223563CBD886}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEDDCE3E4, CInt(&HF3C1), CInt(&H453A), &HB4, &H61, &H22, &H35, &H63, &HCB, &HD8, &H86)
IID_IHardwareAudioEngineBase = iid
End Function







Public Function PKEY_AudioEndpoint_FormFactor() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 0)
PKEY_AudioEndpoint_FormFactor = pkk
End Function
Public Function PKEY_AudioEndpoint_ControlPanelPageProvider() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 1)
PKEY_AudioEndpoint_ControlPanelPageProvider = pkk
End Function
Public Function PKEY_AudioEndpoint_Association() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 2)
PKEY_AudioEndpoint_Association = pkk
End Function
Public Function PKEY_AudioEndpoint_PhysicalSpeakers() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 3)
PKEY_AudioEndpoint_PhysicalSpeakers = pkk
End Function
Public Function PKEY_AudioEndpoint_GUID() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 4)
PKEY_AudioEndpoint_GUID = pkk
End Function
Public Function PKEY_AudioEndpoint_Disable_SysFx() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 5)
PKEY_AudioEndpoint_Disable_SysFx = pkk
End Function
Public Function PKEY_AudioEndpoint_FullRangeSpeakers() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 6)
PKEY_AudioEndpoint_FullRangeSpeakers = pkk
End Function
Public Function PKEY_AudioEndpoint_Supports_EventDriven_Mode() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 7)
PKEY_AudioEndpoint_Supports_EventDriven_Mode = pkk
End Function
Public Function PKEY_AudioEndpoint_JackSubType() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 8)
PKEY_AudioEndpoint_JackSubType = pkk
End Function
Public Function PKEY_AudioEndpoint_Default_VolumeInDb() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H1DA5D803, &HD492, &H4EDD, &H8C, &H23, &HE0, &HC0, &HFF, &HEE, &H7F, &HE, 9)
PKEY_AudioEndpoint_Default_VolumeInDb = pkk
End Function
Public Function PKEY_AudioEngine_DeviceFormat() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HF19F064D, &H82C, &H4E27, &HBC, &H73, &H68, &H82, &HA1, &HBB, &H8E, &H4C, 0)
PKEY_AudioEngine_DeviceFormat = pkk
End Function
Public Function PKEY_AudioEngine_OEMFormat() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HE4870E26, &H3CC5, &H4CD2, &HBA, &H46, &HCA, &HA, &H9A, &H70, &HED, &H4, 3)
PKEY_AudioEngine_OEMFormat = pkk
End Function
Public Function PKEY_AudioEndpointLogo_IconEffects() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HF1AB780D, &H2010, &H4ED3, &HA3, &HA6, &H8B, &H87, &HF0, &HF0, &HC4, &H76, 0)
PKEY_AudioEndpointLogo_IconEffects = pkk
End Function
Public Function PKEY_AudioEndpointLogo_IconPath() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &HF1AB780D, &H2010, &H4ED3, &HA3, &HA6, &H8B, &H87, &HF0, &HF0, &HC4, &H76, 1)
PKEY_AudioEndpointLogo_IconPath = pkk
End Function
Public Function PKEY_AudioEndpointSettings_MenuText() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H14242002, &H320, &H4DE4, &H95, &H55, &HA7, &HD8, &H2B, &H73, &HC2, &H86, 0)
PKEY_AudioEndpointSettings_MenuText = pkk
End Function
Public Function PKEY_AudioEndpointSettings_LaunchContract() As PROPERTYKEY
Static pkk As PROPERTYKEY
 If (pkk.fmtid.Data1 = 0&) Then Call DEFINE_PROPERTYKEY(pkk, &H14242002, &H320, &H4DE4, &H95, &H55, &HA7, &HD8, &H2B, &H73, &HC2, &H86, 1)
PKEY_AudioEndpointSettings_LaunchContract = pkk
End Function

Public Function GetCAStatusStr(lStatus As DEVICE_STATE) As String
Select Case lStatus
    Case DEVICE_STATE_ACTIVE: GetCAStatusStr = "Active"
    Case DEVICE_STATE_DISABLED: GetCAStatusStr = "Disabled"
    Case DEVICE_STATE_NOTPRESENT: GetCAStatusStr = "Not present"
    Case DEVICE_STATE_UNPLUGGED: GetCAStatusStr = "Unplugged"
    Case Else: GetCAStatusStr = "<invalid>"
End Select
End Function
Public Function GetCARoleStr(rl As ERole) As String
Select Case rl
    Case eCommunications: GetCARoleStr = "Communications"
    Case eConsole: GetCARoleStr = "Console"
    Case eMultimedia: GetCARoleStr = "Multimedia"
End Select
End Function
Public Function GetCAFlowStr(fl As EDataFlow) As String
Select Case fl
    Case eCapture: GetCAFlowStr = "Capture"
    Case eRender: GetCAFlowStr = "Render"
    Case eAll: GetCAFlowStr = "All"
End Select
End Function
#End Region
End Module