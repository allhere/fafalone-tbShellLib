'tbShellLib - slNetcon :: Network Connections

    [ InterfaceId ("C08956A0-1CD3-11D1-B1C5-00805FC1270E") ]
    Interface IEnumNetConnection Extends stdole.IUnknown
        [ PreserveSig ]
        /* voffset &H000C*/ Function Next(ByVal celt As Long, ByRef rgelt As INetConnection, ByRef pceltFetched As Long) As Long
        /* voffset &H0010*/ Sub Skip(ByVal celt As Long)
        /* voffset &H0014*/ Sub Reset()
        /* voffset &H0018*/ Sub Clone(ByRef ppenum As IEnumNetConnection)
    End Interface

    [ InterfaceId ("C08956A1-1CD3-11D1-B1C5-00805FC1270E") ]
    Interface INetConnection Extends stdole.IUnknown
        [ PreserveSig ]
        /* voffset &H000C*/ Function Connect() As Long
        [ PreserveSig ]
        /* voffset &H0010*/ Function Disconnect() As Long
        [ PreserveSig ]
        /* voffset &H0014*/ Function Delete() As Long
        [ PreserveSig ]
        /* voffset &H0018*/ Function Duplicate(ByVal pszwDuplicateName As LongPtr, ByRef ppCon As INetConnection) As Long
        [ PreserveSig ]
        /* voffset &H001C*/ Function GetProperties(ByRef ppProps As LongPtr) As Long
        [ PreserveSig ]
        /* voffset &H0020*/ Function GetUiObjectClassId(ByRef pclsid As UUID) As Long
        [ PreserveSig ]
        /* voffset &H0024*/ Function Rename(ByVal pszwNewName As LongPtr) As Long
    End Interface


    [ InterfaceId ("C08956A2-1CD3-11D1-B1C5-00805FC1270E") ]
    Interface INetConnectionManager Extends stdole.IUnknown
        /* voffset &H000C*/ Sub EnumConnections(ByVal flags As NETCONMGR_ENUM_FLAGS, ByRef ppenum As IEnumNetConnection)
    End Interface

    [ InterfaceId ("C08956A3-1CD3-11D1-B1C5-00805FC1270E") ]
    Interface INetConnectionConnectUi Extends stdole.IUnknown
        /* voffset &H000C*/ Sub SetConnection(ByVal pCon As INetConnection)
        [ PreserveSig ]
        /* voffset &H0010*/ Function Connect(ByVal hwndParent As LongPtr, ByVal dwFlags As Long) As Long
        [ PreserveSig ]
        /* voffset &H0014*/ Function Disconnect(ByVal hwndParent As LongPtr, ByVal dwFlags As Long) As Long
    End Interface

    [ InterfaceId ("C08956B0-1CD3-11D1-B1C5-00805FC1270E") ]
    Interface IEnumNetSharingPortMapping Extends stdole.IUnknown
        [ PreserveSig ]
        /* voffset &H000C*/ Function Next(ByVal celt As Long, ByRef rgvar As Variant, ByRef pceltFetched As Long) As Long
        /* voffset &H0010*/ Sub Skip(ByVal celt As Long)
        /* voffset &H0014*/ Sub Reset()
        /* voffset &H0018*/ Sub Clone(ByRef ppenum As IEnumNetSharingPortMapping)
    End Interface


   [ InterfaceId ("24B7E9B5-E38F-4685-851B-00892CF5F940") ]
    '[ DualInterface]
    Interface INetSharingPortMappingProps Extends IDispatch
        [ DispId (1) ]
        [ Description ("property Name") ]
        /* voffset &H001C*/ Property Get Name() As String
        [ DispId (2) ]
        [ Description ("property IPProtocol") ]
        /* voffset &H0020*/ Property Get IPProtocol() As Byte
        [ DispId (3) ]
        [ Description ("property ExternalPort") ]
        /* voffset &H0024*/ Property Get ExternalPort() As Long
        [ DispId (4) ]
        [ Description ("property InternalPort") ]
        /* voffset &H0028*/ Property Get InternalPort() As Long
        [ DispId (5) ]
        [ Description ("property Options") ]
        /* voffset &H002C*/ Property Get Options() As Long
        [ DispId (6) ]
        [ Description ("property TargetName") ]
        /* voffset &H0030*/ Property Get TargetName() As String
        [ DispId (7) ]
        [ Description ("property TargetIPAddress") ]
        /* voffset &H0034*/ Property Get TargetIPAddress() As String
        [ DispId (8) ]
        [ Description ("property Enabled") ]
        /* voffset &H0038*/ Property Get Enabled() As Boolean
    End Interface

    [ InterfaceId ("C08956B1-1CD3-11D1-B1C5-00805FC1270E") ]
    '[ DualInterface]
    Interface INetSharingPortMapping Extends IDispatch
        [ DispId (1) ]
        [ Description ("method Disable") ]
        /* voffset &H001C*/ Sub Disable()
        [ DispId (2) ]
        [ Description ("method Enable") ]
        /* voffset &H0020*/ Sub Enable()
        [ DispId (3) ]
        [ Description ("property Properties") ]
        /* voffset &H0024*/ Property Get Properties() As INetSharingPortMappingProps
        [ DispId (4) ]
        [ Description ("method Delete") ]
        /* voffset &H0028*/ Sub Delete()
    End Interface

    [ InterfaceId ("02E4A2DE-DA20-4E34-89C8-AC22275A010B") ]
    '[ DualInterface]
    [ Description ("INetSharingPortMappingCollection Interface") ]
    Interface INetSharingPortMappingCollection Extends IDispatch
        [ DispId (0), Restricted ]
        [ Description ("property _NewEnum:  gets item enumerator") ]
        /* voffset &H001C*/ Property Get _NewEnum() As IUnknown
        [ DispId (1) ]
        [ Description ("property Count") ]
        /* voffset &H0020*/ Property Get Count() As Long
    End Interface

    [ InterfaceId ("F4277C95-CE5B-463D-8167-5662D9BCAA72") ]
    '[ DualInterface]
    [ Description ("INetConnectionProps Interface") ]
    Interface INetConnectionProps Extends IDispatch
        [ DispId (1) ]
        [ Description ("property Guid") ]
        /* voffset &H001C*/ Property Get guid() As String
        [ DispId (2) ]
        [ Description ("property Name") ]
        /* voffset &H0020*/ Property Get Name() As String
        [ DispId (3) ]
        [ Description ("property DeviceName") ]
        /* voffset &H0024*/ Property Get DeviceName() As String
        [ DispId (4) ]
        [ Description ("property Status") ]
        /* voffset &H0028*/ Property Get Status() As NETCON_STATUS
        [ DispId (5) ]
        [ Description ("property MediaType") ]
        /* voffset &H002C*/ Property Get MediaType() As NETCON_MEDIATYPE
        [ DispId (6) ]
        [ Description ("property Characteristics") ]
        /* voffset &H0030*/ Property Get Characteristics() As Long
    End Interface

    [ InterfaceId ("C08956B6-1CD3-11D1-B1C5-00805FC1270E") ]
    '[ DualInterface]
    Interface INetSharingConfiguration Extends IDispatch
        [ DispId (1) ]
        [ Description ("property SharingEnabled") ]
        /* voffset &H001C*/ Property Get SharingEnabled() As Boolean
        [ DispId (2) ]
        [ Description ("property SharingConnectionType") ]
        /* voffset &H0020*/ Property Get SHARINGCONNECTIONTYPE() As SHARINGCONNECTIONTYPE
        [ DispId (3) ]
        [ Description ("method DisableSharing") ]
        /* voffset &H0024*/ Sub DisableSharing()
        [ DispId (4) ]
        [ Description ("method EnableSharing") ]
        /* voffset &H0028*/ Sub EnableSharing(ByVal type As SHARINGCONNECTIONTYPE)
        [ DispId (5) ]
        [ Description ("property InternetFirewallEnabled") ]
        /* voffset &H002C*/ Property Get InternetFirewallEnabled() As Boolean
        [ DispId (6) ]
        [ Description ("method DisableInternetFirewall") ]
        /* voffset &H0030*/ Sub DisableInternetFirewall()
        [ DispId (7) ]
        [ Description ("method EnableInternetFirewall") ]
        /* voffset &H0034*/ Sub EnableInternetFirewall()
        [ DispId (8) ]
        [ Description ("EnumPortMappings") ]
        /* voffset &H0038*/ Property Get EnumPortMappings(ByVal flags As SHARINGCONNECTION_ENUM_FLAGS) As INetSharingPortMappingCollection
        [ DispId (9) ]
        [ Description ("method AddPortMapping") ]
        /* voffset &H003C*/ Function AddPortMapping(ByVal bstrName As String, ByVal ucIPProtocol As Byte, ByVal usExternalPort As Integer, ByVal usInternalPort As Integer, ByVal dwOptions As Long, ByVal bstrTargetNameOrIPAddress As String, ByVal eTargetType As ICS_TARGETTYPE) As INetSharingPortMapping
        [ DispId (10) ]
        [ Description ("method RemovePortMapping") ]
        /* voffset &H0040*/ Sub RemovePortMapping(ByVal pMapping As INetSharingPortMapping)
    End Interface

    [ InterfaceId ("33C4643C-7811-46FA-A89A-768597BD7223") ]
    '[ DualInterface]
    [ Description ("INetSharingEveryConnectionCollection Interface") ]
    Interface INetSharingEveryConnectionCollection Extends IDispatch
        [ DispId (0), Restricted ]
        [ Description ("property _NewEnum:  gets item enumerator") ]
        /* voffset &H001C*/ Property Get _NewEnum() As IUnknown
        [ DispId (1) ]
        [ Description ("property Count") ]
        /* voffset &H0020*/ Property Get Count() As Long
    End Interface

    [ InterfaceId ("7D7A6355-F372-4971-A149-BFC927BE762A") ]
    '[ DualInterface]
    [ Description ("INetSharingPublicConnectionCollection Interface") ]
    Interface INetSharingPublicConnectionCollection Extends IDispatch
        [ DispId (0), Restricted ]
        [ Description ("property _NewEnum:  gets item enumerator") ]
        /* voffset &H001C*/ Property Get _NewEnum() As IUnknown
        [ DispId (1) ]
        [ Description ("property Count") ]
        /* voffset &H0020*/ Property Get Count() As Long
    End Interface

    [ InterfaceId ("38AE69E0-4409-402A-A2CB-E965C727F840") ]
    '[ DualInterface]
    [ Description ("INetSharingPrivateConnectionCollection Interface") ]
    Interface INetSharingPrivateConnectionCollection Extends IDispatch
        [ DispId (0), Restricted ]
        [ Description ("property _NewEnum:  gets item enumerator") ]
        /* voffset &H001C*/ Property Get _NewEnum() As IUnknown
        [ DispId (1) ]
        [ Description ("property Count") ]
        /* voffset &H0020*/ Property Get Count() As Long
    End Interface

    [ InterfaceId ("C08956B7-1CD3-11D1-B1C5-00805FC1270E") ]
    '[ DualInterface]
    Interface INetSharingManager Extends IDispatch
        [ DispId (1) ]
        [ Description ("property SharingInstalled") ]
        /* voffset &H001C*/ Property Get SharingInstalled() As Integer
        [ DispId (2) ]
        [ Description ("EnumPublicConnections") ]
        /* voffset &H0020*/ Property Get EnumPublicConnections(ByVal flags As SHARINGCONNECTION_ENUM_FLAGS) As INetSharingPublicConnectionCollection
        [ DispId (3) ]
        [ Description ("EnumPrivateConnections") ]
        /* voffset &H0024*/ Property Get EnumPrivateConnections(ByVal flags As SHARINGCONNECTION_ENUM_FLAGS) As INetSharingPrivateConnectionCollection
        [ DispId (6) ]
        [ Description ("INetSharingConfigurationForINetConnection") ]
        /* voffset &H0028*/ Property Get INetSharingConfigurationForINetConnection(ByVal pNetConnection As LongPtr) As INetSharingConfiguration
        [ DispId (7) ]
        [ Description ("EnumEveryConnection") ]
        /* voffset &H002C*/ Property Get EnumEveryConnection() As INetSharingEveryConnectionCollection
        [ DispId (8) ]
        [ Description ("NetConnectionProps") ]
        /* voffset &H0030*/ Property Get NetConnectionProps(ByVal pNetConnection As LongPtr) As INetConnectionProps
    End Interface


Module slNetcon

Public Enum NETCON_CHARACTERISTIC_FLAGS
	NCCF_NONE = &H0000 ' No special characteristics
	NCCF_ALL_USERS = &H0001 ' Connection is available to all users
	NCCF_ALLOW_DUPLICATION = &H0002 ' Connection is duplicable
	NCCF_ALLOW_REMOVAL = &H0004 ' Connection is removable
	NCCF_ALLOW_RENAME = &H0008 ' Connection can be renamed
	NCCF_INCOMING_ONLY = &H0020 ' Direction is "incoming" only
	NCCF_OUTGOING_ONLY = &H0040 ' Direction is "outgoing" only
	NCCF_BRANDED = &H0080 ' Icons are branded
	NCCF_SHARED = &H0100 ' Connection is shared
	NCCF_BRIDGED = &H0200 ' Connection is bridged
	NCCF_FIREWALLED = &H0400 ' Connection is firewalled
	NCCF_DEFAULT = &H0800 ' This is the default connection
	NCCF_HOMENET_CAPABLE = &H1000 ' The device supports home networking
	NCCF_SHARED_PRIVATE = &H2000 ' The connection is private (part of ICS)
	NCCF_QUARANTINED = &H4000 ' Connection is quarantined
	NCCF_RESERVED = &H8000 ' Unused
	NCCF_HOSTED_NETWORK = &H00010000 ' Connection is used as Hosted Network
	NCCF_VIRTUAL_STATION = &H00020000 ' Connection is used as Virtual WiFi Station
	NCCF_WIFI_DIRECT = &H00040000 ' Connection is a Wi-Fi Direct network
	NCCF_BLUETOOTH_MASK = &H000F0000 ' Bluetooth Characteristics
	NCCF_LAN_MASK = &H00F00000 ' LAN Characteristics
End Enum

Public Enum NETCON_STATUS
	NCS_DISCONNECTED
	NCS_CONNECTING
	NCS_CONNECTED
	NCS_DISCONNECTING
	NCS_HARDWARE_NOT_PRESENT
	NCS_HARDWARE_DISABLED
	NCS_HARDWARE_MALFUNCTION
	NCS_MEDIA_DISCONNECTED
	NCS_AUTHENTICATING
	NCS_AUTHENTICATION_SUCCEEDED
	NCS_AUTHENTICATION_FAILED
	NCS_INVALID_ADDRESS
	NCS_CREDENTIALS_REQUIRED
	NCS_ACTION_REQUIRED
	NCS_ACTION_REQUIRED_RETRY
	NCS_CONNECT_FAILED
End Enum

Public Enum NETCON_TYPE
	NCT_DIRECT_CONNECT 'deprecated and will be removed
	NCT_INBOUND = 1
	NCT_INTERNET
	NCT_LAN
	NCT_PHONE
	NCT_TUNNEL
	NCT_BRIDGE
End Enum

Public Enum NETCON_MEDIATYPE
	NCM_NONE
	NCM_DIRECT '// deprecated and will be removed
	NCM_ISDN = 2
	NCM_LAN
	NCM_PHONE
	NCM_TUNNEL
	NCM_PPPOE
	NCM_BRIDGE
	NCM_SHAREDACCESSHOST_LAN
	NCM_SHAREDACCESSHOST_RAS
End Enum

Public Type NETCON_PROPERTIES
	guidId As UUID
	pszwName As LongPtr '[string] LPWSTR
	pszwDeviceName As LongPtr '[string] LPWSTR
	Status As NETCON_STATUS
	MediaType As NETCON_MEDIATYPE
	dwCharacter As Long
	clsidThisObject As UUID
	clsidUiObject As UUID
End Type

Public Enum NETCONMGR_ENUM_FLAGS
	NCME_DEFAULT = &H0
	NCME_HIDDEN = &H1
End Enum

Public Enum NETCONUI_CONNECT_FLAGS
	NCUC_DEFAULT = &H0000
	NCUC_NO_UI = &H0001
	NCUC_ENABLE_DISABLE = &H0002
End Enum

Public Enum SHARINGCONNECTIONTYPE
	ICSSHARINGTYPE_PUBLIC = &H0
	ICSSHARINGTYPE_PRIVATE = 1
End Enum

Public Enum SHARINGCONNECTION_ENUM_FLAGS
	ICSSC_DEFAULT = &H0
	ICSSC_ENABLED = 1
End Enum

Public Enum ICS_TARGETTYPE
	ICSTT_NAME = &H0
	ICSTT_IPADDRESS = 1
End Enum

Public Const sCLSID_NetSharingManager = "new: {5C63C1AD-3956-4FF8-8486-40034758315B}"
Public Const sCLSID_ConnectionManager = "new: {BA126AD1-2166-11D1-B1D0-00805FC1270E}"

End Module