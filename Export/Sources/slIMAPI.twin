'tbShellLib - slIMAPI :: Image Mastering API
'Note: I was considering implementing IMAPI2 for DVD/HDDVD/BD, but it appears it's already VB-compatible and an available reference,
'      "Microsoft IMAPI2 Base Functionality" and "Microsoft IMAPI2 File System Image Creator"... if incompatibilities arise let me
'      know and I'll take another look at adding them.

    [ InterfaceId ("85AC9776-CA88-4CF2-894E-09598C078A41") ]
    [ OleAutomation (False) ]
    Interface IDiscRecorder Extends stdole.IUnknown
        /* voffset &H0018*/ Sub Init(ByRef pbyUniqueID As Byte, ByVal nulIDSize As Long, ByVal nulDriveNumber As Long)
        /* voffset &H0020*/ Function GetRecorderGUID(ByRef pbyUniqueID As Byte, ByVal ulBufferSize As Long) As Long
        /* voffset &H0028*/ Function GetRecorderType() As RECORDER_TYPES
        /* voffset &H0030*/ Sub GetDisplayNames(ByRef pbstrVendorID As String, ByRef pbstrProductID As String, ByRef pbstrRevision As String)
        /* voffset &H0038*/ Function GetBasePnPID() As String
        /* voffset &H0040*/ Function GetPath() As String
        /* voffset &H0048*/ Function GetRecorderProperties() As IPropertyStorage
        /* voffset &H0050*/ Sub SetRecorderProperties(ByVal pPropStg As IPropertyStorage)
        /* voffset &H0058*/ Function GetRecorderState() As RECORDER_STATE
        /* voffset &H0060*/ Sub OpenExclusive()
        /* voffset &H0068*/ Sub QueryMediaType(ByRef fMediaType As MEDIA_TYPES, ByRef fMediaFlags As MEDIA_FLAGS)
        /* voffset &H0070*/ Sub QueryMediaInfo(ByRef pbSessions As Byte, ByRef pbLastTrack As Byte, ByRef ulStartAddress As Long, ByRef ulNextWritable As Long, ByRef ulFreeBlocks As Long)
        /* voffset &H0078*/ Sub Eject()
        /* voffset &H0080*/ Sub Erase(ByVal bFullErase As Boolean)
        /* voffset &H0088*/ Sub Close()
    End Interface

    [ InterfaceId ("9B1921E1-54AC-11D3-9144-00104BA11C5E") ]
    [ OleAutomation (False) ]
    Interface IEnumDiscRecorders Extends stdole.IUnknown
        [ PreserveSig ]
        /* voffset &H0018*/ Function Next(ByVal cRecorders As Long, ByRef ppRecorder As IDiscRecorder, ByRef pcFetched As Long) As Long
        /* voffset &H0020*/ Sub Skip(ByVal cRecorders As Long)
        /* voffset &H0028*/ Sub Reset()
        /* voffset &H0030*/ Function Clone() As IEnumDiscRecorders
    End Interface

    [ InterfaceId ("DDF445E1-54BA-11D3-9144-00104BA11C5E") ]
    [ OleAutomation (False) ]
    Interface IEnumDiscMasterFormats Extends stdole.IUnknown
        [ PreserveSig ]
        /* voffset &H0018*/ Function Next(ByVal cFormats As Long, ByRef lpiidFormatID As UUID, ByRef pcFetched As Long) As Long
        /* voffset &H0020*/ Sub Skip(ByVal cFormats As Long)
        /* voffset &H0028*/ Sub Reset()
        /* voffset &H0030*/ Function Clone() As IEnumDiscMasterFormats
    End Interface

    [ InterfaceId ("E3BC42CD-4E5C-11D3-9144-00104BA11C5E") ]
    [ OleAutomation (False) ]
    Interface IRedbookDiscMaster Extends stdole.IUnknown
        /* voffset &H0018*/ Function GetTotalAudioTracks() As Long
        /* voffset &H0020*/ Function GetTotalAudioBlocks() As Long
        /* voffset &H0028*/ Function GetUsedAudioBlocks() As Long
        /* voffset &H0030*/ Function GetAvailableAudioTrackBlocks() As Long
        /* voffset &H0038*/ Function GetAudioBlockSize() As Long
        /* voffset &H0040*/ Sub CreateAudioTrack(ByVal nBlocks As Long)
        /* voffset &H0048*/ Sub AddAudioTrackBlocks(ByRef pby As Byte, ByVal cb As Long)
        /* voffset &H0050*/ Sub CloseAudioTrack()
    End Interface

    [ InterfaceId ("E3BC42CE-4E5C-11D3-9144-00104BA11C5E") ]
    [ OleAutomation (False) ]
    Interface IJolietDiscMaster Extends stdole.IUnknown
        /* voffset &H0018*/ Function GetTotalDataBlocks() As Long
        /* voffset &H0020*/ Function GetUsedDataBlocks() As Long
        /* voffset &H0028*/ Function GetDataBlockSize() As Long
        /* voffset &H0030*/ Sub AddData(ByVal pStorage As IStorage, ByVal lFileOverwrite As Long)
        /* voffset &H0038*/ Function GetJolietProperties() As IPropertyStorage
        /* voffset &H0040*/ Sub SetJolietProperties(ByVal pPropStg As IPropertyStorage)
    End Interface

    [ InterfaceId ("EC9E51C1-4E5D-11D3-9144-00104BA11C5E") ]
    [ OleAutomation (False) ]
    Interface IDiscMasterProgressEvents Extends stdole.IUnknown
        /* voffset &H0018*/ Function QueryCancel() As Boolean
        /* voffset &H0020*/ Sub NotifyPnPActivity()
        /* voffset &H0028*/ Sub NotifyAddProgress(ByVal nCompletedSteps As Long, ByVal nTotalSteps As Long)
        /* voffset &H0030*/ Sub NotifyBlockProgress(ByVal nCompleted As Long, ByVal nTotal As Long)
        /* voffset &H0038*/ Sub NotifyTrackProgress(ByVal nCurrentTrack As Long, ByVal nTotalTracks As Long)
        /* voffset &H0040*/ Sub NotifyPreparingBurn(ByVal nEstimatedSeconds As Long)
        /* voffset &H0048*/ Sub NotifyClosingDisc(ByVal nEstimatedSeconds As Long)
        /* voffset &H0050*/ Sub NotifyBurnComplete(ByVal Status As Long)
        /* voffset &H0058*/ Sub NotifyEraseComplete(ByVal Status As Long)
    End Interface

    [ InterfaceId ("520CCA62-51A5-11D3-9144-00104BA11C5E") ]
    [ OleAutomation (False) ]
    Interface IDiscMaster Extends stdole.IUnknown
        /* voffset &H0018*/ Sub Open()
        /* voffset &H0020*/ Function EnumDiscMasterFormats() As IEnumDiscMasterFormats
        /* voffset &H0028*/ Sub GetActiveDiscMasterFormat(ByRef lpiid As UUID)
        /* voffset &H0030*/ Function SetActiveDiscMasterFormat(ByRef riid As UUID) As stdole.IUnknown
        /* voffset &H0038*/ Function EnumDiscRecorders() As IEnumDiscRecorders
        /* voffset &H0040*/ Function GetActiveDiscRecorder() As IDiscRecorder
        /* voffset &H0048*/ Sub SetActiveDiscRecorder(ByVal pRecorder As IDiscRecorder)
        /* voffset &H0050*/ Sub ClearFormatContent()
        /* voffset &H0058*/ Function ProgressAdvise(ByVal pEvents As IDiscMasterProgressEvents) As LongPtr
        /* voffset &H0060*/ Sub ProgressUnadvise(ByVal vCookie As LongPtr)
        /* voffset &H0068*/ Sub RecordDisc(ByVal bSimulate As Boolean, ByVal bEjectAfterBurn As Boolean)
        /* voffset &H0070*/ Sub Close()
    End Interface

    'CLSID_MSDiscRecorderObj 
    [ CoClassId ("520CCA61-51A5-11D3-9144-00104BA11C5E") ]
    CoClass MSDiscRecorderObj
        [ Default ] Interface IDiscRecorder
    End CoClass
    'CLSID_MSDiscMasterObj 
    [ CoClassId ("520CCA63-51A5-11D3-9144-00104BA11C5E") ]
    CoClass MSDiscMasterObj
        [ Default ] Interface IDiscMaster
    End CoClass
    'CLSID_MSEnumDiscRecordersObj 
    [ CoClassId ("8A03567A-63CB-4BA8-BAF6-52119816D1EF") ]
    CoClass MSEnumDiscRecordersObj
        [ Default ] Interface IEnumDiscRecorders
    End CoClass
Module slIMAPI

Public Enum MEDIA_TYPES
	MEDIA_CDDA_CDROM = 1
	MEDIA_CD_ROM_XA = 2
	MEDIA_CD_I = 3
	MEDIA_CD_EXTRA = 4
	MEDIA_CD_OTHER = 5
	MEDIA_SPECIAL = 6
End Enum

Public Enum MEDIA_FLAGS
	MEDIA_BLANK = &H1
	MEDIA_RW = &H2
	MEDIA_WRITABLE = &H4
	MEDIA_FORMAT_UNUSABLE_BY_IMAPI = &H8
End Enum

Public Enum RECORDER_TYPES
	RECORDER_CDR = &H1
	RECORDER_CDRW = &H2
End Enum

Public Enum RECORDER_STATE
	RECORDER_DOING_NOTHING = 0
	RECORDER_OPENED = 1
	RECORDER_BURNING = 2
End Enum


Public Const sCLSID_MSDiscRecorderObj = "new: {520CCA61-51A5-11D3-9144-00104BA11C5E}"
Public Const sCLSID_MSDiscMasterObj = "new: {520CCA63-51A5-11D3-9144-00104BA11C5E}"
Public Const sCLSID_MSEnumDiscRecordersObj = "new: {8A03567A-63CB-4BA8-BAF6-52119816D1EF}"


End Module