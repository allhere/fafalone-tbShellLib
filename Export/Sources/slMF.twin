'slMF.twin - Media Foundation interfaces

    [ InterfaceId ("90377834-21D0-4DEE-8214-BA2E3E6C1127") ]
    [ OleAutomation (False) ]
    Interface IMFMediaSession Extends IMFMediaEventGenerator
        Sub SetTopology(ByVal dwSetTopologyFlags As Long, ByVal pTopology As IMFTopology)
        Sub ClearTopologies()
        Sub Start(ByRef pguidTimeFormat As UUID, ByRef pvarStartPosition As Variant)
        Sub Pause()
        Sub Stop()
        Sub Close()
        Sub Shutdown()
        Sub GetClock(ByRef ppClock As IMFClock)
        Sub GetSessionCapabilities(ByRef pdwCaps As Long)
        Sub GetFullTopology(ByVal dwGetFullTopologyFlags As Long, ByVal TopoId As LongLong, ByRef ppFullTopology As IMFTopology)
    End Interface
    
    [ InterfaceId ("FBE5A32D-A497-4B61-BB85-97B1A848A6E3") ]
    [ OleAutomation (False) ]
    Interface IMFSourceResolver Extends stdole.IUnknown
        Function CreateObjectFromURL(ByVal pwszUrl As LongPtr, ByVal dwFlags As Long, ByVal pProps As IPropertyStore, ByRef pObjectType As MF_OBJECT_TYPE) As IUnknown
        Function CreateObjectFromByteStream(ByVal pByteStream As IMFByteStream, ByVal pwszUrl As LongPtr, ByVal dwFlags As Long, ByVal pProps As IPropertyStore, ByRef pObjectType As MF_OBJECT_TYPE) As IUnknown
        Sub BeginCreateObjectFromURL(ByVal pwszUrl As LongPtr, ByVal dwFlags As Long, ByVal pProps As IPropertyStore, ByRef ppIUnknownCancelCookie As IUnknown, ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Function EndCreateObjectFromURL(ByVal pResult As IMFAsyncResult, ByRef pObjectType As MF_OBJECT_TYPE) As IUnknown
        Sub BeginCreateObjectFromByteStream(ByVal pByteStream As IMFByteStream, ByVal pwszUrl As LongPtr, ByVal dwFlags As Long, ByVal pProps As IPropertyStore, ByRef ppIUnknownCancelCookie As IUnknown, ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Function EndCreateObjectFromByteStream(ByVal pResult As IMFAsyncResult, ByRef pObjectType As MF_OBJECT_TYPE) As IUnknown
        Sub CancelObjectCreation(ByVal pIUnknownCancelCookie As IUnknown)
    End Interface

    [ InterfaceId ("AD4C1B00-4BF7-422F-9175-756693D9130D") ]
    [ OleAutomation (False) ]
    Interface IMFByteStream Extends stdole.IUnknown
        Function GetCapabilities() As Long
        Function GetLength() As LongLong
        Sub SetLength(ByVal qwLength As LongLong)
        Function GetCurrentPosition() As LongLong
        Sub SetCurrentPosition(ByVal qwPosition As LongLong)
        Function IsEndOfStream() As Long
        Function Read(ByRef pb As Any, ByVal cb As Long) As Long
        Sub BeginRead(ByRef pb As Any, ByVal cb As Long, ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Function EndRead(ByVal pResult As IMFAsyncResult) As Long
        Function Write(ByRef pb As Any, ByVal cb As Long) As Long
        Sub BeginWrite(ByRef pb As Any, ByVal cb As Long, ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Function EndWrite(ByVal pResult As IMFAsyncResult) As Long
        Function Seek(ByVal SeekOrigin As MFBYTESTREAM_SEEK_ORIGIN, ByVal llSeekOffset As LongLong, ByVal dwSeekFlags As Long) As LongLong
        Sub Flush()
        Sub Close()
    End Interface

    [ InterfaceId ("A27003CF-2354-4F2A-8D6A-AB7CFF15437E") ]
    [ OleAutomation (False) ]
    Interface IMFAsyncCallback Extends stdole.IUnknown
        Sub GetParameters(ByRef pdwFlags As Long, ByRef pdwQueue As Long)
        Sub Invoke(ByVal pAsyncResult As IMFAsyncResult)
    End Interface

    [ InterfaceId ("AC6B7889-0740-4D51-8619-905994A55CC6") ]
    [ OleAutomation (False) ]
    Interface IMFAsyncResult Extends stdole.IUnknown
        Function GetState() As IUnknown
        [ PreserveSig ]
        Function GetStatus() As Long
        Sub SetStatus(ByVal hrStatus As Long)
        Function GetObject() As IUnknown
        [ PreserveSig ]
        Function GetStateNoAddRef() As IUnknown
    End Interface

    [ InterfaceId ("2CD2D921-C447-44A7-A13C-4ADABFC247E3") ]
    [ OleAutomation (False) ]
    Interface IMFAttributes Extends stdole.IUnknown
        Sub GetItem(ByRef guidKey As UUID, ByRef pValue As Any)
        Function GetItemType(ByRef guidKey As UUID) As MF_ATTRIBUTE_TYPE
        Function CompareItem(ByRef guidKey As UUID, ByRef Value As Variant) As Long
        Function Compare(ByVal pTheirs As IMFAttributes, ByVal MatchType As MF_ATTRIBUTES_MATCH_TYPE) As Long
        Function GetUInt32(ByRef guidKey As UUID) As Long
        Function GetUInt64(ByRef guidKey As UUID) As LongLong
        Function GetDouble(ByRef guidKey As UUID) As Double
        Function GetGUID(ByRef guidKey As UUID) As UUID
        Function GetStringLength(ByRef guidKey As UUID) As Long
        Function GetString(ByRef guidKey As UUID, ByVal pwszValue As LongPtr, ByVal cchBufSize As Long) As Long
        Function GetAllocatedString(ByRef guidKey As UUID, ByRef ppwszValue As Any) As Long
        Function GetBlobSize(ByRef guidKey As UUID) As Long
        Function GetBlob(ByRef guidKey As UUID, ByRef pBuf As Any, ByVal cbBufSize As Long) As Long
        Function GetAllocatedBlob(ByRef guidKey As UUID, ByRef ppBuf As Any) As Long
        Function GetUnknown(ByRef guidKey As UUID, ByRef riid As UUID) As IUnknown
        Sub SetItem(ByRef guidKey As UUID, ByRef Value As Variant)
        Sub DeleteItem(ByRef guidKey As UUID)
        Sub DeleteAllItems()
        Sub SetUINT32(ByRef guidKey As UUID, ByVal unValue As Long)
        Sub SetUINT64(ByRef guidKey As UUID, ByVal unValue As LongLong)
        Sub SetDouble(ByRef guidKey As UUID, ByVal fValue As Double)
        Sub SetGuid(ByRef guidKey As UUID, ByRef guidValue As UUID)
        Sub SetString(ByRef guidKey As UUID, ByVal wszValue As LongPtr)
        Sub SetBlob(ByRef guidKey As UUID, ByRef pBuf As Any, ByVal cbBufSize As Long)
        Sub SetUnknown(ByRef guidKey As UUID, ByVal pUnknown As IUnknown)
        Sub LockStore()
        Sub UnlockStore()
        Function GetCount() As Long
        Sub GetItemByIndex(ByVal unIndex As Long, ByRef pguidKey As UUID, ByRef pValue As Any)
        Sub CopyAllItems(ByVal pDest As IMFAttributes)
    End Interface


    [ InterfaceId ("2CD0BD52-BCD5-4B89-B62C-EADC0C031E7D") ]
    [ OleAutomation (False) ]
    Interface IMFMediaEventGenerator Extends stdole.IUnknown
        Function GetEvent(ByVal dwFlags As Long) As IMFMediaEvent
        Sub BeginGetEvent(ByVal pCallback As IMFAsyncCallback, ByVal punkState As IUnknown)
        Function EndGetEvent(ByVal pResult As IMFAsyncResult) As IMFMediaEvent
        Sub QueueEvent(ByVal met As MediaEventType, ByRef guidExtendedType As UUID, ByVal hrStatus As Long, ByRef pvValue As Any)
    End Interface

    [ InterfaceId ("DF598932-F10C-4E39-BBA2-C308F101DAA3") ]
    [ OleAutomation (False) ]
    Interface IMFMediaEvent Extends IMFAttributes
        Function GetType() As MediaEventType
        Function GetExtendedType() As UUID
        Function GetStatus() As Long
        Function GetValue() As Variant
    End Interface

    [ InterfaceId ("279A808D-AEC7-40C8-9C6B-A6B492C78A66") ]
    [ OleAutomation (False) ]
    Interface IMFMediaSource Extends IMFMediaEventGenerator
        Function GetCharacteristics() As Long
        Function CreatePresentationDescriptor() As IMFPresentationDescriptor
        Sub Start(ByVal pPresentationDescriptor As IMFPresentationDescriptor, ByRef pguidTimeFormat As Any, ByRef pvarStartPosition As Any)
        Sub Stop()
        Sub Pause()
        Sub Shutdown()
    End Interface

    [ InterfaceId ("03CB2711-24D7-4DB6-A17F-F3A7A479A536") ]
    [ OleAutomation (False) ]
    Interface IMFPresentationDescriptor Extends IMFAttributes
        Function GetStreamDescriptorCount() As Long
        Function GetStreamDescriptorByIndex(ByVal dwIndex As Long, ByRef pfSelected As Long) As IMFStreamDescriptor
        Sub SelectStream(ByVal dwDescriptorIndex As Long)
        Sub DeselectStream(ByVal dwDescriptorIndex As Long)
        Function Clone() As IMFPresentationDescriptor
    End Interface

    [ InterfaceId ("56C03D9C-9DBB-45F5-AB4B-D80F47C05938") ]
    [ OleAutomation (False) ]
    Interface IMFStreamDescriptor Extends IMFAttributes
        Function GetStreamIdentifier() As Long
        Function GetMediaTypeHandler() As IMFMediaTypeHandler
    End Interface

    [ InterfaceId ("E93DCF6C-4B07-4E1E-8123-AA16ED6EADF5") ]
    [ OleAutomation (False) ]
    Interface IMFMediaTypeHandler Extends stdole.IUnknown
        Function IsMediaTypeSupported(ByVal pMediaType As IMFMediaType) As IMFMediaType
        Function GetMediaTypeCount() As Long
        Function GetMediaTypeByIndex(ByVal dwIndex As Long) As IMFMediaType
        Sub SetCurrentMediaType(ByVal pMediaType As IMFMediaType)
        Function GetCurrentMediaType() As IMFMediaType
        Function GetMajorType() As UUID
    End Interface

    [ InterfaceId ("44AE0FA8-EA31-4109-8D2E-4CAE4997C555") ]
    [ OleAutomation (False) ]
    Interface IMFMediaType Extends IMFAttributes
        Function GetMajorType() As stdole.GUID
        Function IsCompressedFormat() As Long
        Function IsEqual(ByVal pIMediaType As IMFMediaType) As Long
        #If Win64 Then
        Sub GetRepresentation(guidRepresentation As UUID, ByRef ppvRepresentation As Any)
        Sub FreeRepresentation(guidRepresentation As UUID, ByRef pvRepresentation As Any)
        #Else
        Sub GetRepresentation(ByVal guidRepresentation1 As Long, ByVal guidRepresentation2 As Long, ByVal guidRepresentation3 As Long, ByVal guidRepresentation4 As Long, ByRef ppvRepresentation As Any)
        Sub FreeRepresentation(ByVal guidRepresentation1 As Long, ByVal guidRepresentation2 As Long, ByVal guidRepresentation3 As Long, ByVal guidRepresentation4 As Long, ByRef pvRepresentation As Any)
        #End If
    End Interface

    [ InterfaceId ("70AE66F2-C809-4E4F-8915-BDCB406B7993") ]
    [ OleAutomation (False) ]
    Interface IMFSourceReader Extends stdole.IUnknown
        Function GetStreamSelection(ByVal dwStreamIndex As Long) As Long
        Sub SetStreamSelection(ByVal dwStreamIndex As Long, ByVal fSelected As Long)
        Function GetNativeMediaType(ByVal dwStreamIndex As Long, ByVal dwMediaTypeIndex As Long) As IMFMediaType
        Function GetCurrentMediaType(ByVal dwStreamIndex As Long) As IMFMediaType
        Sub SetCurrentMediaType(ByVal dwStreamIndex As Long, ByVal pdwReserved As Long, ByVal pMediaType As IMFMediaType)
        Sub SetCurrentPosition(ByRef guidTimeFormat As UUID, ByRef varPosition As Variant)
        Function ReadSample(ByVal dwStreamIndex As Long, ByVal dwControlFlags As Long, ByRef pdwActualStreamIndex As Long, ByRef pdwStreamFlags As Long, ByRef pllTimestamp As LongLong) As IMFSample
        Sub Flush(ByVal dwStreamIndex As Long)
        Sub GetServiceForStream(ByVal dwStreamIndex As Long, ByRef guidService As UUID, ByRef riid As UUID, ByRef ppvObject As Any)
        Function GetPresentationAttribute(ByVal dwStreamIndex As Long, ByRef guidAttribute As UUID) As Variant
    End Interface

    [ InterfaceId ("C40A00F2-B93A-4D80-AE8C-5A1C634F58E4") ]
    [ OleAutomation (False) ]
    Interface IMFSample Extends IMFAttributes
        Function GetSampleFlags() As Long
        Sub SetSampleFlags(ByVal dwSampleFlags As Long)
        Function GetSampleTime() As LongLong
        Sub SetSampleTime(ByVal hnsSampleTime As LongLong)
        Function GetSampleDuration() As LongLong
        Sub SetSampleDuration(ByVal hnsSampleDuration As LongLong)
        Function GetBufferCount() As Long
        Function GetBufferByIndex(ByVal dwIndex As Long) As IMFMediaBuffer
        Function ConvertToContiguousBuffer() As IMFMediaBuffer
        Sub AddBuffer(ByVal pBuffer As IMFMediaBuffer)
        Sub RemoveBufferByIndex(ByVal dwIndex As Long)
        Sub RemoveAllBuffers()
        Function GetTotalLength() As Long
        Sub CopyToBuffer(ByVal pBuffer As IMFMediaBuffer)
    End Interface

    [ InterfaceId ("045FA593-8799-42B8-BC8D-8968C6453507") ]
    [ OleAutomation (False) ]
    Interface IMFMediaBuffer Extends stdole.IUnknown
        Sub Lock(ByRef ppbBuffer As Any, ByRef pcbMaxLength As Long, ByRef pcbCurrentLength As Long)
        Sub Unlock()
        Function GetCurrentLength() As Long
        Sub SetCurrentLength(ByVal cbCurrentLength As Long)
        Function GetMaxLength() As Long
    End Interface

    [ InterfaceId ("2EB1E945-18B8-4139-9B1A-D5D584818530") ]
    [ OleAutomation (False) ]
    Interface IMFClock Extends stdole.IUnknown
        Sub GetClockCharacteristics(ByRef pdwCharacteristics As Long)
        Sub GetCorrelatedTime(ByVal dwReserved As Long, ByRef pllClockTime As LongLong, ByRef phnsSystemTime As LongLong)
        Sub GetContinuityKey(ByRef pdwContinuityKey As Long)
        Sub GetState(ByVal dwReserved As Long, ByRef peClockState As MFCLOCK_STATE)
        Sub GetProperties(ByRef pClockProperties As MFCLOCK_PROPERTIES)
    End Interface

    [ InterfaceId ("5BC8A76B-869A-46A3-9B03-FA218A66AEBE") ]
    [ OleAutomation (False) ]
    Interface IMFCollection Extends stdole.IUnknown
        Sub GetElementCount(ByRef pcElements As Long)
        Sub GetElement(ByVal dwElementIndex As Long, ByRef ppUnkElement As stdole.IUnknown)
        Sub AddElement(ByVal pUnkElement As stdole.IUnknown)
        Sub RemoveElement(ByVal dwElementIndex As Long, ByRef ppUnkElement As stdole.IUnknown)
        Sub InsertElementAt(ByVal dwIndex As Long, ByVal pUnknown As stdole.IUnknown)
        Sub RemoveAllElements()
    End Interface

    [ InterfaceId ("7DC9D5F9-9ED9-44EC-9BBF-0600BB589FBB") ]
    [ OleAutomation (False) ]
    Interface IMF2DBuffer Extends stdole.IUnknown
        Sub Lock2D(ByRef pbScanline0 As Any, ByRef plPitch As Long)
        Sub Unlock2D()
        Sub GetScanline0AndPitch(ByRef pbScanline0 As Any, ByRef plPitch As Long)
        Sub IsContiguousFormat(ByVal pfIsContiguous As Long)
        Sub GetContiguousLength(ByRef pcbLength As Long)
        Sub ContiguousCopyTo(ByRef pbDestBuffer As Byte, ByVal cbDestBuffer As Long)
        Sub ContiguousCopyFrom(ByRef pbSrcBuffer As Any, ByVal cbSrcBuffer As Long)
    End Interface

    [ InterfaceId ("33AE5EA6-4316-436F-8DDD-D73D22F829EC") ]
    [ OleAutomation (False) ]
    Interface IMF2DBuffer2 Extends IMF2DBuffer
        Sub Lock2DSize(ByVal flags As MF2DBuffer_LockFlags, ByRef scanline0 As Byte, ByRef pitch As Long, ByRef buffer_start As Byte, ByRef buffer_length As Long)
        Sub Copy2DTo(ByVal dest_buffer As IMF2DBuffer2)
    End Interface

    [ InterfaceId ("E7174CFA-1C9E-48B1-8866-626226BFC258") ]
    [ OleAutomation (False) ]
    Interface IMFDXGIBuffer Extends stdole.IUnknown
        Sub GetResource(ByRef riid As UUID, ByRef object As Any)
        Sub GetSubresourceIndex(ByRef index As Long)
        Sub GetUnknown(ByRef guid As UUID, ByRef riid As UUID, ByRef object As Any)
        Sub SetUnknown(ByRef guid As UUID, ByVal data As stdole.IUnknown)
    End Interface

    [ InterfaceId ("83CF873A-F6DA-4BC8-823F-BACFD55DC430") ]
    [ OleAutomation (False) ]
    Interface IMFTopologyNode Extends IMFAttributes
        Sub SetObject(ByVal pObject As IUnknown)
        Sub GetObject(ByRef ppObject As IUnknown)
        Sub GetNodeType(ByRef pType As MF_TOPOLOGY_TYPE)
        Sub GetTopoNodeID(ByRef pid As LongLong)
        Sub SetTopoNodeID(ByVal ullTopoID As LongLong)
        Sub GetInputCount(ByRef pcInputs As Long)
        Sub GetOutputCount(ByRef pcOutputs As Long)
        Sub ConnectOutput(ByVal dwOutputIndex As Long, ByVal pDownstreamNode As IMFTopologyNode, ByVal dwInputIndexOnDownstreamNode As Long)
        Sub DisconnectOutput(ByVal dwOutputIndex As Long)
        Sub GetInput(ByVal dwInputIndex As Long, ByRef ppUpstreamNode As IMFTopologyNode, ByRef pdwOutputIndexOnUpstreamNode As Long)
        Sub GetOutput(ByVal dwOutputIndex As Long, ByRef ppDownstreamNode As IMFTopologyNode, ByRef pdwInputIndexOnDownstreamNode As Long)
        Sub SetOutputPrefType(ByVal dwOutputIndex As Long, ByVal pType As IMFMediaType)
        Sub GetOutputPrefType(ByVal dwOutputIndex As Long, ByRef ppType As IMFMediaType)
        Sub SetInputPrefType(ByVal dwInputIndex As Long, ByVal pType As IMFMediaType)
        Sub GetInputPrefType(ByVal dwInputIndex As Long, ByRef ppType As IMFMediaType)
        Sub CloneFrom(ByVal pNode As IMFTopologyNode)
    End Interface

    [ InterfaceId ("83CF873A-F6DA-4BC8-823F-BACFD55DC433") ]
    [ OleAutomation (False) ]
    Interface IMFTopology Extends IMFAttributes
        Sub GetTopologyID(ByRef pid As LongLong)
        Sub AddNode(ByVal pNode As IMFTopologyNode)
        Sub RemoveNode(ByVal pNode As IMFTopologyNode)
        Sub GetNodeCount(ByRef pwNodes As Integer)
        Sub GetNode(ByVal wIndex As Integer, ByRef ppNode As IMFTopologyNode)
        Sub Clear()
        Sub CloneFrom(ByVal pTopology As IMFTopology)
        Sub GetNodeByID(ByVal qwTopoNodeID As LongLong, ByRef ppNode As IMFTopologyNode)
        Sub GetSourceNodeCollection(ByRef ppCollection As IMFCollection)
        Sub GetOutputNodeCollection(ByRef ppCollection As IMFCollection)
    End Interface
    
    [ InterfaceId ("59EFF8B9-938C-4A26-82F2-95CB84CDC837") ]
    [ OleAutomation (False) ]
    Interface IMediaBuffer Extends stdole.IUnknown
        Sub SetLength(ByVal cbLength As Long)
        Sub GetMaxLength(ByRef pcbMaxLength As Long)
        Sub GetBufferAndLength(ByVal ppBuffer As LongPtr, ByRef pcbLength As Long)
    End Interface


    [ InterfaceId ("D8AD0F58-5494-4102-97C5-EC798E59BCF4") ]
    [ OleAutomation (False) ]
    Interface IMediaObject Extends stdole.IUnknown
        Sub GetStreamCount(ByRef pcInputStreams As Long, ByRef pcOutputStreams As Long)
        Sub GetInputStreamInfo(ByVal dwInputStreamIndex As Long, ByRef pdwFlags As Long)
        Sub GetOutputStreamInfo(ByVal dwOutputStreamIndex As Long, ByRef pdwFlags As Long)
        Sub GetInputType(ByVal dwInputStreamIndex As Long, ByVal dwTypeIndex As Long, ByRef pmt As DMO_MEDIA_TYPE)
        Sub GetOutputType(ByVal dwOutputStreamIndex As Long, ByVal dwTypeIndex As Long, ByRef pmt As DMO_MEDIA_TYPE)
        Sub SetInputType(ByVal dwInputStreamIndex As Long, ByRef pmt As DMO_MEDIA_TYPE, ByVal dwFlags As Long)
        Sub SetOutputType(ByVal dwOutputStreamIndex As Long, ByRef pmt As DMO_MEDIA_TYPE, ByVal dwFlags As Long)
        Sub GetInputCurrentType(ByVal dwInputStreamIndex As Long, ByRef pmt As DMO_MEDIA_TYPE)
        Sub GetOutputCurrentType(ByVal dwOutputStreamIndex As Long, ByRef pmt As DMO_MEDIA_TYPE)
        Sub GetInputSizeInfo(ByVal dwInputStreamIndex As Long, ByRef pcbSize As Long, ByRef pcbMaxLookahead As Long, ByRef pcbAlignment As Long)
        Sub GetOutputSizeInfo(ByVal dwOutputStreamIndex As Long, ByRef pcbSize As Long, ByRef pcbAlignment As Long)
        Sub GetInputMaxLatency(ByVal dwInputStreamIndex As Long, ByVal prtMaxLatency As LongLong)
        Sub SetInputMaxLatency(ByVal dwInputStreamIndex As Long, ByVal rtMaxLatency As LongLong)
        Sub Flush()
        Sub Discontinuity(ByVal dwInputStreamIndex As Long)
        Sub AllocateStreamingResources()
        Sub FreeStreamingResources()
        Sub GetInputStatus(ByVal dwInputStreamIndex As Long, ByRef dwFlags As Long)
        Sub ProcessInput(ByVal dwInputStreamIndex As Long, ByVal pBuffer As IMediaBuffer, ByVal dwFlags As Long, ByVal rtTimestamp As LongLong, ByVal rtTimelength As LongLong)
        Sub ProcessOutput(ByVal dwFlags As Long, ByVal cOutputBufferCount As Long, ByRef pOutputBuffers As DMO_OUTPUT_DATA_BUFFER, ByRef pdwStatus As Long)
        Sub Lock(ByVal bLock As Long)
    End Interface

    [ InterfaceId ("2C3CD98A-2BFA-4A53-9C27-5249BA64BA0F") ]
    [ OleAutomation (False) ]
    Interface IEnumDMO Extends stdole.IUnknown
        Sub Next(ByVal cItemsToFetch As Long, ByRef pclsid As UUID, ByVal Names As LongPtr, ByRef pcItemsFetched As Long)
        Sub Skip(ByVal cItemsToSkip As Long)
        Sub Reset()
        Sub Clone(ByRef ppenum As IEnumDMO)
    End Interface

    [ InterfaceId ("651B9AD0-0FC7-4AA9-9538-D89931010741") ]
    [ OleAutomation (False) ]
    Interface IMediaObjectInPlace Extends stdole.IUnknown
        Sub Process(ByVal ulSize As Long, ByRef pData As Byte, ByVal refTimeStart As LongLong, ByVal dwFlags As Long)
        Sub Clone(ByRef ppMediaObject As IMediaObjectInPlace)
        Sub GetLatency(ByVal pLatencyTime As LongLong)
    End Interface
   
    [ InterfaceId ("65ABEA96-CF36-453F-AF8A-705E98F16260") ]
    [ OleAutomation (False) ]
    Interface IDMOQualityControl Extends stdole.IUnknown
        Sub SetNow(ByVal rtNow As LongLong)
        Sub SetStatus(ByVal dwFlags As Long)
        Sub GetStatus(ByRef pdwFlags As Long)
    End Interface

    [ InterfaceId ("BE8F4F4E-5B16-4D29-B350-7F6B5D9298AC") ]
    [ OleAutomation (False) ]
    Interface IDMOVideoOutputOptimizations Extends stdole.IUnknown
        Sub QueryOperationModePreferences(ByVal ulOutputStreamIndex As Long, ByRef pdwRequestedCapabilities As Long)
        Sub SetOperationMode(ByVal ulOutputStreamIndex As Long, ByVal dwEnabledFeatures As Long)
        Sub GetCurrentOperationMode(ByVal ulOutputStreamIndex As Long, ByRef pdwEnabledFeatures As Long)
        Sub GetCurrentSampleRequirements(ByVal ulOutputStreamIndex As Long, ByRef pdwRequestedFeatures As Long)
    End Interface


    [ InterfaceId ("26A0ADC3-CE26-4672-9304-69552EDD3FAF") ]
    [ OleAutomation (False) ]
    Interface IMFAudioMediaType Extends IMFMediaType
        [ PreserveSig ]
        Function GetAudioFormat() As WAVEFORMATEX
    End Interface

    [ InterfaceId ("B99F381F-A8F9-47A2-A5AF-CA3A225A3890") ]
    [ OleAutomation (False) ]
    Interface IMFVideoMediaType Extends IMFMediaType
        [ PreserveSig ]
        Function GetVideoFormat() As MFVIDEOFORMAT
        #If Win64 Then
            Sub GetVideoRepresentation(ByRef guidRepresentation As UUID, ByRef ppvRepresentation As Any, ByVal lStride As Long)
        #Else
        	Sub GetVideoRepresentation(ByVal guidRepresentation1 As Long, ByVal guidRepresentation2 As Long, ByVal guidRepresentation3 As Long, ByVal guidRepresentation4 As Long, ByRef ppvRepresentation As Any, ByVal lStride As Long)
        #End If
    End Interface

    [ InterfaceId ("C7A4DCA1-F5F0-47B6-B92B-BF0106D25791") ]
    [ OleAutomation (False) ]
    Interface IMFAsyncCallbackLogging Extends stdole.IUnknown
        Sub GetParameters(ByRef pdwFlags As Long, ByRef pdwQueue As Long)
        Sub Invoke(ByVal pAsyncResult As IMFAsyncResult)
        Sub GetObjectPointer()
        Sub GetObjectTag()
    End Interface

    [ InterfaceId ("A6B43F84-5C0A-42E8-A44D-B1857A76992F") ]
    [ OleAutomation (False) ]
    Interface IMFByteStreamProxyClassFactory Extends stdole.IUnknown
        Sub CreateByteStreamProxy(ByVal pByteStream As IMFByteStream, ByVal pAttributes As IMFAttributes, ByRef riid As UUID, ByRef ppvObject As Any)
    End Interface


    [ InterfaceId ("8FEED468-6F7E-440D-869A-49BDD283AD0D") ]
    [ OleAutomation (False) ]
    Interface IMFSampleOutputStream Extends stdole.IUnknown
        Sub BeginWriteSample(ByVal pSample As IMFSample, ByVal pCallback As IMFAsyncCallback, ByVal punkState As stdole.IUnknown)
        Sub EndWriteSample(ByVal pResult As IMFAsyncResult)
        Sub Close()
    End Interface

    [ InterfaceId ("36F846FC-2256-48B6-B58E-E2B638316581") ]
    [ OleAutomation (False) ]
    Interface IMFMediaEventQueue Extends stdole.IUnknown
        Sub GetEvent(ByVal dwFlags As Long, ByRef ppEvent As IMFMediaEvent)
        Sub BeginGetEvent(ByVal pCallback As IMFAsyncCallback, ByVal punkState As stdole.IUnknown)
        Sub EndGetEvent(ByVal pResult As IMFAsyncResult, ByRef ppEvent As IMFMediaEvent)
        Sub QueueEvent(ByVal pEvent As IMFMediaEvent)
        Sub QueueEventParamVar(ByVal met As MediaEventType, ByRef guidExtendedType As UUID, ByVal hrStatus As Long, ByRef pvValue As Variant)
        Sub QueueEventParamUnk(ByVal met As MediaEventType, ByRef guidExtendedType As UUID, ByVal hrStatus As Long, ByVal pUnk As stdole.IUnknown)
        Sub Shutdown()
    End Interface

    [ InterfaceId ("7FEE9E9A-4A89-47A6-899C-B6A53A70FB67") ]
    [ Description ("IMFActivate Interface") ]
    [ OleAutomation (False) ]
    Interface IMFActivate Extends IMFAttributes
        Sub ActivateObject(ByRef riid As UUID, ByRef ppv As Any)
        Sub ShutdownObject()
        Sub DetachObject()
    End Interface

    [ InterfaceId ("5C6C44BF-1DB6-435B-9249-E8CD10FDEC96") ]
    [ Description ("IMFPluginControl Interface") ]
    [ OleAutomation (False) ]
    Interface IMFPluginControl Extends stdole.IUnknown
        Sub GetPreferredClsid(ByVal pluginType As Long, ByVal selector As LongPtr, ByRef clsid As UUID)
        Sub GetPreferredClsidByIndex(ByVal pluginType As Long, ByVal index As Long, ByVal selector As LongPtr, ByRef clsid As UUID)
        Sub SetPreferredClsid(ByVal pluginType As Long, ByVal selector As LongPtr, ByRef clsid As UUID)
        Sub IsDisabled(ByVal pluginType As Long, ByRef clsid As UUID)
        Sub GetDisabledByIndex(ByVal pluginType As Long, ByVal index As Long, ByRef clsid As UUID)
        Sub SetDisabled(ByVal pluginType As Long, ByRef clsid As UUID, ByVal disabled As Long)
    End Interface


    [ InterfaceId ("C6982083-3DDC-45CB-AF5E-0F7A8CE4DE77") ]
    [ Description ("IMFPluginControl2 Interface") ]
    [ OleAutomation (False) ]
    Interface IMFPluginControl2 Extends IMFPluginControl
        Sub SetPolicy(ByVal policy As MF_PLUGIN_CONTROL_POLICY)
    End Interface

    [ InterfaceId ("EB533D5D-2DB6-40F8-97A9-494692014F07") ]
    [ Description ("IMFDXGIDeviceManager Interface") ]
    [ OleAutomation (False) ]
    Interface IMFDXGIDeviceManager Extends stdole.IUnknown
        Sub CloseDeviceHandle(ByVal hDevice As Long)
        Sub GetVideoService(ByVal hDevice As Long, ByRef riid As UUID, ByRef ppService As Any)
        Sub LockDevice(ByVal hDevice As Long, ByRef riid As UUID, ByRef ppUnkDevice As Any, ByVal fBlock As Long)
        Sub OpenDeviceHandle(ByRef phDevice As Long)
        Sub ResetDevice(ByVal pUnkDevice As IUnknown, ByVal resetToken As Long)
        Sub TestDevice(ByVal hDevice As Long)
        Sub UnlockDevice(ByVal hDevice As Long, ByVal fSaveState As Long)
    End Interface


    [ InterfaceId ("BF94C121-5B05-4E6F-8000-BA598961414D") ]
    [ OleAutomation (False) ]
    Interface IMFTransform Extends stdole.IUnknown
        Sub GetStreamLimits(ByRef pdwInputMinimum As Long, ByRef pdwInputMaximum As Long, ByRef pdwOutputMinimum As Long, ByRef pdwOutputMaximum As Long)
        Sub GetStreamCount(ByRef pcInputStreams As Long, ByRef pcOutputStreams As Long)
        Sub GetStreamIDs(ByVal dwInputIDArraySize As Long, ByRef pdwInputIDs As Long, ByVal dwOutputIDArraySize As Long, ByRef pdwOutputIDs As Long)
        Sub GetInputStreamInfo(ByVal dwInputStreamID As Long, ByRef pStreamInfo As MFT_INPUT_STREAM_INFO)
        Sub GetOutputStreamInfo(ByVal dwOutputStreamID As Long, ByRef pStreamInfo As MFT_OUTPUT_STREAM_INFO)
        Sub GetAttributes(ByRef pAttributes As IMFAttributes)
        Sub GetInputStreamAttributes(ByVal dwInputStreamID As Long, ByRef pAttributes As IMFAttributes)
        Sub GetOutputStreamAttributes(ByVal dwOutputStreamID As Long, ByRef pAttributes As IMFAttributes)
        Sub DeleteInputStream(ByVal dwStreamId As Long)
        Sub AddInputStreams(ByVal cStreams As Long, ByRef adwStreamIDs As Long)
        Sub GetInputAvailableType(ByVal dwInputStreamID As Long, ByVal dwTypeIndex As Long, ByRef ppType As IMFMediaType)
        Sub GetOutputAvailableType(ByVal dwOutputStreamID As Long, ByVal dwTypeIndex As Long, ByRef ppType As IMFMediaType)
        Sub SetInputType(ByVal dwInputStreamID As Long, ByVal pType As IMFMediaType, ByVal dwFlags As Long)
        Sub SetOutputType(ByVal dwOutputStreamID As Long, ByVal pType As IMFMediaType, ByVal dwFlags As Long)
        Sub GetInputCurrentType(ByVal dwInputStreamID As Long, ByRef ppType As IMFMediaType)
        Sub GetOutputCurrentType(ByVal dwOutputStreamID As Long, ByRef ppType As IMFMediaType)
        Sub GetInputStatus(ByVal dwInputStreamID As Long, ByRef pdwFlags As Long)
        Sub GetOutputStatus(ByRef pdwFlags As Long)
        Sub SetOutputBounds(ByVal hnsLowerBound As LongLong, ByVal hnsUpperBound As LongLong)
        Sub ProcessEvent(ByVal dwInputStreamID As Long, ByVal pEvent As IMFMediaEvent)
        Sub ProcessMessage(ByVal eMessage As MFT_MESSAGE_TYPE, ByVal ulParam As LongPtr)
        Sub ProcessInput(ByVal dwInputStreamID As Long, ByVal pSample As IMFSample, ByVal dwFlags As Long)
        Sub ProcessOutput(ByVal dwFlags As Long, ByVal cOutputBufferCount As Long, ByRef pOutputSamples As MFT_OUTPUT_DATA_BUFFER, ByRef pdwStatus As Long)
    End Interface
    

    [ InterfaceId ("3C9B2EB9-86D5-4514-A394-F56664F9F0D8") ]
    [ OleAutomation (False) ]
    Interface IMFMediaSourceEx Extends IMFMediaSource
        Sub GetSourceAttributes(ByRef ppAttributes As IMFAttributes)
        Sub GetStreamAttributes(ByVal dwStreamIdentifier As Long, ByRef ppAttributes As IMFAttributes)
        Sub SetD3DManager(ByVal pManager As stdole.IUnknown)
    End Interface

    [ InterfaceId ("6EF2A662-47C0-4666-B13D-CBB717F2FA2C") ]
    [ OleAutomation (False) ]
    Interface IMFClockConsumer Extends stdole.IUnknown
        Sub SetPresentationClock(ByVal pPresentationClock As IMFPresentationClock)
        Sub GetPresentationClock(ByRef ppPresentationClock As IMFPresentationClock)
    End Interface

    [ InterfaceId ("D182108F-4EC6-443F-AA42-A71106EC825F") ]
    [ OleAutomation (False) ]
    Interface IMFMediaStream Extends IMFMediaEventGenerator
        Sub GetMediaSource(ByRef ppMediaSource As IMFMediaSource)
        Sub GetStreamDescriptor(ByRef ppStreamDescriptor As IMFStreamDescriptor)
        Sub RequestSample(ByVal pToken As stdole.IUnknown)
    End Interface

    [ InterfaceId ("6EF2A660-47C0-4666-B13D-CBB717F2FA2C") ]
    [ OleAutomation (False) ]
    Interface IMFMediaSink Extends stdole.IUnknown
        Sub GetCharacteristics(ByRef pdwCharacteristics As Long)
        Sub AddStreamSink(ByVal dwStreamSinkIdentifier As Long, ByVal pMediaType As IMFMediaType, ByRef ppStreamSink As IMFStreamSink)
        Sub RemoveStreamSink(ByVal dwStreamSinkIdentifier As Long)
        Sub GetStreamSinkCount(ByRef pcStreamSinkCount As Long)
        Sub GetStreamSinkByIndex(ByVal dwIndex As Long, ByRef ppStreamSink As IMFStreamSink)
        Sub GetStreamSinkById(ByVal dwStreamSinkIdentifier As Long, ByRef ppStreamSink As IMFStreamSink)
        Sub SetPresentationClock(ByVal pPresentationClock As IMFPresentationClock)
        Sub GetPresentationClock(ByRef ppPresentationClock As IMFPresentationClock)
        Sub Shutdown()
    End Interface

    [ InterfaceId ("0A97B3CF-8E7C-4A3D-8F8C-0C843DC247FB") ]
    [ OleAutomation (False) ]
    Interface IMFStreamSink Extends IMFMediaEventGenerator
        Sub GetMediaSink(ByRef ppMediaSink As IMFMediaSink)
        Sub GetIdentifier(ByRef pdwIdentifier As Long)
        Sub GetMediaTypeHandler(ByRef ppHandler As IMFMediaTypeHandler)
        Sub ProcessSample(ByVal pSample As IMFSample)
        Sub PlaceMarker(ByVal eMarkerType As MFSTREAMSINK_MARKER_TYPE, ByRef pvarMarkerValue As Variant, ByRef pvarContextValue As Variant)
        Sub Flush()
    End Interface

    [ InterfaceId ("86CBC910-E533-4751-8E3B-F19B5B806A03") ]
    [ OleAutomation (False) ]
    Interface IMFVideoSampleAllocator Extends stdole.IUnknown
        Sub SetDirectXManager(ByVal pManager As stdole.IUnknown)
        Sub UninitializeSampleAllocator()
        Sub InitializeSampleAllocator(ByVal cRequestedFrames As Long, ByVal pMediaType As IMFMediaType)
        Sub AllocateSample(ByRef ppSample As IMFSample)
    End Interface

    [ InterfaceId ("A792CDBE-C374-4E89-8335-278E7B9956A4") ]
    [ OleAutomation (False) ]
    Interface IMFVideoSampleAllocatorNotify Extends stdole.IUnknown
        Sub NotifyRelease()
    End Interface

    [ InterfaceId ("3978AA1A-6D5B-4B7F-A340-90899189AE34") ]
    [ OleAutomation (False) ]
    Interface IMFVideoSampleAllocatorNotifyEx Extends IMFVideoSampleAllocatorNotify
        Sub NotifyPrune(ByVal pSample As IMFSample)
    End Interface

    [ InterfaceId ("992388B4-3372-4F67-8B6F-C84C071F4751") ]
    [ OleAutomation (False) ]
    Interface IMFVideoSampleAllocatorCallback Extends stdole.IUnknown
        Sub SetCallback(ByVal pNotify As IMFVideoSampleAllocatorNotify)
        Sub GetFreeSampleCount(ByRef plSamples As Long)
    End Interface

    [ InterfaceId ("545B3A48-3283-4F62-866F-A62D8F598F9F") ]
    [ Description ("IMFVideoSampleAllocatorEx Interface") ]
    [ OleAutomation (False) ]
    Interface IMFVideoSampleAllocatorEx Extends IMFVideoSampleAllocator
        Sub InitializeSampleAllocatorEx(ByVal cInitialSamples As Long, ByVal cMaximumSamples As Long, ByVal pAttributes As IMFAttributes, ByVal pMediaType As IMFMediaType)
    End Interface

    [ InterfaceId ("20BC074B-7A8D-4609-8C3B-64A0A3B5D7CE") ]
    [ OleAutomation (False) ]
    Interface IMFDXGIDeviceManagerSource Extends stdole.IUnknown
        Sub GetManager(ByRef ppManager As IMFDXGIDeviceManager)
    End Interface

    [ InterfaceId ("A3F675D5-6119-4F7F-A100-1D8B280F0EFB") ]
    [ Description ("Configuration interface for Video Processors") ]
    [ OleAutomation (False) ]
    Interface IMFVideoProcessorControl Extends stdole.IUnknown
        Sub SetBorderColor(ByRef pBorderColor As MFARGB)
        Sub SetSourceRectangle(ByRef pSrcRect As RECT)
        Sub SetDestinationRectangle(ByRef pDstRect As RECT)
        Sub SetMirror(ByVal eMirror As MF_VIDEO_PROCESSOR_MIRROR)
        Sub SetRotation(ByVal eRotation As MF_VIDEO_PROCESSOR_ROTATION)
        Sub SetConstrictionSize(ByRef pConstrictionSize As SIZE)
    End Interface

    [ InterfaceId ("BDE633D3-E1DC-4A7F-A693-BBAE399C4A20") ]
    [ OleAutomation (False) ]
    Interface IMFVideoProcessorControl2 Extends IMFVideoProcessorControl
        Sub SetRotationOverride(ByVal uiRotation As Long)
        Sub EnableHardwareEffects(ByVal fEnabled As Long)
        Function GetSupportedHardwareEffects() As Long
    End Interface

    [ InterfaceId ("FA993888-4383-415A-A930-DD472A8CF6F7") ]
    [ OleAutomation (False) ]
    Interface IMFGetService Extends stdole.IUnknown
        Sub GetService(ByRef guidService As UUID, ByRef riid As UUID, ByRef ppvObject As Any)
    End Interface

    [ InterfaceId ("868CE85C-8EA9-4F55-AB82-B009A910A805") ]
    [ OleAutomation (False) ]
    Interface IMFPresentationClock Extends IMFClock
        Sub SetTimeSource(ByVal pTimeSource As IMFPresentationTimeSource)
        Sub GetTimeSource(ByRef ppTimeSource As IMFPresentationTimeSource)
        Sub GetTime(ByRef phnsClockTime As LongLong)
        Sub AddClockStateSink(ByVal pStateSink As IMFClockStateSink)
        Sub RemoveClockStateSink(ByVal pStateSink As IMFClockStateSink)
        Sub Start(ByVal llClockStartOffset As LongLong)
        Sub Stop()
        Sub Pause()
    End Interface

    [ InterfaceId ("7FF12CCE-F76F-41C2-863B-1666C8E5E139") ]
    [ OleAutomation (False) ]
    Interface IMFPresentationTimeSource Extends IMFClock
        Sub GetUnderlyingClock(ByRef ppClock As IMFClock)
    End Interface

    [ InterfaceId ("F6696E82-74F7-4F3D-A178-8A5E09C3659F") ]
    [ OleAutomation (False) ]
    Interface IMFClockStateSink Extends stdole.IUnknown
        Sub OnClockStart(ByVal hnsSystemTime As LongLong, ByVal llClockStartOffset As LongLong)
        Sub OnClockStop(ByVal hnsSystemTime As LongLong)
        Sub OnClockPause(ByVal hnsSystemTime As LongLong)
        Sub OnClockRestart(ByVal hnsSystemTime As LongLong)
        Sub OnClockSetRate(ByVal hnsSystemTime As LongLong, ByVal flRate As Single)
    End Interface

    [ InterfaceId ("E56E4CBD-8F70-49D8-A0F8-EDB3D6AB9BF2") ]
    [ OleAutomation (False) ]
    Interface IMFTimer Extends stdole.IUnknown
        Sub SetTimer(ByVal dwFlags As Long, ByVal llClockTime As LongLong, ByVal pCallback As IMFAsyncCallback, ByVal punkState As stdole.IUnknown, ByRef ppunkKey As stdole.IUnknown)
        Sub CancelTimer(ByVal punkKey As stdole.IUnknown)
    End Interface

    [ InterfaceId ("97EC2EA4-0E42-4937-97AC-9D6D328824E1") ]
    [ OleAutomation (False) ]
    Interface IMFShutdown Extends stdole.IUnknown
        Sub Shutdown()
        Sub GetShutdownStatus(ByRef pStatus As MFSHUTDOWN_STATUS)
    End Interface

    [ InterfaceId ("DE9A6157-F660-4643-B56A-DF9F7998C7CD") ]
    [ OleAutomation (False) ]
    Interface IMFTopoLoader Extends stdole.IUnknown
        Sub Load(ByVal pInputTopo As IMFTopology, ByRef ppOutputTopo As IMFTopology, ByVal pCurrentTopo As IMFTopology)
    End Interface

    [ InterfaceId ("ACF92459-6A61-42BD-B57C-B43E51203CB0") ]
    [ Description ("IMFContentProtectionManager Interface") ]
    [ OleAutomation (False) ]
    Interface IMFContentProtectionManager Extends stdole.IUnknown
        Sub BeginEnableContent(ByVal pEnablerActivate As IMFActivate, ByVal pTopo As IMFTopology, ByVal pCallback As IMFAsyncCallback, ByVal punkState As stdole.IUnknown)
        Sub EndEnableContent(ByVal pResult As IMFAsyncResult)
    End Interface

    [ InterfaceId ("D3C4EF59-49CE-4381-9071-D5BCD044C770") ]
    [ Description ("IMFContentEnabler Interface") ]
    [ OleAutomation (False) ]
    Interface IMFContentEnabler Extends stdole.IUnknown
        Sub GetEnableType(ByRef pType As UUID)
        Sub GetEnableURL(ByVal ppwszURL As LongPtr, ByRef pcchUrl As Long, ByRef pTrustStatus As MF_URL_TRUST_STATUS)
        Sub GetEnableData(ByVal ppbData As LongPtr, ByRef pcbData As Long)
        Sub IsAutomaticSupported(ByVal pfAutomatic As Long)
        Sub AutomaticEnable()
        Sub MonitorEnable()
        Sub Cancel()
    End Interface

    [ InterfaceId ("F88CFB8C-EF16-4991-B450-CB8C69E51704") ]
    [ OleAutomation (False) ]
    Interface IMFMetadata Extends stdole.IUnknown
        Sub SetLanguage(ByVal pwszRFC1766 As LongPtr)
        Sub GetLanguage(ByVal ppwszRFC1766 As LongPtr)
        Sub GetAllLanguages(ByRef ppvLanguages As Variant)
        Sub SetProperty(ByVal pwszName As LongPtr, ByRef ppvValue As Variant)
        Sub GetProperty(ByVal pwszName As LongPtr, ByRef ppvValue As Variant)
        Sub DeleteProperty(ByVal pwszName As LongPtr)
        Sub GetAllPropertyNames(ByRef ppvNames As Variant)
    End Interface

    [ InterfaceId ("56181D2D-E221-4ADB-B1C8-3CEE6A53F76F") ]
    [ OleAutomation (False) ]
    Interface IMFMetadataProvider Extends stdole.IUnknown
        Sub GetMFMetadata(ByVal pPresentationDescriptor As IMFPresentationDescriptor, ByVal dwStreamIdentifier As Long, ByVal dwFlags As Long, ByRef ppMFMetadata As IMFMetadata)
    End Interface

    [ InterfaceId ("0A9CCDBC-D797-4563-9667-94EC5D79292D") ]
    [ OleAutomation (False) ]
    Interface IMFRateSupport Extends stdole.IUnknown
        Sub GetSlowestRate(ByVal eDirection As MFRATE_DIRECTION, ByVal fThin As Long, ByRef pflRate As Single)
        Sub GetFastestRate(ByVal eDirection As MFRATE_DIRECTION, ByVal fThin As Long, ByRef pflRate As Single)
        Sub IsRateSupported(ByVal fThin As Long, ByVal flRate As Single, ByRef pflNearestSupportedRate As Single)
    End Interface

    [ InterfaceId ("88DDCD21-03C3-4275-91ED-55EE3929328F") ]
    [ OleAutomation (False) ]
    Interface IMFRateControl Extends stdole.IUnknown
        Sub SetRate(ByVal fThin As Long, ByVal flRate As Single)
        Sub GetRate(ByVal pfThin As Long, ByRef pflRate As Single)
    End Interface

    [ InterfaceId ("AB9D8661-F7E8-4EF4-9861-89F334F94E74") ]
    [ OleAutomation (False) ]
    Interface IMFTimecodeTranslate Extends stdole.IUnknown
        Sub BeginConvertTimecodeToHNS(ByRef pPropVarTimecode As Variant, ByVal pCallback As IMFAsyncCallback, ByVal punkState As stdole.IUnknown)
        Sub EndConvertTimecodeToHNS(ByVal pResult As IMFAsyncResult, ByRef phnsTime As LongLong)
        Sub BeginConvertHNSToTimecode(ByVal HNSTIME As LongLong, ByVal pCallback As IMFAsyncCallback, ByVal punkState As stdole.IUnknown)
        Sub EndConvertHNSToTimecode(ByVal pResult As IMFAsyncResult, ByRef pPropVarTimecode As Variant)
    End Interface

    [ InterfaceId ("26AFEA53-D9ED-42B5-AB80-E64F9EE34779") ]
    [ OleAutomation (False) ]
    Interface IMFSeekInfo Extends stdole.IUnknown
        Sub GetNearestKeyFrames(ByRef pguidTimeFormat As UUID, ByRef pvarStartPosition As Variant, ByRef pvarPreviousKeyFrame As Variant, ByRef pvarNextKeyFrame As Variant)
    End Interface

    [ InterfaceId ("089EDF13-CF71-4338-8D13-9E569DBDC319") ]
    [ OleAutomation (False) ]
    Interface IMFSimpleAudioVolume Extends stdole.IUnknown
        Sub SetMasterVolume(ByVal fLevel As Single)
        Sub GetMasterVolume(ByRef pfLevel As Single)
        Sub SetMute(ByVal bMute As Long)
        Sub GetMute(ByVal pbMute As Long)
    End Interface

    [ InterfaceId ("76B1BBDB-4EC8-4F36-B106-70A9316DF593") ]
    [ OleAutomation (False) ]
    Interface IMFAudioStreamVolume Extends stdole.IUnknown
        Sub GetChannelCount(ByRef pdwCount As Long)
        Sub SetChannelVolume(ByVal dwIndex As Long, ByVal fLevel As Single)
        Sub GetChannelVolume(ByVal dwIndex As Long, ByRef pfLevel As Single)
        Sub SetAllVolumes(ByVal dwCount As Long, ByRef pfVolumes As Single)
        Sub GetAllVolumes(ByVal dwCount As Long, ByRef pfVolumes As Single)
    End Interface

    [ InterfaceId ("A0638C2B-6465-4395-9AE7-A321A9FD2856") ]
    [ OleAutomation (False) ]
    Interface IMFAudioPolicy Extends stdole.IUnknown
        Sub SetGroupingParam(ByRef rguidClass As UUID)
        Sub GetGroupingParam(ByRef pguidClass As UUID)
        Sub SetDisplayName(ByVal pszName As LongPtr)
        Sub GetDisplayName(ByVal pszName As LongPtr)
        Sub SetIconPath(ByVal pszPath As LongPtr)
        Sub GetIconPath(ByVal pszPath As LongPtr)
    End Interface

    [ InterfaceId ("8C7B80BF-EE42-4B59-B1DF-55668E1BDCA8") ]
    [ OleAutomation (False) ]
    Interface IMFSampleGrabberSinkCallback Extends stdole.IUnknown
        Sub OnClockStart(ByVal hnsSystemTime As LongLong, ByVal llClockStartOffset As LongLong)
        Sub OnClockStop(ByVal hnsSystemTime As LongLong)
        Sub OnClockPause(ByVal hnsSystemTime As LongLong)
        Sub OnClockRestart(ByVal hnsSystemTime As LongLong)
        Sub OnClockSetRate(ByVal hnsSystemTime As LongLong, ByVal flRate As Single)
        Sub OnSetPresentationClock(ByVal pPresentationClock As IMFPresentationClock)
        Sub OnProcessSample(ByRef guidMajorMediaType As UUID, ByVal dwSampleFlags As Long, ByVal llSampleTime As LongLong, ByVal llSampleDuration As LongLong, ByRef pSampleBuffer As Byte, ByVal dwSampleSize As Long)
        Sub OnShutdown()
    End Interface

    [ InterfaceId ("CA86AA50-C46E-429E-AB27-16D6AC6844CB") ]
    [ OleAutomation (False) ]
    Interface IMFSampleGrabberSinkCallback2 Extends stdole.IUnknown
        Sub OnClockStart(ByVal hnsSystemTime As LongLong, ByVal llClockStartOffset As LongLong)
        Sub OnClockStop(ByVal hnsSystemTime As LongLong)
        Sub OnClockPause(ByVal hnsSystemTime As LongLong)
        Sub OnClockRestart(ByVal hnsSystemTime As LongLong)
        Sub OnClockSetRate(ByVal hnsSystemTime As LongLong, ByVal flRate As Single)
        Sub OnSetPresentationClock(ByVal pPresentationClock As IMFPresentationClock)
        Sub OnProcessSample(ByRef guidMajorMediaType As UUID, ByVal dwSampleFlags As Long, ByVal llSampleTime As LongLong, ByVal llSampleDuration As LongLong, ByRef pSampleBuffer As Byte, ByVal dwSampleSize As Long)
        Sub OnShutdown()
        Sub OnProcessSampleEx(ByRef guidMajorMediaType As UUID, ByVal dwSampleFlags As Long, ByVal llSampleTime As LongLong, ByVal llSampleDuration As LongLong, ByRef pSampleBuffer As Byte, ByVal dwSampleSize As Long, ByVal pAttributes As IMFAttributes)
    End Interface

    [ InterfaceId ("35FE1BB8-A3A9-40FE-BBEC-EB569C9CCCA3") ]
    [ OleAutomation (False) ]
    Interface IMFWorkQueueServices Extends stdole.IUnknown
        Sub BeginRegisterTopologyWorkQueuesWithMMCSS(ByVal pCallback As IMFAsyncCallback, ByVal pState As stdole.IUnknown)
        Sub EndRegisterTopologyWorkQueuesWithMMCSS(ByVal pResult As IMFAsyncResult)
        Sub BeginUnregisterTopologyWorkQueuesWithMMCSS(ByVal pCallback As IMFAsyncCallback, ByVal pState As stdole.IUnknown)
        Sub EndUnregisterTopologyWorkQueuesWithMMCSS(ByVal pResult As IMFAsyncResult)
        Sub GetTopologyWorkQueueMMCSSClass(ByVal dwTopologyWorkQueueId As Long, ByVal pwszClass As LongPtr, ByRef pcchClass As Long)
        Sub GetTopologyWorkQueueMMCSSTaskId(ByVal dwTopologyWorkQueueId As Long, ByRef pdwTaskId As Long)
        Sub BeginRegisterPlatformWorkQueueWithMMCSS(ByVal dwPlatformWorkQueue As Long, ByVal wszClass As LongPtr, ByVal dwTaskId As Long, ByVal pCallback As IMFAsyncCallback, ByVal pState As stdole.IUnknown)
        Sub EndRegisterPlatformWorkQueueWithMMCSS(ByVal pResult As IMFAsyncResult, ByRef pdwTaskId As Long)
        Sub BeginUnregisterPlatformWorkQueueWithMMCSS(ByVal dwPlatformWorkQueue As Long, ByVal pCallback As IMFAsyncCallback, ByVal pState As stdole.IUnknown)
        Sub EndUnregisterPlatformWorkQueueWithMMCSS(ByVal pResult As IMFAsyncResult)
        Sub GetPlaftormWorkQueueMMCSSClass(ByVal dwPlatformWorkQueueId As Long, ByVal pwszClass As LongPtr, ByRef pcchClass As Long)
        Sub GetPlatformWorkQueueMMCSSTaskId(ByVal dwPlatformWorkQueueId As Long, ByRef pdwTaskId As Long)
    End Interface

    [ InterfaceId ("96BF961B-40FE-42F1-BA9D-320238B49700") ]
    [ OleAutomation (False) ]
    Interface IMFWorkQueueServicesEx Extends IMFWorkQueueServices
        Sub GetTopologyWorkQueueMMCSSPriority(ByVal dwTopologyWorkQueueId As Long, ByRef plPriority As Long)
        Sub BeginRegisterPlatformWorkQueueWithMMCSSEx(ByVal dwPlatformWorkQueue As Long, ByVal wszClass As LongPtr, ByVal dwTaskId As Long, ByVal lPriority As Long, ByVal pCallback As IMFAsyncCallback, ByVal pState As stdole.IUnknown)
        Sub GetPlatformWorkQueueMMCSSPriority(ByVal dwPlatformWorkQueueId As Long, ByRef plPriority As Long)
    End Interface

    [ InterfaceId ("8D009D86-5B9F-4115-B1FC-9F80D52AB8AB") ]
    [ OleAutomation (False) ]
    Interface IMFQualityManager Extends stdole.IUnknown
        Sub NotifyTopology(ByVal pTopology As IMFTopology)
        Sub NotifyPresentationClock(ByVal pClock As IMFPresentationClock)
        Sub NotifyProcessInput(ByVal pNode As IMFTopologyNode, ByVal lInputIndex As Long, ByVal pSample As IMFSample)
        Sub NotifyProcessOutput(ByVal pNode As IMFTopologyNode, ByVal lOutputIndex As Long, ByVal pSample As IMFSample)
        Sub NotifyQualityEvent(ByVal pObject As stdole.IUnknown, ByVal pEvent As IMFMediaEvent)
        Sub Shutdown()
    End Interface

    [ InterfaceId ("EC15E2E9-E36B-4F7C-8758-77D452EF4CE7") ]
    [ OleAutomation (False) ]
    Interface IMFQualityAdvise Extends stdole.IUnknown
        Sub SetDropMode(ByVal eDropMode As MF_QUALITY_DROP_MODE)
        Sub SetQualityLevel(ByVal eQualityLevel As MF_QUALITY_LEVEL)
        Sub GetDropMode(ByRef peDropMode As MF_QUALITY_DROP_MODE)
        Sub GetQualityLevel(ByRef peQualityLevel As MF_QUALITY_LEVEL)
        Sub DropTime(ByVal hnsAmountToDrop As LongLong)
    End Interface

    [ InterfaceId ("F3706F0D-8EA2-4886-8000-7155E9EC2EAE") ]
    [ OleAutomation (False) ]
    Interface IMFQualityAdvise2 Extends IMFQualityAdvise
        Sub NotifyQualityEvent(ByVal pEvent As IMFMediaEvent, ByRef pdwFlags As Long)
    End Interface

    [ InterfaceId ("DFCD8E4D-30B5-4567-ACAA-8EB5B7853DC9") ]
    [ OleAutomation (False) ]
    Interface IMFQualityAdviseLimits Extends stdole.IUnknown
        Sub GetMaximumDropMode(ByRef peDropMode As MF_QUALITY_DROP_MODE)
        Sub GetMinimumQualityLevel(ByRef peQualityLevel As MF_QUALITY_LEVEL)
    End Interface

    [ InterfaceId ("2347D60B-3FB5-480C-8803-8DF3ADCD3EF0") ]
    [ OleAutomation (False) ]
    Interface IMFRealTimeClient Extends stdole.IUnknown
        Sub RegisterThreads(ByVal dwTaskIndex As Long, ByVal wszClass As LongPtr)
        Sub UnregisterThreads()
        Sub SetWorkQueue(ByVal dwWorkQueueId As Long)
    End Interface

    [ InterfaceId ("03910848-AB16-4611-B100-17B88AE2F248") ]
    [ OleAutomation (False) ]
    Interface IMFRealTimeClientEx Extends stdole.IUnknown
        Sub RegisterThreadsEx(ByRef pdwTaskIndex As Long, ByVal wszClassName As LongPtr, ByVal lBasePriority As Long)
        Sub UnregisterThreads()
        Sub SetWorkQueueEx(ByVal dwMultithreadedWorkQueueId As Long, ByVal lWorkItemBasePriority As Long)
    End Interface

    [ InterfaceId ("197CD219-19CB-4DE1-A64C-ACF2EDCBE59E") ]
    [ OleAutomation (False) ]
    Interface IMFSequencerSource Extends stdole.IUnknown
        Sub AppendTopology(ByVal pTopology As IMFTopology, ByVal dwFlags As Long, ByRef pdwId As Long)
        Sub DeleteTopology(ByVal dwID As Long)
        Sub GetPresentationContext(ByVal pPD As IMFPresentationDescriptor, ByRef pid As Long, ByRef ppTopology As IMFTopology)
        Sub UpdateTopology(ByVal dwID As Long, ByVal pTopology As IMFTopology)
        Sub UpdateTopologyFlags(ByVal dwID As Long, ByVal dwFlags As Long)
    End Interface

    [ InterfaceId ("0E1D6009-C9F3-442D-8C51-A42D2D49452F") ]
    [ OleAutomation (False) ]
    Interface IMFMediaSourceTopologyProvider Extends stdole.IUnknown
        Sub GetMediaSourceTopology(ByVal pPresentationDescriptor As IMFPresentationDescriptor, ByRef ppTopology As IMFTopology)
    End Interface

    [ InterfaceId ("0E1D600A-C9F3-442D-8C51-A42D2D49452F") ]
    [ OleAutomation (False) ]
    Interface IMFMediaSourcePresentationProvider Extends stdole.IUnknown
        Sub ForceEndOfPresentation(ByVal pPresentationDescriptor As IMFPresentationDescriptor)
    End Interface

    [ InterfaceId ("676AA6DD-238A-410D-BB99-65668D01605A") ]
    [ OleAutomation (False) ]
    Interface IMFTopologyNodeAttributeEditor Extends stdole.IUnknown
        Sub UpdateNodeAttributes(ByVal TopoId As LongLong, ByVal cUpdates As Long, ByRef pUpdates As MFTOPONODE_ATTRIBUTE_UPDATE)
    End Interface

  
    [ InterfaceId ("6D66D782-1D4F-4DB7-8C63-CB8C77F1EF5E") ]
    [ OleAutomation (False) ]
    Interface IMFByteStreamBuffering Extends stdole.IUnknown
        Sub SetBufferingParams(ByRef pparams As MFBYTESTREAM_BUFFERING_PARAMS)
        Sub EnableBuffering(ByVal fEnable As Long)
        Sub StopBuffering()
    End Interface

    [ InterfaceId ("F5042EA4-7A96-4A75-AA7B-2BE1EF7F88D5") ]
    [ OleAutomation (False) ]
    Interface IMFByteStreamCacheControl Extends stdole.IUnknown
        Sub StopBackgroundTransfer()
    End Interface

    [ InterfaceId ("64976BFA-FB61-4041-9069-8C9A5F659BEB") ]
    [ OleAutomation (False) ]
    Interface IMFByteStreamTimeSeek Extends stdole.IUnknown
        Sub IsTimeSeekSupported(ByVal pfTimeSeekIsSupported As Long)
        Sub TimeSeek(ByVal qwTimePosition As LongLong)
        Sub GetTimeSeekResult(ByRef pqwStartTime As LongLong, ByRef pqwStopTime As LongLong, ByRef pqwDuration As LongLong)
    End Interface

    [ InterfaceId ("71CE469C-F34B-49EA-A56B-2D2A10E51149") ]
    [ OleAutomation (False) ]
    Interface IMFByteStreamCacheControl2 Extends IMFByteStreamCacheControl
        Sub GetByteRanges(ByRef pcRanges As Long, ByVal ppRanges As LongPtr)
        Sub SetCacheLimit(ByVal qwBytes As LongLong)
        Sub IsBackgroundTransferActive(ByVal pfActive As Long)
    End Interface

    [ InterfaceId ("5B87EF6A-7ED8-434F-BA0E-184FAC1628D1") ]
    [ OleAutomation (False) ]
    Interface IMFNetCredential Extends stdole.IUnknown
        Sub SetUser(ByRef pbData As Byte, ByVal cbData As Long, ByVal fDataIsEncrypted As Long)
        Sub SetPassword(ByRef pbData As Byte, ByVal cbData As Long, ByVal fDataIsEncrypted As Long)
        Sub GetUser(ByRef pbData As Byte, ByRef pcbData As Long, ByVal fEncryptData As Long)
        Sub GetPassword(ByRef pbData As Byte, ByRef pcbData As Long, ByVal fEncryptData As Long)
        Sub LoggedOnUser(ByVal pfLoggedOnUser As Long)
    End Interface

    [ InterfaceId ("5B87EF6B-7ED8-434F-BA0E-184FAC1628D1") ]
    [ OleAutomation (False) ]
    Interface IMFNetCredentialManager Extends stdole.IUnknown
        Sub BeginGetCredentials(ByRef pParam As MFNetCredentialManagerGetParam, ByVal pCallback As IMFAsyncCallback, ByVal pState As stdole.IUnknown)
        Sub EndGetCredentials(ByVal pResult As IMFAsyncResult, ByRef ppCred As IMFNetCredential)
        Sub SetGood(ByVal pCred As IMFNetCredential, ByVal fGood As Long)
    End Interface

    [ InterfaceId ("5B87EF6C-7ED8-434F-BA0E-184FAC1628D1") ]
    [ OleAutomation (False) ]
    Interface IMFNetCredentialCache Extends stdole.IUnknown
        Sub GetCredential(ByVal pszUrl As LongPtr, ByVal pszRealm As LongPtr, ByVal dwAuthenticationFlags As Long, ByRef ppCred As IMFNetCredential, ByRef pdwRequirementsFlags As Long)
        Sub SetGood(ByVal pCred As IMFNetCredential, ByVal fGood As Long)
        Sub SetUserOptions(ByVal pCred As IMFNetCredential, ByVal dwOptionsFlags As Long)
    End Interface

    [ InterfaceId ("61F7D887-1230-4A8B-AEBA-8AD434D1A64D") ]
    [ OleAutomation (False) ]
    Interface IMFSSLCertificateManager Extends stdole.IUnknown
        Sub GetClientCertificate(ByVal pszUrl As LongPtr, ByRef ppbData As Byte, ByRef pcbData As Long)
        Sub BeginGetClientCertificate(ByVal pszUrl As LongPtr, ByVal pCallback As IMFAsyncCallback, ByVal pState As stdole.IUnknown)
        Sub EndGetClientCertificate(ByVal pResult As IMFAsyncResult, ByRef ppbData As Byte, ByRef pcbData As Long)
        Sub GetCertificatePolicy(ByVal pszUrl As LongPtr, ByVal pfOverrideAutomaticCheck As Long, ByVal pfClientCertificateAvailable As Long)
        Sub OnServerCertificate(ByVal pszUrl As LongPtr, ByRef pbData As Byte, ByVal cbData As Long, ByVal pfIsGood As Long)
    End Interface

    [ InterfaceId ("091878A3-BF11-4A5C-BC9F-33995B06EF2D") ]
    [ Description ("IMFNetResourceFilter Interface") ]
    [ OleAutomation (False) ]
    Interface IMFNetResourceFilter Extends stdole.IUnknown
        Sub OnRedirect(ByVal pszUrl As LongPtr, ByRef pvbCancel As Boolean)
        Sub OnSendingRequest(ByVal pszUrl As LongPtr)
    End Interface

    [ InterfaceId ("059054B3-027C-494C-A27D-9113291CF87F") ]
    [ OleAutomation (False) ]
    Interface IMFSourceOpenMonitor Extends stdole.IUnknown
        Sub OnSourceEvent(ByVal pEvent As IMFMediaEvent)
    End Interface

    [ InterfaceId ("E9CD0383-A268-4BB4-82DE-658D53574D41") ]
    [ OleAutomation (False) ]
    Interface IMFNetProxyLocator Extends stdole.IUnknown
        Sub FindFirstProxy(ByVal pszHost As LongPtr, ByVal pszUrl As LongPtr, ByVal fReserved As Long)
        Sub FindNextProxy()
        Sub RegisterProxyResult(ByVal hrOp As Long)
        Sub GetCurrentProxy(ByVal pszStr As LongPtr, ByRef pcchStr As Long)
        Sub Clone(ByRef ppProxyLocator As IMFNetProxyLocator)
    End Interface

    [ InterfaceId ("E9CD0384-A268-4BB4-82DE-658D53574D41") ]
    [ OleAutomation (False) ]
    Interface IMFNetProxyLocatorFactory Extends stdole.IUnknown
        Sub CreateProxyLocator(ByVal pszProtocol As LongPtr, ByRef ppProxyLocator As IMFNetProxyLocator)
    End Interface

    [ InterfaceId ("E9931663-80BF-4C6E-98AF-5DCF58747D1F") ]
    [ OleAutomation (False) ]
    Interface IMFSaveJob Extends stdole.IUnknown
        Sub BeginSave(ByVal pStream As IMFByteStream, ByVal pCallback As IMFAsyncCallback, ByVal pState As stdole.IUnknown)
        Sub EndSave(ByVal pResult As IMFAsyncResult)
        Sub CancelSave()
        Sub GetProgress(ByRef pdwPercentComplete As Long)
    End Interface

    [ InterfaceId ("7BE19E73-C9BF-468A-AC5A-A5E8653BEC87") ]
    [ OleAutomation (False) ]
    Interface IMFNetSchemeHandlerConfig Extends stdole.IUnknown
        Sub GetNumberOfSupportedProtocols(ByRef pcProtocols As Long)
        Sub GetSupportedProtocolType(ByVal nProtocolIndex As Long, ByRef pnProtocolType As MFNETSOURCE_PROTOCOL_TYPE)
        Sub ResetProtocolRolloverSettings()
    End Interface


    [ InterfaceId ("6D4C7B74-52A0-4BB7-B0DB-55F29F47A668") ]
    [ OleAutomation (False) ]
    Interface IMFSchemeHandler Extends stdole.IUnknown
        Sub BeginCreateObject(ByVal pwszUrl As LongPtr, ByVal dwFlags As Long, ByVal pProps As IPropertyStore, ByRef ppIUnknownCancelCookie As IUnknown, ByVal pCallback As IMFAsyncCallback, ByVal punkState As stdole.IUnknown)
        Sub EndCreateObject(ByVal pResult As IMFAsyncResult, ByRef pObjectType As MF_OBJECT_TYPE, ByRef ppObject As stdole.IUnknown)
        Sub CancelObjectCreation(ByVal pIUnknownCancelCookie As stdole.IUnknown)
    End Interface

    [ InterfaceId ("BB420AA4-765B-4A1F-91FE-D6A8A143924C") ]
    [ OleAutomation (False) ]
    Interface IMFByteStreamHandler Extends stdole.IUnknown
        Sub BeginCreateObject(ByVal pByteStream As IMFByteStream, ByVal pwszUrl As LongPtr, ByVal dwFlags As Long, ByVal pProps As IPropertyStore, ByRef ppIUnknownCancelCookie As IUnknown, ByVal pCallback As IMFAsyncCallback, ByVal punkState As stdole.IUnknown)
        Sub EndCreateObject(ByVal pResult As IMFAsyncResult, ByRef pObjectType As MF_OBJECT_TYPE, ByRef ppObject As stdole.IUnknown)
        Sub CancelObjectCreation(ByVal pIUnknownCancelCookie As stdole.IUnknown)
        Sub GetMaxNumberOfBytesRequiredForResolution(ByRef pqwBytes As LongLong)
    End Interface

    [ InterfaceId ("542612C4-A1B8-4632-B521-DE11EA64A0B0") ]
    [ Description ("IMFTrustedInput Interface") ]
    [ OleAutomation (False) ]
    Interface IMFTrustedInput Extends stdole.IUnknown
        Sub GetInputTrustAuthority(ByVal dwStreamId As Long, ByRef riid As UUID, ByRef ppunkObject As stdole.IUnknown)
    End Interface

    [ InterfaceId ("D19F8E98-B126-4446-890C-5DCB7AD71453") ]
    [ Description ("IMFInputTrustAuthority Interface") ]
    [ OleAutomation (False) ]
    Interface IMFInputTrustAuthority Extends stdole.IUnknown
        Sub GetDecrypter(ByRef riid As UUID, ByRef ppv As Any)
        Sub RequestAccess(ByVal action As MFPOLICYMANAGER_ACTION, ByRef ppContentEnablerActivate As IMFActivate)
        Sub GetPolicy(ByVal action As MFPOLICYMANAGER_ACTION, ByRef ppPolicy As IMFOutputPolicy)
        Sub BindAccess(ByRef pParam As MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS)
        Sub UpdateAccess(ByRef pParam As MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS)
        Sub Reset()
    End Interface

    [ InterfaceId ("D19F8E95-B126-4446-890C-5DCB7AD71453") ]
    [ Description ("IMFTrustedOutput Interface") ]
    [ OleAutomation (False) ]
    Interface IMFTrustedOutput Extends stdole.IUnknown
        Sub GetOutputTrustAuthorityCount(ByRef pcOutputTrustAuthorities As Long)
        Sub GetOutputTrustAuthorityByIndex(ByVal dwIndex As Long, ByRef ppauthority As IMFOutputTrustAuthority)
        Sub IsFinal(ByVal pfIsFinal As Long)
    End Interface

    [ InterfaceId ("D19F8E94-B126-4446-890C-5DCB7AD71453") ]
    [ Description ("IMFOutputTrustAuthority Interface") ]
    [ OleAutomation (False) ]
    Interface IMFOutputTrustAuthority Extends stdole.IUnknown
        Sub GetAction(ByRef pAction As MFPOLICYMANAGER_ACTION)
        Sub SetPolicy(ByVal ppPolicy As IMFOutputPolicy, ByVal nPolicy As Long, ByVal ppbTicket As LongPtr, ByRef pcbTicket As Long)
    End Interface

    [ InterfaceId ("7F00F10A-DAED-41AF-AB26-5FDFA4DFBA3C") ]
    [ Description ("IMFOutputPolicy Interface") ]
    [ OleAutomation (False) ]
    Interface IMFOutputPolicy Extends IMFAttributes
        #If Win64 Then
        Sub GenerateRequiredSchemas(ByVal dwAttributes As Long, ByRef guidOutputSubType As UUID, ByRef rgGuidProtectionSchemasSupported As UUID, ByVal cProtectionSchemasSupported As Long, ByRef ppRequiredProtectionSchemas As IMFCollection)
        #Else
        Sub GenerateRequiredSchemas(ByVal dwAttributes As Long, ByVal guidOutputSubType1 As Long, ByVal guidOutputSubType2 As Long, ByVal guidOutputSubType3 As Long, ByVal guidOutputSubType4 As Long, ByRef rgGuidProtectionSchemasSupported As UUID, ByVal cProtectionSchemasSupported As Long, ByRef ppRequiredProtectionSchemas As IMFCollection)
        #End If
        Sub GetOriginatorID(ByRef pguidOriginatorID As UUID)
        Sub GetMinimumGRLVersion(ByRef pdwMinimumGRLVersion As Long)
    End Interface

    [ InterfaceId ("7BE0FC5B-ABD9-44FB-A5C8-F50136E71599") ]
    [ Description ("IMFOutputSchema Interface") ]
    [ OleAutomation (False) ]
    Interface IMFOutputSchema Extends IMFAttributes
        Sub GetSchemaType(ByRef pguidSchemaType As UUID)
        Sub GetConfigurationData(ByRef pdwVal As Long)
        Sub GetOriginatorID(ByRef pguidOriginatorID As UUID)
    End Interface

    [ InterfaceId ("D0AE555D-3B12-4D97-B060-0990BC5AEB67") ]
    [ OleAutomation (False) ]
    Interface IMFSecureChannel Extends stdole.IUnknown
        Sub GetCertificate(ByVal ppCert As LongPtr, ByRef pcbCert As Long)
        Sub SetupSession(ByRef pbEncryptedSessionKey As Byte, ByVal cbSessionKey As Long)
    End Interface

    [ InterfaceId ("8E36395F-C7B9-43C4-A54D-512B4AF63C95") ]
    [ OleAutomation (False) ]
    Interface IMFSampleProtection Extends stdole.IUnknown
        Sub GetInputProtectionVersion(ByRef pdwVersion As Long)
        Sub GetOutputProtectionVersion(ByRef pdwVersion As Long)
        Sub GetProtectionCertificate(ByVal dwVersion As Long, ByVal ppCert As LongPtr, ByRef pcbCert As Long)
        Sub InitOutputProtection(ByVal dwVersion As Long, ByVal dwOutputId As Long, ByRef pbCert As Byte, ByVal cbCert As Long, ByRef ppbSeed As Byte, ByRef pcbSeed As Long)
        Sub InitInputProtection(ByVal dwVersion As Long, ByVal dwInputId As Long, ByRef pbSeed As Byte, ByVal cbSeed As Long)
    End Interface

    [ InterfaceId ("5DFD4B2A-7674-4110-A4E6-8A68FD5F3688") ]
    [ OleAutomation (False) ]
    Interface IMFMediaSinkPreroll Extends stdole.IUnknown
        Sub NotifyPreroll(ByVal hnsUpcomingStartTime As LongLong)
    End Interface

    [ InterfaceId ("EAECB74A-9A50-42CE-9541-6A7F57AA4AD7") ]
    [ OleAutomation (False) ]
    Interface IMFFinalizableMediaSink Extends IMFMediaSink
        Sub BeginFinalize(ByVal pCallback As IMFAsyncCallback, ByVal punkState As stdole.IUnknown)
        Sub EndFinalize(ByVal pResult As IMFAsyncResult)
    End Interface

    [ InterfaceId ("9DB7AA41-3CC5-40D4-8509-555804AD34CC") ]
    [ OleAutomation (False) ]
    Interface IMFStreamingSinkConfig Extends stdole.IUnknown
        Sub StartStreaming(ByVal fSeekOffsetIsByteOffset As Long, ByVal qwSeekOffset As LongLong)
    End Interface

    [ InterfaceId ("994E23AD-1CC2-493C-B9FA-46F1CB040FA4") ]
    [ OleAutomation (False) ]
    Interface IMFRemoteProxy Extends stdole.IUnknown
        Sub GetRemoteObject(ByRef riid As UUID, ByRef ppv As Any)
        Sub GetRemoteHost(ByRef riid As UUID, ByRef ppv As Any)
    End Interface

    [ InterfaceId ("09EF5BE3-C8A7-469E-8B70-73BF25BB193F") ]
    [ OleAutomation (False) ]
    Interface IMFObjectReferenceStream Extends stdole.IUnknown
        Sub SaveReference(ByRef riid As UUID, ByVal pUnk As stdole.IUnknown)
        Sub LoadReference(ByRef riid As UUID, ByRef ppv As Any)
    End Interface

    [ InterfaceId ("F70CA1A9-FDC7-4782-B994-ADFFB1C98606") ]
    [ OleAutomation (False) ]
    Interface IMFPMPHost Extends stdole.IUnknown
        Sub LockProcess()
        Sub UnlockProcess()
        Sub CreateObjectByCLSID(ByRef clsid As UUID, ByVal pStream As IStream, ByRef riid As UUID, ByRef ppv As Any)
    End Interface

    [ InterfaceId ("6C4E655D-EAD8-4421-B6B9-54DCDBBDF820") ]
    [ OleAutomation (False) ]
    Interface IMFPMPClient Extends stdole.IUnknown
        Sub SetPMPHost(ByVal pPMPHost As IMFPMPHost)
    End Interface

    [ InterfaceId ("994E23AF-1CC2-493C-B9FA-46F1CB040FA4") ]
    [ OleAutomation (False) ]
    Interface IMFPMPServer Extends stdole.IUnknown
        Sub LockProcess()
        Sub UnlockProcess()
        Sub CreateObjectByCLSID(ByRef clsid As UUID, ByRef riid As UUID, ByRef ppObject As Any)
    End Interface

    [ InterfaceId ("1CDE6309-CAE0-4940-907E-C1EC9C3D1D4A") ]
    [ OleAutomation (False) ]
    Interface IMFRemoteDesktopPlugin Extends stdole.IUnknown
        Sub UpdateTopology(ByVal pTopology As IMFTopology)
    End Interface

    [ InterfaceId ("A7E025DD-5303-4A62-89D6-E747E1EFAC73") ]
    [ OleAutomation (False) ]
    Interface IMFSAMIStyle Extends stdole.IUnknown
        Sub GetStyleCount(ByRef pdwCount As Long)
        Sub GetStyles(ByRef pPropVarStyleArray As Variant)
        Sub SetSelectedStyle(ByVal pwszStyle As LongPtr)
        Sub GetSelectedStyle(ByVal ppwszStyle As LongPtr)
    End Interface

    [ InterfaceId ("4ADFDBA3-7AB0-4953-A62B-461E7FF3DA1E") ]
    [ OleAutomation (False) ]
    Interface IMFTranscodeProfile Extends stdole.IUnknown
        Sub SetAudioAttributes(ByVal pAttrs As IMFAttributes)
        Sub GetAudioAttributes(ByRef ppAttrs As IMFAttributes)
        Sub SetVideoAttributes(ByVal pAttrs As IMFAttributes)
        Sub GetVideoAttributes(ByRef ppAttrs As IMFAttributes)
        Sub SetContainerAttributes(ByVal pAttrs As IMFAttributes)
        Sub GetContainerAttributes(ByRef ppAttrs As IMFAttributes)
    End Interface

    [ InterfaceId ("8CFFCD2E-5A03-4A3A-AFF7-EDCD107C620E") ]
    [ OleAutomation (False) ]
    Interface IMFTranscodeSinkInfoProvider Extends stdole.IUnknown
        Sub SetOutputFile(ByVal pwszFileName As LongPtr)
        Sub SetOutputByteStream(ByVal pByteStreamActivate As IMFActivate)
        Sub SetProfile(ByVal pProfile As IMFTranscodeProfile)
        Sub GetSinkInfo(ByRef pSinkInfo As MF_TRANSCODE_SINK_INFO)
    End Interface

    [ InterfaceId ("508E71D3-EC66-4FC3-8775-B4B9ED6BA847") ]
    [ OleAutomation (False) ]
    Interface IMFFieldOfUseMFTUnlock Extends stdole.IUnknown
        Sub Unlock(ByVal pUnkMFT As stdole.IUnknown)
    End Interface

    [ InterfaceId ("149C4D73-B4BE-4F8D-8B87-079E926B6ADD") ]
    [ OleAutomation (False) ]
    Interface IMFLocalMFTRegistration Extends stdole.IUnknown
        Sub RegisterMFTs(ByRef pMFTs As MFT_REGISTRATION_INFO, ByVal cMFTs As Long)
    End Interface

    [ InterfaceId ("84D2054A-3AA1-4728-A3B0-440A418CF49C") ]
    [ OleAutomation (False) ]
    Interface IMFPMPHostApp Extends stdole.IUnknown
        Sub LockProcess()
        Sub UnlockProcess()
        Sub ActivateClassById(ByVal id As LongPtr, ByVal pStream As IStream, ByRef riid As UUID, ByRef ppv As Any)
    End Interface

    [ InterfaceId ("C004F646-BE2C-48F3-93A2-A0983EBA1108") ]
    [ OleAutomation (False) ]
    Interface IMFPMPClientApp Extends stdole.IUnknown
        Sub SetPMPHost(ByVal pPMPHost As IMFPMPHostApp)
    End Interface

    [ InterfaceId ("380B9AF9-A85B-4E78-A2AF-EA5CE645C6B4") ]
    [ OleAutomation (False) ]
    Interface IMFMediaStreamSourceSampleRequest Extends stdole.IUnknown
        Sub SetSample(ByVal Value As IMFSample)
    End Interface

    [ InterfaceId ("245BF8E9-0755-40F7-88A5-AE0F18D55E17") ]
    [ Description ("IMFTrackedSample Interface") ]
    [ OleAutomation (False) ]
    Interface IMFTrackedSample Extends stdole.IUnknown
        Sub SetAllocator(ByVal pSampleAllocator As IMFAsyncCallback, ByVal punkState As stdole.IUnknown)
    End Interface

    [ InterfaceId ("EF5DC845-F0D9-4EC9-B00C-CB5183D38434") ]
    [ OleAutomation (False) ]
    Interface IMFProtectedEnvironmentAccess Extends stdole.IUnknown
        Sub Call(ByVal inputLength As Long, ByRef input As Byte, ByVal outputLength As Long, ByRef Output As Byte)
        Sub ReadGRL(ByRef outputLength As Long, ByVal Output As LongPtr)
    End Interface

    [ InterfaceId ("4A724BCA-FF6A-4C07-8E0D-7A358421CF06") ]
    [ OleAutomation (False) ]
    Interface IMFSignedLibrary Extends stdole.IUnknown
        Sub GetProcedureAddress(ByVal Name As String, ByVal address As LongPtr)
    End Interface

    [ InterfaceId ("FFF4AF3A-1FC1-4EF9-A29B-D26C49E2F31A") ]
    [ OleAutomation (False) ]
    Interface IMFSystemId Extends stdole.IUnknown
        Sub GetData(ByRef SIZE As Long, ByVal data As LongPtr)
        Sub Setup(ByVal stage As Long, ByVal cbIn As Long, ByRef pbIn As Byte, ByRef pcbOut As Long, ByVal ppbOut As LongPtr)
    End Interface


    [ InterfaceId ("E6257174-A060-4C9A-A088-3B1B471CAD28") ]
    [ OleAutomation (False) ]
    Interface IMFContentProtectionDevice Extends stdole.IUnknown
        Sub InvokeFunction(ByVal FunctionId As Long, ByVal InputBufferByteCount As Long, ByRef InputBuffer As Byte, ByRef OutputBufferByteCount As Long, ByRef OutputBuffer As Byte)
        Sub GetPrivateDataByteCount(ByRef PrivateInputByteCount As Long, ByRef PrivateOutputByteCount As Long)
    End Interface

    [ InterfaceId ("7EC4B1BD-43FB-4763-85D2-64FCB5C5F4CB") ]
    [ OleAutomation (False) ]
    Interface IMFContentDecryptorContext Extends stdole.IUnknown
        Sub InitializeHardwareKey(ByVal InputPrivateDataByteCount As Long, ByRef InputPrivateData As Any, ByRef OutputPrivateData As LongLong)
    End Interface

    [ InterfaceId ("1F6A9F17-E70B-4E24-8AE4-0B2C3BA7A4AE") ]
    [ Description ("IMFVideoPositionMapper Interface") ]
    [ OleAutomation (False) ]
    Interface IMFVideoPositionMapper Extends stdole.IUnknown
        Sub MapOutputCoordinateToInputStream(ByVal xOut As Single, ByVal yOut As Single, ByVal dwOutputStreamIndex As Long, ByVal dwInputStreamIndex As Long, ByRef pxIn As Single, ByRef pyIn As Single)
    End Interface

    [ InterfaceId ("A38D9567-5A9C-4F3C-B293-8EB415B279BA") ]
    [ Description ("IMFVideoDeviceID Interface") ]
    [ OleAutomation (False) ]
    Interface IMFVideoDeviceID Extends stdole.IUnknown
        Sub GetDeviceId(ByRef pDeviceID As UUID)
    End Interface

    [ InterfaceId ("A490B1E4-AB84-4D31-A1B2-181E03B1077A") ]
    [ Description ("IMFVideoDisplayControl Interface") ]
    [ OleAutomation (False) ]
    Interface IMFVideoDisplayControl Extends stdole.IUnknown
        Sub GetNativeVideoSize(ByRef pszVideo As SIZE, ByRef pszARVideo As SIZE)
        Sub GetIdealVideoSize(ByRef pszMin As SIZE, ByRef pszMax As SIZE)
        Sub SetVideoPosition(ByRef pnrcSource As MFVideoNormalizedRect, ByRef prcDest As RECT)
        Sub GetVideoPosition(ByRef pnrcSource As MFVideoNormalizedRect, ByRef prcDest As RECT)
        Sub SetAspectRatioMode(ByVal dwAspectRatioMode As Long)
        Sub GetAspectRatioMode(ByRef pdwAspectRatioMode As Long)
        Sub SetVideoWindow(ByVal hwndVideo As LongPtr)
        Sub GetVideoWindow(ByRef phwndVideo As LongPtr)
        Sub RepaintVideo()
        Sub GetCurrentImage(ByRef pBih As BITMAPINFOHEADER, ByVal pDib As LongPtr, ByRef pcbDib As Long, ByRef pTimeStamp As LongLong)
        Sub SetBorderColor(ByVal clr As Long)
        Sub GetBorderColor(ByRef pclr As Long)
        Sub SetRenderingPrefs(ByVal dwRenderFlags As Long)
        Sub GetRenderingPrefs(ByRef pdwRenderFlags As Long)
        Sub SetFullscreen(ByVal fFullscreen As Long)
        Sub GetFullscreen(ByVal pfFullscreen As Long)
    End Interface

    [ InterfaceId ("29AFF080-182A-4A5D-AF3B-448F3A6346CB") ]
    [ Description ("IMFVideoPresenter Interface") ]
    [ OleAutomation (False) ]
    Interface IMFVideoPresenter Extends IMFClockStateSink
        Sub ProcessMessage(ByVal eMessage As MFVP_MESSAGE_TYPE, ByVal ulParam As LongPtr)
        Sub GetCurrentMediaType(ByRef ppMediaType As IMFVideoMediaType)
    End Interface

    [ InterfaceId ("56C294D0-753E-4260-8D61-A3D8820B1D54") ]
    [ Description ("IMFDesiredSample Interface") ]
    [ OleAutomation (False) ]
    Interface IMFDesiredSample Extends stdole.IUnknown
        Sub GetDesiredSampleTimeAndDuration(ByRef phnsSampleTime As LongLong, ByRef phnsSampleDuration As LongLong)
        [ PreserveSig ]
        Sub SetDesiredSampleTimeAndDuration(ByVal hnsSampleTime As LongLong, ByVal hnsSampleDuration As LongLong)
        [ PreserveSig ]
        Sub Clear()
    End Interface

    [ InterfaceId ("A5C6C53F-C202-4AA5-9695-175BA8C508A5") ]
    [ Description ("IMFVideoMixerControl Interface") ]
    [ OleAutomation (False) ]
    Interface IMFVideoMixerControl Extends stdole.IUnknown
        Sub SetStreamZOrder(ByVal dwStreamId As Long, ByVal dwZ As Long)
        Sub GetStreamZOrder(ByVal dwStreamId As Long, ByRef pdwZ As Long)
        Sub SetStreamOutputRect(ByVal dwStreamId As Long, ByRef pnrcOutput As MFVideoNormalizedRect)
        Sub GetStreamOutputRect(ByVal dwStreamId As Long, ByRef pnrcOutput As MFVideoNormalizedRect)
    End Interface

    [ InterfaceId ("8459616D-966E-4930-B658-54FA7E5A16D3") ]
    [ Description ("IMFVideoMixerControl2 Interface") ]
    [ OleAutomation (False) ]
    Interface IMFVideoMixerControl2 Extends IMFVideoMixerControl
        Sub SetMixingPrefs(ByVal dwMixFlags As Long)
        Sub GetMixingPrefs(ByRef pdwMixFlags As Long)
    End Interface

    [ InterfaceId ("DFDFD197-A9CA-43D8-B341-6AF3503792CD") ]
    [ Description ("IMFVideoRenderer Interface") ]
    [ OleAutomation (False) ]
    Interface IMFVideoRenderer Extends stdole.IUnknown
        Sub InitializeRenderer(ByVal pVideoMixer As IMFTransform, ByVal pVideoPresenter As IMFVideoPresenter)
    End Interface

    [ InterfaceId ("83E91E85-82C1-4EA7-801D-85DC50B75086") ]
    [ Description ("IEVRFilterConfig Interface") ]
    [ OleAutomation (False) ]
    Interface IEVRFilterConfig Extends stdole.IUnknown
        Sub SetNumberOfStreams(ByVal dwMaxStreams As Long)
        Sub GetNumberOfStreams(ByRef pdwMaxStreams As Long)
    End Interface

    [ InterfaceId ("AEA36028-796D-454F-BEEE-B48071E24304") ]
    [ Description ("IEVRFilterConfigEx Interface") ]
    [ OleAutomation (False) ]
    Interface IEVRFilterConfigEx Extends IEVRFilterConfig
        Sub SetConfigPrefs(ByVal dwConfigFlags As Long)
        Sub GetConfigPrefs(ByRef pdwConfigFlags As Long)
    End Interface

    [ InterfaceId ("FA993889-4383-415A-A930-DD472A8CF6F7") ]
    [ Description ("IMFTopologyServiceLookup Interface") ]
    [ OleAutomation (False) ]
    Interface IMFTopologyServiceLookup Extends stdole.IUnknown
        Sub LookupService(ByVal type As MF_SERVICE_LOOKUP_TYPE, ByVal dwIndex As Long, ByRef guidService As UUID, ByRef riid As UUID, ByRef ppvObjects As Any, ByRef pnObjects As Long)
    End Interface

    [ InterfaceId ("FA99388A-4383-415A-A930-DD472A8CF6F7") ]
    [ OleAutomation (False) ]
    Interface IMFTopologyServiceLookupClient Extends stdole.IUnknown
        Sub InitServicePointers(ByVal pLookup As IMFTopologyServiceLookup)
        Sub ReleaseServicePointers()
    End Interface

    [ InterfaceId ("83A4CE40-7710-494B-A893-A472049AF630") ]
    [ Description ("IEVRTrustedVideoPlugin Interface") ]
    [ OleAutomation (False) ]
    Interface IEVRTrustedVideoPlugin Extends stdole.IUnknown
        Sub IsInTrustedVideoMode(ByVal pYes As Long)
        Sub CanConstrict(ByVal pYes As Long)
        Sub SetConstriction(ByVal dwKPix As Long)
        Sub DisableImageExport(ByVal bDisable As Long)
    End Interface

    [ InterfaceId ("A714590A-58AF-430A-85BF-44F5EC838D85") ]
    [ OleAutomation (False) ]
    Interface IMFPMediaPlayer Extends stdole.IUnknown
        Sub Play()
        Sub Pause()
        Sub Stop()
        Sub FrameStep()
        Sub SetPosition(ByRef guidPositionType As UUID, ByRef pvPositionValue As Variant)
        Sub GetPosition(ByRef guidPositionType As UUID, ByRef pvPositionValue As Variant)
        Sub GetDuration(ByRef guidPositionType As UUID, ByRef pvDurationValue As Variant)
        Sub SetRate(ByVal flRate As Single)
        Sub GetRate(ByRef pflRate As Single)
        Sub GetSupportedRates(ByVal fForwardDirection As Long, ByRef pflSlowestRate As Single, ByRef pflFastestRate As Single)
        Sub GetState(ByRef peState As MFP_MEDIAPLAYER_STATE)
        Sub CreateMediaItemFromURL(ByVal pwszUrl As LongPtr, ByVal fSync As Long, ByVal dwUserData As LongPtr, ByRef ppMediaItem As IMFPMediaItem)
        Sub CreateMediaItemFromObject(ByVal pIUnknownObj As stdole.IUnknown, ByVal fSync As Long, ByVal dwUserData As LongPtr, ByRef ppMediaItem As IMFPMediaItem)
        Sub SetMediaItem(ByVal pIMFPMediaItem As IMFPMediaItem)
        Sub ClearMediaItem()
        Sub GetMediaItem(ByRef ppIMFPMediaItem As IMFPMediaItem)
        Sub GetVolume(ByRef pflVolume As Single)
        Sub SetVolume(ByVal flVolume As Single)
        Sub GetBalance(ByRef pflBalance As Single)
        Sub SetBalance(ByVal flBalance As Single)
        Sub GetMute(ByVal pfMute As Long)
        Sub SetMute(ByVal fMute As Long)
        Sub GetNativeVideoSize(ByRef pszVideo As SIZE, ByRef pszARVideo As SIZE)
        Sub GetIdealVideoSize(ByRef pszMin As SIZE, ByRef pszMax As SIZE)
        Sub SetVideoSourceRect(ByRef pnrcSource As MFVideoNormalizedRect)
        Sub GetVideoSourceRect(ByRef pnrcSource As MFVideoNormalizedRect)
        Sub SetAspectRatioMode(ByVal dwAspectRatioMode As Long)
        Sub GetAspectRatioMode(ByRef pdwAspectRatioMode As Long)
        Sub GetVideoWindow(ByRef phwndVideo As LongPtr)
        Sub UpdateVideo()
        Sub SetBorderColor(ByVal clr As Long)
        Sub GetBorderColor(ByRef pclr As Long)
        Sub InsertEffect(ByVal pEffect As stdole.IUnknown, ByVal fOptional As Long)
        Sub RemoveEffect(ByVal pEffect As stdole.IUnknown)
        Sub RemoveAllEffects()
        Sub Shutdown()
    End Interface

    [ InterfaceId ("90EB3E6B-ECBF-45CC-B1DA-C6FE3EA70D57") ]
    [ OleAutomation (False) ]
    Interface IMFPMediaItem Extends stdole.IUnknown
        Sub GetMediaPlayer(ByRef ppMediaPlayer As IMFPMediaPlayer)
        Sub GetUrl(ByRef ppwszURL As Long)
        Sub GetObject(ByRef ppIUnknown As IUnknown)
        Sub GetUserData(ByRef pdwUserData As LongPtr)
        Sub SetUserData(ByVal dwUserData As LongPtr)
        Sub GetStartStopPosition(ByRef pguidStartPositionType As UUID, ByRef pvStartValue As Variant, ByRef pguidStopPositionType As UUID, ByRef pvStopValue As Variant)
        Sub SetStartStopPosition(ByRef pguidStartPositionType As UUID, ByRef pvStartValue As Variant, ByRef pguidStopPositionType As UUID, ByRef pvStopValue As Variant)
        Sub HasVideo(ByVal pfHasVideo As Long, ByVal pfSelected As Long)
        Sub HasAudio(ByVal pfHasAudio As Long, ByVal pfSelected As Long)
        Sub IsProtected(ByVal pfProtected As Long)
        Sub GetDuration(ByRef guidPositionType As UUID, ByRef pvDurationValue As Variant)
        Sub GetNumberOfStreams(ByRef pdwStreamCount As Long)
        Sub GetStreamSelection(ByVal dwStreamIndex As Long, ByVal pfEnabled As Long)
        Sub SetStreamSelection(ByVal dwStreamIndex As Long, ByVal fEnabled As Long)
        Sub GetStreamAttribute(ByVal dwStreamIndex As Long, ByRef guidMFAttribute As UUID, ByRef pvValue As Variant)
        Sub GetPresentationAttribute(ByRef guidMFAttribute As UUID, ByRef pvValue As Variant)
        Sub GetCharacteristics(ByRef pCharacteristics As MFP_MEDIAITEM_CHARACTERISTICS)
        Sub SetStreamSink(ByVal dwStreamIndex As Long, ByVal pMediaSink As stdole.IUnknown)
        Sub GetMetadata(ByRef ppMetadataStore As IPropertyStore)
    End Interface


    [ InterfaceId ("766C8FFB-5FDB-4FEA-A28D-B912996F51BD") ]
    [ OleAutomation (False) ]
    Interface IMFPMediaPlayerCallback Extends stdole.IUnknown
        Sub OnMediaPlayerEvent(ByRef pEventHeader As MFP_EVENT_HEADER)
    End Interface
    
    [ InterfaceId ("09D0F835-92FF-4E53-8EFA-40FAA551F233") ]
    [ OleAutomation (False) ]
    Interface IMFD3D12SynchronizationObjectCommands Extends IUnknown
        Sub EnqueueResourceReady(ByVal pProducerCommandQueue As ID3D12CommandQueue)
        Sub EnqueueResourceReadyWait(ByVal pConsumerCommandQueue As ID3D12CommandQueue)
        Sub SignalEventOnResourceReady(ByVal hEvent As LongPtr)
        Sub EnqueueResourceRelease(ByVal pConsumerCommandQueue As ID3D12CommandQueue)
    End Interface
    
    [ InterfaceId ("802302B0-82DE-45E1-B421-F19EE5BDAF23") ]
    [ OleAutomation (False) ]
    Interface IMFD3D12SynchronizationObject Extends IUnknown
        Sub SignalEventOnFinalResourceRelease(ByVal hEvent As LongPtr)
        Sub Reset()
    End Interface
    
[ InterfaceId ("aeda51c0-9025-4983-9012-de597b88b089") ]
Interface IMFCaptureEngineOnEventCallback Extends IUnknown
    Sub OnEvent(ByVal pEvent As IMFMediaEvent)
End Interface

[ InterfaceId ("52150b82-ab39-4467-980f-e48bf0822ecd") ]
Interface IMFCaptureEngineOnSampleCallback Extends IUnknown '//To send compressed/uncompressed samples back to app
    Sub OnSample(ByVal pSample As IMFSample)
End Interface

[ InterfaceId ("72d6135b-35e9-412c-b926-fd5265f2a885") ]
Interface IMFCaptureSink Extends IUnknown
    Sub GetOutputMediaType(ByVal dwSinkStreamIndex As Long, ppMediaType As IMFMediaType)
    Sub GetService(ByVal dwSinkStreamIndex As Long, rguidService As UUID, riid As UUID, ppUnknown As IUnknown)
    Sub AddStream(ByVal dwSourceStreamIndex As Long, ByVal pMediaType As IMFMediaType, Optional ByVal pAttributes As IMFAttributes, Optional ByRef pdwSinkStreamIndex As Long)
    Sub Prepare()
    Sub RemoveAllStreams()
End Interface

[ InterfaceId ("3323b55a-f92a-4fe2-8edc-e9bfc0634d77") ]
Interface IMFCaptureRecordSink Extends IMFCaptureSink
    Sub SetOutputBytStream(ByVal pByteStream As IMFByteStream, guidContainerType As UUID)
    Sub SetOutputFilename(ByVal fileName As LongPtr)
    Sub SetSampleCallback(ByVal dwStreamSinkIndex As Long, ByVal pCallback As IMFCaptureEngineOnSampleCallback)
    Sub SetCustomSink(ByVal pMediaSink As IMFMediaSink)
    Sub GetRotation(ByVal dwStreamIndex As Long, pdwRotationValue As Long)
    Sub SetRotation(ByVal dwStreamIndex As Long, ByVal dwRotationValue As Long)
End Interface

[ InterfaceId ("77346cfd-5b49-4d73-ace0-5b52a859f2e0") ]
Interface IMFCapturePreviewSink Extends IMFCaptureSink
    Sub SetRenderHandle(ByVal handle As LongPtr)
    Sub SetRenderSurface(ByVal pSurface As IUnknown)
    Sub UpdateVideo(Optional pSrc As MFVideoNormalizedRect, Optional pDst As RECT, Optional pBorderColor As Long)
    Sub SetSampleCallback(ByVal dwSinkStreamIndex As Long, ByVal pCallback As IMFCaptureEngineOnSampleCallback)
    Sub GetMirrorState(pfMirrorState As BOOL)
    Sub SetMirrorState(ByVal fMirrorState As BOOL)
    Sub GetRotation(ByVal dwStreamIndex As Long, pdwRotationValue As Long)
    Sub SetRotation(ByVal dwStreamIndex As Long, ByVal dwRotationValue As Long)
    Sub SetCustomSink(ByVal pMediaSink As IMFMediaSink)
End Interface

[ InterfaceId ("d2d43cc8-48bb-4aa7-95db-10c06977e777") ]
Interface IMFCapturePhotoSink Extends IMFCaptureSink
    Sub SetOutputFilename(ByVal fileName As LongPtr)
    Sub SetSampleCallback(ByVal pCallback As IMFCaptureEngineOnSampleCallback)
    Sub SetOutputBytStream(ByVal pByteStream As IMFByteStream)
End Interface

[ InterfaceId ("439a42a8-0d2c-4505-be83-f79b2a05d5c4") ]
Interface IMFCaptureSource Extends IUnknown
    Sub GetCaptureDeviceSource(ByVal mfCaptureEngineDeviceType As MF_CAPTURE_ENGINE_DEVICE_TYPE, Optional ppMediaSource As IMFMediaSource)
    Sub GetCaptureDeviceActivate(ByVal mfCaptureEngineDeviceType As MF_CAPTURE_ENGINE_DEVICE_TYPE, Optional ppActivate As IMFActivate)
    Sub GetService(rguidService As UUID, riid As UUID, ppUnknown As IUnknown)
    Sub AddEffect(ByVal dwSourceStreamIndex As Long, ByVal pUnknown As IUnknown)
    Sub RemoveEffect(ByVal dwSourceStreamIndex As Long, ByVal pUnknown As IUnknown)
    Sub RemoveAllEffects(ByVal dwSourceStreamIndex As Long)
    Sub GetAvailableDeviceMediaType(ByVal dwSourceStreamIndex As Long, ByVal dwMediaTypeIndex As Long, Optional ppMediaType As IMFMediaType)
    Sub SetCurrentDeviceMediaType(ByVal dwSourceStreamIndex As Long, ByVal pMediaType As IMFMediaType)
    Sub GetCurrentDeviceMediaType(ByVal dwSourceStreamIndex As Long, ppMediaType As IMFMediaType)
    Sub GetDeviceStreamCount(pdwStreamCount As Long)
    Sub GetDeviceStreamCategory(ByVal dwSourceStreamIndex As Long, pStreamCategory As MF_CAPTURE_ENGINE_STREAM_CATEGORY)
    Sub GetMirrorState(ByVal dwStreamIndex As Long, pfMirrorState As BOOL)
    Sub SetMirrorState(ByVal dwStreamIndex As Long, ByVal fMirrorState As BOOL)
    Sub GetStreamIndexFromFriendlyName(ByVal uifriendlyname As Long, pdwActualStreamIndex As Long)
End Interface

[ InterfaceId ("a6bba433-176b-48b2-b375-53aa03473207") ]
Interface IMFCaptureEngine Extends IUnknown
    Sub Initialize(ByVal pEventCallback As IMFCaptureEngineOnEventCallback, Optional ByVal pAttributes As IMFAttributes, Optional ByVal pAudioSource As IUnknown, Optional ByVal pVideoSource As IUnknown)
    Sub StartPreview()
    Sub StopPreview()
    Sub StartRecord()
    Sub StopRecord(ByVal fFinalize As BOOL, ByVal bFlushUnprocessedSamples As BOOL)
    Sub TakePhoto()
    Sub GetSink(ByVal mfCaptureEngineSinkType As MF_CAPTURE_ENGINE_SINK_TYPE, ppSink As IMFCaptureSink)
    Sub GetSource(ppSource As IMFCaptureSource)
End Interface

[ InterfaceId ("8f02d140-56fc-4302-a705-3a97c78be779") ]
Interface IMFCaptureEngineClassFactory Extends IUnknown
    Sub CreateInstance(clsid As UUID, riid As UUID, ppvObject As Any)
End Interface

[ InterfaceId ("e37ceed7-340f-4514-9f4d-9c2ae026100b") ]
Interface IMFCaptureEngineOnSampleCallback2 Extends IMFCaptureEngineOnSampleCallback
    Sub OnSynchronizedEvent(ByVal pEvent As IMFMediaEvent)
End Interface

[ InterfaceId ("f9e4219e-6197-4b5e-b888-bee310ab2c59") ]
Interface IMFCaptureSink2 Extends IMFCaptureSink
    Sub SetOutputMediaType(ByVal dwStreamIndex As Long, ByVal pMediaType As IMFMediaType, Optional ByVal pEncodingAttributes As IMFAttributes)
End Interface





    
    
Module slMF

Public Enum MF_CAPTURE_ENGINE_PREF_SOURCE
	MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_PREVIEW = &HFFFFFFFA 'The preferred stream for previewing video
	MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_RECORD = &HFFFFFFF9 'The preferred stream for recording video
	MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_PHOTO = &HFFFFFFF8 'The first independent photo stream if present, or else the same stream chosen by MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_PREVIEW
	MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_AUDIO = &HFFFFFFF7 'The first available audio stream
	'#if(NTDDI_VERSION>NTDDI_WIN10_FE) = 0
	MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_METADATA = &HFFFFFFF6 'The first available metadata stream
	'#endif = 1
	MF_CAPTURE_ENGINE_MEDIASOURCE = &HFFFFFFFF
End Enum

Public Enum MF_CAPTURE_ENGINE_STREAM_CATEGORY
	' / <summary>
	' / Video Preview stream
	' / </summary>
	MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_PREVIEW = &H00000000
	' / <summary>
	' / Video Capture Stream
	' / </summary>
	MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_CAPTURE = &H00000001
	' / <summary>
	' / Independent photo stream
	' / </summary>
	MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_INDEPENDENT = &H00000002
	' / <summary>
	' / Dependent photo stream
	' / </summary>
	MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_DEPENDENT = &H00000003
	' / <summary>
	' / Audio stream
	' / </summary>
	MF_CAPTURE_ENGINE_STREAM_CATEGORY_AUDIO = &H00000004
	' / <summary>
	' / Unsupported stream
	' / </summary>
	MF_CAPTURE_ENGINE_STREAM_CATEGORY_UNSUPPORTED = &H00000005
	'#if(NTDDI_VERSION>NTDDI_WIN10_FE) = 0
	' / <summary>
	' / Video Metadata stream
	' / </summary>
	MF_CAPTURE_ENGINE_STREAM_CATEGORY_METADATA = &H00000006
	'#endif = 1
End Enum
Public Enum MF_CAPTURE_ENGINE_DEVICE_TYPE
	' / <summary>
	' / Audio device which is a microphone
	' / </summary>
	MF_CAPTURE_ENGINE_DEVICE_TYPE_AUDIO = &H00000000
	' / <summary>
	' / Video device which is a webcam
	' / </summary>
	MF_CAPTURE_ENGINE_DEVICE_TYPE_VIDEO = &H00000001
End Enum

Public Enum MF_CAPTURE_ENGINE_SINK_TYPE
	' / <summary>
	' / Record sink, used for outputting compressed data
	' / </summary>
	MF_CAPTURE_ENGINE_SINK_TYPE_RECORD = &H00000000
	' / <summary>
	' / Record sink, used for outputting uncompressed data or rendering video
	' / </summary>
	MF_CAPTURE_ENGINE_SINK_TYPE_PREVIEW = &H00000001
	' / <summary>
	' / Photo sink, used for retrieving a single photograph
	' / </summary>
	MF_CAPTURE_ENGINE_SINK_TYPE_PHOTO = &H00000002
End Enum

Public Enum MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE
	' / <summary>
	' / Default capture category
	' / </summary>
	MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_OTHER = 0
	' / <summary>
	' / Communications capture category
	' / </summary>
	MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_COMMUNICATIONS = 1
	' / <summary>
	' / General media capture category
	' / </summary>
	MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_MEDIA = 2
	' / <summary>
	' / Game Chat capture category
	' / </summary>
	MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_GAMECHAT = 3
	' / <summary>
	' / Speech capture category
	' / </summary>
	MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_SPEECH = 4
	'#ifNTDDI_VERSION>=NTDDI_WIN10_FE
	' / <summary>
	' / Capture Audio located in the 'far field' for the purpose of speech recognition
	' / </summary>
	MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_FARFIELDSPEECH = 5
	' / <summary>
	' / Consistent speech processing for the captured Audio. Used for Machine Learning
	' / </summary>
	MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_UNIFORMSPEECH = 6
	' / <summary>
	' / Capture Audio with the intent of enabling dictation or typing by voice
	' / </summary>
	MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_VOICETYPING = 7
	'#endif = 2
End Enum

Public Enum MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE
	' / <summary>
	' / Normal audio signal processing.
	' / </summary>
	MF_CAPTURE_ENGINE_AUDIO_PROCESSING_DEFAULT = 0
	' / <summary>
	' / Minimal audio signal processing.
	' / </summary>
	MF_CAPTURE_ENGINE_AUDIO_PROCESSING_RAW = 1
End Enum



Public Const MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_CROSSPROCESS As Long = 1
Public Const MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_NOPERSIST As Long = 1
Public Const MFSEQUENCER_INVALID_ELEMENT_ID As Long = -1


Public Const MF_USER_MODE_COMPONENT_LOAD        = &H00000001
Public Const MF_KERNEL_MODE_COMPONENT_LOAD      = &H00000002
Public Const MF_GRL_LOAD_FAILED                 = &H00000010
Public Const MF_INVALID_GRL_SIGNATURE           = &H00000020
Public Const MF_GRL_ABSENT                      = &H00001000
Public Const MF_COMPONENT_REVOKED               = &H00002000
Public Const MF_COMPONENT_INVALID_EKU           = &H00004000
Public Const MF_COMPONENT_CERT_REVOKED          = &H00008000
Public Const MF_COMPONENT_INVALID_ROOT          = &H00010000
Public Const MF_COMPONENT_HS_CERT_REVOKED       = &H00020000
Public Const MF_COMPONENT_LS_CERT_REVOKED       = &H00040000
Public Const MF_BOOT_DRIVER_VERIFICATION_FAILED = &H00100000
Public Const MF_TEST_SIGNED_COMPONENT_LOADING   = &H01000000
Public Const MF_MINCRYPT_FAILURE                = &H10000000

Public Const MEDIASINK_FIXED_STREAMS         = &H00000001
Public Const MEDIASINK_CANNOT_MATCH_CLOCK    = &H00000002
Public Const MEDIASINK_RATELESS              = &H00000004
Public Const MEDIASINK_CLOCK_REQUIRED        = &H00000008
Public Const MEDIASINK_CAN_PREROLL           = &H00000010
Public Const MEDIASINK_REQUIRE_REFERENCE_MEDIATYPE = &H00000020

Public Const MFCLOCK_FREQUENCY_HNS      = 10000000
Public Const MFCLOCK_TOLERANCE_UNKNOWN  = 50000
Public Const MFCLOCK_JITTER_ISR         = 1000
Public Const MFCLOCK_JITTER_DPC         = 4000
Public Const MFCLOCK_JITTER_PASSIVE     = 10000

Public Const PRESENTATION_CURRENT_POSITION = &H7fffffffffffffff

Public Const MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL As Long = 1
Public Const MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL As Long = 1
Public Const MFOUTPUTATTRIBUTE_DIGITAL As Long = 1
Public Const MFOUTPUTATTRIBUTE_NONSTANDARDIMPLEMENTATION As Long = 2
Public Const MFOUTPUTATTRIBUTE_VIDEO As Long = 4
Public Const MFOUTPUTATTRIBUTE_COMPRESSED As Long = 8
Public Const MFOUTPUTATTRIBUTE_SOFTWARE As Long = 16
Public Const MFOUTPUTATTRIBUTE_BUS As Long = 32
Public Const MFOUTPUTATTRIBUTE_BUSIMPLEMENTATION As Long = 65280
        
Public Declare PtrSafe Function MFCreateMediaSession Lib "mf.dll" (ByVal pConfiguration As IMFAttributes, ByRef ppMediaSession As IMFMediaSession) As Long
Public Declare PtrSafe Function MFCreatePMPMediaSession Lib "mf.dll" (ByVal dwCreationFlags As Long, ByVal pConfiguration As IMFAttributes, ByRef ppMediaSession As IMFMediaSession, ByRef ppEnablerActivate As IMFActivate) As Long
Public Declare PtrSafe Function MFGetSupportedSchemes Lib "mf.dll" (ByRef pPropVarSchemeArray As Variant) As Long
Public Declare PtrSafe Function MFGetSupportedMimeTypes Lib "mf.dll" (ByRef pPropVarMimeTypeArray As Variant) As Long
Public Declare PtrSafe Function MFCreateTopologyNode Lib "mf.dll" (ByVal NodeType As MF_TOPOLOGY_TYPE, ByRef ppNode As IMFTopologyNode) As Long
Public Declare PtrSafe Function MFGetTopoNodeCurrentType Lib "mf.dll" (ByVal pNode As IMFTopologyNode, ByVal dwStreamIndex As Long, ByVal fOutput As Long, ByRef ppType As IMFMediaType) As Long
Public Declare PtrSafe Function MFGetService Lib "mf.dll" (ByVal pUnkObject As stdole.IUnknown, ByRef guidService As UUID, ByRef riid As UUID, ByRef ppvObject As Any) As Long
Public Declare PtrSafe Function MFCreatePresentationClock Lib "mf.dll" (ByRef ppPresentationClock As IMFPresentationClock) As Long
Public Declare PtrSafe Function MFRequireProtectedEnvironment Lib "mf.dll" (ByVal pPresentationDescriptor As IMFPresentationDescriptor) As Long
Public Declare PtrSafe Function MFCreateSimpleTypeHandler Lib "mf.dll" (ByRef ppHandler As IMFMediaTypeHandler) As Long
Public Declare PtrSafe Function MFShutdownObject Lib "mf.dll" (ByVal pUnk As stdole.IUnknown) As Long
Public Declare PtrSafe Function MFCreateAudioRenderer Lib "mf.dll" (ByVal pAudioAttributes As IMFAttributes, ByRef ppSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreateAudioRendererActivate Lib "mf.dll" (ByRef ppActivate As IMFActivate) As Long
Public Declare PtrSafe Function MFCreateVideoRendererActivate Lib "mf.dll" (ByVal hwndVideo As LongPtr, ByRef ppActivate As IMFActivate) As Long
Public Declare PtrSafe Function MFCreateMPEG4MediaSink Lib "mf.dll" (ByVal pIByteStream As IMFByteStream, ByVal pVideoMediaType As IMFMediaType, ByVal pAudioMediaType As IMFMediaType, ByRef ppIMediaSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreate3GPMediaSink Lib "mf.dll" (ByVal pIByteStream As IMFByteStream, ByVal pVideoMediaType As IMFMediaType, ByVal pAudioMediaType As IMFMediaType, ByRef ppIMediaSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreateMP3MediaSink Lib "mf.dll" (ByVal pTargetByteStream As IMFByteStream, ByRef ppIMediaSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreateAC3MediaSink Lib "mf.dll" (ByVal pIByteStream As IMFByteStream, ByVal pAudioMediaType As IMFMediaType, ByRef ppIMediaSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreateADTMediaSink Lib "mf.dll" (ByVal pIByteStream As IMFByteStream, ByVal pAudioMediaType As IMFMediaType, ByRef ppIMediaSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreateMuxSink Lib "mf.dll" (ByVal guidOutputSubType1 As Long, ByVal guidOutputSubType2 As Long, ByVal guidOutputSubType3 As Long, ByVal guidOutputSubType4 As Long, ByVal pOutputAttributes As IMFAttributes, ByVal pOutputByteStream As IMFByteStream, ByRef ppIMediaSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreateFMPEG4MediaSink Lib "mf.dll" (ByVal pIByteStream As IMFByteStream, ByVal pVideoMediaType As IMFMediaType, ByVal pAudioMediaType As IMFMediaType, ByRef ppIMediaSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreateAVIMediaSink Lib "mf.dll" (ByVal pIByteStream As IMFByteStream, ByVal pVideoMediaType As IMFMediaType, ByVal pAudioMediaType As IMFMediaType, ByRef ppIMediaSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreateWAVEMediaSink Lib "mf.dll" (ByVal pTargetByteStream As IMFByteStream, ByRef ppIMediaSink As IMFMediaSink) As Long
Public Declare PtrSafe Function MFCreateTopoLoader Lib "mf.dll" (ByRef ppObj As IMFTopoLoader) As Long
Public Declare PtrSafe Function MFCreateSampleGrabberSinkActivate Lib "mf.dll" (ByVal pIMFMediaType As IMFMediaType, ByVal pIMFSampleGrabberSinkCallback As IMFSampleGrabberSinkCallback, ByRef ppActivate As IMFActivate) As Long
Public Declare PtrSafe Function MFCreateStandardQualityManager Lib "mf.dll" (ByRef ppQualityManager As IMFQualityManager) As Long
Public Declare PtrSafe Function MFCreateSequencerSource Lib "mf.dll" (ByVal pReserved As stdole.IUnknown, ByRef ppSequencerSource As IMFSequencerSource) As Long
Public Declare PtrSafe Function MFCreateSequencerSegmentOffset Lib "mf.dll" (ByVal dwID As Long, ByVal hnsOffset As LongLong, ByRef pvarSegmentOffset As Variant) As Long
Public Declare PtrSafe Function MFCreateAggregateSource Lib "mf.dll" (ByVal pSourceCollection As IMFCollection, ByRef ppAggSource As IMFMediaSource) As Long
Public Declare PtrSafe Function MFCreateCredentialCache Lib "mf.dll" (ByRef ppCache As IMFNetCredentialCache) As Long
Public Declare PtrSafe Function MFCreateProxyLocator Lib "mf.dll" (ByVal pszProtocol As LongPtr, ByVal pProxyConfig As IPropertyStore, ByRef ppProxyLocator As IMFNetProxyLocator) As Long
Public Declare PtrSafe Function MFCreateNetSchemePlugin Lib "mf.dll" (ByRef riid As UUID, ByRef ppvHandler As Any) As Long
Public Declare PtrSafe Function MFCreatePMPServer Lib "mf.dll" (ByVal dwCreationFlags As Long, ByRef ppPMPServer As IMFPMPServer) As Long
Public Declare PtrSafe Function MFCreateRemoteDesktopPlugin Lib "mf.dll" (ByRef ppPlugin As IMFRemoteDesktopPlugin) As Long
Public Declare PtrSafe Function MFCreateTranscodeProfile Lib "mf.dll" (ByRef ppTranscodeProfile As IMFTranscodeProfile) As Long
Public Declare PtrSafe Function MFCreateTranscodeTopology Lib "mf.dll" (ByVal pSrc As IMFMediaSource, ByVal pwszOutputFilePath As LongPtr, ByVal pProfile As IMFTranscodeProfile, ByRef ppTranscodeTopo As IMFTopology) As Long
Public Declare PtrSafe Function MFCreateTranscodeTopologyFromByteStream Lib "mf.dll" (ByVal pSrc As IMFMediaSource, ByVal pOutputStream As IMFByteStream, ByVal pProfile As IMFTranscodeProfile, ByRef ppTranscodeTopo As IMFTopology) As Long
Public Declare PtrSafe Function MFTranscodeGetAudioOutputAvailableTypes Lib "mf.dll" (ByRef guidSubtype As UUID, ByVal dwMFTFlags As Long, ByVal pCodecConfig As IMFAttributes, ByRef ppAvailableTypes As IMFCollection) As Long
Public Declare PtrSafe Function MFCreateTranscodeSinkActivate Lib "mf.dll" (ByRef ppActivate As IMFActivate) As Long
Public Declare PtrSafe Function MFEnumDeviceSources Lib "mf.dll" (ByVal pAttributes As IMFAttributes, ByVal pppSourceActivate As LongPtr, ByRef pcSourceActivate As Long) As Long
Public Declare PtrSafe Function MFCreateDeviceSource Lib "mf.dll" (ByVal pAttributes As IMFAttributes, ByRef ppSource As IMFMediaSource) As Long
Public Declare PtrSafe Function MFCreateDeviceSourceActivate Lib "mf.dll" (ByVal pAttributes As IMFAttributes, ByRef ppActivate As IMFActivate) As Long
Public Declare PtrSafe Function MFCreateProtectedEnvironmentAccess Lib "mf.dll" (ByRef ppAccess As IMFProtectedEnvironmentAccess) As Long
Public Declare PtrSafe Function MFLoadSignedLibrary Lib "mf.dll" (ByVal pszName As LongPtr, ByRef ppLib As IMFSignedLibrary) As Long
Public Declare PtrSafe Function MFGetSystemId Lib "mf.dll" (ByRef ppid As IMFSystemId) As Long
Public Declare PtrSafe Function MFGetLocalId Lib "mf.dll" (ByRef verifier As Byte, ByVal SIZE As Long, ByVal id As LongPtr) As Long

Public Declare PtrSafe Function MFPCreateMediaPlayer Lib "mfplay.dll" (ByVal pwszUrl As Long, ByVal fStartPlayback As Long, ByVal creationOptions As MFP_CREATION_OPTIONS, ByVal pCallback As IMFPMediaPlayerCallback, ByVal hwnd As LongPtr, ByRef ppMediaPlayer As IMFPMediaPlayer) As Long

Public Declare PtrSafe Function MFStartup Lib "MFPlat.DLL" (ByVal Version As Long, ByVal dwFlags As Long) As Long
Public Declare PtrSafe Function MFShutdown Lib "MFPlat.DLL" () As Long
Public Declare PtrSafe Function MFCreateSourceResolver Lib "MFPlat.DLL" (ppISourceResolver As IMFSourceResolver) As Long
Public Declare PtrSafe Function MFCreateAttributes Lib "MFPlat.DLL" (ByRef ppMFAttributes As IMFAttributes, ByVal cInitialSize As Long) As Long
Public Declare PtrSafe Function MFCreateMediaType Lib "MFPlat.DLL" (ppMFType As IMFMediaType) As Long
Public Declare PtrSafe Function MFSerializeAttributesToStream Lib "MFPlat.DLL" (ByVal pAttr As IMFAttributes, ByVal dwOptions As Long, ByVal pStm As IStream) As Long
Public Declare PtrSafe Function MFDeSerializeAttributesFromStream Lib "MFPlat.DLL" (ByVal pAttr As IMFAttributes, ByVal dwOptions As Long, ByVal pStm As IStream) As Long
Public Declare PtrSafe Function MFGetSystemTime Lib "MFPlat.DLL" () As LongLong
Public Declare PtrSafe Function MFCreateSystemTimeSource Lib "MFPlat.DLL" (ByRef ppSystemTimeSource As IMFPresentationTimeSource) As Long
Public Declare PtrSafe Function MFCreatePresentationDescriptor Lib "MFPlat.DLL" (ByVal cStreamDescriptors As Long, ByVal apStreamDescriptors As IMFStreamDescriptor, ByRef ppPresentationDescriptor As IMFPresentationDescriptor) As Long
Public Declare PtrSafe Function MFSerializePresentationDescriptor Lib "MFPlat.DLL" (ByVal pPD As IMFPresentationDescriptor, ByRef pcbData As Long, ByVal ppbData As LongPtr) As Long
Public Declare PtrSafe Function MFDeserializePresentationDescriptor Lib "MFPlat.DLL" (ByVal cbData As Long, ByRef pbData As Byte, ByRef ppPD As IMFPresentationDescriptor) As Long
Public Declare PtrSafe Function MFCreateStreamDescriptor Lib "MFPlat.DLL" (ByVal dwStreamIdentifier As Long, ByVal cMediaTypes As Long, ByVal apMediaTypes As IMFMediaType, ByRef ppDescriptor As IMFStreamDescriptor) As Long
Public Declare PtrSafe Function MFCreateTrackedSample Lib "MFPlat.DLL" (ByRef ppMFSample As IMFTrackedSample) As Long
Public Declare PtrSafe Function MFCreateMFByteStreamOnStream Lib "MFPlat.DLL" (ByVal pStream As IStream, ByRef ppByteStream As IMFByteStream) As Long
Public Declare PtrSafe Function MFCreateMFByteStreamOnStreamEx Lib "MFPlat.DLL" (ByVal pUnkStream As stdole.IUnknown, ByRef ppByteStream As IMFByteStream) As Long
Public Declare PtrSafe Function MFCreateStreamOnMFByteStream Lib "MFPlat.DLL" (ByVal pByteStream As IMFByteStream, ByRef ppStream As IStream) As Long
Public Declare PtrSafe Function MFCreateStreamOnMFByteStreamEx Lib "MFPlat.DLL" (ByVal pByteStream As IMFByteStream, ByRef riid As UUID, ByRef ppv As Any) As Long
Public Declare PtrSafe Function MFCreateMediaTypeFromProperties Lib "MFPlat.DLL" (ByVal pUnkStream As stdole.IUnknown, ByRef ppMediaType As IMFMediaType) As Long
Public Declare PtrSafe Function MFCreatePropertiesFromMediaType Lib "MFPlat.DLL" (ByVal pMediaType As IMFMediaType, ByRef riid As UUID, ByRef ppv As Any) As Long
Public Declare PtrSafe Function MFCreateContentProtectionDevice Lib "MFPlat.DLL" (ByRef ProtectionSystemId As UUID, ByRef ContentProtectionDevice As IMFContentProtectionDevice) As Long
Public Declare PtrSafe Function MFIsContentProtectionDeviceSupported Lib "MFPlat.DLL" (ByRef ProtectionSystemId As UUID, ByVal IsSupported As Long) As Long
Public Declare PtrSafe Function MFCreateContentDecryptorContext Lib "MFPlat.DLL" (ByRef guidMediaProtectionSystemId As UUID, ByVal pD3DManager As IMFDXGIDeviceManager, ByVal pContentProtectionDevice As IMFContentProtectionDevice, ByRef ppContentDecryptorContext As IMFContentDecryptorContext) As Long
Public Declare PtrSafe Function MFCreateD3D12SynchronizationObject Lib "MFPlat.DLL" (ByVal pDevice As ID3D12Device, riid As UUID, ppv As Any) As Long
Public Declare PtrSafe Function MFCreateSourceReaderFromMediaSource Lib "MFReadWrite.DLL" (ByVal pMediaSource As IMFMediaSource, ByVal pAttributes As IMFAttributes, ppSourceReader As IMFSourceReader) As Long

Public Enum MF_MT_D3D_RESOURCE_VERSION_ENUM
	MF_D3D11_RESOURCE = 0
	MF_D3D12_RESOURCE = 1
End Enum

Public Type MFP_EVENT_HEADER
    eEventType As MFP_EVENT_TYPE
    hrEvent As Long
    pMediaPlayer As IMFPMediaPlayer
    eState As MFP_MEDIAPLAYER_STATE
    pPropertyStore As IPropertyStore
End Type

Public Type MFP_PLAY_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
End Type

Public Type MFP_PAUSE_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
End Type

Public Type MFP_STOP_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
End Type

Public Type MFP_POSITION_SET_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
End Type

Public Type MFP_RATE_SET_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
    flRate As Single
End Type

Public Type MFP_MEDIAITEM_CREATED_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
    dwUserData As LongPtr
End Type

Public Type MFP_MEDIAITEM_SET_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
End Type

Public Type MFP_FRAME_STEP_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
End Type

Public Type MFP_MEDIAITEM_CLEARED_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
End Type

Public Type MFP_MF_EVENT
    Header As MFP_EVENT_HEADER
    MFEventType As MediaEventType
    pMFMediaEvent As IMFMediaEvent
    pMediaItem As IMFPMediaItem
End Type

Public Type MFP_ERROR_EVENT
    Header As MFP_EVENT_HEADER
End Type

Public Type MFP_PLAYBACK_ENDED_EVENT
    Header As MFP_EVENT_HEADER
    pMediaItem As IMFPMediaItem
End Type

Public Type MFP_ACQUIRE_USER_CREDENTIAL_EVENT
    Header As MFP_EVENT_HEADER
    dwUserData As LongPtr
    fProceedWithAuthentication As Long
    hrAuthenticationStatus As Long
    pwszUrl As LongPtr
    pwszSite As LongPtr
    pwszRealm As LongPtr
    pwszPackage As LongPtr
    nRetries As LongPtr
    flags As MFP_CREDENTIAL_FLAGS
    pCredential As IMFNetCredential
End Type

Public Enum MF_MEDIAKEYSESSION_TYPE
    MF_MEDIAKEYSESSION_TYPE_TEMPORARY = 0
    MF_MEDIAKEYSESSION_TYPE_PERSISTENT_LICENSE = 1
    MF_MEDIAKEYSESSION_TYPE_PERSISTENT_RELEASE_MESSAGE = 2
End Enum

Public Enum MF_MEDIAKEY_STATUS
    MF_MEDIAKEY_STATUS_USABLE = 0
    MF_MEDIAKEY_STATUS_EXPIRED = 1
    MF_MEDIAKEY_STATUS_OUTPUT_DOWNSCALED = 2
    MF_MEDIAKEY_STATUS_OUTPUT_NOT_ALLOWED = 3
    MF_MEDIAKEY_STATUS_STATUS_PENDING = 4
    MF_MEDIAKEY_STATUS_INTERNAL_ERROR = 5
End Enum

Public Type MFMediaKeyStatus
    pbKeyId As LongPtr
    cbKeyId As Long
    eMediaKeyStatus As MF_MEDIAKEY_STATUS
End Type

Public Enum MF_MEDIAKEYSESSION_MESSAGETYPE
    MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_REQUEST = 0
    MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RENEWAL = 1
    MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RELEASE = 2
    MF_MEDIAKEYSESSION_MESSAGETYPE_INDIVIDUALIZATION_REQUEST = 3
End Enum

Public Enum D3DFORMAT
    D3DFMT_UNKNOWN = 0
    D3DFMT_R8G8B8 = 20
    D3DFMT_A8R8G8B8 = 21
    D3DFMT_X8R8G8B8 = 22
    D3DFMT_R5G6B5 = 23
    D3DFMT_X1R5G5B5 = 24
    D3DFMT_A1R5G5B5 = 25
    D3DFMT_A4R4G4B4 = 26
    D3DFMT_R3G3B2 = 27
    D3DFMT_A8 = 28
    D3DFMT_A8R3G3B2 = 29
    D3DFMT_X4R4G4B4 = 30
    D3DFMT_A2B10G10R10 = 31
    D3DFMT_G16R16 = 34
    D3DFMT_A8P8 = 40
    D3DFMT_P8 = 41
    D3DFMT_L8 = 50
    D3DFMT_A8L8 = 51
    D3DFMT_A4L4 = 52
    D3DFMT_V8U8 = 60
    D3DFMT_L6V5U5 = 61
    D3DFMT_X8L8V8U8 = 62
    D3DFMT_Q8W8V8U8 = 63
    D3DFMT_V16U16 = 64
    D3DFMT_W11V11U10 = 65
    D3DFMT_A2W10V10U10 = 67
    D3DFMT_D16_LOCKABLE = 70
    D3DFMT_D32 = 71
    D3DFMT_D15S1 = 73
    D3DFMT_D24S8 = 75
    D3DFMT_D16 = 80
    D3DFMT_D24X8 = 77
    D3DFMT_D24X4S4 = 79
    D3DFMT_VERTEXDATA = 100
    D3DFMT_INDEX16 = 101
    D3DFMT_INDEX32 = 102
    D3DFMT_FORCE_DWORD = 2147483647
End Enum

Public Enum MFVideoAspectRatioMode
    MFVideoARMode_None = 0
    MFVideoARMode_PreservePicture = 1
    MFVideoARMode_PreservePixel = 2
    MFVideoARMode_NonLinearStretch = 4
    MFVideoARMode_Mask = 7
End Enum

Public Enum MFVideoRenderPrefs
    MFVideoRenderPrefs_DoNotRenderBorder = 1
    MFVideoRenderPrefs_DoNotClipToDevice = 2
    MFVideoRenderPrefs_AllowOutputThrottling = 4
    MFVideoRenderPrefs_ForceOutputThrottling = 8
    MFVideoRenderPrefs_ForceBatching = 16
    MFVideoRenderPrefs_AllowBatching = 32
    MFVideoRenderPrefs_ForceScaling = 64
    MFVideoRenderPrefs_AllowScaling = 128
    MFVideoRenderPrefs_DoNotRepaintOnStop = 256
    MFVideoRenderPrefs_Mask = 511
End Enum

Public Type MFVideoNormalizedRect
    Left As Single
    Top As Single
    Right As Single
    Bottom As Single
End Type

Public Enum MFVP_MESSAGE_TYPE
    MFVP_MESSAGE_FLUSH = 0
    MFVP_MESSAGE_INVALIDATEMEDIATYPE = 1
    MFVP_MESSAGE_PROCESSINPUTNOTIFY = 2
    MFVP_MESSAGE_BEGINSTREAMING = 3
    MFVP_MESSAGE_ENDSTREAMING = 4
    MFVP_MESSAGE_ENDOFSTREAM = 5
    MFVP_MESSAGE_STEP = 6
    MFVP_MESSAGE_CANCELSTEP = 7
End Enum

Public Enum MFVideoMixPrefs
    MFVideoMixPrefs_ForceHalfInterlace = 1
    MFVideoMixPrefs_AllowDropToHalfInterlace = 2
    MFVideoMixPrefs_AllowDropToBob = 4
    MFVideoMixPrefs_ForceBob = 8
    MFVideoMixPrefs_EnableRotation = 16
    MFVideoMixPrefs_Mask = 31
End Enum

Public Enum EVRFilterConfigPrefs
    EVRFilterConfigPrefs_EnableQoS = 1
    EVRFilterConfigPrefs_Mask = 1
End Enum

Public Enum MF_SERVICE_LOOKUP_TYPE
    MF_SERVICE_LOOKUP_UPSTREAM = 0
    MF_SERVICE_LOOKUP_UPSTREAM_DIRECT = 1
    MF_SERVICE_LOOKUP_DOWNSTREAM = 2
    MF_SERVICE_LOOKUP_DOWNSTREAM_DIRECT = 3
    MF_SERVICE_LOOKUP_ALL = 4
    MF_SERVICE_LOOKUP_GLOBAL = 5
End Enum

Public Enum MFP_CREATION_OPTIONS
    MFP_OPTION_NONE = 0
    MFP_OPTION_FREE_THREADED_CALLBACK = 1
    MFP_OPTION_NO_MMCSS = 2
    MFP_OPTION_NO_REMOTE_DESKTOP_OPTIMIZATION = 4
End Enum

Public Enum MFP_MEDIAPLAYER_STATE
    MFP_MEDIAPLAYER_STATE_EMPTY = 0
    MFP_MEDIAPLAYER_STATE_STOPPED = 1
    MFP_MEDIAPLAYER_STATE_PLAYING = 2
    MFP_MEDIAPLAYER_STATE_PAUSED = 3
    MFP_MEDIAPLAYER_STATE_SHUTDOWN = 4
End Enum

Public Enum MFP_MEDIAITEM_CHARACTERISTICS
    MFP_MEDIAITEM_IS_LIVE = 1
    MFP_MEDIAITEM_CAN_SEEK = 2
    MFP_MEDIAITEM_CAN_PAUSE = 4
    MFP_MEDIAITEM_HAS_SLOW_SEEK = 8
End Enum

Public Enum MFP_CREDENTIAL_FLAGS
    MFP_CREDENTIAL_PROMPT = 1
    MFP_CREDENTIAL_SAVE = 2
    MFP_CREDENTIAL_DO_NOT_CACHE = 4
    MFP_CREDENTIAL_CLEAR_TEXT = 8
    MFP_CREDENTIAL_PROXY = 16
    MFP_CREDENTIAL_LOGGED_ON_USER = 32
End Enum

Public Enum MFP_EVENT_TYPE
    MFP_EVENT_TYPE_PLAY = 0
    MFP_EVENT_TYPE_PAUSE = 1
    MFP_EVENT_TYPE_STOP = 2
    MFP_EVENT_TYPE_POSITION_SET = 3
    MFP_EVENT_TYPE_RATE_SET = 4
    MFP_EVENT_TYPE_MEDIAITEM_CREATED = 5
    MFP_EVENT_TYPE_MEDIAITEM_SET = 6
    MFP_EVENT_TYPE_FRAME_STEP = 7
    MFP_EVENT_TYPE_MEDIAITEM_CLEARED = 8
    MFP_EVENT_TYPE_MF = 9
    MFP_EVENT_TYPE_ERROR = 10
    MFP_EVENT_TYPE_PLAYBACK_ENDED = 11
    MFP_EVENT_TYPE_ACQUIRE_USER_CREDENTIAL = 12
End Enum

Public Type MFCONTENTPROTECTIONDEVICE_INPUT_DATA
    HWProtectionFunctionID As Long
    PrivateDataByteCount As Long
    HWProtectionDataByteCount As Long
    reserved As Long
    InputData(0 To 3) As Byte
End Type

Public Type MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA
    PrivateDataByteCount As Long
    MaxHWProtectionDataByteCount As Long
    HWProtectionDataByteCount As Long
    Status As Long
    TransportTimeInHundredsOfNanoseconds As LongLong
    ExecutionTimeInHundredsOfNanoseconds As LongLong
    OutputData(0 To 3) As Byte
End Type

Public Type MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA
    TaskIndex As Long
    ClassName(0 To 259) As Integer
    BasePriority As Long
End Type

Public Enum MFPOLICYMANAGER_ACTION
    PEACTION_NO = 0
    PEACTION_PLAY = 1
    PEACTION_COPY = 2
    PEACTION_EXPORT = 3
    PEACTION_EXTRACT = 4
    PEACTION_RESERVED1 = 5
    PEACTION_RESERVED2 = 6
    PEACTION_RESERVED3 = 7
    PEACTION_LAST = 7
End Enum

Public Type MFINPUTTRUSTAUTHORITY_ACCESS_ACTION
    action As MFPOLICYMANAGER_ACTION
    pbTicket As LongPtr
    cbTicket As Long
End Type

Public Type MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS
    dwSize As Long
    dwVer As Long
    cbSignatureOffset As Long
    cbSignatureSize As Long
    cbExtensionOffset As Long
    cbExtensionSize As Long
    cActions As Long
    rgOutputActions(0 To 0) As MFINPUTTRUSTAUTHORITY_ACCESS_ACTION
End Type

Public Enum MF_OPM_CGMSA_PROTECTION_LEVEL
    MF_OPM_CGMSA_OFF = 0
    MF_OPM_CGMSA_COPY_FREELY = 1
    MF_OPM_CGMSA_COPY_NO_MORE = 2
    MF_OPM_CGMSA_COPY_ONE_GENERATION = 3
    MF_OPM_CGMSA_COPY_NEVER = 4
    MF_OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED = 8
End Enum

Public Enum MF_OPM_ACP_PROTECTION_LEVEL
    MF_OPM_ACP_OFF = 0
    MF_OPM_ACP_LEVEL_ONE = 1
    MF_OPM_ACP_LEVEL_TWO = 2
    MF_OPM_ACP_LEVEL_THREE = 3
    MF_OPM_ACP_FORCE_ULONG = 2147483647
End Enum

Public Enum SAMPLE_PROTECTION_VERSION
    SAMPLE_PROTECTION_VERSION_NO = 0
    SAMPLE_PROTECTION_VERSION_BASIC_LOKI = 1
    SAMPLE_PROTECTION_VERSION_SCATTER = 2
    SAMPLE_PROTECTION_VERSION_RC4 = 3
    SAMPLE_PROTECTION_VERSION_AES128CTR = 4
End Enum

Public Enum MF_TRANSCODE_TOPOLOGYMODE_FLAGS
    MF_TRANSCODE_TOPOLOGYMODE_SOFTWARE_ONLY = 0
    MF_TRANSCODE_TOPOLOGYMODE_HARDWARE_ALLOWED = 1
End Enum

Public Enum MF_TRANSCODE_ADJUST_PROFILE_FLAGS
    MF_TRANSCODE_ADJUST_PROFILE_DEFAULT = 0
    MF_TRANSCODE_ADJUST_PROFILE_USE_SOURCE_ATTRIBUTES = 1
End Enum

Public Enum MF_VIDEO_PROCESSOR_ALGORITHM_TYPE
    MF_VIDEO_PROCESSOR_ALGORITHM_DEFAULT = 0
    MF_VIDEO_PROCESSOR_ALGORITHM_MRF_CRF_444 = 1
End Enum

Public Type MF_TRANSCODE_SINK_INFO
    dwVideoStreamID As Long
    pVideoMediaType As IMFMediaType
    dwAudioStreamID As Long
    pAudioMediaType As IMFMediaType
End Type

Public Type MFT_REGISTRATION_INFO
    clsid As UUID
    guidCategory As UUID
    uiFlags As Long
    pszName As LongPtr
    cInTypes As Long
    pInTypes As LongPtr
    cOutTypes As Long
    pOutTypes As LongPtr
End Type

Public Enum MFNETSOURCE_TRANSPORT_TYPE
    MFNETSOURCE_UDP = 0
    MFNETSOURCE_TCP = 1
End Enum

Public Enum MFNETSOURCE_CACHE_STATE
    MFNETSOURCE_CACHE_UNAVAILABLE = 0
    MFNETSOURCE_CACHE_ACTIVE_WRITING = 1
    MFNETSOURCE_CACHE_ACTIVE_COMPLETE = 2
End Enum

Public Enum MFNETSOURCE_STATISTICS_IDS
    MFNETSOURCE_RECVPACKETS_ID = 0
    MFNETSOURCE_LOSTPACKETS_ID = 1
    MFNETSOURCE_RESENDSREQUESTED_ID = 2
    MFNETSOURCE_RESENDSRECEIVED_ID = 3
    MFNETSOURCE_RECOVEREDBYECCPACKETS_ID = 4
    MFNETSOURCE_RECOVEREDBYRTXPACKETS_ID = 5
    MFNETSOURCE_OUTPACKETS_ID = 6
    MFNETSOURCE_RECVRATE_ID = 7
    MFNETSOURCE_AVGBANDWIDTHBPS_ID = 8
    MFNETSOURCE_BYTESRECEIVED_ID = 9
    MFNETSOURCE_PROTOCOL_ID = 10
    MFNETSOURCE_TRANSPORT_ID = 11
    MFNETSOURCE_CACHE_STATE_ID = 12
    MFNETSOURCE_LINKBANDWIDTH_ID = 13
    MFNETSOURCE_CONTENTBITRATE_ID = 14
    MFNETSOURCE_SPEEDFACTOR_ID = 15
    MFNETSOURCE_BUFFERSIZE_ID = 16
    MFNETSOURCE_BUFFERPROGRESS_ID = 17
    MFNETSOURCE_LASTBWSWITCHTS_ID = 18
    MFNETSOURCE_SEEKRANGESTART_ID = 19
    MFNETSOURCE_SEEKRANGEEND_ID = 20
    MFNETSOURCE_BUFFERINGCOUNT_ID = 21
    MFNETSOURCE_INCORRECTLYSIGNEDPACKETS_ID = 22
    MFNETSOURCE_SIGNEDSESSION_ID = 23
    MFNETSOURCE_MAXBITRATE_ID = 24
    MFNETSOURCE_RECEPTION_QUALITY_ID = 25
    MFNETSOURCE_RECOVEREDPACKETS_ID = 26
    MFNETSOURCE_VBR_ID = 27
    MFNETSOURCE_DOWNLOADPROGRESS_ID = 28
    MFNETSOURCE_UNPREDEFINEDPROTOCOLNAME_ID = 29
End Enum

Public Enum MFNET_PROXYSETTINGS
    MFNET_PROXYSETTING_NONE = 0
    MFNET_PROXYSETTING_MANUAL = 1
    MFNET_PROXYSETTING_AUTO = 2
    MFNET_PROXYSETTING_BROWSER = 3
End Enum

Public Type MF_BYTE_STREAM_CACHE_RANGE
    qwStartOffset As LongLong
    qwEndOffset As LongLong
End Type

Public Type MFNetCredentialManagerGetParam
    hrOp As Long
    fAllowLoggedOnUser As Long
    fClearTextPackage As Long
    pszUrl As LongPtr
    pszSite As LongPtr
    pszRealm As LongPtr
    pszPackage As LongPtr
    nRetries As Long
End Type

Public Enum MFNetCredentialRequirements
    REQUIRE_PROMPT = 1
    REQUIRE_SAVE_SELECTED = 2
End Enum

Public Enum MFNetCredentialOptions
    MFNET_CREDENTIAL_SAVE = 1
    MFNET_CREDENTIAL_DONT_CACHE = 2
    MFNET_CREDENTIAL_ALLOW_CLEAR_TEXT = 4
End Enum

Public Enum MFNetAuthenticationFlags
    MFNET_AUTHENTICATION_PROXY = 1
    MFNET_AUTHENTICATION_CLEAR_TEXT = 2
    MFNET_AUTHENTICATION_LOGGED_ON_USER = 4
End Enum

Public Enum MFNETSOURCE_PROTOCOL_TYPE
    MFNETSOURCE_UNDEFINED = 0
    MFNETSOURCE_HTTP = 1
    MFNETSOURCE_RTSP = 2
    MFNETSOURCE_FILE = 3
    MFNETSOURCE_MULTICAST = 4
End Enum

Public Type MFBYTESTREAM_BUFFERING_PARAMS
    cbTotalFileSize As LongLong
    cbPlayableDataSize As LongLong
    prgBuckets As LongPtr
    cBuckets As Long
    qwNetBufferingTime As LongLong
    qwExtraBufferingTimeDuringSeek As LongLong
    qwPlayDuration As LongLong
    dRate As Single
End Type

Public Enum MF_TRANSFER_VIDEO_FRAME_FLAGS
    MF_TRANSFER_VIDEO_FRAME_DEFAULT = 0
    MF_TRANSFER_VIDEO_FRAME_STRETCH = 1
    MF_TRANSFER_VIDEO_FRAME_IGNORE_PAR = 2
End Enum

Public Enum MFSTREAMSINK_MARKER_TYPE
    MFSTREAMSINK_MARKER_DEFAULT = 0
    MFSTREAMSINK_MARKER_ENDOFSEGMENT = 1
    MFSTREAMSINK_MARKER_TICK = 2
    MFSTREAMSINK_MARKER_EVENT = 3
End Enum

Public Enum MF_VIDEO_PROCESSOR_ROTATION
    ROTATION_NONE = 0
    ROTATION_NORMAL = 1
End Enum

Public Enum MF_VIDEO_PROCESSOR_MIRROR
    MIRROR_NONE = 0
    MIRROR_HORIZONTAL = 1
    MIRROR_VERTICAL = 2
End Enum

Public Enum MF_TOPONODE_FLUSH_MODE
    MF_TOPONODE_FLUSH_ALWAYS = 0
    MF_TOPONODE_FLUSH_SEEK = 1
    MF_TOPONODE_FLUSH_NEVER = 2
End Enum

Public Enum MF_TOPONODE_DRAIN_MODE
    MF_TOPONODE_DRAIN_DEFAULT = 0
    MF_TOPONODE_DRAIN_ALWAYS = 1
    MF_TOPONODE_DRAIN_NEVER = 2
End Enum

Public Enum MFTIMER_FLAGS
    MFTIMER_RELATIVE = 1
End Enum

Public Enum MFSHUTDOWN_STATUS
    MFSHUTDOWN_INITIATED = 0
    MFSHUTDOWN_COMPLETED = 1
End Enum

Public Enum MF_URL_TRUST_STATUS
    MF_LICENSE_URL_UNTRUSTED = 0
    MF_LICENSE_URL_TRUSTED = 1
    MF_LICENSE_URL_TAMPERED = 2
End Enum

Public Enum MFRATE_DIRECTION
    MFRATE_FORWARD = 0
    MFRATE_REVERSE = 1
End Enum

Public Enum MF_QUALITY_DROP_MODE
    MF_DROP_MODE_NONE = 0
    MF_DROP_MODE_1 = 1
    MF_DROP_MODE_2 = 2
    MF_DROP_MODE_3 = 3
    MF_DROP_MODE_4 = 4
    MF_DROP_MODE_5 = 5
    MF_NUM_DROP_MODES = 6
End Enum

Public Enum MF_QUALITY_LEVEL
    MF_QUALITY_NORMAL = 0
    MF_QUALITY_NORMAL_MINUS_1 = 1
    MF_QUALITY_NORMAL_MINUS_2 = 2
    MF_QUALITY_NORMAL_MINUS_3 = 3
    MF_QUALITY_NORMAL_MINUS_4 = 4
    MF_QUALITY_NORMAL_MINUS_5 = 5
    MF_NUM_QUALITY_LEVELS = 6
End Enum

Public Enum MF_QUALITY_ADVISE_FLAGS
    MF_QUALITY_CANNOT_KEEP_UP = 1
End Enum

Public Type MFTOPONODE_ATTRIBUTE_UPDATE
    NodeId As LongLong
    guidAttributeKey As UUID
    attrType As MF_ATTRIBUTE_TYPE
    uu As LongLong
End Type

Public Type MF_LEAKY_BUCKET_PAIR
    dwBitrate As Long
    msBufferWindow As Long
End Type


Public Enum MFSequencerTopologyFlags
    SequencerTopologyFlags_Last = 1
End Enum

Public Type STREAM_MEDIUM
    gidMedium As UUID
    unMediumInstance As Long
End Type

Public Enum MF3DVideoOutputType
    MF3DVideoOutputType_BaseView = 0
    MF3DVideoOutputType_Stereo = 1
End Enum

Public Enum MFPMPSESSION_CREATION_FLAGS
    MFPMPSESSION_UNPROTECTED_PROCESS = 1
    MFPMPSESSION_IN_PROCESS = 2
End Enum

Public Enum MF_CONNECT_METHOD
    MF_CONNECT_DIRECT = 0
    MF_CONNECT_ALLOW_CONVERTER = 1
    MF_CONNECT_ALLOW_DECODER = 3
    MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES = 4
    MF_CONNECT_AS_OPTIONAL = 65536
    MF_CONNECT_AS_OPTIONAL_BRANCH = 131072
End Enum

Public Enum MFT_INPUT_DATA_BUFFER_FLAGS
    MFT_INPUT_DATA_BUFFER_PLACEHOLDER = -1
End Enum

Public Enum MFT_OUTPUT_DATA_BUFFER_FLAGS
    MFT_OUTPUT_DATA_BUFFER_INCOMPLETE = 16777216
    MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE = 256
    MFT_OUTPUT_DATA_BUFFER_STREAM_END = 512
    MFT_OUTPUT_DATA_BUFFER_NO_SAMPLE = 768
End Enum

Public Enum MFT_INPUT_STATUS_FLAGS
    MFT_INPUT_STATUS_ACCEPT_DATA = 1
End Enum

Public Enum MFT_OUTPUT_STATUS_FLAGS
    MFT_OUTPUT_STATUS_SAMPLE_READY = 1
End Enum

Public Enum MFT_INPUT_STREAM_INFO_FLAGS
    MFT_INPUT_STREAM_WHOLE_SAMPLES = 1
    MFT_INPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER = 2
    MFT_INPUT_STREAM_FIXED_SAMPLE_SIZE = 4
    MFT_INPUT_STREAM_HOLDS_BUFFERS = 8
    MFT_INPUT_STREAM_DOES_NOT_ADDREF = 256
    MFT_INPUT_STREAM_REMOVABLE = 512
    MFT_INPUT_STREAM_OPTIONAL = 1024
    MFT_INPUT_STREAM_PROCESSES_IN_PLACE = 2048
End Enum

Public Enum MFT_OUTPUT_STREAM_INFO_FLAGS
    MFT_OUTPUT_STREAM_WHOLE_SAMPLES = 1
    MFT_OUTPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER = 2
    MFT_OUTPUT_STREAM_FIXED_SAMPLE_SIZE = 4
    MFT_OUTPUT_STREAM_DISCARDABLE = 8
    MFT_OUTPUT_STREAM_OPTIONAL = 16
    MFT_OUTPUT_STREAM_PROVIDES_SAMPLES = 256
    MFT_OUTPUT_STREAM_CAN_PROVIDE_SAMPLES = 512
    MFT_OUTPUT_STREAM_LAZY_READ = 1024
    MFT_OUTPUT_STREAM_REMOVABLE = 2048
End Enum

Public Enum MFT_SET_TYPE_FLAGS
    MFT_SET_TYPE_TEST_ONLY = 1
End Enum

Public Enum MFT_PROCESS_OUTPUT_FLAGS
    MFT_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER = 1
    MFT_PROCESS_OUTPUT_REGENERATE_LAST_OUTPUT = 2
End Enum

Public Enum MFT_PROCESS_OUTPUT_STATUS
    MFT_PROCESS_OUTPUT_STATUS_NEW_STREAMS = 256
End Enum

Public Enum MFT_DRAIN_TYPE
    MFT_DRAIN_PRODUCE_TAILS = 0
    MFT_DRAIN_NO_TAILS = 1
End Enum

Public Enum MFT_MESSAGE_TYPE
    MFT_MESSAGE_COMMAND_FLUSH = 0
    MFT_MESSAGE_COMMAND_DRAIN = 1
    MFT_MESSAGE_SET_D3D_MANAGER = 2
    MFT_MESSAGE_DROP_SAMPLES = 3
    MFT_MESSAGE_COMMAND_TICK = 4
    MFT_MESSAGE_NOTIFY_BEGIN_STREAMING = 268435456
    MFT_MESSAGE_NOTIFY_END_STREAMING = 268435457
    MFT_MESSAGE_NOTIFY_END_OF_STREAM = 268435458
    MFT_MESSAGE_NOTIFY_START_OF_STREAM = 268435459
    MFT_MESSAGE_NOTIFY_RELEASE_RESOURCES = 268435460
    MFT_MESSAGE_NOTIFY_REACQUIRE_RESOURCES = 268435461
    MFT_MESSAGE_NOTIFY_EVENT = 268435462
    MFT_MESSAGE_COMMAND_MARKER = 536870912
End Enum

Public Type MFT_INPUT_STREAM_INFO
    hnsMaxLatency As LongLong
    dwFlags As Long
    cbSize As Long
    cbMaxLookahead As Long
    cbAlignment As Long
End Type

Public Type MFT_OUTPUT_STREAM_INFO
    dwFlags As Long
    cbSize As Long
    cbAlignment As Long
End Type

Public Type MFT_OUTPUT_DATA_BUFFER
    dwStreamId As Long
    pSample As IMFSample
    dwStatus As Long
    pEvents As IMFCollection
End Type


Public Enum MF_Plugin_Type
    MF_Plugin_Type_MFT = 0
    MF_Plugin_Type_MediaSource = 1
    MF_Plugin_Type_MFT_MatchOutputType = 2
    MF_Plugin_Type_Other = -1
End Enum

Public Enum MF_PLUGIN_CONTROL_POLICY
    MF_PLUGIN_CONTROL_POLICY_USE_ALL_PLUGINS = 0
    MF_PLUGIN_CONTROL_POLICY_USE_APPROVED_PLUGINS = 1
    MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS = 2
    MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS_EDGEMODE = 3
End Enum


Public Type BITMAPINFOHEADER
    biSize As Long
    biWidth As Long
    biHeight As Long
    biPlanes As Integer
    biBitCount As Integer
    biCompression As Long
    biSizeImage As Long
    biXPelsPerMeter As Long
    biYPelsPerMeter As Long
    biClrUsed As Long
    biClrImportant As Long
End Type

Public Type BITMAPINFO
    bmiHeader As BITMAPINFOHEADER
    bmiColors(0 To 0) As Long
End Type

Public Type MFT_REGISTER_TYPE_INFO
    guidMajorType As UUID
    guidSubtype As UUID
End Type

Public Enum MFVideoTransferFunction
    MFVideoTransFunc_Unknown = 0
    MFVideoTransFunc_10 = 1
    MFVideoTransFunc_18 = 2
    MFVideoTransFunc_20 = 3
    MFVideoTransFunc_22 = 4
    MFVideoTransFunc_709 = 5
    MFVideoTransFunc_240M = 6
    MFVideoTransFunc_sRGB = 7
    MFVideoTransFunc_28 = 8
    MFVideoTransFunc_Log_100 = 9
    MFVideoTransFunc_Log_316 = 10
    MFVideoTransFunc_709_sym = 11
    MFVideoTransFunc_2020_const = 12
    MFVideoTransFunc_2020 = 13
    MFVideoTransFunc_26 = 14
    MFVideoTransFunc_Last = 15
    MFVideoTransFunc_ForceDWORD = 2147483647
End Enum

Public Enum MFVideoPrimaries
    MFVideoPrimaries_Unknown = 0
    MFVideoPrimaries_reserved = 1
    MFVideoPrimaries_BT709 = 2
    MFVideoPrimaries_BT470_2_SysM = 3
    MFVideoPrimaries_BT470_2_SysBG = 4
    MFVideoPrimaries_SMPTE170M = 5
    MFVideoPrimaries_SMPTE240M = 6
    MFVideoPrimaries_EBU3213 = 7
    MFVideoPrimaries_SMPTE_C = 8
    MFVideoPrimaries_BT2020 = 9
    MFVideoPrimaries_XYZ = 10
    MFVideoPrimaries_Last = 11
    MFVideoPrimaries_ForceDWORD = 2147483647
End Enum

Public Enum MFVideoLighting
    MFVideoLighting_Unknown = 0
    MFVideoLighting_bright = 1
    MFVideoLighting_office = 2
    MFVideoLighting_dim = 3
    MFVideoLighting_dark = 4
    MFVideoLighting_Last = 5
    MFVideoLighting_ForceDWORD = 2147483647
End Enum

Public Enum MFVideoTransferMatrix
    MFVideoTransferMatrix_Unknown = 0
    MFVideoTransferMatrix_BT709 = 1
    MFVideoTransferMatrix_BT601 = 2
    MFVideoTransferMatrix_SMPTE240M = 3
    MFVideoTransferMatrix_BT2020_10 = 4
    MFVideoTransferMatrix_BT2020_12 = 5
    MFVideoTransferMatrix_Last = 6
    MFVideoTransferMatrix_ForceDWORD = 2147483647
End Enum

Public Enum MFVideoChromaSubsampling
    MFVideoChromaSubsampling_Unknown = 0
    MFVideoChromaSubsampling_ProgressiveChroma = 8
    MFVideoChromaSubsampling_Horizontally_Cosited = 4
    MFVideoChromaSubsampling_Vertically_Cosited = 2
    MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1
    MFVideoChromaSubsampling_MPEG2 = 5
    MFVideoChromaSubsampling_MPEG1 = 1
    MFVideoChromaSubsampling_DV_PAL = 6
    MFVideoChromaSubsampling_Cosited = 7
    MFVideoChromaSubsampling_Last = 3
    MFVideoChromaSubsampling_ForceDWORD = 2147483647
End Enum

Public Enum MFNominalRange
    MFNominalRange_Unknown = 0
    MFNominalRange_Normal = 1
    MFNominalRange_Wide = 2
    MFNominalRange_0_255 = 1
    MFNominalRange_16_235 = 2
    MFNominalRange_48_208 = 3
    MFNominalRange_64_127 = 4
    MFNominalRange_Last = 5
    MFNominalRange_ForceDWORD = 2147483647
End Enum

Public Enum MFVideoFlags
    MFVideoFlag_PAD_TO_Mask = 3
    MFVideoFlag_PAD_TO_None = 0
    MFVideoFlag_PAD_TO_4x3 = 1
    MFVideoFlag_PAD_TO_16x9 = 2
    MFVideoFlag_SrcContentHintMask = 28
    MFVideoFlag_SrcContentHintNone = 0
    MFVideoFlag_SrcContentHint16x9 = 4
    MFVideoFlag_SrcContentHint235_1 = 8
    MFVideoFlag_AnalogProtected = 32
    MFVideoFlag_DigitallyProtected = 64
    MFVideoFlag_ProgressiveContent = 128
    MFVideoFlag_FieldRepeatCountMask = 1792
    MFVideoFlag_FieldRepeatCountShift = 8
    MFVideoFlag_ProgressiveSeqReset = 2048
    MFVideoFlag_PanScanEnabled = 131072
    MFVideoFlag_LowerFieldFirst = 262144
    MFVideoFlag_BottomUpLinearRep = 524288
    MFVideoFlags_DXVASurface = 1048576
    MFVideoFlags_RenderTargetSurface = 4194304
    MFVideoFlags_ForceQWORD = 2147483647
End Enum

Public Type MFRatio
    Numerator As Long
    Denominator As Long
End Type

Public Type MFOffset
    fract As Integer
    Value As Integer
End Type

Public Type MFVideoArea
    OffsetX As MFOffset
    OffsetY As MFOffset
    Area As SIZE
End Type

Public Type MFVideoInfo
    dwWidth As Long
    dwHeight As Long
    PixelAspectRatio As MFRatio
    SourceChromaSubsampling As MFVideoChromaSubsampling
    InterlaceMode As MFVideoInterlaceMode
    TransferFunction As MFVideoTransferFunction
    ColorPrimaries As MFVideoPrimaries
    TransferMatrix As MFVideoTransferMatrix
    SourceLighting As MFVideoLighting
    FramesPerSecond As MFRatio
    NominalRange As MFNominalRange
    GeometricAperture As MFVideoArea
    MinimumDisplayAperture As MFVideoArea
    PanScanAperture As MFVideoArea
    VideoFlags As LongLong
End Type

Public Type MFAYUVSample
    bCrValue As Byte
    bCbValue As Byte
    bYValue As Byte
    bSampleAlpha8 As Byte
End Type

Public Type MFARGB
    rgbBlue As Byte
    rgbGreen As Byte
    rgbRed As Byte
    rgbAlpha As Byte
End Type

Public Type MFPaletteEntry
    ColorUnion As Long
End Type

Public Type MFVideoSurfaceInfo
    Format As Long
    PaletteEntries As Long
    Palette(0 To 255) As MFPaletteEntry
End Type

Public Type MFVideoCompressedInfo
    AvgBitrate As LongLong
    AvgBitErrorRate As LongLong
    MaxKeyFrameSpacing As Long
End Type

Public Type MFVIDEOFORMAT
    dwSize As Long
    videoInfo As MFVideoInfo
    guidFormat As UUID
    compressedInfo As MFVideoCompressedInfo
    surfaceInfo As MFVideoSurfaceInfo
End Type

Public Enum MFStandardVideoFormat
    MFStdVideoFormat_reserved = 0
    MFStdVideoFormat_NTSC = 1
    MFStdVideoFormat_PAL = 2
    MFStdVideoFormat_DVD_NTSC = 3
    MFStdVideoFormat_DVD_PAL = 4
    MFStdVideoFormat_DV_PAL = 5
    MFStdVideoFormat_DV_NTSC = 6
    MFStdVideoFormat_ATSC_SD480i = 7
    MFStdVideoFormat_ATSC_HD1080i = 8
    MFStdVideoFormat_ATSC_HD720p = 9
End Enum

Public Enum MF_FILE_ACCESSMODE
    MF_ACCESSMODE_READ = 1
    MF_ACCESSMODE_WRITE = 2
    MF_ACCESSMODE_READWRITE = 3
End Enum

Public Enum MF_FILE_OPENMODE
    MF_OPENMODE_FAIL_IF_NOT_EXIST = 0
    MF_OPENMODE_FAIL_IF_EXIST = 1
    MF_OPENMODE_RESET_IF_EXIST = 2
    MF_OPENMODE_APPEND_IF_EXIST = 3
    MF_OPENMODE_DELETE_IF_EXIST = 4
End Enum

Public Enum MF_FILE_FLAGS
    MF_FILEFLAGS_NONE = 0
    MF_FILEFLAGS_NOBUFFERING = 1
    MF_FILEFLAGS_ALLOW_WRITE_SHARING = 2
End Enum

Public Enum DMO_VIDEO_OUTPUT_STREAM_FLAGS
    DMO_VOSF_NEEDS_PREVIOUS_SAMPLE = 1
End Enum

Public Enum DMO_QUALITY_STATUS_FLAGS
    DMO_QUALITY_STATUS_ENABLED = 1
End Enum


Public Enum DMO_INPLACE_PROCESS_FLAGS
    DMO_INPLACE_NORMAL = 0
    DMO_INPLACE_ZERO = 1
End Enum


Public Type DMO_OUTPUT_DATA_BUFFER
    pBuffer As IMediaBuffer
    dwStatus As Long
    rtTimestamp As LongLong
    rtTimelength As LongLong
End Type


Public Enum MFMEDIASOURCE_CHARACTERISTICS
    MFMEDIASOURCE_IS_LIVE = 0
    MFMEDIASOURCE_CAN_SEEK = 1
    MFMEDIASOURCE_CAN_PAUSE = 2
    MFMEDIASOURCE_HAS_SLOW_SEEK = 3
    MFMEDIASOURCE_HAS_MULTIPLE_PRESENTATIONS = 4
    MFMEDIASOURCE_CAN_SKIPFORWARD = 5
    MFMEDIASOURCE_CAN_SKIPBACKWARD = 6
    MFMEDIASOURCE_DOES_NOT_USE_NETWORK = 7
End Enum

Public Enum MF_SOURCE_READER_CONTROL_FLAG
    MF_SOURCE_READER_CONTROLF_DRAIN = 0
End Enum

Public Enum MF_SOURCE_READER_FLAG
    MF_SOURCE_READERF_ERROR = 0
    MF_SOURCE_READERF_ENDOFSTREAM = 1
    MF_SOURCE_READERF_NEWSTREAM = 2
    MF_SOURCE_READERF_NATIVEMEDIATYPECHANGED = 3
    MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED = 4
    MF_SOURCE_READERF_STREAMTICK = 5
    MF_SOURCE_READERF_ALLEFFECTSREMOVED = 6
End Enum

Public Type DMO_MEDIA_TYPE
    majortype As UUID
    Subtype As UUID
    bFixedSizeSamples As Long
    bTemporalCompression As Long
    lSampleSize As Long
    formattype As UUID
    pUnk As IUnknown
    cbFormat As Long
    pbFormat As LongPtr
End Type

Public Enum DMO_INPUT_DATA_BUFFER_FLAGS
    DMO_INPUT_DATA_BUFFERF_SYNCPOINT = 1
    DMO_INPUT_DATA_BUFFERF_TIME = 2
    DMO_INPUT_DATA_BUFFERF_TIMELENGTH = 4
    DMO_INPUT_DATA_BUFFERF_DISCONTINUITY = 8
End Enum

Public Enum DMO_OUTPUT_DATA_BUFFER_FLAGS
    DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT = 1
    DMO_OUTPUT_DATA_BUFFERF_TIME = 2
    DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH = 4
    DMO_OUTPUT_DATA_BUFFERF_DISCONTINUITY = 8
    DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE = 16777216
End Enum

Public Enum DMO_INPUT_STATUS_FLAGS
    DMO_INPUT_STATUSF_ACCEPT_DATA = 1
End Enum

Public Enum DMO_INPUT_STREAM_INFO_FLAGS
    DMO_INPUT_STREAMF_WHOLE_SAMPLES = 1
    DMO_INPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER = 2
    DMO_INPUT_STREAMF_FIXED_SAMPLE_SIZE = 4
    DMO_INPUT_STREAMF_HOLDS_BUFFERS = 8
End Enum

Public Enum DMO_OUTPUT_STREAM_INFO_FLAGS
    DMO_OUTPUT_STREAMF_WHOLE_SAMPLES = 1
    DMO_OUTPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER = 2
    DMO_OUTPUT_STREAMF_FIXED_SAMPLE_SIZE = 4
    DMO_OUTPUT_STREAMF_DISCARDABLE = 8
    DMO_OUTPUT_STREAMF_OPTIONAL = 16
End Enum

Public Enum DMO_SET_TYPE_FLAGS
    DMO_SET_TYPEF_TEST_ONLY = 1
    DMO_SET_TYPEF_CLEAR = 2
End Enum

Public Enum DMO_PROCESS_OUTPUT_FLAGS
    DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER = 1
End Enum



Public Enum MF_ATTRIBUTE_SERIALIZE_OPTIONS
	MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF = &H00000001
End Enum

Public Enum MFSESSION_SETTOPOLOGY_FLAGS
	MFSESSION_SETTOPOLOGY_IMMEDIATE = &H1
	MFSESSION_SETTOPOLOGY_NORESOLUTION = &H2
	MFSESSION_SETTOPOLOGY_CLEAR_CURRENT = &H4
End Enum

Public Enum MFSESSION_GETFULLTOPOLOGY_FLAGS
	MFSESSION_GETFULLTOPOLOGY_CURRENT = &H1
End Enum

Public Enum MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS
	MF_TOPOLOGY_RESOLUTION_SUCCEEDED = &H00000000
	MF_OPTIONAL_NODE_REJECTED_MEDIA_TYPE = &H00000001
	MF_OPTIONAL_NODE_REJECTED_PROTECTED_PROCESS = &H00000002
End Enum

Public Enum MF_RESOLUTION
	' 
	'  Object type requested
	' 
	MF_RESOLUTION_MEDIASOURCE = &H00000001 ' Attempt to return a MediaSource object
	MF_RESOLUTION_BYTESTREAM = &H00000002 ' Attempt to return a ByteStream object (not currently supported)
	MF_RESOLUTION_CONTENT_DOES_NOT_HAVE_TO_MATCH_EXTENSION_OR_MIME_TYPE = &H00000010
	MF_RESOLUTION_KEEP_BYTE_STREAM_ALIVE_ON_FAIL = &H00000020
	MF_RESOLUTION_DISABLE_LOCAL_PLUGINS = &H00000040
	MF_RESOLUTION_PLUGIN_CONTROL_POLICY_APPROVED_ONLY = &H00000080
	MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY = &H00000100
	MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY_EDGEMODE = &H00000200
	MF_RESOLUTION_ENABLE_STORE_PLUGINS = &H00000400
	MF_RESOLUTION_READ = &H00010000
	MF_RESOLUTION_WRITE = &H00020000
End Enum
Public Enum MFVideoInterlaceMode
	MFVideoInterlace_Unknown = 0
	MFVideoInterlace_Progressive = 2
	MFVideoInterlace_FieldInterleavedUpperFirst = 3
	MFVideoInterlace_FieldInterleavedLowerFirst = 4
	MFVideoInterlace_FieldSingleUpper = 5
	MFVideoInterlace_FieldSingleLower = 6
	MFVideoInterlace_MixedInterlaceOrProgressive = 7
	MFVideoInterlace_Last = 8
	MFVideoInterlace_ForceDWORD = &H7fffffff
End Enum

Public Enum MF_OBJECT_TYPE
	MF_OBJECT_MEDIASOURCE = 0
	MF_OBJECT_BYTESTREAM = 1
	MF_OBJECT_INVALID = 2
End Enum

Public Enum MF_ATTRIBUTE_TYPE
	MF_ATTRIBUTE_UINT32 = 19
	MF_ATTRIBUTE_UINT64 = 21
	MF_ATTRIBUTE_DOUBLE = 5
	MF_ATTRIBUTE_GUID = 72
	MF_ATTRIBUTE_STRING = 31
	MF_ATTRIBUTE_BLOB = 4113
	MF_ATTRIBUTE_IUNKNOWN = 13
End Enum

Public Enum MF_ATTRIBUTES_MATCH_TYPE
	MF_ATTRIBUTES_MATCH_OUR_ITEMS = 0
	MF_ATTRIBUTES_MATCH_THEIR_ITEMS = 1
	MF_ATTRIBUTES_MATCH_ALL_ITEMS = 2
	MF_ATTRIBUTES_MATCH_INTERSECTION = 3
	MF_ATTRIBUTES_MATCH_SMALLER = 4
End Enum

Public Enum MFBYTESTREAM_SEEK_ORIGIN
	msoBegin = 0
	msoCurrent = 1
End Enum

Public Enum MediaEventType
	MEUnknown = 0
	MEError = 1
	MEExtendedType = 2
	MENonFatalError = 3
	MEGenericV1Anchor = 3
	MESessionUnknown = 100
	MESessionTopologySet = 101
	MESessionTopologiesCleared = 102
	MESessionStarted = 103
	MESessionPaused = 104
	MESessionStopped = 105
	MESessionClosed = 106
	MESessionEnded = 107
	MESessionRateChanged = 108
	MESessionScrubSampleComplete = 109
	MESessionCapabilitiesChanged = 110
	MESessionTopologyStatus = 111
	MESessionNotifyPresentationTime = 112
	MENewPresentation = 113
	MELicenseAcquisitionStart = 114
	MELicenseAcquisitionCompleted = 115
	MEIndividualizationStart = 116
	MEIndividualizationCompleted = 117
	MEEnablerProgress = 118
	MEEnablerCompleted = 119
	MEPolicyError = 120
	MEPolicyReport = 121
	MEBufferingStarted = 122
	MEBufferingStopped = 123
	MEConnectStart = 124
	MEConnectEnd = 125
	MEReconnectStart = 126
	MEReconnectEnd = 127
	MERendererEvent = 128
	MESessionStreamSinkFormatChanged = 129
	MESessionV1Anchor = 129
	MESourceUnknown = 200
	MESourceStarted = 201
	MEStreamStarted = 202
	MESourceSeeked = 203
	MEStreamSeeked = 204
	MENewStream = 205
	MEUpdatedStream = 206
	MESourceStopped = 207
	MEStreamStopped = 208
	MESourcePaused = 209
	MEStreamPaused = 210
	MEEndOfPresentation = 211
	MEEndOfStream = 212
	MEMediaSample = 213
	MEStreamTick = 214
	MEStreamThinMode = 215
	MEStreamFormatChanged = 216
	MESourceRateChanged = 217
	MEEndOfPresentationSegment = 218
	MESourceCharacteristicsChanged = 219
	MESourceRateChangeRequested = 220
	MESourceMetadataChanged = 221
	MESequencerSourceTopologyUpdated = 222
	MESourceV1Anchor = 222
	MESinkUnknown = 300
	MEStreamSinkStarted = 301
	MEStreamSinkStopped = 302
	MEStreamSinkPaused = 303
	MEStreamSinkRateChanged = 304
	MEStreamSinkRequestSample = 305
	MEStreamSinkMarker = 306
	MEStreamSinkPrerolled = 307
	MEStreamSinkScrubSampleComplete = 308
	MEStreamSinkFormatChanged = 309
	MEStreamSinkDeviceChanged = 310
	MEQualityNotify = 311
	MESinkInvalidated = 312
	MEAudioSessionNameChanged = 313
	MEAudioSessionVolumeChanged = 314
	MEAudioSessionDeviceRemoved = 315
	MEAudioSessionServerShutdown = 316
	MEAudioSessionGroupingParamChanged = 317
	MEAudioSessionIconChanged = 318
	MEAudioSessionFormatChanged = 319
	MEAudioSessionDisconnected = 320
	MEAudioSessionExclusiveModeOverride = 321
	MESinkV1Anchor = 321
	METrustUnknown = 400
	MEPolicyChanged = 401
	MEContentProtectionMessage = 402
	MEPolicySet = 403
	METrustV1Anchor = 403
	MEWMDRMLicenseBackupCompleted = 500
	MEWMDRMLicenseBackupProgress = 501
	MEWMDRMLicenseRestoreCompleted = 502
	MEWMDRMLicenseRestoreProgress = 503
	MEWMDRMLicenseAcquisitionCompleted = 506
	MEWMDRMIndividualizationCompleted = 508
	MEWMDRMIndividualizationProgress = 513
	MEWMDRMProximityCompleted = 514
	MEWMDRMLicenseStoreCleaned = 515
	MEWMDRMRevocationDownloadCompleted = 516
	MEWMDRMV1Anchor = 516
	METransformUnknown = 600
	METransformNeedInput = 601
	METransformHaveOutput = 602
	METransformDrainComplete = 603
	METransformMarker = 604
	MEReservedMax = 10000
End Enum

Public Enum MF2DBuffer_LockFlags
	MF2DBuffer_LockFlags_LockTypeMask = &H3 '0x1 | 0x2 | 0x3,
	MF2DBuffer_LockFlags_Read = &H1
	MF2DBuffer_LockFlags_Write = &H2
	MF2DBuffer_LockFlags_ReadWrite = &H3
	MF2DBuffer_LockFlags_ForceDWORD = &H7fffffff
End Enum

Public Enum MFTOPOLOGY_DXVA_MODE
	' / <summary>
	' /     Default DXVA handling for MF v1.  The D3DManager will be set on
	' /     decoders inserted by the topoloader only.
	' / </summary>
	MFTOPOLOGY_DXVA_DEFAULT = 0
	' / <summary>
	' /     No DXVA.  No transforms will get the D3DManager.  This allows
	' /     software processing even on DXVA-enabled machines
	' / </summary>
	MFTOPOLOGY_DXVA_NONE = 1
	' / <summary>
	' /     Full DXVA.  The D3DManager will be set on any chain of D3D-aware
	' /     nodes upstream from a D3D-aware renderer.
	MFTOPOLOGY_DXVA_FULL = 2
End Enum

Public Enum MFTOPOLOGY_HARDWARE_MODE
	' / <summary>
	' /     Default hardware handling for MF v1.  Hardware MFTs will
	' /     not be inserted.
	' / </summary>
	MFTOPOLOGY_HWMODE_SOFTWARE_ONLY = 0
	' / <summary>
	' /     If hardware MFTs are available, the topoloader will insert
	' /     them.  If not, the topoloader will fall back to a software
	' /     MFT to perform the task.
	' / </summary>
	MFTOPOLOGY_HWMODE_USE_HARDWARE = 1
	' / <summary>
	' /     If hardware MFTs are available, the topoloader will insert
	' /     them.  If not, the connection will fail.
	' / </summary>
	MFTOPOLOGY_HWMODE_USE_ONLY_HARDWARE = 2
End Enum

Public Enum MF_TOPOLOGY_TYPE
	' / <member name="MF_TOPOLOGY_OUTPUT_NODE">
	' /     It represents the output topolgy node. The object contained in the output node could be a media sink object or an sink activator object.
	' / </member>
	MF_TOPOLOGY_OUTPUT_NODE = 0
	' / <member name="MF_TOPOLOGY_SOURCESTREAM_NODE">
	' /     It represents the source topology node. The node of this type implements IMFSourceStreamTopologyNode.
	' / </member>
	MF_TOPOLOGY_SOURCESTREAM_NODE = 1
	' / <member name="MF_TOPOLOGY_TRANSFORM_NODE">
	' /     It represents a media foundation transform object. The node of this type contains an IMFTransform object.
	' / </member>
	MF_TOPOLOGY_TRANSFORM_NODE = 2
	' / <member name="MF_TOPOLOGY_TEE_NODE">
	' /     represents a TEE node. It doesn't hold any real object. The node will be useful in scenarios like preview & archive.
	' / </member>
	MF_TOPOLOGY_TEE_NODE = 3
	MF_TOPOLOGY_MAX = &Hffffffff
End Enum

Public Enum MFCLOCK_CHARACTERISTICS_FLAGS
	' / <member name="MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ">
	' /     If set, clock times given in IMFClock::GetCorrelatedTime
	' /     are in standard MFTIME (100ns) units.
	' /     The dwClockFrequency member of the MFCLOCK_PROPERTIES structure
	' /     returned from IMFClock::GetProperties must be set to
	' /     MFCLOCK_FREQUENCY_HNS in this case.
	' / </member>
	MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ = &H2
	' / <member name="MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING">
	' /     If set, the clock will always be in the MFCLOCK_STATE_RUNNING
	' /     state.
	' / </member>
	MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING = &H4
	' / <member name="MFCLOCK_CHARACTERISTICS_FLAG_IS_SYSTEM_CLOCK">
	' /     If set, then this clock is running according to system time.
	' /     Therefore, the clock time returned from
	' /     IMFClock::GetCorrelation can be used without any further
	' /     calculations.
	' / </member>
	MFCLOCK_CHARACTERISTICS_FLAG_IS_SYSTEM_CLOCK = &H8
End Enum

Public Enum MFCLOCK_STATE
	' / <member name="MFCLOCK_STATE_INVALID">
	' /     Clock is currently invalid.
	' /     If the clock uses an underlying device, this could mean that
	' /     there is no device.
	' / </member>
	MFCLOCK_STATE_INVALID = 0
	' / <member name="MFCLOCK_STATE_RUNNING">
	' /     Clock is currently running (started).
	' / </member>
	MFCLOCK_STATE_RUNNING = 1
	' / <member name="MFCLOCK_STATE_STOPPED">
	' /     Clock is currently stopped and reporting a time of 0.
	' / </member>
	MFCLOCK_STATE_STOPPED = 2
	' / <member name="MFCLOCK_STATE_PAUSED">
	' /     Clock is currently paused, and the time it reports is frozen.
	' / </member>
	MFCLOCK_STATE_PAUSED = 3
End Enum

Public Enum MFCLOCK_RELATIONAL_FLAGS
	' / <member name="MFCLOCK_RELATIONAL_FLAG_JITTER_NEVER_AHEAD">
	' /     If set, this bit indicates that jitter values are always negative.
	' /     That is, the clock time returned by IMFClock::GetCorrelatedTime()
	' /     will never jitter to times ahead; only to times behind.
	' / </member>
	MFCLOCK_RELATIONAL_FLAG_JITTER_NEVER_AHEAD = &H1
End Enum

Public Type MFCLOCK_PROPERTIES
	'/ <member name="qwCorrelationRate">
	'/     The nominal rate at which the clock is correlated to MF system time.
	'/     A value of 0 means that the correlation is made during the
	'/     IMFClock::GetCorrelatedTime call.
	'/ </member>
	qwCorrelationRate As LongLong
	'/ <member name="guidClockId">
	'/     Uniquely identifies the clocking device (source crystal).
	'/     If two clocks have the same guidClockId, then they are based
	'/     on the same clocking device.
	'/     A value of GUID_NULL indicates that this clock is not similar
	'/     to any other clock.
	'/ </member>
	guidClockId As UUID
	'/ <member name="dwClockFlags">
	'/     Bit flags describing this clock.
	'/     See enumerated type MFCLOCK_RELATIONAL_FLAGS.
	'/ </member>
	dwClockFlags As Long
	'/ <member name="qwClockFrequency">
	'/     Fixed frequency in Hz at which the clock operates.
	'/     A value of MFCLOCK_FREQUENCY_HNS means that the clock has
	'/     a frequency of 10MHz, which is standard MFTIME units (100ns).
	'/     If the bit flag MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ
	'/     is set in the characteristics returned by
	'/     IMFClock::GetClockCharacteristics, then this value must be equal
	'/     to MFCLOCK_FREQUENCY_HNS.
	'/ </member>
	qwClockFrequency As LongLong
	'/ <member name="dwClockTolerance">
	'/     Amount of inaccuracy in parts-per-billion that may be present
	'/     on the clock.
	'/     Implementations that do not know the clock tolerance should
	'/     set this value to MFCLOCK_TOLERANCE_UNKNOWN, which is the
	'/     value typical in crystal specifications.
	'/ </member>
	dwClockTolerance As Long
	'/ <member name="dwClockJitter">
	'/     Amount of jitter in 100ns units that may be present on this
	'/     clock due to sampling (this does not include the inaccuracies
	'/     accounted for in dwClockTolerance).
	'/     For single-device clocks, this is the inverse of frequency.
	'/     For frequencies greater than or equal to 10MHz on single-device
	'/     clocks, this value should be 1.
	'/     When this clock belongs to a capture device that is not directly
	'/     timestamping the incoming data, the correlation cannot be made
	'/     until the driver's interrupt service routine runs.
	'/     If this is the case,
	'/     then these values should be included in the expected jitter:
	'/     <para>
	'/         MFCLOCK_JITTER_ISR:
	'/             Jitter due to timestamping during
	'/             the device driver's interrupt service routine.
	'/     </para>
	'/     <para>
	'/         MFCLOCK_JITTER_DPC:
	'/             Jitter due to timestampind during
	'/             the device driver's deferred procedure call processing.
	'/     </para>
	'/     <para>
	'/         MFCLOCK_JITTER_PASSIVE:
	'/             Jitter due to dropping to
	'/             passive level (normal thread execution) before timestamping.
	'/     </para>
	'/ </member>
	dwClockJitter As Long
End Type



[ Description ("Platform not initialized. Please call MFStartup().") ] Public Const MF_E_PLATFORM_NOT_INITIALIZED = &Hc00d36b0
[ Description ("The buffer was too small to carry out the requested action.") ] Public Const MF_E_BUFFERTOOSMALL = &Hc00d36b1
[ Description ("The request is invalid in the current state.") ] Public Const MF_E_INVALIDREQUEST = &Hc00d36b2
[ Description ("The stream number provided was invalid.") ] Public Const MF_E_INVALIDSTREAMNUMBER = &Hc00d36b3
[ Description ("The data specified for the media type is invalid, inconsistent, or not supported by this object.") ] Public Const MF_E_INVALIDMEDIATYPE = &Hc00d36b4
[ Description ("The callee is currently not accepting further input.") ] Public Const MF_E_NOTACCEPTING = &Hc00d36b5
[ Description ("This object needs to be initialized before the requested operation can be carried out.") ] Public Const MF_E_NOT_INITIALIZED = &Hc00d36b6
[ Description ("The requested representation is not supported by this object.") ] Public Const MF_E_UNSUPPORTED_REPRESENTATION = &Hc00d36b7
[ Description ("An object ran out of media types to suggest therefore the requested chain of streaming objects cannot be completed.") ] Public Const MF_E_NO_MORE_TYPES = &Hc00d36b9
[ Description ("The object does not support the specified service.") ] Public Const MF_E_UNSUPPORTED_SERVICE = &Hc00d36ba
[ Description ("An unexpected error has occurred in the operation requested.") ] Public Const MF_E_UNEXPECTED = &Hc00d36bb
[ Description ("Invalid name.") ] Public Const MF_E_INVALIDNAME = &Hc00d36bc
[ Description ("Invalid type.") ] Public Const MF_E_INVALIDTYPE = &Hc00d36bd
[ Description ("The file does not conform to the relevant file format specification.") ] Public Const MF_E_INVALID_FILE_FORMAT = &Hc00d36be
[ Description ("Invalid index.") ] Public Const MF_E_INVALIDINDEX = &Hc00d36bf
[ Description ("An invalid timestamp was given.") ] Public Const MF_E_INVALID_TIMESTAMP = &Hc00d36c0
[ Description ("The scheme of the given URL is unsupported.") ] Public Const MF_E_UNSUPPORTED_SCHEME = &Hc00d36c3
[ Description ("The byte stream type of the given URL is unsupported.") ] Public Const MF_E_UNSUPPORTED_BYTESTREAM_TYPE = &Hc00d36c4
[ Description ("The given time format is unsupported.") ] Public Const MF_E_UNSUPPORTED_TIME_FORMAT = &Hc00d36c5
[ Description ("The Media Sample does not have a timestamp.") ] Public Const MF_E_NO_SAMPLE_TIMESTAMP = &Hc00d36c8
[ Description ("The Media Sample does not have a duration.") ] Public Const MF_E_NO_SAMPLE_DURATION = &Hc00d36c9
[ Description ("The request failed because the data in the stream is corrupt.") ] Public Const MF_E_INVALID_STREAM_DATA = &Hc00d36cb
[ Description ("Real time services are not available.") ] Public Const MF_E_RT_UNAVAILABLE = &Hc00d36cf
[ Description ("The specified rate is not supported.") ] Public Const MF_E_UNSUPPORTED_RATE = &Hc00d36d0
[ Description ("This component does not support stream-thinning.") ] Public Const MF_E_THINNING_UNSUPPORTED = &Hc00d36d1
[ Description ("The call failed because no reverse playback rates are available.") ] Public Const MF_E_REVERSE_UNSUPPORTED = &Hc00d36d2
[ Description ("The requested rate transition cannot occur in the current state.") ] Public Const MF_E_UNSUPPORTED_RATE_TRANSITION = &Hc00d36d3
[ Description ("The requested rate change has been pre-empted and will not occur.") ] Public Const MF_E_RATE_CHANGE_PREEMPTED = &Hc00d36d4
[ Description ("The specified object or value does not exist.") ] Public Const MF_E_NOT_FOUND = &Hc00d36d5
[ Description ("The requested value is not available.") ] Public Const MF_E_NOT_AVAILABLE = &Hc00d36d6
[ Description ("The specified operation requires a clock and no clock is available.") ] Public Const MF_E_NO_CLOCK = &Hc00d36d7
[ Description ("This callback and state had already been passed in to this event generator earlier.") ] Public Const MF_S_MULTIPLE_BEGIN = &H000d36d8
[ Description ("This callback has already been passed in to this event generator.") ] Public Const MF_E_MULTIPLE_BEGIN = &Hc00d36d9
[ Description ("Some component is already listening to events on this event generator.") ] Public Const MF_E_MULTIPLE_SUBSCRIBERS = &Hc00d36da
[ Description ("This timer was orphaned before its callback time arrived.") ] Public Const MF_E_TIMER_ORPHANED = &Hc00d36db
[ Description ("A state transition is already pending.") ] Public Const MF_E_STATE_TRANSITION_PENDING = &Hc00d36dc
[ Description ("The requested state transition is unsupported.") ] Public Const MF_E_UNSUPPORTED_STATE_TRANSITION = &Hc00d36dd
[ Description ("An unrecoverable error has occurred.") ] Public Const MF_E_UNRECOVERABLE_ERROR_OCCURRED = &Hc00d36de
[ Description ("The provided sample has too many buffers.") ] Public Const MF_E_SAMPLE_HAS_TOO_MANY_BUFFERS = &Hc00d36df
[ Description ("The provided sample is not writable.") ] Public Const MF_E_SAMPLE_NOT_WRITABLE = &Hc00d36e0
[ Description ("The specified key is not valid.") ] Public Const MF_E_INVALID_KEY = &Hc00d36e2
[ Description ("You are calling MFStartup with the wrong MF_VERSION. Mismatched bits?") ] Public Const MF_E_BAD_STARTUP_VERSION = &Hc00d36e3
[ Description ("The caption of the given URL is unsupported.") ] Public Const MF_E_UNSUPPORTED_CAPTION = &Hc00d36e4
[ Description ("The operation on the current offset is not permitted.") ] Public Const MF_E_INVALID_POSITION = &Hc00d36e5
[ Description ("The requested attribute was not found.") ] Public Const MF_E_ATTRIBUTENOTFOUND = &Hc00d36e6
[ Description ("The specified property type is not allowed in this context.") ] Public Const MF_E_PROPERTY_TYPE_NOT_ALLOWED = &Hc00d36e7
[ Description ("The specified property type is not supported.") ] Public Const MF_E_PROPERTY_TYPE_NOT_SUPPORTED = &Hc00d36e8
[ Description ("The specified property is empty.") ] Public Const MF_E_PROPERTY_EMPTY = &Hc00d36e9
[ Description ("The specified property is not empty.") ] Public Const MF_E_PROPERTY_NOT_EMPTY = &Hc00d36ea
[ Description ("The vector property specified is not allowed in this context.") ] Public Const MF_E_PROPERTY_VECTOR_NOT_ALLOWED = &Hc00d36eb
[ Description ("A vector property is required in this context.") ] Public Const MF_E_PROPERTY_VECTOR_REQUIRED = &Hc00d36ec
[ Description ("The operation is cancelled.") ] Public Const MF_E_OPERATION_CANCELLED = &Hc00d36ed
[ Description ("The provided bytestream was expected to be seekable and it is not.") ] Public Const MF_E_BYTESTREAM_NOT_SEEKABLE = &Hc00d36ee
[ Description ("The Media Foundation platform is disabled when the system is running in Safe Mode.") ] Public Const MF_E_DISABLED_IN_SAFEMODE = &Hc00d36ef
[ Description ("The Media Source could not parse the byte stream.") ] Public Const MF_E_CANNOT_PARSE_BYTESTREAM = &Hc00d36f0
[ Description ("Mutually exclusive flags have been specified to source resolver. This flag combination is invalid.") ] Public Const MF_E_SOURCERESOLVER_MUTUALLY_EXCLUSIVE_FLAGS = &Hc00d36f1
[ Description ("MediaProc is in the wrong state") ] Public Const MF_E_MEDIAPROC_WRONGSTATE = &Hc00d36f2
[ Description ("Real time I/O service can not provide requested throughput.") ] Public Const MF_E_RT_THROUGHPUT_NOT_AVAILABLE = &Hc00d36f3
[ Description ("The workqueue cannot be registered with more classes.") ] Public Const MF_E_RT_TOO_MANY_CLASSES = &Hc00d36f4
[ Description ("This operation cannot succeed because another thread owns this object.") ] Public Const MF_E_RT_WOULDBLOCK = &Hc00d36f5
[ Description ("Internal. Bitpump not found.") ] Public Const MF_E_NO_BITPUMP = &Hc00d36f6
[ Description ("No more RT memory available.") ] Public Const MF_E_RT_OUTOFMEMORY = &Hc00d36f7
[ Description ("An MMCSS class has not been set for this work queue.") ] Public Const MF_E_RT_WORKQUEUE_CLASS_NOT_SPECIFIED = &Hc00d36f8
[ Description ("Insufficient memory for response.") ] Public Const MF_E_INSUFFICIENT_BUFFER = &Hc00d7170
[ Description ("Activate failed to create mediasink. Call OutputNode::GetUINT32(MF_TOPONODE_MAJORTYPE) for more information. ") ] Public Const MF_E_CANNOT_CREATE_SINK = &Hc00d36fa
[ Description ("The length of the provided bytestream is unknown.") ] Public Const MF_E_BYTESTREAM_UNKNOWN_LENGTH = &Hc00d36fb
[ Description ("The media session cannot pause from a stopped state.") ] Public Const MF_E_SESSION_PAUSEWHILESTOPPED = &Hc00d36fc
[ Description ("The activate could not be created in the remote process for some reason it was replaced with empty one.") ] Public Const MF_S_ACTIVATE_REPLACED = &H000d36fd
[ Description ("The data specified for the media type is supported, but would require a format change, which is not supported by this object.") ] Public Const MF_E_FORMAT_CHANGE_NOT_SUPPORTED = &Hc00d36fe
[ Description ("The operation failed because an invalid combination of workqueue ID and flags was specified.") ] Public Const MF_E_INVALID_WORKQUEUE = &Hc00d36ff
[ Description ("No DRM support is available.") ] Public Const MF_E_DRM_UNSUPPORTED = &Hc00d3700
[ Description ("This operation is not authorized.") ] Public Const MF_E_UNAUTHORIZED = &Hc00d3701
[ Description ("The value is not in the specified or valid range.") ] Public Const MF_E_OUT_OF_RANGE = &Hc00d3702
[ Description ("The registered codec merit is not valid.") ] Public Const MF_E_INVALID_CODEC_MERIT = &Hc00d3703
[ Description ("Hardware MFT failed to start streaming due to lack of hardware resources.") ] Public Const MF_E_HW_MFT_FAILED_START_STREAMING = &Hc00d3704
[ Description ("Parsing is still in progress and is not yet complete.") ] Public Const MF_S_ASF_PARSEINPROGRESS = &H400d3a98
[ Description ("Not enough data have been parsed to carry out the requested action.") ] Public Const MF_E_ASF_PARSINGINCOMPLETE = &Hc00d3a98
[ Description ("There is a gap in the ASF data provided.") ] Public Const MF_E_ASF_MISSINGDATA = &Hc00d3a99
[ Description ("The data provided are not valid ASF.") ] Public Const MF_E_ASF_INVALIDDATA = &Hc00d3a9a
[ Description ("The packet is opaque, so the requested information cannot be returned.") ] Public Const MF_E_ASF_OPAQUEPACKET = &Hc00d3a9b
[ Description ("The requested operation failed since there is no appropriate ASF index.") ] Public Const MF_E_ASF_NOINDEX = &Hc00d3a9c
[ Description ("The value supplied is out of range for this operation.") ] Public Const MF_E_ASF_OUTOFRANGE = &Hc00d3a9d
[ Description ("The index entry requested needs to be loaded before it can be available.") ] Public Const MF_E_ASF_INDEXNOTLOADED = &Hc00d3a9e
[ Description ("The packet has reached the maximum number of payloads.") ] Public Const MF_E_ASF_TOO_MANY_PAYLOADS = &Hc00d3a9f
[ Description ("Stream type is not supported.") ] Public Const MF_E_ASF_UNSUPPORTED_STREAM_TYPE = &Hc00d3aa0
[ Description ("One or more ASF packets were dropped.") ] Public Const MF_E_ASF_DROPPED_PACKET = &Hc00d3aa1
[ Description ("There are no events available in the queue.") ] Public Const MF_E_NO_EVENTS_AVAILABLE = &Hc00d3e80
[ Description ("A media source cannot go from the stopped state to the paused state.") ] Public Const MF_E_INVALID_STATE_TRANSITION = &Hc00d3e82
[ Description ("The media stream cannot process any more samples because there are no more samples in the stream.") ] Public Const MF_E_END_OF_STREAM = &Hc00d3e84
[ Description ("The request is invalid because Shutdown() has been called.") ] Public Const MF_E_SHUTDOWN = &Hc00d3e85
[ Description ("The MP3 object was not found.") ] Public Const MF_E_MP3_NOTFOUND = &Hc00d3e86
[ Description ("The MP3 parser ran out of data before finding the MP3 object.") ] Public Const MF_E_MP3_OUTOFDATA = &Hc00d3e87
[ Description ("The file is not really a MP3 file.") ] Public Const MF_E_MP3_NOTMP3 = &Hc00d3e88
[ Description ("The MP3 file is not supported.") ] Public Const MF_E_MP3_NOTSUPPORTED = &Hc00d3e89
[ Description ("The Media stream has no duration.") ] Public Const MF_E_NO_DURATION = &Hc00d3e8a
[ Description ("The Media format is recognized but is invalid.") ] Public Const MF_E_INVALID_FORMAT = &Hc00d3e8c
[ Description ("The property requested was not found.") ] Public Const MF_E_PROPERTY_NOT_FOUND = &Hc00d3e8d
[ Description ("The property is read only.") ] Public Const MF_E_PROPERTY_READ_ONLY = &Hc00d3e8e
[ Description ("The specified property is not allowed in this context.") ] Public Const MF_E_PROPERTY_NOT_ALLOWED = &Hc00d3e8f
[ Description ("The media source is not started.") ] Public Const MF_E_MEDIA_SOURCE_NOT_STARTED = &Hc00d3e91
[ Description ("The Media format is recognized but not supported.") ] Public Const MF_E_UNSUPPORTED_FORMAT = &Hc00d3e98
[ Description ("The MPEG frame has bad CRC.") ] Public Const MF_E_MP3_BAD_CRC = &Hc00d3e99
[ Description ("The file is not protected.") ] Public Const MF_E_NOT_PROTECTED = &Hc00d3e9a
[ Description ("The media source is in the wrong state") ] Public Const MF_E_MEDIA_SOURCE_WRONGSTATE = &Hc00d3e9b
[ Description ("No streams are selected in source presentation descriptor.") ] Public Const MF_E_MEDIA_SOURCE_NO_STREAMS_SELECTED = &Hc00d3e9c
[ Description ("No key frame sample was found.") ] Public Const MF_E_CANNOT_FIND_KEYFRAME_SAMPLE = &Hc00d3e9d
[ Description ("An attempt to acquire a network resource failed.") ] Public Const MF_E_NETWORK_RESOURCE_FAILURE = &Hc00d4268
[ Description ("Error writing to the network.") ] Public Const MF_E_NET_WRITE = &Hc00d4269
[ Description ("Error reading from the network.") ] Public Const MF_E_NET_READ = &Hc00d426a
[ Description ("Internal. Entry cannot complete operation without network.") ] Public Const MF_E_NET_REQUIRE_NETWORK = &Hc00d426b
[ Description ("Internal. Async op is required.") ] Public Const MF_E_NET_REQUIRE_ASYNC = &Hc00d426c
[ Description ("Internal. Bandwidth levels are not supported.") ] Public Const MF_E_NET_BWLEVEL_NOT_SUPPORTED = &Hc00d426d
[ Description ("Internal. Stream groups are not supported.") ] Public Const MF_E_NET_STREAMGROUPS_NOT_SUPPORTED = &Hc00d426e
[ Description ("Manual stream selection is not supported.") ] Public Const MF_E_NET_MANUALSS_NOT_SUPPORTED = &Hc00d426f
[ Description ("Invalid presentation descriptor.") ] Public Const MF_E_NET_INVALID_PRESENTATION_DESCRIPTOR = &Hc00d4270
[ Description ("Cannot find cache stream.") ] Public Const MF_E_NET_CACHESTREAM_NOT_FOUND = &Hc00d4271
[ Description ("The proxy setting is manual.") ] Public Const MF_I_MANUAL_PROXY = &H400d4272
[ Description ("Internal. Entry cannot complete operation without input.") ] Public Const MF_E_NET_REQUIRE_INPUT = &Hc00d4274
[ Description ("The client redirected to another server.") ] Public Const MF_E_NET_REDIRECT = &Hc00d4275
[ Description ("The client is redirected to a proxy server.") ] Public Const MF_E_NET_REDIRECT_TO_PROXY = &Hc00d4276
[ Description ("The client reached maximum redirection limit.") ] Public Const MF_E_NET_TOO_MANY_REDIRECTS = &Hc00d4277
[ Description ("The server, a computer set up to offer multimedia content to other computers, could not handle your request for multimedia content in a timely manner.  Please try again later.") ] Public Const MF_E_NET_TIMEOUT = &Hc00d4278
[ Description ("The control socket is closed by the client.") ] Public Const MF_E_NET_CLIENT_CLOSE = &Hc00d4279
[ Description ("The server received invalid data from the client on the control connection.") ] Public Const MF_E_NET_BAD_CONTROL_DATA = &Hc00d427a
[ Description ("The server is not a compatible streaming media server.") ] Public Const MF_E_NET_INCOMPATIBLE_SERVER = &Hc00d427b
[ Description ("Url.") ] Public Const MF_E_NET_UNSAFE_URL = &Hc00d427c
[ Description ("Data is not available.") ] Public Const MF_E_NET_CACHE_NO_DATA = &Hc00d427d
[ Description ("End of line.") ] Public Const MF_E_NET_EOL = &Hc00d427e
[ Description ("The request could not be understood by the server.") ] Public Const MF_E_NET_BAD_REQUEST = &Hc00d427f
[ Description ("The server encountered an unexpected condition which prevented it from fulfilling the request.") ] Public Const MF_E_NET_INTERNAL_SERVER_ERROR = &Hc00d4280
[ Description ("Session not found.") ] Public Const MF_E_NET_SESSION_NOT_FOUND = &Hc00d4281
[ Description ("There is no connection established with the Windows Media server. The operation failed.") ] Public Const MF_E_NET_NOCONNECTION = &Hc00d4282
[ Description ("The network connection has failed.") ] Public Const MF_E_NET_CONNECTION_FAILURE = &Hc00d4283
[ Description ("The Server service that received the HTTP push request is not a compatible version of Windows Media Services (WMS).") ] Public Const MF_E_NET_INCOMPATIBLE_PUSHSERVER = &Hc00d4284
[ Description ("The Windows Media server is denying access.  The username and/or password might be incorrect.") ] Public Const MF_E_NET_SERVER_ACCESSDENIED = &Hc00d4285
[ Description ("The proxy server is denying access.  The username and/or password might be incorrect.") ] Public Const MF_E_NET_PROXY_ACCESSDENIED = &Hc00d4286
[ Description ("Unable to establish a connection to the server.") ] Public Const MF_E_NET_CANNOTCONNECT = &Hc00d4287
[ Description ("The specified push template is invalid.") ] Public Const MF_E_NET_INVALID_PUSH_TEMPLATE = &Hc00d4288
[ Description ("The specified push publishing point is invalid.") ] Public Const MF_E_NET_INVALID_PUSH_PUBLISHING_POINT = &Hc00d4289
[ Description ("The requested resource is in use.") ] Public Const MF_E_NET_BUSY = &Hc00d428a
[ Description ("The Publishing Point or file on the Windows Media Server is no longer available.") ] Public Const MF_E_NET_RESOURCE_GONE = &Hc00d428b
[ Description ("The proxy experienced an error while attempting to contact the media server.") ] Public Const MF_E_NET_ERROR_FROM_PROXY = &Hc00d428c
[ Description ("The proxy did not receive a timely response while attempting to contact the media server.") ] Public Const MF_E_NET_PROXY_TIMEOUT = &Hc00d428d
[ Description ("The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.") ] Public Const MF_E_NET_SERVER_UNAVAILABLE = &Hc00d428e
[ Description ("The encoding process was unable to keep up with the amount of supplied data.") ] Public Const MF_E_NET_TOO_MUCH_DATA = &Hc00d428f
[ Description ("Session not found.") ] Public Const MF_E_NET_SESSION_INVALID = &Hc00d4290
[ Description ("The requested URL is not available in offline mode.") ] Public Const MF_E_OFFLINE_MODE = &Hc00d4291
[ Description ("A device in the network is blocking UDP traffic.") ] Public Const MF_E_NET_UDP_BLOCKED = &Hc00d4292
[ Description ("The specified configuration value is not supported.") ] Public Const MF_E_NET_UNSUPPORTED_CONFIGURATION = &Hc00d4293
[ Description ("The networking protocol is disabled.") ] Public Const MF_E_NET_PROTOCOL_DISABLED = &Hc00d4294
[ Description ("This object has already been initialized and cannot be re-initialized at this time.") ] Public Const MF_E_ALREADY_INITIALIZED = &Hc00d4650
[ Description ("The amount of data passed in exceeds the given bitrate and buffer window.") ] Public Const MF_E_BANDWIDTH_OVERRUN = &Hc00d4651
[ Description ("The sample was passed in too late to be correctly processed.") ] Public Const MF_E_LATE_SAMPLE = &Hc00d4652
[ Description ("The requested action cannot be carried out until the object is flushed and the queue is emptied.") ] Public Const MF_E_FLUSH_NEEDED = &Hc00d4653
[ Description ("The profile is invalid.") ] Public Const MF_E_INVALID_PROFILE = &Hc00d4654
[ Description ("The index that is being generated needs to be committed before the requested action can be carried out.") ] Public Const MF_E_INDEX_NOT_COMMITTED = &Hc00d4655
[ Description ("The index that is necessary for the requested action is not found.") ] Public Const MF_E_NO_INDEX = &Hc00d4656
[ Description ("The requested index cannot be added in-place to the specified ASF content.") ] Public Const MF_E_CANNOT_INDEX_IN_PLACE = &Hc00d4657
[ Description ("The ASF leaky bucket parameters must be specified in order to carry out this request.") ] Public Const MF_E_MISSING_ASF_LEAKYBUCKET = &Hc00d4658
[ Description ("The stream id is invalid. The valid range for ASF stream id is from 1 to 127.") ] Public Const MF_E_INVALID_ASF_STREAMID = &Hc00d4659
[ Description ("The requested Stream Sink has been removed and cannot be used.") ] Public Const MF_E_STREAMSINK_REMOVED = &Hc00d4a38
[ Description ("The various Stream Sinks in this Media Sink are too far out of sync for the requested action to take place.") ] Public Const MF_E_STREAMSINKS_OUT_OF_SYNC = &Hc00d4a3a
[ Description ("Stream Sinks cannot be added to or removed from this Media Sink because its set of streams is fixed.") ] Public Const MF_E_STREAMSINKS_FIXED = &Hc00d4a3b
[ Description ("The given Stream Sink already exists.") ] Public Const MF_E_STREAMSINK_EXISTS = &Hc00d4a3c
[ Description ("Sample allocations have been canceled.") ] Public Const MF_E_SAMPLEALLOCATOR_CANCELED = &Hc00d4a3d
[ Description ("The sample allocator is currently empty, due to outstanding requests.") ] Public Const MF_E_SAMPLEALLOCATOR_EMPTY = &Hc00d4a3e
[ Description ("When we try to sopt a stream sink, it is already stopped ") ] Public Const MF_E_SINK_ALREADYSTOPPED = &Hc00d4a3f
[ Description ("The ASF file sink could not reserve AVIO because the bitrate is unknown.") ] Public Const MF_E_ASF_FILESINK_BITRATE_UNKNOWN = &Hc00d4a40
[ Description ("No streams are selected in sink presentation descriptor.") ] Public Const MF_E_SINK_NO_STREAMS = &Hc00d4a41
[ Description ("The sink has not been finalized before shut down. This may cause sink generate a corrupted content.") ] Public Const MF_S_SINK_NOT_FINALIZED = &H000d4a42
[ Description ("A metadata item was too long to write to the output container.") ] Public Const MF_E_METADATA_TOO_LONG = &Hc00d4a43
[ Description ("The operation failed because no samples were processed by the sink.") ] Public Const MF_E_SINK_NO_SAMPLES_PROCESSED = &Hc00d4a44
[ Description ("There is no available procamp hardware with which to perform color correction.") ] Public Const MF_E_VIDEO_REN_NO_PROCAMP_HW = &Hc00d4e20
[ Description ("There is no available deinterlacing hardware with which to deinterlace the video stream.") ] Public Const MF_E_VIDEO_REN_NO_DEINTERLACE_HW = &Hc00d4e21
[ Description ("A video stream requires copy protection to be enabled, but there was a failure in attempting to enable copy protection.") ] Public Const MF_E_VIDEO_REN_COPYPROT_FAILED = &Hc00d4e22
[ Description ("A component is attempting to access a surface for sharing that is not shared.") ] Public Const MF_E_VIDEO_REN_SURFACE_NOT_SHARED = &Hc00d4e23
[ Description ("A component is attempting to access a shared device that is already locked by another component.") ] Public Const MF_E_VIDEO_DEVICE_LOCKED = &Hc00d4e24
[ Description ("The device is no longer available. The handle should be closed and a new one opened.") ] Public Const MF_E_NEW_VIDEO_DEVICE = &Hc00d4e25
[ Description ("A video sample is not currently queued on a stream that is required for mixing.") ] Public Const MF_E_NO_VIDEO_SAMPLE_AVAILABLE = &Hc00d4e26
[ Description ("No audio playback device was found.") ] Public Const MF_E_NO_AUDIO_PLAYBACK_DEVICE = &Hc00d4e84
[ Description ("The requested audio playback device is currently in use.") ] Public Const MF_E_AUDIO_PLAYBACK_DEVICE_IN_USE = &Hc00d4e85
[ Description ("The audio playback device is no longer present.") ] Public Const MF_E_AUDIO_PLAYBACK_DEVICE_INVALIDATED = &Hc00d4e86
[ Description ("The audio service is not running.") ] Public Const MF_E_AUDIO_SERVICE_NOT_RUNNING = &Hc00d4e87
[ Description ("The topology contains an invalid optional node.  Possible reasons are incorrect number of outputs and inputs or optional node is at the beginning or end of a segment. ") ] Public Const MF_E_TOPO_INVALID_OPTIONAL_NODE = &Hc00d520e
[ Description ("No suitable transform was found to decrypt the content. ") ] Public Const MF_E_TOPO_CANNOT_FIND_DECRYPTOR = &Hc00d5211
[ Description ("No suitable transform was found to encode or decode the content. ") ] Public Const MF_E_TOPO_CODEC_NOT_FOUND = &Hc00d5212
[ Description ("Unable to find a way to connect nodes") ] Public Const MF_E_TOPO_CANNOT_CONNECT = &Hc00d5213
[ Description ("Unsupported operations in topoloader") ] Public Const MF_E_TOPO_UNSUPPORTED = &Hc00d5214
[ Description ("The topology or its nodes contain incorrectly set time attributes") ] Public Const MF_E_TOPO_INVALID_TIME_ATTRIBUTES = &Hc00d5215
[ Description ("The topology contains loops, which are unsupported in media foundation topologies") ] Public Const MF_E_TOPO_LOOPS_IN_TOPOLOGY = &Hc00d5216
[ Description ("A source stream node in the topology does not have a presentation descriptor") ] Public Const MF_E_TOPO_MISSING_PRESENTATION_DESCRIPTOR = &Hc00d5217
[ Description ("A source stream node in the topology does not have a stream descriptor") ] Public Const MF_E_TOPO_MISSING_STREAM_DESCRIPTOR = &Hc00d5218
[ Description ("A stream descriptor was set on a source stream node but it was not selected on the presentation descriptor") ] Public Const MF_E_TOPO_STREAM_DESCRIPTOR_NOT_SELECTED = &Hc00d5219
[ Description ("A source stream node in the topology does not have a source") ] Public Const MF_E_TOPO_MISSING_SOURCE = &Hc00d521a
[ Description ("The topology loader does not support sink activates on output nodes.") ] Public Const MF_E_TOPO_SINK_ACTIVATES_UNSUPPORTED = &Hc00d521b
[ Description ("The sequencer cannot find a segment with the given ID.") ] Public Const MF_E_SEQUENCER_UNKNOWN_SEGMENT_ID = &Hc00d61ac
[ Description ("The context was canceled.") ] Public Const MF_S_SEQUENCER_CONTEXT_CANCELED = &H000d61ad
[ Description ("Cannot find source in source cache.") ] Public Const MF_E_NO_SOURCE_IN_CACHE = &Hc00d61ae
[ Description ("Cannot update topology flags.") ] Public Const MF_S_SEQUENCER_SEGMENT_AT_END_OF_STREAM = &H000d61af
[ Description ("A valid type has not been set for this stream or a stream that it depends on.") ] Public Const MF_E_TRANSFORM_TYPE_NOT_SET = &Hc00d6d60
[ Description ("A stream change has occurred. Output cannot be produced until the streams have been renegotiated.") ] Public Const MF_E_TRANSFORM_STREAM_CHANGE = &Hc00d6d61
[ Description ("The transform cannot take the requested action until all of the input data it currently holds is processed or flushed.") ] Public Const MF_E_TRANSFORM_INPUT_REMAINING = &Hc00d6d62
[ Description ("The transform requires a profile but no profile was supplied or found.") ] Public Const MF_E_TRANSFORM_PROFILE_MISSING = &Hc00d6d63
[ Description ("The transform requires a profile but the supplied profile was invalid or corrupt.") ] Public Const MF_E_TRANSFORM_PROFILE_INVALID_OR_CORRUPT = &Hc00d6d64
[ Description ("The transform requires a profile but the supplied profile ended unexpectedly while parsing.") ] Public Const MF_E_TRANSFORM_PROFILE_TRUNCATED = &Hc00d6d65
[ Description ("The property ID does not match any property supported by the transform.") ] Public Const MF_E_TRANSFORM_PROPERTY_PID_NOT_RECOGNIZED = &Hc00d6d66
[ Description ("The variant does not have the type expected for this property ID.") ] Public Const MF_E_TRANSFORM_PROPERTY_VARIANT_TYPE_WRONG = &Hc00d6d67
[ Description ("An attempt was made to set the value on a read-only property.") ] Public Const MF_E_TRANSFORM_PROPERTY_NOT_WRITEABLE = &Hc00d6d68
[ Description ("The array property value has an unexpected number of dimensions.") ] Public Const MF_E_TRANSFORM_PROPERTY_ARRAY_VALUE_WRONG_NUM_DIM = &Hc00d6d69
[ Description ("The array or blob property value has an unexpected size.") ] Public Const MF_E_TRANSFORM_PROPERTY_VALUE_SIZE_WRONG = &Hc00d6d6a
[ Description ("The property value is out of range for this transform.") ] Public Const MF_E_TRANSFORM_PROPERTY_VALUE_OUT_OF_RANGE = &Hc00d6d6b
[ Description ("The property value is incompatible with some other property or mediatype set on the transform.") ] Public Const MF_E_TRANSFORM_PROPERTY_VALUE_INCOMPATIBLE = &Hc00d6d6c
[ Description ("The requested operation is not supported for the currently set output mediatype.") ] Public Const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_OUTPUT_MEDIATYPE = &Hc00d6d6d
[ Description ("The requested operation is not supported for the currently set input mediatype.") ] Public Const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_INPUT_MEDIATYPE = &Hc00d6d6e
[ Description ("The requested operation is not supported for the currently set combination of mediatypes.") ] Public Const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_MEDIATYPE_COMBINATION = &Hc00d6d6f
[ Description ("The requested feature is not supported in combination with some other currently enabled feature.") ] Public Const MF_E_TRANSFORM_CONFLICTS_WITH_OTHER_CURRENTLY_ENABLED_FEATURES = &Hc00d6d70
[ Description ("The transform cannot produce output until it gets more input samples.") ] Public Const MF_E_TRANSFORM_NEED_MORE_INPUT = &Hc00d6d72
[ Description ("The requested operation is not supported for the current speaker configuration.") ] Public Const MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_SPKR_CONFIG = &Hc00d6d73
[ Description ("The transform cannot accept mediatype changes in the middle of processing.") ] Public Const MF_E_TRANSFORM_CANNOT_CHANGE_MEDIATYPE_WHILE_PROCESSING = &Hc00d6d74
[ Description ("The caller should not propagate this event to downstream components.") ] Public Const MF_S_TRANSFORM_DO_NOT_PROPAGATE_EVENT = &H000d6d75
[ Description ("The input type is not supported for D3D device.") ] Public Const MF_E_UNSUPPORTED_D3D_TYPE = &Hc00d6d76
[ Description ("The caller does not appear to support this transform's asynchronous capabilities.") ] Public Const MF_E_TRANSFORM_ASYNC_LOCKED = &Hc00d6d77
[ Description ("An audio compression manager driver could not be initialized by the transform.") ] Public Const MF_E_TRANSFORM_CANNOT_INITIALIZE_ACM_DRIVER = &Hc00d6d78
[ Description ("You are not allowed to open this file. Contact the content provider for further assistance.") ] Public Const MF_E_LICENSE_INCORRECT_RIGHTS = &Hc00d7148
[ Description ("The license for this media file has expired. Get a new license or contact the content provider for further assistance.") ] Public Const MF_E_LICENSE_OUTOFDATE = &Hc00d7149
[ Description ("You need a license to perform the requested operation on this media file.") ] Public Const MF_E_LICENSE_REQUIRED = &Hc00d714a
[ Description ("The licenses for your media files are corrupted. Contact Microsoft product support.") ] Public Const MF_E_DRM_HARDWARE_INCONSISTENT = &Hc00d714b
[ Description ("The APP needs to provide IMFContentProtectionManager callback to access the protected media file.") ] Public Const MF_E_NO_CONTENT_PROTECTION_MANAGER = &Hc00d714c
[ Description ("Client does not have rights to restore licenses.") ] Public Const MF_E_LICENSE_RESTORE_NO_RIGHTS = &Hc00d714d
[ Description ("Licenses are restricted and hence can not be backed up.") ] Public Const MF_E_BACKUP_RESTRICTED_LICENSE = &Hc00d714e
[ Description ("License restore requires machine to be individualized.") ] Public Const MF_E_LICENSE_RESTORE_NEEDS_INDIVIDUALIZATION = &Hc00d714f
[ Description ("Protection for stream is not required.") ] Public Const MF_S_PROTECTION_NOT_REQUIRED = &H000d7150
[ Description ("Component is revoked.") ] Public Const MF_E_COMPONENT_REVOKED = &Hc00d7151
[ Description ("Trusted functionality is currently disabled on this component.") ] Public Const MF_E_TRUST_DISABLED = &Hc00d7152
[ Description ("No Action is set on WMDRM Output Trust Authority.") ] Public Const MF_E_WMDRMOTA_NO_ACTION = &Hc00d7153
[ Description ("Action is already set on WMDRM Output Trust Authority.") ] Public Const MF_E_WMDRMOTA_ACTION_ALREADY_SET = &Hc00d7154
[ Description ("DRM Heaader is not available.") ] Public Const MF_E_WMDRMOTA_DRM_HEADER_NOT_AVAILABLE = &Hc00d7155
[ Description ("Current encryption scheme is not supported.") ] Public Const MF_E_WMDRMOTA_DRM_ENCRYPTION_SCHEME_NOT_SUPPORTED = &Hc00d7156
[ Description ("Action does not match with current configuration.") ] Public Const MF_E_WMDRMOTA_ACTION_MISMATCH = &Hc00d7157
[ Description ("Invalid policy for WMDRM Output Trust Authority.") ] Public Const MF_E_WMDRMOTA_INVALID_POLICY = &Hc00d7158
[ Description ("The policies that the Input Trust Authority requires to be enforced are unsupported by the outputs.") ] Public Const MF_E_POLICY_UNSUPPORTED = &Hc00d7159
[ Description ("The OPL that the license requires to be enforced are not supported by the Input Trust Authority.") ] Public Const MF_E_OPL_NOT_SUPPORTED = &Hc00d715a
[ Description ("The topology could not be successfully verified.") ] Public Const MF_E_TOPOLOGY_VERIFICATION_FAILED = &Hc00d715b
[ Description ("Signature verification could not be completed successfully for this component.") ] Public Const MF_E_SIGNATURE_VERIFICATION_FAILED = &Hc00d715c
[ Description ("Running this process under a debugger while using protected content is not allowed.") ] Public Const MF_E_DEBUGGING_NOT_ALLOWED = &Hc00d715d
[ Description ("MF component has expired.") ] Public Const MF_E_CODE_EXPIRED = &Hc00d715e
[ Description ("The current GRL on the machine does not meet the minimum version requirements.") ] Public Const MF_E_GRL_VERSION_TOO_LOW = &Hc00d715f
[ Description ("The current GRL on the machine does not contain any renewal entries for the specified revocation.") ] Public Const MF_E_GRL_RENEWAL_NOT_FOUND = &Hc00d7160
[ Description ("The current GRL on the machine does not contain any extensible entries for the specified extension GUID.") ] Public Const MF_E_GRL_EXTENSIBLE_ENTRY_NOT_FOUND = &Hc00d7161
[ Description ("The kernel isn't secure for high security level content.") ] Public Const MF_E_KERNEL_UNTRUSTED = &Hc00d7162
[ Description ("The response from protected environment driver isn't valid.") ] Public Const MF_E_PEAUTH_UNTRUSTED = &Hc00d7163
[ Description ("A non-PE process tried to talk to PEAuth.") ] Public Const MF_E_NON_PE_PROCESS = &Hc00d7165
[ Description ("We need to reboot the machine.") ] Public Const MF_E_REBOOT_REQUIRED = &Hc00d7167
[ Description ("Protection for this stream is not guaranteed to be enforced until the MEPolicySet event is fired.") ] Public Const MF_S_WAIT_FOR_POLICY_SET = &H000d7168
[ Description ("This video stream is disabled because it is being sent to an unknown software output.") ] Public Const MF_S_VIDEO_DISABLED_WITH_UNKNOWN_SOFTWARE_OUTPUT = &H000d7169
[ Description ("The GRL file is not correctly formed, it may have been corrupted or overwritten.") ] Public Const MF_E_GRL_INVALID_FORMAT = &Hc00d716a
[ Description ("The GRL file is in a format newer than those recognized by this GRL Reader.") ] Public Const MF_E_GRL_UNRECOGNIZED_FORMAT = &Hc00d716b
[ Description ("The GRL was reloaded and required all processes that can run protected media to restart.") ] Public Const MF_E_ALL_PROCESS_RESTART_REQUIRED = &Hc00d716c
[ Description ("The GRL was reloaded and the current process needs to restart.") ] Public Const MF_E_PROCESS_RESTART_REQUIRED = &Hc00d716d
[ Description ("The user space is untrusted for protected content play.") ] Public Const MF_E_USERMODE_UNTRUSTED = &Hc00d716e
[ Description ("PEAuth communication session hasn't been started.") ] Public Const MF_E_PEAUTH_SESSION_NOT_STARTED = &Hc00d716f
[ Description ("PEAuth's public key is revoked.") ] Public Const MF_E_PEAUTH_PUBLICKEY_REVOKED = &Hc00d7171
[ Description ("The GRL is absent.") ] Public Const MF_E_GRL_ABSENT = &Hc00d7172
[ Description ("The Protected Environment is trusted.") ] Public Const MF_S_PE_TRUSTED = &H000d7173
[ Description ("The Protected Environment is untrusted.") ] Public Const MF_E_PE_UNTRUSTED = &Hc00d7174
[ Description ("The Protected Environment Authorization service (PEAUTH) has not been started.") ] Public Const MF_E_PEAUTH_NOT_STARTED = &Hc00d7175
[ Description ("The sample protection algorithms supported by components are not compatible.") ] Public Const MF_E_INCOMPATIBLE_SAMPLE_PROTECTION = &Hc00d7176
[ Description ("No more protected environment sessions can be supported.") ] Public Const MF_E_PE_SESSIONS_MAXED = &Hc00d7177
[ Description ("WMDRM ITA does not allow protected content with high security level for this release.") ] Public Const MF_E_HIGH_SECURITY_LEVEL_CONTENT_NOT_ALLOWED = &Hc00d7178
[ Description ("WMDRM ITA cannot allow the requested action for the content as one or more components is not properly signed.") ] Public Const MF_E_TEST_SIGNED_COMPONENTS_NOT_ALLOWED = &Hc00d7179
[ Description ("WMDRM ITA does not support the requested action.") ] Public Const MF_E_ITA_UNSUPPORTED_ACTION = &Hc00d717a
[ Description ("WMDRM ITA encountered an error in parsing the Secure Audio Path parameters.") ] Public Const MF_E_ITA_ERROR_PARSING_SAP_PARAMETERS = &Hc00d717b
[ Description ("The Policy Manager action passed in is invalid.") ] Public Const MF_E_POLICY_MGR_ACTION_OUTOFBOUNDS = &Hc00d717c
[ Description ("The structure specifying Output Protection Level is not the correct format.") ] Public Const MF_E_BAD_OPL_STRUCTURE_FORMAT = &Hc00d717d
[ Description ("WMDRM ITA does not recognize the Explicite Analog Video Output Protection guid specified in the license.") ] Public Const MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_PROTECTION_GUID = &Hc00d717e
[ Description ("IMFPMPHost object not available.") ] Public Const MF_E_NO_PMP_HOST = &Hc00d717f
[ Description ("WMDRM ITA could not initialize the Output Protection Level data.") ] Public Const MF_E_ITA_OPL_DATA_NOT_INITIALIZED = &Hc00d7180
[ Description ("WMDRM ITA does not recognize the Analog Video Output specified by the OTA.") ] Public Const MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_OUTPUT = &Hc00d7181
[ Description ("WMDRM ITA does not recognize the Digital Video Output specified by the OTA.") ] Public Const MF_E_ITA_UNRECOGNIZED_DIGITAL_VIDEO_OUTPUT = &Hc00d7182
[ Description ("The continuity key supplied is not currently valid.") ] Public Const MF_E_CLOCK_INVALID_CONTINUITY_KEY = &Hc00d9c40
[ Description ("No Presentation Time Source has been specified.") ] Public Const MF_E_CLOCK_NO_TIME_SOURCE = &Hc00d9c41
[ Description ("The clock is already in the requested state.") ] Public Const MF_E_CLOCK_STATE_ALREADY_SET = &Hc00d9c42
[ Description ("The clock has too many advanced features to carry out the request.") ] Public Const MF_E_CLOCK_NOT_SIMPLE = &Hc00d9c43
[ Description ("Timer::SetTimer returns this success code if called happened while timer is stopped. Timer is not going to be dispatched until clock is running") ] Public Const MF_S_CLOCK_STOPPED = &H000d9c44
[ Description ("The component does not support any more drop modes.") ] Public Const MF_E_NO_MORE_DROP_MODES = &Hc00da028
[ Description ("The component does not support any more quality levels.") ] Public Const MF_E_NO_MORE_QUALITY_LEVELS = &Hc00da029
[ Description ("The component does not support drop time functionality.") ] Public Const MF_E_DROPTIME_NOT_SUPPORTED = &Hc00da02a
[ Description ("Quality Manager needs to wait longer before bumping the Quality Level up.") ] Public Const MF_E_QUALITYKNOB_WAIT_LONGER = &Hc00da02b
[ Description ("Quality Manager is in an invalid state. Quality Management is off at this moment.") ] Public Const MF_E_QM_INVALIDSTATE = &Hc00da02c
[ Description ("No transcode output container type is specified.") ] Public Const MF_E_TRANSCODE_NO_CONTAINERTYPE = &Hc00da410
[ Description ("The profile does not have a media type configuration for any selected source streams.") ] Public Const MF_E_TRANSCODE_PROFILE_NO_MATCHING_STREAMS = &Hc00da411
[ Description ("Cannot find an encoder MFT that accepts the user preferred output type.") ] Public Const MF_E_TRANSCODE_NO_MATCHING_ENCODER = &Hc00da412
[ Description ("Memory allocator is not initialized.") ] Public Const MF_E_ALLOCATOR_NOT_INITIALIZED = &Hc00da7f8
[ Description ("Memory allocator is not committed yet.") ] Public Const MF_E_ALLOCATOR_NOT_COMMITED = &Hc00da7f9
[ Description ("Memory allocator has already been committed.") ] Public Const MF_E_ALLOCATOR_ALREADY_COMMITED = &Hc00da7fa
[ Description ("An error occurred in media stream.") ] Public Const MF_E_STREAM_ERROR = &Hc00da7fb
[ Description ("Stream is not in a state to handle the request.") ] Public Const MF_E_INVALID_STREAM_STATE = &Hc00da7fc
[ Description ("Hardware stream is not connected yet.") ] Public Const MF_E_HW_STREAM_NOT_CONNECTED = &Hc00da7fd
        
Public Const MF_VERSION = &H00020000
Public Const MFBYTESTREAM_SEEK_FLAG_CANCEL_PENDING_IO = 1
Public Const MFASYNC_FAST_IO_PROCESSING_CALLBACK = 1
Public Const MFASYNC_SIGNAL_CALLBACK = 2
Public Const MFASYNC_BLOCKING_CALLBACK = 4
Public Const MFASYNC_REPLY_CALLBACK = 8
Public Const MF_EVENT_FLAG_NO_WAIT = 1
Public Const MF_SOURCE_READER_FIRST_VIDEO_STREAM = &Hfffffffc
Public Const MF_SOURCE_READER_FIRST_AUDIO_STREAM = &Hfffffffd
Public Const MF_SOURCE_READER_CURRENT_TYPE_INDEX = &Hffffffff
Public Const MF_SOURCE_READER_ANY_STREAM = &Hffffffff
Public Const MF_SOURCE_READER_INVALID_STREAM_INDEX = &Hffffffff
Public Const MF_SOURCE_READER_ALL_STREAMS = &Hfffffffe
Public Const MF_SOURCE_READER_MEDIASOURCE = &Hffffffff
Public Const MF_MEDIATYPE_EQUAL_MAJOR_TYPES = 1
Public Const MF_MEDIATYPE_EQUAL_FORMAT_TYPES = 2
Public Const MF_MEDIATYPE_EQUAL_FORMAT_DATA = 4
Public Const MF_MEDIATYPE_EQUAL_FORMAT_USER_DATA = 8


Public Function IID_IMFMediaSession() As UUID
'{90377834-21D0-4dee-8214-BA2E3E6C1127}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H90377834, CInt(&H21D0), CInt(&H4DEE), &H82, &H14, &HBA, &H2E, &H3E, &H6C, &H11, &H27)
IID_IMFMediaSession = iid
End Function
Public Function IID_IMFSourceResolver() As UUID
'{FBE5A32D-A497-4B61-BB85-97B1A848A6E3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFBE5A32D, CInt(&HA497), CInt(&H4B61), &HBB, &H85, &H97, &HB1, &HA8, &H48, &HA6, &HE3)
IID_IMFSourceResolver = iid
End Function
Public Function IID_IMFByteStream() As UUID
'{AD4C1B00-4BF7-422F-9175-756693D9130D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAD4C1B00, CInt(&H4BF7), CInt(&H422F), &H91, &H75, &H75, &H66, &H93, &HD9, &H13, &HD)
IID_IMFByteStream = iid
End Function
Public Function IID_IMFAsyncCallback() As UUID
'{A27003CF-2354-4F2A-8D6A-AB7CFF15437E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA27003CF, CInt(&H2354), CInt(&H4F2A), &H8D, &H6A, &HAB, &H7C, &HFF, &H15, &H43, &H7E)
IID_IMFAsyncCallback = iid
End Function
Public Function IID_IMFAsyncResult() As UUID
'{AC6B7889-0740-4D51-8619-905994A55CC6}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAC6B7889, CInt(&H740), CInt(&H4D51), &H86, &H19, &H90, &H59, &H94, &HA5, &H5C, &HC6)
IID_IMFAsyncResult = iid
End Function
Public Function IID_IMFAttributes() As UUID
'{2CD2D921-C447-44A7-A13C-4ADABFC247E3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD2D921, CInt(&HC447), CInt(&H44A7), &HA1, &H3C, &H4A, &HDA, &HBF, &HC2, &H47, &HE3)
IID_IMFAttributes = iid
End Function
Public Function IID_IMFMediaEventGenerator() As UUID
'{2CD0BD52-BCD5-4B89-B62C-EADC0C031E7D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD0BD52, CInt(&HBCD5), CInt(&H4B89), &HB6, &H2C, &HEA, &HDC, &HC, &H3, &H1E, &H7D)
IID_IMFMediaEventGenerator = iid
End Function
Public Function IID_IMFMediaEvent() As UUID
'{2CD0BD52-BCD5-4B89-B62C-EADC0C031E7D}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2CD0BD52, CInt(&HBCD5), CInt(&H4B89), &HB6, &H2C, &HEA, &HDC, &HC, &H3, &H1E, &H7D)
IID_IMFMediaEvent = iid
End Function
Public Function IID_IMFMediaSource() As UUID
'{279A808D-AEC7-40C8-9C6B-A6B492C78A66}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H279A808D, CInt(&HAEC7), CInt(&H40C8), &H9C, &H6B, &HA6, &HB4, &H92, &HC7, &H8A, &H66)
IID_IMFMediaSource = iid
End Function
Public Function IID_IMFPresentationDescriptor() As UUID
'{03CB2711-24D7-4DB6-A17F-F3A7A479A536}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3CB2711, CInt(&H24D7), CInt(&H4DB6), &HA1, &H7F, &HF3, &HA7, &HA4, &H79, &HA5, &H36)
IID_IMFPresentationDescriptor = iid
End Function
Public Function IID_IMFStreamDescriptor() As UUID
'{56C03D9C-9DBB-45F5-AB4B-D80F47C05938}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56C03D9C, CInt(&H9DBB), CInt(&H45F5), &HAB, &H4B, &HD8, &HF, &H47, &HC0, &H59, &H38)
IID_IMFStreamDescriptor = iid
End Function
Public Function IID_IMFMediaTypeHandler() As UUID
'{E93DCF6C-4B07-4E1E-8123-AA16ED6EADF5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE93DCF6C, CInt(&H4B07), CInt(&H4E1E), &H81, &H23, &HAA, &H16, &HED, &H6E, &HAD, &HF5)
IID_IMFMediaTypeHandler = iid
End Function
Public Function IID_IMFMediaType() As UUID
'{44AE0FA8-EA31-4109-8D2E-4CAE4997C555}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H44AE0FA8, CInt(&HEA31), CInt(&H4109), &H8D, &H2E, &H4C, &HAE, &H49, &H97, &HC5, &H55)
IID_IMFMediaType = iid
End Function
Public Function IID_IMFSourceReader() As UUID
'{70AE66F2-C809-4E4F-8915-BDCB406B7993}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H70AE66F2, CInt(&HC809), CInt(&H4E4F), &H89, &H15, &HBD, &HCB, &H40, &H6B, &H79, &H93)
IID_IMFSourceReader = iid
End Function
Public Function IID_IMFSample() As UUID
'{C40A00F2-B93A-4D80-AE8C-5A1C634F58E4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC40A00F2, CInt(&HB93A), CInt(&H4D80), &HAE, &H8C, &H5A, &H1C, &H63, &H4F, &H58, &HE4)
IID_IMFSample = iid
End Function
Public Function IID_IMFMediaBuffer() As UUID
'{045FA593-8799-42B8-BC8D-8968C6453507}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H45FA593, CInt(&H8799), CInt(&H42B8), &HBC, &H8D, &H89, &H68, &HC6, &H45, &H35, &H7)
IID_IMFMediaBuffer = iid
End Function
Public Function IID_IMFClock() As UUID
'{2eb1e945-18b8-4139-9b1a-d5d584818530}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2EB1E945, CInt(&H18B8), CInt(&H4139), &H9B, &H1A, &HD5, &HD5, &H84, &H81, &H85, &H30)
IID_IMFClock = iid
End Function
Public Function IID_IMFCollection() As UUID
'{5BC8A76B-869A-46a3-9B03-FA218A66AEBE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5BC8A76B, CInt(&H869A), CInt(&H46A3), &H9B, &H3, &HFA, &H21, &H8A, &H66, &HAE, &HBE)
IID_IMFCollection = iid
End Function
Public Function IID_IMF2DBuffer() As UUID
'{7dc9d5f9-9ed9-44ec-9bbf-0600bb589fbb}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7DC9D5F9, CInt(&H9ED9), CInt(&H44EC), &H9B, &HBF, &H6, &H0, &HBB, &H58, &H9F, &HBB)
IID_IMF2DBuffer = iid
End Function
Public Function IID_IMF2DBuffer2() As UUID
'{33ae5ea6-4316-436f-8ddd-d73d22f829ec}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H33AE5EA6, CInt(&H4316), CInt(&H436F), &H8D, &HDD, &HD7, &H3D, &H22, &HF8, &H29, &HEC)
IID_IMF2DBuffer2 = iid
End Function
Public Function IID_IMFDXGIBuffer() As UUID
'{e7174cfa-1c9e-48b1-8866-626226bfc258}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE7174CFA, CInt(&H1C9E), CInt(&H48B1), &H88, &H66, &H62, &H62, &H26, &HBF, &HC2, &H58)
IID_IMFDXGIBuffer = iid
End Function
Public Function IID_IMFTopologyNode() As UUID
'{83CF873A-F6DA-4bc8-823F-BACFD55DC430}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H83CF873A, CInt(&HF6DA), CInt(&H4BC8), &H82, &H3F, &HBA, &HCF, &HD5, &H5D, &HC4, &H30)
IID_IMFTopologyNode = iid
End Function
Public Function IID_IMFTopology() As UUID
'{83CF873A-F6DA-4bc8-823F-BACFD55DC433}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H83CF873A, CInt(&HF6DA), CInt(&H4BC8), &H82, &H3F, &HBA, &HCF, &HD5, &H5D, &HC4, &H33)
IID_IMFTopology = iid
End Function
Public Function IID_IMediaObject() As UUID
'{d8ad0f58-5494-4102-97c5-ec798e59bcf4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD8AD0F58, CInt(&H5494), CInt(&H4102), &H97, &HC5, &HEC, &H79, &H8E, &H59, &HBC, &HF4)
IID_IMediaObject = iid
End Function
Public Function IID_IEnumDMO() As UUID
'{2c3cd98a-2bfa-4a53-9c27-5249ba64ba0f}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2C3CD98A, CInt(&H2BFA), CInt(&H4A53), &H9C, &H27, &H52, &H49, &HBA, &H64, &HBA, &HF)
IID_IEnumDMO = iid
End Function
Public Function IID_IMediaObjectInPlace() As UUID
'{651b9ad0-0fc7-4aa9-9538-d89931010741}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H651B9AD0, CInt(&HFC7), CInt(&H4AA9), &H95, &H38, &HD8, &H99, &H31, &H1, &H7, &H41)
IID_IMediaObjectInPlace = iid
End Function
Public Function IID_IDMOQualityControl() As UUID
'{65abea96-cf36-453f-af8a-705e98f16260}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H65ABEA96, CInt(&HCF36), CInt(&H453F), &HAF, &H8A, &H70, &H5E, &H98, &HF1, &H62, &H60)
IID_IDMOQualityControl = iid
End Function
Public Function IID_IDMOVideoOutputOptimizations() As UUID
'{be8f4f4e-5b16-4d29-b350-7f6b5d9298ac}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBE8F4F4E, CInt(&H5B16), CInt(&H4D29), &HB3, &H50, &H7F, &H6B, &H5D, &H92, &H98, &HAC)
IID_IDMOVideoOutputOptimizations = iid
End Function
Public Function IID_IMFAudioMediaType() As UUID
'{26a0adc3-ce26-4672-9304-69552edd3faf}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H26A0ADC3, CInt(&HCE26), CInt(&H4672), &H93, &H4, &H69, &H55, &H2E, &HDD, &H3F, &HAF)
IID_IMFAudioMediaType = iid
End Function
Public Function IID_IMFVideoMediaType() As UUID
'{b99f381f-a8f9-47a2-a5af-ca3a225a3890}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HB99F381F, CInt(&HA8F9), CInt(&H47A2), &HA5, &HAF, &HCA, &H3A, &H22, &H5A, &H38, &H90)
IID_IMFVideoMediaType = iid
End Function
Public Function IID_IMFAsyncCallbackLogging() As UUID
'{c7a4dca1-f5f0-47b6-b92b-bf0106d25791}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC7A4DCA1, CInt(&HF5F0), CInt(&H47B6), &HB9, &H2B, &HBF, &H1, &H6, &HD2, &H57, &H91)
IID_IMFAsyncCallbackLogging = iid
End Function
Public Function IID_IMFByteStreamProxyClassFactory() As UUID
'{a6b43f84-5c0a-42e8-a44d-b1857a76992f}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA6B43F84, CInt(&H5C0A), CInt(&H42E8), &HA4, &H4D, &HB1, &H85, &H7A, &H76, &H99, &H2F)
IID_IMFByteStreamProxyClassFactory = iid
End Function
Public Function IID_IMFSampleOutputStream() As UUID
'{8feed468-6f7e-440d-869a-49bdd283ad0d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8FEED468, CInt(&H6F7E), CInt(&H440D), &H86, &H9A, &H49, &HBD, &HD2, &H83, &HAD, &HD)
IID_IMFSampleOutputStream = iid
End Function
Public Function IID_IMFMediaEventQueue() As UUID
'{36f846fc-2256-48b6-b58e-e2b638316581}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H36F846FC, CInt(&H2256), CInt(&H48B6), &HB5, &H8E, &HE2, &HB6, &H38, &H31, &H65, &H81)
IID_IMFMediaEventQueue = iid
End Function
Public Function IID_IMFActivate() As UUID
'{7FEE9E9A-4A89-47a6-899C-B6A53A70FB67}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7FEE9E9A, CInt(&H4A89), CInt(&H47A6), &H89, &H9C, &HB6, &HA5, &H3A, &H70, &HFB, &H67)
IID_IMFActivate = iid
End Function
Public Function IID_IMFPluginControl() As UUID
'{5c6c44bf-1db6-435b-9249-e8cd10fdec96}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5C6C44BF, CInt(&H1DB6), CInt(&H435B), &H92, &H49, &HE8, &HCD, &H10, &HFD, &HEC, &H96)
IID_IMFPluginControl = iid
End Function
Public Function IID_IMFPluginControl2() As UUID
'{C6982083-3DDC-45CB-AF5E-0F7A8CE4DE77}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC6982083, CInt(&H3DDC), CInt(&H45CB), &HAF, &H5E, &HF, &H7A, &H8C, &HE4, &HDE, &H77)
IID_IMFPluginControl2 = iid
End Function
Public Function IID_IMFDXGIDeviceManager() As UUID
'{eb533d5d-2db6-40f8-97a9-494692014f07}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEB533D5D, CInt(&H2DB6), CInt(&H40F8), &H97, &HA9, &H49, &H46, &H92, &H1, &H4F, &H7)
IID_IMFDXGIDeviceManager = iid
End Function
Public Function IID_IMFTransform() As UUID
'{bf94c121-5b05-4e6f-8000-ba598961414d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBF94C121, CInt(&H5B05), CInt(&H4E6F), &H80, &H0, &HBA, &H59, &H89, &H61, &H41, &H4D)
IID_IMFTransform = iid
End Function
Public Function IID_IMFMediaSourceEx() As UUID
'{3C9B2EB9-86D5-4514-A394-F56664F9F0D8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3C9B2EB9, CInt(&H86D5), CInt(&H4514), &HA3, &H94, &HF5, &H66, &H64, &HF9, &HF0, &HD8)
IID_IMFMediaSourceEx = iid
End Function
Public Function IID_IMFClockConsumer() As UUID
'{6ef2a662-47c0-4666-b13d-cbb717f2fa2c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6EF2A662, CInt(&H47C0), CInt(&H4666), &HB1, &H3D, &HCB, &HB7, &H17, &HF2, &HFA, &H2C)
IID_IMFClockConsumer = iid
End Function
Public Function IID_IMFMediaStream() As UUID
'{D182108F-4EC6-443f-AA42-A71106EC825F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD182108F, CInt(&H4EC6), CInt(&H443F), &HAA, &H42, &HA7, &H11, &H6, &HEC, &H82, &H5F)
IID_IMFMediaStream = iid
End Function
Public Function IID_IMFMediaSink() As UUID
'{6ef2a660-47c0-4666-b13d-cbb717f2fa2c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6EF2A660, CInt(&H47C0), CInt(&H4666), &HB1, &H3D, &HCB, &HB7, &H17, &HF2, &HFA, &H2C)
IID_IMFMediaSink = iid
End Function
Public Function IID_IMFStreamSink() As UUID
'{0A97B3CF-8E7C-4a3d-8F8C-0C843DC247FB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA97B3CF, CInt(&H8E7C), CInt(&H4A3D), &H8F, &H8C, &HC, &H84, &H3D, &HC2, &H47, &HFB)
IID_IMFStreamSink = iid
End Function
Public Function IID_IMFVideoSampleAllocator() As UUID
'{86cbc910-e533-4751-8e3b-f19b5b806a03}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H86CBC910, CInt(&HE533), CInt(&H4751), &H8E, &H3B, &HF1, &H9B, &H5B, &H80, &H6A, &H3)
IID_IMFVideoSampleAllocator = iid
End Function
Public Function IID_IMFVideoSampleAllocatorNotify() As UUID
'{A792CDBE-C374-4e89-8335-278E7B9956A4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA792CDBE, CInt(&HC374), CInt(&H4E89), &H83, &H35, &H27, &H8E, &H7B, &H99, &H56, &HA4)
IID_IMFVideoSampleAllocatorNotify = iid
End Function
Public Function IID_IMFVideoSampleAllocatorNotifyEx() As UUID
'{3978AA1A-6D5B-4B7F-A340-90899189AE34}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3978AA1A, CInt(&H6D5B), CInt(&H4B7F), &HA3, &H40, &H90, &H89, &H91, &H89, &HAE, &H34)
IID_IMFVideoSampleAllocatorNotifyEx = iid
End Function
Public Function IID_IMFVideoSampleAllocatorCallback() As UUID
'{992388B4-3372-4f67-8B6F-C84C071F4751}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H992388B4, CInt(&H3372), CInt(&H4F67), &H8B, &H6F, &HC8, &H4C, &H7, &H1F, &H47, &H51)
IID_IMFVideoSampleAllocatorCallback = iid
End Function
Public Function IID_IMFVideoSampleAllocatorEx() As UUID
'{545b3a48-3283-4f62-866f-a62d8f598f9f}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H545B3A48, CInt(&H3283), CInt(&H4F62), &H86, &H6F, &HA6, &H2D, &H8F, &H59, &H8F, &H9F)
IID_IMFVideoSampleAllocatorEx = iid
End Function
Public Function IID_IMFDXGIDeviceManagerSource() As UUID
'{20bc074b-7a8d-4609-8c3b-64a0a3b5d7ce}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H20BC074B, CInt(&H7A8D), CInt(&H4609), &H8C, &H3B, &H64, &HA0, &HA3, &HB5, &HD7, &HCE)
IID_IMFDXGIDeviceManagerSource = iid
End Function
Public Function IID_IMFVideoProcessorControl() As UUID
'{A3F675D5-6119-4f7f-A100-1D8B280F0EFB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA3F675D5, CInt(&H6119), CInt(&H4F7F), &HA1, &H0, &H1D, &H8B, &H28, &HF, &HE, &HFB)
IID_IMFVideoProcessorControl = iid
End Function
Public Function IID_IMFVideoProcessorControl2() As UUID
'{BDE633D3-E1DC-4a7f-A693-BBAE399C4A20}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBDE633D3, CInt(&HE1DC), CInt(&H4A7F), &HA6, &H93, &HBB, &HAE, &H39, &H9C, &H4A, &H20)
IID_IMFVideoProcessorControl2 = iid
End Function
Public Function IID_IMFGetService() As UUID
'{fa993888-4383-415a-a930-dd472a8cf6f7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFA993888, CInt(&H4383), CInt(&H415A), &HA9, &H30, &HDD, &H47, &H2A, &H8C, &HF6, &HF7)
IID_IMFGetService = iid
End Function
Public Function IID_IMFPresentationClock() As UUID
'{868CE85C-8EA9-4f55-AB82-B009A910A805}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H868CE85C, CInt(&H8EA9), CInt(&H4F55), &HAB, &H82, &HB0, &H9, &HA9, &H10, &HA8, &H5)
IID_IMFPresentationClock = iid
End Function
Public Function IID_IMFPresentationTimeSource() As UUID
'{7FF12CCE-F76F-41c2-863B-1666C8E5E139}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7FF12CCE, CInt(&HF76F), CInt(&H41C2), &H86, &H3B, &H16, &H66, &HC8, &HE5, &HE1, &H39)
IID_IMFPresentationTimeSource = iid
End Function
Public Function IID_IMFClockStateSink() As UUID
'{F6696E82-74F7-4f3d-A178-8A5E09C3659F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF6696E82, CInt(&H74F7), CInt(&H4F3D), &HA1, &H78, &H8A, &H5E, &H9, &HC3, &H65, &H9F)
IID_IMFClockStateSink = iid
End Function
Public Function IID_IMFTimer() As UUID
'{e56e4cbd-8f70-49d8-a0f8-edb3d6ab9bf2}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE56E4CBD, CInt(&H8F70), CInt(&H49D8), &HA0, &HF8, &HED, &HB3, &HD6, &HAB, &H9B, &HF2)
IID_IMFTimer = iid
End Function
Public Function IID_IMFShutdown() As UUID
'{97ec2ea4-0e42-4937-97ac-9d6d328824e1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H97EC2EA4, CInt(&HE42), CInt(&H4937), &H97, &HAC, &H9D, &H6D, &H32, &H88, &H24, &HE1)
IID_IMFShutdown = iid
End Function
Public Function IID_IMFTopoLoader() As UUID
'{DE9A6157-F660-4643-B56A-DF9F7998C7CD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDE9A6157, CInt(&HF660), CInt(&H4643), &HB5, &H6A, &HDF, &H9F, &H79, &H98, &HC7, &HCD)
IID_IMFTopoLoader = iid
End Function
Public Function IID_IMFContentProtectionManager() As UUID
'{ACF92459-6A61-42bd-B57C-B43E51203CB0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HACF92459, CInt(&H6A61), CInt(&H42BD), &HB5, &H7C, &HB4, &H3E, &H51, &H20, &H3C, &HB0)
IID_IMFContentProtectionManager = iid
End Function
Public Function IID_IMFContentEnabler() As UUID
'{D3C4EF59-49CE-4381-9071-D5BCD044C770}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD3C4EF59, CInt(&H49CE), CInt(&H4381), &H90, &H71, &HD5, &HBC, &HD0, &H44, &HC7, &H70)
IID_IMFContentEnabler = iid
End Function
Public Function IID_IMFMetadata() As UUID
'{F88CFB8C-EF16-4991-B450-CB8C69E51704}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF88CFB8C, CInt(&HEF16), CInt(&H4991), &HB4, &H50, &HCB, &H8C, &H69, &HE5, &H17, &H4)
IID_IMFMetadata = iid
End Function
Public Function IID_IMFMetadataProvider() As UUID
'{56181D2D-E221-4adb-B1C8-3CEE6A53F76F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56181D2D, CInt(&HE221), CInt(&H4ADB), &HB1, &HC8, &H3C, &HEE, &H6A, &H53, &HF7, &H6F)
IID_IMFMetadataProvider = iid
End Function
Public Function IID_IMFRateSupport() As UUID
'{0a9ccdbc-d797-4563-9667-94ec5d79292d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA9CCDBC, CInt(&HD797), CInt(&H4563), &H96, &H67, &H94, &HEC, &H5D, &H79, &H29, &H2D)
IID_IMFRateSupport = iid
End Function
Public Function IID_IMFRateControl() As UUID
'{88ddcd21-03c3-4275-91ed-55ee3929328f}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H88DDCD21, CInt(&H3C3), CInt(&H4275), &H91, &HED, &H55, &HEE, &H39, &H29, &H32, &H8F)
IID_IMFRateControl = iid
End Function
Public Function IID_IMFTimecodeTranslate() As UUID
'{ab9d8661-f7e8-4ef4-9861-89f334f94e74}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAB9D8661, CInt(&HF7E8), CInt(&H4EF4), &H98, &H61, &H89, &HF3, &H34, &HF9, &H4E, &H74)
IID_IMFTimecodeTranslate = iid
End Function
Public Function IID_IMFSeekInfo() As UUID
'{26AFEA53-D9ED-42B5-AB80-E64F9EE34779}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H26AFEA53, CInt(&HD9ED), CInt(&H42B5), &HAB, &H80, &HE6, &H4F, &H9E, &HE3, &H47, &H79)
IID_IMFSeekInfo = iid
End Function
Public Function IID_IMFSimpleAudioVolume() As UUID
'{089EDF13-CF71-4338-8D13-9E569DBDC319}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H89EDF13, CInt(&HCF71), CInt(&H4338), &H8D, &H13, &H9E, &H56, &H9D, &HBD, &HC3, &H19)
IID_IMFSimpleAudioVolume = iid
End Function
Public Function IID_IMFAudioStreamVolume() As UUID
'{76B1BBDB-4EC8-4f36-B106-70A9316DF593}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H76B1BBDB, CInt(&H4EC8), CInt(&H4F36), &HB1, &H6, &H70, &HA9, &H31, &H6D, &HF5, &H93)
IID_IMFAudioStreamVolume = iid
End Function
Public Function IID_IMFAudioPolicy() As UUID
'{a0638c2b-6465-4395-9ae7-a321a9fd2856}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA0638C2B, CInt(&H6465), CInt(&H4395), &H9A, &HE7, &HA3, &H21, &HA9, &HFD, &H28, &H56)
IID_IMFAudioPolicy = iid
End Function
Public Function IID_IMFSampleGrabberSinkCallback() As UUID
'{8C7B80BF-EE42-4b59-B1DF-55668E1BDCA8}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8C7B80BF, CInt(&HEE42), CInt(&H4B59), &HB1, &HDF, &H55, &H66, &H8E, &H1B, &HDC, &HA8)
IID_IMFSampleGrabberSinkCallback = iid
End Function
Public Function IID_IMFSampleGrabberSinkCallback2() As UUID
'{ca86aa50-c46e-429e-ab27-16d6ac6844cb}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HCA86AA50, CInt(&HC46E), CInt(&H429E), &HAB, &H27, &H16, &HD6, &HAC, &H68, &H44, &HCB)
IID_IMFSampleGrabberSinkCallback2 = iid
End Function
Public Function IID_IMFWorkQueueServices() As UUID
'{35FE1BB8-A3A9-40fe-BBEC-EB569C9CCCA3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H35FE1BB8, CInt(&HA3A9), CInt(&H40FE), &HBB, &HEC, &HEB, &H56, &H9C, &H9C, &HCC, &HA3)
IID_IMFWorkQueueServices = iid
End Function
Public Function IID_IMFWorkQueueServicesEx() As UUID
'{96bf961b-40fe-42f1-ba9d-320238b49700}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H96BF961B, CInt(&H40FE), CInt(&H42F1), &HBA, &H9D, &H32, &H2, &H38, &HB4, &H97, &H0)
IID_IMFWorkQueueServicesEx = iid
End Function
Public Function IID_IMFQualityManager() As UUID
'{8D009D86-5B9F-4115-B1FC-9F80D52AB8AB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8D009D86, CInt(&H5B9F), CInt(&H4115), &HB1, &HFC, &H9F, &H80, &HD5, &H2A, &HB8, &HAB)
IID_IMFQualityManager = iid
End Function
Public Function IID_IMFQualityAdvise() As UUID
'{EC15E2E9-E36B-4f7c-8758-77D452EF4CE7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEC15E2E9, CInt(&HE36B), CInt(&H4F7C), &H87, &H58, &H77, &HD4, &H52, &HEF, &H4C, &HE7)
IID_IMFQualityAdvise = iid
End Function
Public Function IID_IMFQualityAdvise2() As UUID
'{F3706F0D-8EA2-4886-8000-7155E9EC2EAE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF3706F0D, CInt(&H8EA2), CInt(&H4886), &H80, &H0, &H71, &H55, &HE9, &HEC, &H2E, &HAE)
IID_IMFQualityAdvise2 = iid
End Function
Public Function IID_IMFQualityAdviseLimits() As UUID
'{dfcd8e4d-30b5-4567-acaa-8eb5b7853dc9}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDFCD8E4D, CInt(&H30B5), CInt(&H4567), &HAC, &HAA, &H8E, &HB5, &HB7, &H85, &H3D, &HC9)
IID_IMFQualityAdviseLimits = iid
End Function
Public Function IID_IMFRealTimeClient() As UUID
'{2347D60B-3FB5-480c-8803-8DF3ADCD3EF0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H2347D60B, CInt(&H3FB5), CInt(&H480C), &H88, &H3, &H8D, &HF3, &HAD, &HCD, &H3E, &HF0)
IID_IMFRealTimeClient = iid
End Function
Public Function IID_IMFRealTimeClientEx() As UUID
'{03910848-AB16-4611-B100-17B88AE2F248}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H3910848, CInt(&HAB16), CInt(&H4611), &HB1, &H0, &H17, &HB8, &H8A, &HE2, &HF2, &H48)
IID_IMFRealTimeClientEx = iid
End Function
Public Function IID_IMFSequencerSource() As UUID
'{197CD219-19CB-4de1-A64C-ACF2EDCBE59E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H197CD219, CInt(&H19CB), CInt(&H4DE1), &HA6, &H4C, &HAC, &HF2, &HED, &HCB, &HE5, &H9E)
IID_IMFSequencerSource = iid
End Function
Public Function IID_IMFMediaSourceTopologyProvider() As UUID
'{0E1D6009-C9F3-442d-8C51-A42D2D49452F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE1D6009, CInt(&HC9F3), CInt(&H442D), &H8C, &H51, &HA4, &H2D, &H2D, &H49, &H45, &H2F)
IID_IMFMediaSourceTopologyProvider = iid
End Function
Public Function IID_IMFMediaSourcePresentationProvider() As UUID
'{0E1D600a-C9F3-442d-8C51-A42D2D49452F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE1D600A, CInt(&HC9F3), CInt(&H442D), &H8C, &H51, &HA4, &H2D, &H2D, &H49, &H45, &H2F)
IID_IMFMediaSourcePresentationProvider = iid
End Function
Public Function IID_IMFTopologyNodeAttributeEditor() As UUID
'{676aa6dd-238a-410d-bb99-65668d01605a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H676AA6DD, CInt(&H238A), CInt(&H410D), &HBB, &H99, &H65, &H66, &H8D, &H1, &H60, &H5A)
IID_IMFTopologyNodeAttributeEditor = iid
End Function
Public Function IID_IMFByteStreamBuffering() As UUID
'{6d66d782-1d4f-4db7-8c63-cb8c77f1ef5e}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6D66D782, CInt(&H1D4F), CInt(&H4DB7), &H8C, &H63, &HCB, &H8C, &H77, &HF1, &HEF, &H5E)
IID_IMFByteStreamBuffering = iid
End Function
Public Function IID_IMFByteStreamCacheControl() As UUID
'{F5042EA4-7A96-4a75-AA7B-2BE1EF7F88D5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF5042EA4, CInt(&H7A96), CInt(&H4A75), &HAA, &H7B, &H2B, &HE1, &HEF, &H7F, &H88, &HD5)
IID_IMFByteStreamCacheControl = iid
End Function
Public Function IID_IMFByteStreamTimeSeek() As UUID
'{64976BFA-FB61-4041-9069-8C9A5F659BEB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H64976BFA, CInt(&HFB61), CInt(&H4041), &H90, &H69, &H8C, &H9A, &H5F, &H65, &H9B, &HEB)
IID_IMFByteStreamTimeSeek = iid
End Function
Public Function IID_IMFByteStreamCacheControl2() As UUID
'{71CE469C-F34B-49EA-A56B-2D2A10E51149}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H71CE469C, CInt(&HF34B), CInt(&H49EA), &HA5, &H6B, &H2D, &H2A, &H10, &HE5, &H11, &H49)
IID_IMFByteStreamCacheControl2 = iid
End Function
Public Function IID_IMFNetCredential() As UUID
'{5b87ef6a-7ed8-434f-ba0e-184fac1628d1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5B87EF6A, CInt(&H7ED8), CInt(&H434F), &HBA, &HE, &H18, &H4F, &HAC, &H16, &H28, &HD1)
IID_IMFNetCredential = iid
End Function
Public Function IID_IMFNetCredentialManager() As UUID
'{5b87ef6b-7ed8-434f-ba0e-184fac1628d1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5B87EF6B, CInt(&H7ED8), CInt(&H434F), &HBA, &HE, &H18, &H4F, &HAC, &H16, &H28, &HD1)
IID_IMFNetCredentialManager = iid
End Function
Public Function IID_IMFNetCredentialCache() As UUID
'{5b87ef6c-7ed8-434f-ba0e-184fac1628d1}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5B87EF6C, CInt(&H7ED8), CInt(&H434F), &HBA, &HE, &H18, &H4F, &HAC, &H16, &H28, &HD1)
IID_IMFNetCredentialCache = iid
End Function
Public Function IID_IMFSSLCertificateManager() As UUID
'{61f7d887-1230-4a8b-aeba-8ad434d1a64d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H61F7D887, CInt(&H1230), CInt(&H4A8B), &HAE, &HBA, &H8A, &HD4, &H34, &HD1, &HA6, &H4D)
IID_IMFSSLCertificateManager = iid
End Function
Public Function IID_IMFNetResourceFilter() As UUID
'{091878a3-bf11-4a5c-bc9f-33995b06ef2d}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H91878A3, CInt(&HBF11), CInt(&H4A5C), &HBC, &H9F, &H33, &H99, &H5B, &H6, &HEF, &H2D)
IID_IMFNetResourceFilter = iid
End Function
Public Function IID_IMFSourceOpenMonitor() As UUID
'{059054B3-027C-494C-A27D-9113291CF87F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H59054B3, CInt(&H27C), CInt(&H494C), &HA2, &H7D, &H91, &H13, &H29, &H1C, &HF8, &H7F)
IID_IMFSourceOpenMonitor = iid
End Function
Public Function IID_IMFNetProxyLocator() As UUID
'{e9cd0383-a268-4bb4-82de-658d53574d41}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE9CD0383, CInt(&HA268), CInt(&H4BB4), &H82, &HDE, &H65, &H8D, &H53, &H57, &H4D, &H41)
IID_IMFNetProxyLocator = iid
End Function
Public Function IID_IMFNetProxyLocatorFactory() As UUID
'{e9cd0384-a268-4bb4-82de-658d53574d41}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE9CD0384, CInt(&HA268), CInt(&H4BB4), &H82, &HDE, &H65, &H8D, &H53, &H57, &H4D, &H41)
IID_IMFNetProxyLocatorFactory = iid
End Function
Public Function IID_IMFSaveJob() As UUID
'{e9931663-80bf-4c6e-98af-5dcf58747d1f}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE9931663, CInt(&H80BF), CInt(&H4C6E), &H98, &HAF, &H5D, &HCF, &H58, &H74, &H7D, &H1F)
IID_IMFSaveJob = iid
End Function
Public Function IID_IMFNetSchemeHandlerConfig() As UUID
'{7BE19E73-C9BF-468a-AC5A-A5E8653BEC87}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7BE19E73, CInt(&HC9BF), CInt(&H468A), &HAC, &H5A, &HA5, &HE8, &H65, &H3B, &HEC, &H87)
IID_IMFNetSchemeHandlerConfig = iid
End Function
Public Function IID_IMFSchemeHandler() As UUID
'{6D4C7B74-52A0-4bb7-B0DB-55F29F47A668}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6D4C7B74, CInt(&H52A0), CInt(&H4BB7), &HB0, &HDB, &H55, &HF2, &H9F, &H47, &HA6, &H68)
IID_IMFSchemeHandler = iid
End Function
Public Function IID_IMFByteStreamHandler() As UUID
'{BB420AA4-765B-4a1f-91FE-D6A8A143924C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HBB420AA4, CInt(&H765B), CInt(&H4A1F), &H91, &HFE, &HD6, &HA8, &HA1, &H43, &H92, &H4C)
IID_IMFByteStreamHandler = iid
End Function
Public Function IID_IMFTrustedInput() As UUID
'{542612C4-A1B8-4632-B521-DE11EA64A0B0}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H542612C4, CInt(&HA1B8), CInt(&H4632), &HB5, &H21, &HDE, &H11, &HEA, &H64, &HA0, &HB0)
IID_IMFTrustedInput = iid
End Function
Public Function IID_IMFInputTrustAuthority() As UUID
'{D19F8E98-B126-4446-890C-5DCB7AD71453}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD19F8E98, CInt(&HB126), CInt(&H4446), &H89, &HC, &H5D, &HCB, &H7A, &HD7, &H14, &H53)
IID_IMFInputTrustAuthority = iid
End Function
Public Function IID_IMFTrustedOutput() As UUID
'{D19F8E95-B126-4446-890C-5DCB7AD71453}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD19F8E95, CInt(&HB126), CInt(&H4446), &H89, &HC, &H5D, &HCB, &H7A, &HD7, &H14, &H53)
IID_IMFTrustedOutput = iid
End Function
Public Function IID_IMFOutputTrustAuthority() As UUID
'{D19F8E94-B126-4446-890C-5DCB7AD71453}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD19F8E94, CInt(&HB126), CInt(&H4446), &H89, &HC, &H5D, &HCB, &H7A, &HD7, &H14, &H53)
IID_IMFOutputTrustAuthority = iid
End Function
Public Function IID_IMFOutputPolicy() As UUID
'{7F00F10A-DAED-41AF-AB26-5FDFA4DFBA3C}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7F00F10A, CInt(&HDAED), CInt(&H41AF), &HAB, &H26, &H5F, &HDF, &HA4, &HDF, &HBA, &H3C)
IID_IMFOutputPolicy = iid
End Function
Public Function IID_IMFOutputSchema() As UUID
'{7BE0FC5B-ABD9-44FB-A5C8-F50136E71599}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7BE0FC5B, CInt(&HABD9), CInt(&H44FB), &HA5, &HC8, &HF5, &H1, &H36, &HE7, &H15, &H99)
IID_IMFOutputSchema = iid
End Function
Public Function IID_IMFSecureChannel() As UUID
'{d0ae555d-3b12-4d97-b060-0990bc5aeb67}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HD0AE555D, CInt(&H3B12), CInt(&H4D97), &HB0, &H60, &H9, &H90, &HBC, &H5A, &HEB, &H67)
IID_IMFSecureChannel = iid
End Function
Public Function IID_IMFSampleProtection() As UUID
'{8e36395f-c7b9-43c4-a54d-512b4af63c95}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8E36395F, CInt(&HC7B9), CInt(&H43C4), &HA5, &H4D, &H51, &H2B, &H4A, &HF6, &H3C, &H95)
IID_IMFSampleProtection = iid
End Function
Public Function IID_IMFMediaSinkPreroll() As UUID
'{5dfd4b2a-7674-4110-a4e6-8a68fd5f3688}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H5DFD4B2A, CInt(&H7674), CInt(&H4110), &HA4, &HE6, &H8A, &H68, &HFD, &H5F, &H36, &H88)
IID_IMFMediaSinkPreroll = iid
End Function
Public Function IID_IMFFinalizableMediaSink() As UUID
'{EAECB74A-9A50-42ce-9541-6A7F57AA4AD7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEAECB74A, CInt(&H9A50), CInt(&H42CE), &H95, &H41, &H6A, &H7F, &H57, &HAA, &H4A, &HD7)
IID_IMFFinalizableMediaSink = iid
End Function
Public Function IID_IMFStreamingSinkConfig() As UUID
'{9db7aa41-3cc5-40d4-8509-555804ad34cc}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9DB7AA41, CInt(&H3CC5), CInt(&H40D4), &H85, &H9, &H55, &H58, &H4, &HAD, &H34, &HCC)
IID_IMFStreamingSinkConfig = iid
End Function
Public Function IID_IMFRemoteProxy() As UUID
'{994e23ad-1cc2-493c-b9fa-46f1cb040fa4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H994E23AD, CInt(&H1CC2), CInt(&H493C), &HB9, &HFA, &H46, &HF1, &HCB, &H4, &HF, &HA4)
IID_IMFRemoteProxy = iid
End Function
Public Function IID_IMFObjectReferenceStream() As UUID
'{09EF5BE3-C8A7-469e-8B70-73BF25BB193F}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H9EF5BE3, CInt(&HC8A7), CInt(&H469E), &H8B, &H70, &H73, &HBF, &H25, &HBB, &H19, &H3F)
IID_IMFObjectReferenceStream = iid
End Function
Public Function IID_IMFPMPHost() As UUID
'{F70CA1A9-FDC7-4782-B994-ADFFB1C98606}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HF70CA1A9, CInt(&HFDC7), CInt(&H4782), &HB9, &H94, &HAD, &HFF, &HB1, &HC9, &H86, &H6)
IID_IMFPMPHost = iid
End Function
Public Function IID_IMFPMPClient() As UUID
'{6C4E655D-EAD8-4421-B6B9-54DCDBBDF820}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H6C4E655D, CInt(&HEAD8), CInt(&H4421), &HB6, &HB9, &H54, &HDC, &HDB, &HBD, &HF8, &H20)
IID_IMFPMPClient = iid
End Function
Public Function IID_IMFPMPServer() As UUID
'{994e23af-1cc2-493c-b9fa-46f1cb040fa4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H994E23AF, CInt(&H1CC2), CInt(&H493C), &HB9, &HFA, &H46, &HF1, &HCB, &H4, &HF, &HA4)
IID_IMFPMPServer = iid
End Function
Public Function IID_IMFRemoteDesktopPlugin() As UUID
'{1cde6309-cae0-4940-907e-c1ec9c3d1d4a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1CDE6309, CInt(&HCAE0), CInt(&H4940), &H90, &H7E, &HC1, &HEC, &H9C, &H3D, &H1D, &H4A)
IID_IMFRemoteDesktopPlugin = iid
End Function
Public Function IID_IMFSAMIStyle() As UUID
'{A7E025DD-5303-4a62-89D6-E747E1EFAC73}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA7E025DD, CInt(&H5303), CInt(&H4A62), &H89, &HD6, &HE7, &H47, &HE1, &HEF, &HAC, &H73)
IID_IMFSAMIStyle = iid
End Function
Public Function IID_IMFTranscodeProfile() As UUID
'{4ADFDBA3-7AB0-4953-A62B-461E7FF3DA1E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4ADFDBA3, CInt(&H7AB0), CInt(&H4953), &HA6, &H2B, &H46, &H1E, &H7F, &HF3, &HDA, &H1E)
IID_IMFTranscodeProfile = iid
End Function
Public Function IID_IMFTranscodeSinkInfoProvider() As UUID
'{8CFFCD2E-5A03-4a3a-AFF7-EDCD107C620E}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8CFFCD2E, CInt(&H5A03), CInt(&H4A3A), &HAF, &HF7, &HED, &HCD, &H10, &H7C, &H62, &HE)
IID_IMFTranscodeSinkInfoProvider = iid
End Function
Public Function IID_IMFFieldOfUseMFTUnlock() As UUID
'{508E71D3-EC66-4fc3-8775-B4B9ED6BA847}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H508E71D3, CInt(&HEC66), CInt(&H4FC3), &H87, &H75, &HB4, &HB9, &HED, &H6B, &HA8, &H47)
IID_IMFFieldOfUseMFTUnlock = iid
End Function
Public Function IID_IMFLocalMFTRegistration() As UUID
'{149c4d73-b4be-4f8d-8b87-079e926b6add}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H149C4D73, CInt(&HB4BE), CInt(&H4F8D), &H8B, &H87, &H7, &H9E, &H92, &H6B, &H6A, &HDD)
IID_IMFLocalMFTRegistration = iid
End Function
Public Function IID_IMFPMPHostApp() As UUID
'{84d2054a-3aa1-4728-a3b0-440a418cf49c}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H84D2054A, CInt(&H3AA1), CInt(&H4728), &HA3, &HB0, &H44, &HA, &H41, &H8C, &HF4, &H9C)
IID_IMFPMPHostApp = iid
End Function
Public Function IID_IMFPMPClientApp() As UUID
'{c004f646-be2c-48f3-93a2-a0983eba1108}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HC004F646, CInt(&HBE2C), CInt(&H48F3), &H93, &HA2, &HA0, &H98, &H3E, &HBA, &H11, &H8)
IID_IMFPMPClientApp = iid
End Function
Public Function IID_IMFMediaStreamSourceSampleRequest() As UUID
'{380b9af9-a85b-4e78-a2af-ea5ce645c6b4}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H380B9AF9, CInt(&HA85B), CInt(&H4E78), &HA2, &HAF, &HEA, &H5C, &HE6, &H45, &HC6, &HB4)
IID_IMFMediaStreamSourceSampleRequest = iid
End Function
Public Function IID_IMFTrackedSample() As UUID
'{245BF8E9-0755-40f7-88A5-AE0F18D55E17}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H245BF8E9, CInt(&H755), CInt(&H40F7), &H88, &HA5, &HAE, &HF, &H18, &HD5, &H5E, &H17)
IID_IMFTrackedSample = iid
End Function
Public Function IID_IMFProtectedEnvironmentAccess() As UUID
'{ef5dc845-f0d9-4ec9-b00c-cb5183d38434}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HEF5DC845, CInt(&HF0D9), CInt(&H4EC9), &HB0, &HC, &HCB, &H51, &H83, &HD3, &H84, &H34)
IID_IMFProtectedEnvironmentAccess = iid
End Function
Public Function IID_IMFSignedLibrary() As UUID
'{4a724bca-ff6a-4c07-8e0d-7a358421cf06}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H4A724BCA, CInt(&HFF6A), CInt(&H4C07), &H8E, &HD, &H7A, &H35, &H84, &H21, &HCF, &H6)
IID_IMFSignedLibrary = iid
End Function
Public Function IID_IMFSystemId() As UUID
'{fff4af3a-1fc1-4ef9-a29b-d26c49e2f31a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFFF4AF3A, CInt(&H1FC1), CInt(&H4EF9), &HA2, &H9B, &HD2, &H6C, &H49, &HE2, &HF3, &H1A)
IID_IMFSystemId = iid
End Function
Public Function IID_IMFContentProtectionDevice() As UUID
'{E6257174-A060-4C9A-A088-3B1B471CAD28}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HE6257174, CInt(&HA060), CInt(&H4C9A), &HA0, &H88, &H3B, &H1B, &H47, &H1C, &HAD, &H28)
IID_IMFContentProtectionDevice = iid
End Function
Public Function IID_IMFContentDecryptorContext() As UUID
'{7EC4B1BD-43FB-4763-85D2-64FCB5C5F4CB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H7EC4B1BD, CInt(&H43FB), CInt(&H4763), &H85, &HD2, &H64, &HFC, &HB5, &HC5, &HF4, &HCB)
IID_IMFContentDecryptorContext = iid
End Function
Public Function IID_IMFVideoPositionMapper() As UUID
'{1F6A9F17-E70B-4e24-8AE4-0B2C3BA7A4AE}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H1F6A9F17, CInt(&HE70B), CInt(&H4E24), &H8A, &HE4, &HB, &H2C, &H3B, &HA7, &HA4, &HAE)
IID_IMFVideoPositionMapper = iid
End Function
Public Function IID_IMFVideoDeviceID() As UUID
'{A38D9567-5A9C-4f3c-B293-8EB415B279BA}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA38D9567, CInt(&H5A9C), CInt(&H4F3C), &HB2, &H93, &H8E, &HB4, &H15, &HB2, &H79, &HBA)
IID_IMFVideoDeviceID = iid
End Function
Public Function IID_IMFVideoDisplayControl() As UUID
'{a490b1e4-ab84-4d31-a1b2-181e03b1077a}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA490B1E4, CInt(&HAB84), CInt(&H4D31), &HA1, &HB2, &H18, &H1E, &H3, &HB1, &H7, &H7A)
IID_IMFVideoDisplayControl = iid
End Function
Public Function IID_IMFVideoPresenter() As UUID
'{29AFF080-182A-4a5d-AF3B-448F3A6346CB}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H29AFF080, CInt(&H182A), CInt(&H4A5D), &HAF, &H3B, &H44, &H8F, &H3A, &H63, &H46, &HCB)
IID_IMFVideoPresenter = iid
End Function
Public Function IID_IMFDesiredSample() As UUID
'{56C294D0-753E-4260-8D61-A3D8820B1D54}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H56C294D0, CInt(&H753E), CInt(&H4260), &H8D, &H61, &HA3, &HD8, &H82, &HB, &H1D, &H54)
IID_IMFDesiredSample = iid
End Function
Public Function IID_IMFVideoMixerControl() As UUID
'{A5C6C53F-C202-4aa5-9695-175BA8C508A5}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA5C6C53F, CInt(&HC202), CInt(&H4AA5), &H96, &H95, &H17, &H5B, &HA8, &HC5, &H8, &HA5)
IID_IMFVideoMixerControl = iid
End Function
Public Function IID_IMFVideoMixerControl2() As UUID
'{8459616d-966e-4930-b658-54fa7e5a16d3}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H8459616D, CInt(&H966E), CInt(&H4930), &HB6, &H58, &H54, &HFA, &H7E, &H5A, &H16, &HD3)
IID_IMFVideoMixerControl2 = iid
End Function
Public Function IID_IMFVideoRenderer() As UUID
'{DFDFD197-A9CA-43d8-B341-6AF3503792CD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HDFDFD197, CInt(&HA9CA), CInt(&H43D8), &HB3, &H41, &H6A, &HF3, &H50, &H37, &H92, &HCD)
IID_IMFVideoRenderer = iid
End Function
Public Function IID_IEVRFilterConfig() As UUID
'{83E91E85-82C1-4ea7-801D-85DC50B75086}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H83E91E85, CInt(&H82C1), CInt(&H4EA7), &H80, &H1D, &H85, &HDC, &H50, &HB7, &H50, &H86)
IID_IEVRFilterConfig = iid
End Function
Public Function IID_IEVRFilterConfigEx() As UUID
'{aea36028-796d-454f-beee-b48071e24304}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HAEA36028, CInt(&H796D), CInt(&H454F), &HBE, &HEE, &HB4, &H80, &H71, &HE2, &H43, &H4)
IID_IEVRFilterConfigEx = iid
End Function
Public Function IID_IMFTopologyServiceLookup() As UUID
'{fa993889-4383-415a-a930-dd472a8cf6f7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFA993889, CInt(&H4383), CInt(&H415A), &HA9, &H30, &HDD, &H47, &H2A, &H8C, &HF6, &HF7)
IID_IMFTopologyServiceLookup = iid
End Function
Public Function IID_IMFTopologyServiceLookupClient() As UUID
'{fa99388a-4383-415a-a930-dd472a8cf6f7}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HFA99388A, CInt(&H4383), CInt(&H415A), &HA9, &H30, &HDD, &H47, &H2A, &H8C, &HF6, &HF7)
IID_IMFTopologyServiceLookupClient = iid
End Function
Public Function IID_IEVRTrustedVideoPlugin() As UUID
'{83A4CE40-7710-494b-A893-A472049AF630}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H83A4CE40, CInt(&H7710), CInt(&H494B), &HA8, &H93, &HA4, &H72, &H4, &H9A, &HF6, &H30)
IID_IEVRTrustedVideoPlugin = iid
End Function
Public Function IID_IMFPMediaPlayer() As UUID
'{A714590A-58AF-430a-85BF-44F5EC838D85}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &HA714590A, CInt(&H58AF), CInt(&H430A), &H85, &HBF, &H44, &HF5, &HEC, &H83, &H8D, &H85)
IID_IMFPMediaPlayer = iid
End Function
Public Function IID_IMFPMediaItem() As UUID
'{90EB3E6B-ECBF-45cc-B1DA-C6FE3EA70D57}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H90EB3E6B, CInt(&HECBF), CInt(&H45CC), &HB1, &HDA, &HC6, &HFE, &H3E, &HA7, &HD, &H57)
IID_IMFPMediaItem = iid
End Function
Public Function IID_IMFPMediaPlayerCallback() As UUID
'{766C8FFB-5FDB-4fea-A28D-B912996F51BD}
Static iid As UUID
 If (iid.Data1 = 0&) Then Call DEFINE_UUID(iid, &H766C8FFB, CInt(&H5FDB), CInt(&H4FEA), &HA2, &H8D, &HB9, &H12, &H99, &H6F, &H51, &HBD)
IID_IMFPMediaPlayerCallback = iid
End Function
Public Function MF_WVC1_PROG_SINGLE_SLICE_CONTENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H67EC2559, &HF2F, &H4420, &HA4, &HDD, &H2F, &H8E, &HE7, &HA5, &H73, &H8B)
MF_WVC1_PROG_SINGLE_SLICE_CONTENT = iid
End Function
Public Function MF_PROGRESSIVE_CODING_CONTENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8F020EEA, &H1508, &H471F, &H9D, &HA6, &H50, &H7D, &H7C, &HFA, &H40, &HDB)
MF_PROGRESSIVE_CODING_CONTENT = iid
End Function
Public Function MF_NALU_LENGTH_SET() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA7911D53, &H12A4, &H4965, &HAE, &H70, &H6E, &HAD, &HD6, &HFF, &H5, &H51)
MF_NALU_LENGTH_SET = iid
End Function
Public Function MF_NALU_LENGTH_INFORMATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H19124E7C, &HAD4B, &H465F, &HBB, &H18, &H20, &H18, &H62, &H87, &HB6, &HAF)
MF_NALU_LENGTH_INFORMATION = iid
End Function
Public Function MF_USER_DATA_PAYLOAD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD1D4985D, &HDC92, &H457A, &HB3, &HA0, &H65, &H1A, &H33, &HA3, &H10, &H47)
MF_USER_DATA_PAYLOAD = iid
End Function
Public Function MF_MPEG4SINK_SPSPPS_PASSTHROUGH() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5601A134, &H2005, &H4AD2, &HB3, &H7D, &H22, &HA6, &HC5, &H54, &HDE, &HB2)
MF_MPEG4SINK_SPSPPS_PASSTHROUGH = iid
End Function
Public Function MF_MPEG4SINK_MOOV_BEFORE_MDAT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF672E3AC, &HE1E6, &H4F10, &HB5, &HEC, &H5F, &H3B, &H30, &H82, &H88, &H16)
MF_MPEG4SINK_MOOV_BEFORE_MDAT = iid
End Function
Public Function MF_SESSION_TOPOLOADER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1E83D482, &H1F1C, &H4571, &H84, &H5, &H88, &HF4, &HB2, &H18, &H1F, &H71)
MF_SESSION_TOPOLOADER = iid
End Function
Public Function MF_SESSION_GLOBAL_TIME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1E83D482, &H1F1C, &H4571, &H84, &H5, &H88, &HF4, &HB2, &H18, &H1F, &H72)
MF_SESSION_GLOBAL_TIME = iid
End Function
Public Function MF_SESSION_QUALITY_MANAGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1E83D482, &H1F1C, &H4571, &H84, &H5, &H88, &HF4, &HB2, &H18, &H1F, &H73)
MF_SESSION_QUALITY_MANAGER = iid
End Function
Public Function MF_SESSION_CONTENT_PROTECTION_MANAGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1E83D482, &H1F1C, &H4571, &H84, &H5, &H88, &HF4, &HB2, &H18, &H1F, &H74)
MF_SESSION_CONTENT_PROTECTION_MANAGER = iid
End Function
Public Function MF_SESSION_SERVER_CONTEXT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAFE5B291, &H50FA, &H46E8, &HB9, &HBE, &HC, &HC, &H3C, &HE4, &HB3, &HA5)
MF_SESSION_SERVER_CONTEXT = iid
End Function
Public Function MF_SESSION_REMOTE_SOURCE_MODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF4033EF4, &H9BB3, &H4378, &H94, &H1F, &H85, &HA0, &H85, &H6B, &HC2, &H44)
MF_SESSION_REMOTE_SOURCE_MODE = iid
End Function
Public Function MF_SESSION_APPROX_EVENT_OCCURRENCE_TIME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H190E852F, &H6238, &H42D1, &HB5, &HAF, &H69, &HEA, &H33, &H8E, &HF8, &H50)
MF_SESSION_APPROX_EVENT_OCCURRENCE_TIME = iid
End Function
Public Function MF_PMP_SERVER_CONTEXT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2F00C910, &HD2CF, &H4278, &H8B, &H6A, &HD0, &H77, &HFA, &HC3, &HA2, &H5F)
MF_PMP_SERVER_CONTEXT = iid
End Function



Public Function MFPKEY_SourceOpenMonitor() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H74D4637, &HB5AE, &H465D, &HAF, &H17, &H1A, &H53, &H8D, &H28, &H59, &HDD, &H2)
End Function


' Type: VT_BOOL
' When this is set to VARIANT_TRUE, if an ASF Media Source is created,
' it will perform all seek operations approximately (and more quickly)
Public Function MFPKEY_ASFMediaSource_ApproxSeek() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &HB4CD270F, &H244D, &H4969, &HBB, &H92, &H3F, &HF, &HB8, &H31, &H6F, &H10, &H1)
MFPKEY_ASFMediaSource_ApproxSeek = pk
End Function

' Type: VT_BOOL
' When this is set to VARIANT_TRUE, if an ASF Media Source is created,
' it will perform iterative seek if there is  no index
Public Function MFPKEY_ASFMediaSource_IterativeSeekIfNoIndex() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H170B65DC, &H4A4E, &H407A, &HAC, &H22, &H57, &H7F, &H50, &HE4, &HA3, &H7C, &H1)
MFPKEY_ASFMediaSource_IterativeSeekIfNoIndex = pk
End Function
' Type: VT_UINT32
' Only valid when MFPKEY_ASFMediaSource_IterativeSeekIfNoIndex is set to TRUE
' The count is any integer [1, 10]
' If this value is not set, the default value 5 is used.
Public Function MFPKEY_ASFMediaSource_IterativeSeek_Max_Count() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H170B65DC, &H4A4E, &H407A, &HAC, &H22, &H57, &H7F, &H50, &HE4, &HA3, &H7C, &H2)
MFPKEY_ASFMediaSource_IterativeSeek_Max_Count = pk
End Function
' Type: VT_UINT32
' Only valid when MFPKEY_ASFMediaSource_IterativeSeekIfNoIndex is set to TRUE
' the tolerance zone is the difference that allowed between the real seek time and preferred seek time.
' Keyframe distance is recommended to use.
' If this value is not set, the default value 8000 millisecond is used.
Public Function MFPKEY_ASFMediaSource_IterativeSeek_Tolerance_In_MilliSecond() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H170B65DC, &H4A4E, &H407A, &HAC, &H22, &H57, &H7F, &H50, &HE4, &HA3, &H7C, &H3)
MFPKEY_ASFMediaSource_IterativeSeek_Tolerance_In_MilliSecond = pk
End Function
'
' DLNA Profile ID - needed for media sharing.
'
' {CFA31B45-525D-4998-BB44-3F7D81542FA4}
Public Function MFPKEY_Content_DLNA_Profile_ID() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &HCFA31B45, &H525D, &H4998, &HBB, &H44, &H3F, &H7D, &H81, &H54, &H2F, &HA4, &H1)
MFPKEY_Content_DLNA_Profile_ID = pk
End Function
' Type: VT_BOOL
' When this is set to VARIANT_TRUE, the media source is requested to disable any read-ahead.
' This can be a useful performance optimization to limit disk read when a media source will
' only be instantiated for limited tasks, such as reading video thumbnail data.
' Not all sources will support this feature.
' {26366C14-C5BF-4c76-887B-9F1754DB5F09}
Public Function MFPKEY_MediaSource_DisableReadAhead() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H26366C14, &HC5BF, &H4C76, &H88, &H7B, &H9F, &H17, &H54, &HDB, &H5F, &H9, &H1)
MFPKEY_MediaSource_DisableReadAhead = pk
End Function
' Type: VT_UINT32
' Sets the SBE mode.
' 0: default is to use the automatic stream mapping in the crossbar to the output
' 1: Crossbar output multiple streams mapped to the output
' 2: Crossbar mode where the application has to map the streams to the output (selection of the audio stream possible)
' {3FAE10BB-F859-4192-B562-1868D3DA3A02}
Public Function MFPKEY_SBESourceMode() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H3FAE10BB, &HF859, &H4192, &HB5, &H62, &H18, &H68, &HD3, &HDA, &H3A, &H2, &H1)
MFPKEY_SBESourceMode = pk
End Function
' Type: VT_UNKNOWN
' Defines an IMFAsyncCallback implementation that will create the a PMP session on behalf of the bytestream.
' {28bb4de2-26a2-4870-b720-d26bbeb14942}
Public Function MFPKEY_PMP_Creation_Callback() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H28BB4DE2, &H26A2, &H4870, &HB7, &H20, &HD2, &H6B, &HBE, &HB1, &H49, &H42, &H1)
MFPKEY_PMP_Creation_Callback = pk
End Function
' Type: VT_BOOL
' When set and TRUE, specifies that the HTTP caching bytestream should use URLMon to download
' content.  By default, WinHTTP will be used.
' {eda8afdf-c171-417f-8d17-2e0918303292}, 1
Public Function MFPKEY_HTTP_ByteStream_Enable_Urlmon() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &HEDA8AFDF, &HC171, &H417F, &H8D, &H17, &H2E, &H9, &H18, &H30, &H32, &H92, &H1)
MFPKEY_HTTP_ByteStream_Enable_Urlmon = pk
End Function
' Type: VT_UI4
' When MFPKEY_HTTP_ByteStream_Enable_Urlmon is turned on, this value specifies the urlmon
' bind flags as defined in the BINDF enumeration.  The default value is BINDF_ASYNCHRONOUS |
' BINDF_ASYNCSTORAGE | BINDF_NOWRITECACHE | BINDF_PULLDATA | BINDF_RESYNCHRONIZE
' {eda8afdf-c171-417f-8d17-2e0918303292}, 2
Public Function MFPKEY_HTTP_ByteStream_Urlmon_Bind_Flags() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &HEDA8AFDF, &HC171, &H417F, &H8D, &H17, &H2E, &H9, &H18, &H30, &H32, &H92, &H2)
MFPKEY_HTTP_ByteStream_Urlmon_Bind_Flags = pk
End Function
' Type: VT_VECTOR | VT_UI1
' When MFPKEY_HTTP_ByteStream_Enable_Urlmon is turned on, this value specifies the root security
' ID for urlmon.  By default, this value is null and no root security ID will be provided to
' urlmon.
' {eda8afdf-c171-417f-8d17-2e0918303292}, 3
Public Function MFPKEY_HTTP_ByteStream_Urlmon_Security_Id() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &HEDA8AFDF, &HC171, &H417F, &H8D, &H17, &H2E, &H9, &H18, &H30, &H32, &H92, &H3)
MFPKEY_HTTP_ByteStream_Urlmon_Security_Id = pk
End Function
' Type: VT_UNKNOWN
' When MFPKEY_HTTP_ByteStream_Enable_Urlmon is turned on, this value specifies an
' implementation of IWindowForBindingUI that can be used to obtain an HWND for urlmon
' UI.  By default, urlmon UI will be disabled.
' {eda8afdf-c171-417f-8d17-2e0918303292}, 4
Public Function MFPKEY_HTTP_ByteStream_Urlmon_Window() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &HEDA8AFDF, &HC171, &H417F, &H8D, &H17, &H2E, &H9, &H18, &H30, &H32, &H92, &H4)
MFPKEY_HTTP_ByteStream_Urlmon_Window = pk
End Function
' Type: VT_UNKNOWN
' When MFPKEY_HTTP_ByteStream_Enable_Urlmon is turned on, this value specifies an
' implementation of IServiceProvider that can be used to obtain services for the
' urlmon protocol handler.
' {eda8afdf-c171-417f-8d17-2e0918303292}, 5
Public Function MFPKEY_HTTP_ByteStream_Urlmon_Callback_QueryService() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &HEDA8AFDF, &HC171, &H417F, &H8D, &H17, &H2E, &H9, &H18, &H30, &H32, &H92, &H5)
MFPKEY_HTTP_ByteStream_Urlmon_Callback_QueryService = pk
End Function
' Type: VT_CLSID
' Set to the GUID that identifies the media protection system to use for the content.
' {636B271D-DDC7-49E9-A6C6-47385962E5BD}
Public Function MFPKEY_MediaProtectionSystemId() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H636B271D, &HDDC7, &H49E9, &HA6, &HC6, &H47, &H38, &H59, &H62, &HE5, &HBD, &H1)
MFPKEY_MediaProtectionSystemId = pk
End Function

' Type: VT_BLOB
' BLOB containing the context to use when initializing a media protection system's trusted input module.
' {636B271D-DDC7-49E9-A6C6-47385962E5BD}
Public Function MFPKEY_MediaProtectionSystemContext() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H636B271D, &HDDC7, &H49E9, &HA6, &HC6, &H47, &H38, &H59, &H62, &HE5, &HBD, &H2)
MFPKEY_MediaProtectionSystemContext = pk
End Function
' Type: VT_UNKNOWN
' Set to an IPropertySet that defines the mapping from Property system id to property system activation id.
' {636B271D-DDC7-49E9-A6C6-47385962E5BD}
Public Function MFPKEY_MediaProtectionSystemIdMapping() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H636B271D, &HDDC7, &H49E9, &HA6, &HC6, &H47, &H38, &H59, &H62, &HE5, &HBD, &H3)
MFPKEY_MediaProtectionSystemIdMapping = pk
End Function
' Type: VT_CLSID
' Set to the GUID that identifies the protection system in the container.
' {42AF3D7C-00CF-4a0f-81F0-ADF524A5A5B5}
Public Function MFPKEY_MediaProtectionContainerGuid() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H42AF3D7C, &HCF, &H4A0F, &H81, &HF0, &HAD, &HF5, &H24, &HA5, &HA5, &HB5, &H1)
MFPKEY_MediaProtectionContainerGuid = pk
End Function
' Type: VT_UNKNOWN
' Set to an IPropertySet that defines a mapping from track Type to IRandomAccessStream containing the DRM context
' {4454B092-D3DA-49b0-8452-6850C7DB764D}
Public Function MFPKEY_MediaProtectionSystemContextsPerTrack() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H4454B092, &HD3DA, &H49B0, &H84, &H52, &H68, &H50, &HC7, &HDB, &H76, &H4D, &H3)
MFPKEY_MediaProtectionSystemContextsPerTrack = pk
End Function
' Type: VT_BOOL
' When set and TRUE, specifies that the URL is being downloaded to disk instead of being played.
' {817f11b7-a982-46ec-a449-ef58aed53ca8}
Public Function MFPKEY_HTTP_ByteStream_Download_Mode() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H817F11B7, &HA982, &H46EC, &HA4, &H49, &HEF, &H58, &HAE, &HD5, &H3C, &HA8, &H1)
MFPKEY_HTTP_ByteStream_Download_Mode = pk
End Function
' TYPE: VT_UI4
' This property specifies how the HTTP Byte Stream should cache downloaded data.
' A value of 1 means that the downloaded data should be cached to disk.
' A value of 2 means that the downloaded data should be cached in memory.
' A value of 0 is the default, and means that the Byte Stream is free to choose the caching mode
' based on heuristics.
' {86a2403e-c78b-44d7-8bc8-ff7258117508}, 1
Public Function MFPKEY_HTTP_ByteStream_Caching_Mode() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H86A2403E, &HC78B, &H44D7, &H8B, &HC8, &HFF, &H72, &H58, &H11, &H75, &H8, &H1)
MFPKEY_HTTP_ByteStream_Caching_Mode = pk
End Function
' TYPE: VT_UI8
' This property specifies an upper limit on the amount of data, in bytes, that the
' HTTP Byte Stream caches on disk or in memory.
' The Byte Stream may choose a lower limit than the one specified.
' A value of 0 is the default, and means that the Byte Stream is free to limit the cache size
' based on heuristics.
' {86a2403e-c78b-44d7-8bc8-ff7258117508}, 2
Public Function MFPKEY_HTTP_ByteStream_Cache_Limit() As PROPERTYKEY
Static pk As PROPERTYKEY
 If (pk.fmtid.Data1 = 0) Then Call DEFINE_PROPERTYKEY(pk, &H86A2403E, &HC78B, &H44D7, &H8B, &HC8, &HFF, &H72, &H58, &H11, &H75, &H8, &H2)
MFPKEY_HTTP_ByteStream_Cache_Limit = pk
End Function

Public Function MF_TIME_FORMAT_ENTRY_RELATIVE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4399F178, &H46D3, &H4504, &HAF, &HDA, &H20, &HD3, &H2E, &H9B, &HA3, &H60)
MF_TIME_FORMAT_ENTRY_RELATIVE = iid
End Function
Public Function MF_SOURCE_STREAM_SUPPORTS_HW_CONNECTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA38253AA, &H6314, &H42FD, &HA3, &HCE, &HBB, &H27, &HB6, &H85, &H99, &H46)
MF_SOURCE_STREAM_SUPPORTS_HW_CONNECTION = iid
End Function
Public Function MF_STREAM_SINK_SUPPORTS_HW_CONNECTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9B465CBF, &H597, &H4F9E, &H9F, &H3C, &HB9, &H7E, &HEE, &HF9, &H3, &H59)
MF_STREAM_SINK_SUPPORTS_HW_CONNECTION = iid
End Function
Public Function MF_STREAM_SINK_SUPPORTS_ROTATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB3E96280, &HBD05, &H41A5, &H97, &HAD, &H8A, &H7F, &HEE, &H24, &HB9, &H12)
MF_STREAM_SINK_SUPPORTS_ROTATION = iid
End Function
Public Function MF_SINK_VIDEO_PTS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2162BDE7, &H421E, &H4B90, &H9B, &H33, &HE5, &H8F, &HBF, &H1D, &H58, &HB6)
MF_SINK_VIDEO_PTS = iid
End Function
Public Function MF_SINK_VIDEO_NATIVE_WIDTH() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE6D6A707, &H1505, &H4747, &H9B, &H10, &H72, &HD2, &HD1, &H58, &HCB, &H3A)
MF_SINK_VIDEO_NATIVE_WIDTH = iid
End Function
Public Function MF_SINK_VIDEO_NATIVE_HEIGHT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF0CA6705, &H490C, &H43E8, &H94, &H1C, &HC0, &HB3, &H20, &H6B, &H9A, &H65)
MF_SINK_VIDEO_NATIVE_HEIGHT = iid
End Function
Public Function MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_NUMERATOR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD0F33B22, &HB78A, &H4879, &HB4, &H55, &HF0, &H3E, &HF3, &HFA, &H82, &HCD)
MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_NUMERATOR = iid
End Function
Public Function MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_DENOMINATOR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6EA1EB97, &H1FE0, &H4F10, &HA6, &HE4, &H1F, &H4F, &H66, &H15, &H64, &HE0)
MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_DENOMINATOR = iid
End Function
Public Function MF_BD_MVC_PLANE_OFFSET_METADATA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H62A654E4, &HB76C, &H4901, &H98, &H23, &H2C, &HB6, &H15, &HD4, &H73, &H18)
MF_BD_MVC_PLANE_OFFSET_METADATA = iid
End Function
Public Function MF_LUMA_KEY_ENABLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7369820F, &H76DE, &H43CA, &H92, &H84, &H47, &HB8, &HF3, &H7E, &H6, &H49)
MF_LUMA_KEY_ENABLE = iid
End Function
Public Function MF_LUMA_KEY_LOWER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H93D7B8D5, &HB81, &H4715, &HAE, &HA0, &H87, &H25, &H87, &H16, &H21, &HE9)
MF_LUMA_KEY_LOWER = iid
End Function
Public Function MF_LUMA_KEY_UPPER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD09F39BB, &H4602, &H4C31, &HA7, &H6, &HA1, &H21, &H71, &HA5, &H11, &HA)
MF_LUMA_KEY_UPPER = iid
End Function
Public Function MF_USER_EXTENDED_ATTRIBUTES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC02ABAC6, &HFEB2, &H4541, &H92, &H2F, &H92, &HB, &H43, &H70, &H27, &H22)
MF_USER_EXTENDED_ATTRIBUTES = iid
End Function
Public Function MF_INDEPENDENT_STILL_IMAGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEA12AF41, &H710, &H42C9, &HA1, &H27, &HDA, &HA3, &HE7, &H84, &H83, &HA5)
MF_INDEPENDENT_STILL_IMAGE = iid
End Function
Public Function MF_TOPOLOGY_PROJECTSTART() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7ED3F802, &H86BB, &H4B3F, &HB7, &HE4, &H7C, &HB4, &H3A, &HFD, &H4B, &H80)
MF_TOPOLOGY_PROJECTSTART = iid
End Function
Public Function MF_TOPOLOGY_PROJECTSTOP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7ED3F803, &H86BB, &H4B3F, &HB7, &HE4, &H7C, &HB4, &H3A, &HFD, &H4B, &H80)
MF_TOPOLOGY_PROJECTSTOP = iid
End Function
Public Function MF_TOPOLOGY_NO_MARKIN_MARKOUT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7ED3F804, &H86BB, &H4B3F, &HB7, &HE4, &H7C, &HB4, &H3A, &HFD, &H4B, &H80)
MF_TOPOLOGY_NO_MARKIN_MARKOUT = iid
End Function
Public Function MF_TOPOLOGY_DXVA_MODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1E8D34F6, &HF5AB, &H4E23, &HBB, &H88, &H87, &H4A, &HA3, &HA1, &HA7, &H4D)
MF_TOPOLOGY_DXVA_MODE = iid
End Function
Public Function MF_TOPOLOGY_ENABLE_XVP_FOR_PLAYBACK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1967731F, &HCD78, &H42FC, &HB0, &H26, &H9, &H92, &HA5, &H6E, &H56, &H93)
MF_TOPOLOGY_ENABLE_XVP_FOR_PLAYBACK = iid
End Function
Public Function MF_TOPOLOGY_STATIC_PLAYBACK_OPTIMIZATIONS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB86CAC42, &H41A6, &H4B79, &H89, &H7A, &H1A, &HB0, &HE5, &H2B, &H4A, &H1B)
MF_TOPOLOGY_STATIC_PLAYBACK_OPTIMIZATIONS = iid
End Function
Public Function MF_TOPOLOGY_PLAYBACK_MAX_DIMS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5715CF19, &H5768, &H44AA, &HAD, &H6E, &H87, &H21, &HF1, &HB0, &HF9, &HBB)
MF_TOPOLOGY_PLAYBACK_MAX_DIMS = iid
End Function
Public Function MF_TOPOLOGY_HARDWARE_MODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD2D362FD, &H4E4F, &H4191, &HA5, &H79, &HC6, &H18, &HB6, &H67, &H6, &HAF)
MF_TOPOLOGY_HARDWARE_MODE = iid
End Function
Public Function MF_TOPOLOGY_PLAYBACK_FRAMERATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC164737A, &HC2B1, &H4553, &H83, &HBB, &H5A, &H52, &H60, &H72, &H44, &H8F)
MF_TOPOLOGY_PLAYBACK_FRAMERATE = iid
End Function
Public Function MF_TOPOLOGY_DYNAMIC_CHANGE_NOT_ALLOWED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD529950B, &HD484, &H4527, &HA9, &HCD, &HB1, &H90, &H95, &H32, &HB5, &HB0)
MF_TOPOLOGY_DYNAMIC_CHANGE_NOT_ALLOWED = iid
End Function
Public Function MF_TOPOLOGY_ENUMERATE_SOURCE_TYPES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6248C36D, &H5D0B, &H4F40, &HA0, &HBB, &HB0, &HB3, &H5, &HF7, &H76, &H98)
MF_TOPOLOGY_ENUMERATE_SOURCE_TYPES = iid
End Function
Public Function MF_TOPOLOGY_START_TIME_ON_PRESENTATION_SWITCH() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC8CC113F, &H7951, &H4548, &HAA, &HD6, &H9E, &HD6, &H20, &H2E, &H62, &HB3)
MF_TOPOLOGY_START_TIME_ON_PRESENTATION_SWITCH = iid
End Function
Public Function MF_DISABLE_LOCALLY_REGISTERED_PLUGINS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H66B16DA9, &HADD4, &H47E0, &HA1, &H6B, &H5A, &HF1, &HFB, &H48, &H36, &H34)
MF_DISABLE_LOCALLY_REGISTERED_PLUGINS = iid
End Function
Public Function MF_LOCAL_PLUGIN_CONTROL_POLICY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HD91B0085, &HC86D, &H4F81, &H88, &H22, &H8C, &H68, &HE1, &HD7, &HFA, &H4)
MF_LOCAL_PLUGIN_CONTROL_POLICY = iid
End Function
Public Function MF_TOPONODE_FLUSH() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCE8, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_FLUSH = iid
End Function
Public Function MF_TOPONODE_DRAIN() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCE9, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_DRAIN = iid
End Function
Public Function MF_TOPONODE_D3DAWARE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCED, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_D3DAWARE = iid
End Function
Public Function MF_TOPOLOGY_RESOLUTION_STATUS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCDE, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPOLOGY_RESOLUTION_STATUS = iid
End Function
Public Function MF_TOPONODE_ERRORCODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCEE, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_ERRORCODE = iid
End Function
Public Function MF_TOPONODE_CONNECT_METHOD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCF1, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_CONNECT_METHOD = iid
End Function
Public Function MF_TOPONODE_LOCKED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCF7, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_LOCKED = iid
End Function
Public Function MF_TOPONODE_WORKQUEUE_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCF8, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_WORKQUEUE_ID = iid
End Function
Public Function MF_TOPONODE_WORKQUEUE_MMCSS_CLASS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCF9, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_WORKQUEUE_MMCSS_CLASS = iid
End Function
Public Function MF_TOPONODE_DECRYPTOR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCFA, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_DECRYPTOR = iid
End Function
Public Function MF_TOPONODE_DISCARDABLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCFB, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_DISCARDABLE = iid
End Function
Public Function MF_TOPONODE_ERROR_MAJORTYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCFD, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_ERROR_MAJORTYPE = iid
End Function
Public Function MF_TOPONODE_ERROR_SUBTYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCFE, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_ERROR_SUBTYPE = iid
End Function
Public Function MF_TOPONODE_WORKQUEUE_MMCSS_TASKID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBCFF, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_WORKQUEUE_MMCSS_TASKID = iid
End Function
Public Function MF_TOPONODE_WORKQUEUE_MMCSS_PRIORITY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5001F840, &H2816, &H48F4, &H93, &H64, &HAD, &H1E, &HF6, &H61, &HA1, &H23)
MF_TOPONODE_WORKQUEUE_MMCSS_PRIORITY = iid
End Function
Public Function MF_TOPONODE_WORKQUEUE_ITEM_PRIORITY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA1FF99BE, &H5E97, &H4A53, &HB4, &H94, &H56, &H8C, &H64, &H2C, &HF, &HF3)
MF_TOPONODE_WORKQUEUE_ITEM_PRIORITY = iid
End Function
Public Function MF_TOPONODE_MARKIN_HERE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBD00, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_MARKIN_HERE = iid
End Function
Public Function MF_TOPONODE_MARKOUT_HERE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBD01, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_MARKOUT_HERE = iid
End Function
Public Function MF_TOPONODE_DECODER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H494BBD02, &HB031, &H4E38, &H97, &HC4, &HD5, &H42, &H2D, &HD6, &H18, &HDC)
MF_TOPONODE_DECODER = iid
End Function
Public Function MF_TOPONODE_MEDIASTART() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H835C58EA, &HE075, &H4BC7, &HBC, &HBA, &H4D, &HE0, &H0, &HDF, &H9A, &HE6)
MF_TOPONODE_MEDIASTART = iid
End Function
Public Function MF_TOPONODE_MEDIASTOP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H835C58EB, &HE075, &H4BC7, &HBC, &HBA, &H4D, &HE0, &H0, &HDF, &H9A, &HE6)
MF_TOPONODE_MEDIASTOP = iid
End Function
Public Function MF_TOPONODE_SOURCE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H835C58EC, &HE075, &H4BC7, &HBC, &HBA, &H4D, &HE0, &H0, &HDF, &H9A, &HE6)
MF_TOPONODE_SOURCE = iid
End Function
Public Function MF_TOPONODE_PRESENTATION_DESCRIPTOR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H835C58ED, &HE075, &H4BC7, &HBC, &HBA, &H4D, &HE0, &H0, &HDF, &H9A, &HE6)
MF_TOPONODE_PRESENTATION_DESCRIPTOR = iid
End Function
Public Function MF_TOPONODE_STREAM_DESCRIPTOR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H835C58EE, &HE075, &H4BC7, &HBC, &HBA, &H4D, &HE0, &H0, &HDF, &H9A, &HE6)
MF_TOPONODE_STREAM_DESCRIPTOR = iid
End Function
Public Function MF_TOPONODE_SEQUENCE_ELEMENTID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H835C58EF, &HE075, &H4BC7, &HBC, &HBA, &H4D, &HE0, &H0, &HDF, &H9A, &HE6)
MF_TOPONODE_SEQUENCE_ELEMENTID = iid
End Function
Public Function MF_TOPONODE_TRANSFORM_OBJECTID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H88DCC0C9, &H293E, &H4E8B, &H9A, &HEB, &HA, &HD6, &H4C, &HC0, &H16, &HB0)
MF_TOPONODE_TRANSFORM_OBJECTID = iid
End Function
Public Function MF_TOPONODE_STREAMID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H14932F9B, &H9087, &H4BB4, &H84, &H12, &H51, &H67, &H14, &H5C, &HBE, &H4)
MF_TOPONODE_STREAMID = iid
End Function
Public Function MF_TOPONODE_NOSHUTDOWN_ON_REMOVE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H14932F9C, &H9087, &H4BB4, &H84, &H12, &H51, &H67, &H14, &H5C, &HBE, &H4)
MF_TOPONODE_NOSHUTDOWN_ON_REMOVE = iid
End Function
Public Function MF_TOPONODE_RATELESS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H14932F9D, &H9087, &H4BB4, &H84, &H12, &H51, &H67, &H14, &H5C, &HBE, &H4)
MF_TOPONODE_RATELESS = iid
End Function
Public Function MF_TOPONODE_DISABLE_PREROLL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H14932F9E, &H9087, &H4BB4, &H84, &H12, &H51, &H67, &H14, &H5C, &HBE, &H4)
MF_TOPONODE_DISABLE_PREROLL = iid
End Function
Public Function MF_TOPONODE_PRIMARYOUTPUT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6304EF99, &H16B2, &H4EBE, &H9D, &H67, &HE4, &HC5, &H39, &HB3, &HA2, &H59)
MF_TOPONODE_PRIMARYOUTPUT = iid
End Function
Public Function MF_PD_PMPHOST_CONTEXT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D31, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_PMPHOST_CONTEXT = iid
End Function
Public Function MF_PD_APP_CONTEXT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D32, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_APP_CONTEXT = iid
End Function
Public Function MF_PD_DURATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D33, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_DURATION = iid
End Function
Public Function MF_PD_TOTAL_FILE_SIZE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D34, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_TOTAL_FILE_SIZE = iid
End Function
Public Function MF_PD_AUDIO_ENCODING_BITRATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D35, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_AUDIO_ENCODING_BITRATE = iid
End Function
Public Function MF_PD_VIDEO_ENCODING_BITRATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D36, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_VIDEO_ENCODING_BITRATE = iid
End Function
Public Function MF_PD_MIME_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D37, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_MIME_TYPE = iid
End Function
Public Function MF_PD_LAST_MODIFIED_TIME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D38, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_LAST_MODIFIED_TIME = iid
End Function
Public Function MF_PD_PLAYBACK_ELEMENT_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D39, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_PLAYBACK_ELEMENT_ID = iid
End Function
Public Function MF_PD_PREFERRED_LANGUAGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D3A, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_PREFERRED_LANGUAGE = iid
End Function
Public Function MF_PD_PLAYBACK_BOUNDARY_TIME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6C990D3B, &HBB8E, &H477A, &H85, &H98, &HD, &H5D, &H96, &HFC, &HD8, &H8A)
MF_PD_PLAYBACK_BOUNDARY_TIME = iid
End Function
Public Function MF_PD_AUDIO_ISVARIABLEBITRATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H33026EE0, &HE387, &H4582, &HAE, &HA, &H34, &HA2, &HAD, &H3B, &HAA, &H18)
MF_PD_AUDIO_ISVARIABLEBITRATE = iid
End Function
Public Function MF_SD_LANGUAGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAF2180, &HBDC2, &H423C, &HAB, &HCA, &HF5, &H3, &H59, &H3B, &HC1, &H21)
MF_SD_LANGUAGE = iid
End Function
Public Function MF_SD_PROTECTED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAF2181, &HBDC2, &H423C, &HAB, &HCA, &HF5, &H3, &H59, &H3B, &HC1, &H21)
MF_SD_PROTECTED = iid
End Function
Public Function MF_SD_STREAM_NAME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4F1B099D, &HD314, &H41E5, &HA7, &H81, &H7F, &HEF, &HAA, &H4C, &H50, &H1F)
MF_SD_STREAM_NAME = iid
End Function
Public Function MF_SD_MUTUALLY_EXCLUSIVE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H23EF79C, &H388D, &H487F, &HAC, &H17, &H69, &H6C, &HD6, &HE3, &HC6, &HF5)
MF_SD_MUTUALLY_EXCLUSIVE = iid
End Function
Public Function MF_ACTIVATE_CUSTOM_VIDEO_MIXER_CLSID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBA491360, &HBE50, &H451E, &H95, &HAB, &H6D, &H4A, &HCC, &HC7, &HDA, &HD8)
MF_ACTIVATE_CUSTOM_VIDEO_MIXER_CLSID = iid
End Function
Public Function MF_ACTIVATE_CUSTOM_VIDEO_MIXER_ACTIVATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBA491361, &HBE50, &H451E, &H95, &HAB, &H6D, &H4A, &HCC, &HC7, &HDA, &HD8)
MF_ACTIVATE_CUSTOM_VIDEO_MIXER_ACTIVATE = iid
End Function
Public Function MF_ACTIVATE_CUSTOM_VIDEO_MIXER_FLAGS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBA491362, &HBE50, &H451E, &H95, &HAB, &H6D, &H4A, &HCC, &HC7, &HDA, &HD8)
MF_ACTIVATE_CUSTOM_VIDEO_MIXER_FLAGS = iid
End Function
Public Function MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_CLSID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBA491364, &HBE50, &H451E, &H95, &HAB, &H6D, &H4A, &HCC, &HC7, &HDA, &HD8)
MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_CLSID = iid
End Function
Public Function MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_ACTIVATE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBA491365, &HBE50, &H451E, &H95, &HAB, &H6D, &H4A, &HCC, &HC7, &HDA, &HD8)
MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_ACTIVATE = iid
End Function
Public Function MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBA491366, &HBE50, &H451E, &H95, &HAB, &H6D, &H4A, &HCC, &HC7, &HDA, &HD8)
MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS = iid
End Function
Public Function MF_ACTIVATE_MFT_LOCKED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC1F6093C, &H7F65, &H4FBD, &H9E, &H39, &H5F, &HAE, &HC3, &HC4, &HFB, &HD7)
MF_ACTIVATE_MFT_LOCKED = iid
End Function
Public Function MF_ACTIVATE_VIDEO_WINDOW() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9A2DBBDD, &HF57E, &H4162, &H82, &HB9, &H68, &H31, &H37, &H76, &H82, &HD3)
MF_ACTIVATE_VIDEO_WINDOW = iid
End Function
Public Function MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEDE4B5E0, &HF805, &H4D6C, &H99, &HB3, &HDB, &H1, &HBF, &H95, &HDF, &HAB)
MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS = iid
End Function
Public Function MF_AUDIO_RENDERER_ATTRIBUTE_SESSION_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEDE4B5E3, &HF805, &H4D6C, &H99, &HB3, &HDB, &H1, &HBF, &H95, &HDF, &HAB)
MF_AUDIO_RENDERER_ATTRIBUTE_SESSION_ID = iid
End Function
Public Function MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB10AAEC3, &HEF71, &H4CC3, &HB8, &H73, &H5, &HA9, &HA0, &H8B, &H9F, &H8E)
MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ID = iid
End Function
Public Function MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ROLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6BA644FF, &H27C5, &H4D02, &H98, &H87, &HC2, &H86, &H19, &HFD, &HB9, &H1B)
MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ROLE = iid
End Function
Public Function MF_AUDIO_RENDERER_ATTRIBUTE_STREAM_CATEGORY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA9770471, &H92EC, &H4DF4, &H94, &HFE, &H81, &HC3, &H6F, &HC, &H3A, &H7A)
MF_AUDIO_RENDERER_ATTRIBUTE_STREAM_CATEGORY = iid
End Function
Public Function MFENABLETYPE_WMDRMV1_LicenseAcquisition() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4FF6EEAF, &HB43, &H4797, &H9B, &H85, &HAB, &HF3, &H18, &H15, &HE7, &HB0)
MFENABLETYPE_WMDRMV1_LicenseAcquisition = iid
End Function
Public Function MFENABLETYPE_WMDRMV7_LicenseAcquisition() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3306DF, &H4A06, &H4884, &HA0, &H97, &HEF, &H6D, &H22, &HEC, &H84, &HA3)
MFENABLETYPE_WMDRMV7_LicenseAcquisition = iid
End Function
Public Function MFENABLETYPE_WMDRMV7_Individualization() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HACD2C84A, &HB303, &H4F65, &HBC, &H2C, &H2C, &H84, &H8D, &H1, &HA9, &H89)
MFENABLETYPE_WMDRMV7_Individualization = iid
End Function
Public Function MFENABLETYPE_MF_UpdateRevocationInformation() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE558B0B5, &HB3C4, &H44A0, &H92, &H4C, &H50, &HD1, &H78, &H93, &H23, &H85)
MFENABLETYPE_MF_UpdateRevocationInformation = iid
End Function
Public Function MFENABLETYPE_MF_UpdateUntrustedComponent() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9879F3D6, &HCEE2, &H48E6, &HB5, &H73, &H97, &H67, &HAB, &H17, &H2F, &H16)
MFENABLETYPE_MF_UpdateUntrustedComponent = iid
End Function
Public Function MFENABLETYPE_MF_RebootRequired() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6D4D3D4B, &HECE, &H4652, &H8B, &H3A, &HF2, &HD2, &H42, &H60, &HD8, &H87)
MFENABLETYPE_MF_RebootRequired = iid
End Function
Public Function MF_METADATA_PROVIDER_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDB214084, &H58A4, &H4D2E, &HB8, &H4F, &H6F, &H75, &H5B, &H2F, &H7A, &HD)
MF_METADATA_PROVIDER_SERVICE = iid
End Function
Public Function MF_PROPERTY_HANDLER_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA3FACE02, &H32B8, &H41DD, &H90, &HE7, &H5F, &HEF, &H7C, &H89, &H91, &HB5)
MF_PROPERTY_HANDLER_SERVICE = iid
End Function
Public Function MF_RATE_CONTROL_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H866FA297, &HB802, &H4BF8, &H9D, &HC9, &H5E, &H3B, &H6A, &H9F, &H53, &HC9)
MF_RATE_CONTROL_SERVICE = iid
End Function
Public Function MF_TIMECODE_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA0D502A7, &HEB3, &H4885, &HB1, &HB9, &H9F, &HEB, &HD, &H8, &H34, &H54)
MF_TIMECODE_SERVICE = iid
End Function
Public Function MR_POLICY_VOLUME_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1ABAA2AC, &H9D3B, &H47C6, &HAB, &H48, &HC5, &H95, &H6, &HDE, &H78, &H4D)
MR_POLICY_VOLUME_SERVICE = iid
End Function
Public Function MR_CAPTURE_POLICY_VOLUME_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H24030ACD, &H107A, &H4265, &H97, &H5C, &H41, &H4E, &H33, &HE6, &H5F, &H2A)
MR_CAPTURE_POLICY_VOLUME_SERVICE = iid
End Function
Public Function MR_STREAM_VOLUME_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF8B5FA2F, &H32EF, &H46F5, &HB1, &H72, &H13, &H21, &H21, &H2F, &HB2, &HC4)
MR_STREAM_VOLUME_SERVICE = iid
End Function
Public Function MR_AUDIO_POLICY_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H911FD737, &H6775, &H4AB0, &HA6, &H14, &H29, &H78, &H62, &HFD, &HAC, &H88)
MR_AUDIO_POLICY_SERVICE = iid
End Function
Public Function MF_SAMPLEGRABBERSINK_SAMPLE_TIME_OFFSET() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H62E3D776, &H8100, &H4E03, &HA6, &HE8, &HBD, &H38, &H57, &HAC, &H9C, &H47)
MF_SAMPLEGRABBERSINK_SAMPLE_TIME_OFFSET = iid
End Function
Public Function MF_SAMPLEGRABBERSINK_IGNORE_CLOCK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEFDA2C0, &H2B69, &H4E2E, &HAB, &H8D, &H46, &HDC, &HBF, &HF7, &HD2, &H5D)
MF_SAMPLEGRABBERSINK_IGNORE_CLOCK = iid
End Function
Public Function MF_QUALITY_SERVICES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB7E2BE11, &H2F96, &H4640, &HB5, &H2C, &H28, &H23, &H65, &HBD, &HF1, &H6C)
MF_QUALITY_SERVICES = iid
End Function
Public Function MF_WORKQUEUE_SERVICES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8E37D489, &H41E0, &H413A, &H90, &H68, &H28, &H7C, &H88, &H6D, &H8D, &HDA)
MF_WORKQUEUE_SERVICES = iid
End Function
Public Function MF_QUALITY_NOTIFY_PROCESSING_LATENCY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF6B44AF8, &H604D, &H46FE, &HA9, &H5D, &H45, &H47, &H9B, &H10, &HC9, &HBC)
MF_QUALITY_NOTIFY_PROCESSING_LATENCY = iid
End Function
Public Function MF_QUALITY_NOTIFY_SAMPLE_LAG() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30D15206, &HED2A, &H4760, &HBE, &H17, &HEB, &H4A, &H9F, &H12, &H29, &H5C)
MF_QUALITY_NOTIFY_SAMPLE_LAG = iid
End Function
Public Function MF_TIME_FORMAT_SEGMENT_OFFSET() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC8B8BE77, &H869C, &H431D, &H81, &H2E, &H16, &H96, &H93, &HF6, &H5A, &H39)
MF_TIME_FORMAT_SEGMENT_OFFSET = iid
End Function
Public Function MF_SOURCE_PRESENTATION_PROVIDER_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE002AADC, &HF4AF, &H4EE5, &H98, &H47, &H5, &H3E, &HDF, &H84, &H4, &H26)
MF_SOURCE_PRESENTATION_PROVIDER_SERVICE = iid
End Function
Public Function MF_TOPONODE_ATTRIBUTE_EDITOR_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H65656E1A, &H77F, &H4472, &H83, &HEF, &H31, &H6F, &H11, &HD5, &H8, &H7A)
MF_TOPONODE_ATTRIBUTE_EDITOR_SERVICE = iid
End Function
Public Function MFNETSOURCE_SSLCERTIFICATE_MANAGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H55E6CB27, &HE69B, &H4267, &H94, &HC, &H2D, &H7E, &HC5, &HBB, &H8A, &HF)
MFNETSOURCE_SSLCERTIFICATE_MANAGER = iid
End Function
Public Function MFNETSOURCE_RESOURCE_FILTER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H815D0FF6, &H265A, &H4477, &H9E, &H46, &H7B, &H80, &HAD, &H80, &HB5, &HFB)
MFNETSOURCE_RESOURCE_FILTER = iid
End Function
Public Function MFNET_SAVEJOB_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HB85A587F, &H3D02, &H4E52, &H95, &H65, &H55, &HD3, &HEC, &H1E, &H7F, &HF7)
MFNET_SAVEJOB_SERVICE = iid
End Function
Public Function MFNETSOURCE_STATISTICS_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F275, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_STATISTICS_SERVICE = iid
End Function
Public Function MFNETSOURCE_STATISTICS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F274, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_STATISTICS = iid
End Function
Public Function MFNETSOURCE_BUFFERINGTIME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F276, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_BUFFERINGTIME = iid
End Function
Public Function MFNETSOURCE_ACCELERATEDSTREAMINGDURATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F277, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_ACCELERATEDSTREAMINGDURATION = iid
End Function
Public Function MFNETSOURCE_MAXUDPACCELERATEDSTREAMINGDURATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4AAB2879, &HBBE1, &H4994, &H9F, &HF0, &H54, &H95, &HBD, &H25, &H1, &H29)
MFNETSOURCE_MAXUDPACCELERATEDSTREAMINGDURATION = iid
End Function
Public Function MFNETSOURCE_MAXBUFFERTIMEMS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H408B24E6, &H4038, &H4401, &HB5, &HB2, &HFE, &H70, &H1A, &H9E, &HBF, &H10)
MFNETSOURCE_MAXBUFFERTIMEMS = iid
End Function
Public Function MFNETSOURCE_CONNECTIONBANDWIDTH() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F278, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_CONNECTIONBANDWIDTH = iid
End Function
Public Function MFNETSOURCE_CACHEENABLED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F279, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_CACHEENABLED = iid
End Function
Public Function MFNETSOURCE_AUTORECONNECTLIMIT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F27A, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_AUTORECONNECTLIMIT = iid
End Function
Public Function MFNETSOURCE_RESENDSENABLED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F27B, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_RESENDSENABLED = iid
End Function
Public Function MFNETSOURCE_THINNINGENABLED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F27C, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_THINNINGENABLED = iid
End Function
Public Function MFNETSOURCE_PROTOCOL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F27D, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PROTOCOL = iid
End Function
Public Function MFNETSOURCE_TRANSPORT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F27E, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_TRANSPORT = iid
End Function
Public Function MFNETSOURCE_PREVIEWMODEENABLED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F27F, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PREVIEWMODEENABLED = iid
End Function
Public Function MFNETSOURCE_CREDENTIAL_MANAGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F280, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_CREDENTIAL_MANAGER = iid
End Function
Public Function MFNETSOURCE_PPBANDWIDTH() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F281, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PPBANDWIDTH = iid
End Function
Public Function MFNETSOURCE_AUTORECONNECTPROGRESS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F282, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_AUTORECONNECTPROGRESS = iid
End Function
Public Function MFNETSOURCE_PROXYLOCATORFACTORY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F283, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PROXYLOCATORFACTORY = iid
End Function
Public Function MFNETSOURCE_BROWSERUSERAGENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F28B, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_BROWSERUSERAGENT = iid
End Function
Public Function MFNETSOURCE_BROWSERWEBPAGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F28C, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_BROWSERWEBPAGE = iid
End Function
Public Function MFNETSOURCE_PLAYERVERSION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F28D, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PLAYERVERSION = iid
End Function
Public Function MFNETSOURCE_PLAYERID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F28E, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PLAYERID = iid
End Function
Public Function MFNETSOURCE_HOSTEXE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F28F, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_HOSTEXE = iid
End Function
Public Function MFNETSOURCE_HOSTVERSION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F291, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_HOSTVERSION = iid
End Function
Public Function MFNETSOURCE_PLAYERUSERAGENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F292, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PLAYERUSERAGENT = iid
End Function
Public Function MFNETSOURCE_CLIENTGUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H60A2C4A6, &HF197, &H4C14, &HA5, &HBF, &H88, &H83, &HD, &H24, &H58, &HAF)
MFNETSOURCE_CLIENTGUID = iid
End Function
Public Function MFNETSOURCE_LOGURL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F293, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_LOGURL = iid
End Function
Public Function MFNETSOURCE_ENABLE_UDP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F294, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_ENABLE_UDP = iid
End Function
Public Function MFNETSOURCE_ENABLE_TCP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F295, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_ENABLE_TCP = iid
End Function
Public Function MFNETSOURCE_ENABLE_MSB() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F296, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_ENABLE_MSB = iid
End Function
Public Function MFNETSOURCE_ENABLE_RTSP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F298, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_ENABLE_RTSP = iid
End Function
Public Function MFNETSOURCE_ENABLE_HTTP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F299, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_ENABLE_HTTP = iid
End Function
Public Function MFNETSOURCE_ENABLE_STREAMING() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F29C, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_ENABLE_STREAMING = iid
End Function
Public Function MFNETSOURCE_ENABLE_DOWNLOAD() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F29D, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_ENABLE_DOWNLOAD = iid
End Function
Public Function MFNETSOURCE_ENABLE_PRIVATEMODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H824779D8, &HF18B, &H4405, &H8C, &HF1, &H46, &H4F, &HB5, &HAA, &H8F, &H71)
MFNETSOURCE_ENABLE_PRIVATEMODE = iid
End Function
Public Function MFNETSOURCE_UDP_PORT_RANGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F29A, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_UDP_PORT_RANGE = iid
End Function
Public Function MFNETSOURCE_PROXYINFO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F29B, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PROXYINFO = iid
End Function
Public Function MFNETSOURCE_DRMNET_LICENSE_REPRESENTATION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H47EAE1BD, &HBDFE, &H42E2, &H82, &HF3, &H54, &HA4, &H8C, &H17, &H96, &H2D)
MFNETSOURCE_DRMNET_LICENSE_REPRESENTATION = iid
End Function
Public Function MFNETSOURCE_PROXYSETTINGS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F287, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PROXYSETTINGS = iid
End Function
Public Function MFNETSOURCE_PROXYHOSTNAME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F284, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PROXYHOSTNAME = iid
End Function
Public Function MFNETSOURCE_PROXYPORT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F288, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PROXYPORT = iid
End Function
Public Function MFNETSOURCE_PROXYEXCEPTIONLIST() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F285, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PROXYEXCEPTIONLIST = iid
End Function
Public Function MFNETSOURCE_PROXYBYPASSFORLOCAL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F286, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PROXYBYPASSFORLOCAL = iid
End Function
Public Function MFNETSOURCE_PROXYRERUNAUTODETECTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CB1F289, &H505, &H4C5D, &HAE, &H71, &HA, &H55, &H63, &H44, &HEF, &HA1)
MFNETSOURCE_PROXYRERUNAUTODETECTION = iid
End Function
Public Function MFNETSOURCE_STREAM_LANGUAGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9AB44318, &HF7CD, &H4F2D, &H8D, &H6D, &HFA, &H35, &HB4, &H92, &HCE, &HCB)
MFNETSOURCE_STREAM_LANGUAGE = iid
End Function
Public Function MFNETSOURCE_LOGPARAMS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H64936AE8, &H9418, &H453A, &H8C, &HDA, &H3E, &HA, &H66, &H8B, &H35, &H3B)
MFNETSOURCE_LOGPARAMS = iid
End Function
Public Function MFNETSOURCE_PEERMANAGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H48B29ADB, &HFEBF, &H45EE, &HA9, &HBF, &HEF, &HB8, &H1C, &H49, &H2E, &HFC)
MFNETSOURCE_PEERMANAGER = iid
End Function
Public Function MFNETSOURCE_FRIENDLYNAME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5B2A7757, &HBC6B, &H447E, &HAA, &H6, &HD, &HDA, &H1C, &H64, &H6E, &H2F)
MFNETSOURCE_FRIENDLYNAME = iid
End Function
Public Function MF_BYTESTREAMHANDLER_ACCEPTS_SHARE_WRITE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA6E1F733, &H3001, &H4915, &H81, &H50, &H15, &H58, &HA2, &H18, &HE, &HC8)
MF_BYTESTREAMHANDLER_ACCEPTS_SHARE_WRITE = iid
End Function
Public Function MF_BYTESTREAM_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAB025E2B, &H16D9, &H4180, &HA1, &H27, &HBA, &H6C, &H70, &H15, &H61, &H61)
MF_BYTESTREAM_SERVICE = iid
End Function
Public Function MF_MEDIA_PROTECTION_MANAGER_PROPERTIES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H38BD81A9, &HACEA, &H4C73, &H89, &HB2, &H55, &H32, &HC0, &HAE, &HCA, &H79)
MF_MEDIA_PROTECTION_MANAGER_PROPERTIES = iid
End Function
Public Function MFCONNECTOR_UNKNOWN() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAC3AEF5C, &HCE43, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_UNKNOWN = iid
End Function
Public Function MFCONNECTOR_PCI() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAC3AEF5D, &HCE43, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_PCI = iid
End Function
Public Function MFCONNECTOR_PCIX() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAC3AEF5E, &HCE43, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_PCIX = iid
End Function
Public Function MFCONNECTOR_PCI_Express() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAC3AEF5F, &HCE43, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_PCI_Express = iid
End Function
Public Function MFCONNECTOR_AGP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAC3AEF60, &HCE43, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_AGP = iid
End Function
Public Function MFCONNECTOR_VGA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD5968, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_VGA = iid
End Function
Public Function MFCONNECTOR_SVIDEO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD5969, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_SVIDEO = iid
End Function
Public Function MFCONNECTOR_COMPOSITE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD596A, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_COMPOSITE = iid
End Function
Public Function MFCONNECTOR_COMPONENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD596B, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_COMPONENT = iid
End Function
Public Function MFCONNECTOR_DVI() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD596C, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_DVI = iid
End Function
Public Function MFCONNECTOR_HDMI() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD596D, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_HDMI = iid
End Function
Public Function MFCONNECTOR_LVDS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD596E, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_LVDS = iid
End Function
Public Function MFCONNECTOR_D_JPN() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD5970, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_D_JPN = iid
End Function
Public Function MFCONNECTOR_SDI() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD5971, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_SDI = iid
End Function
Public Function MFCONNECTOR_DISPLAYPORT_EXTERNAL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD5972, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_DISPLAYPORT_EXTERNAL = iid
End Function
Public Function MFCONNECTOR_DISPLAYPORT_EMBEDDED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD5973, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_DISPLAYPORT_EMBEDDED = iid
End Function
Public Function MFCONNECTOR_UDI_EXTERNAL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD5974, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_UDI_EXTERNAL = iid
End Function
Public Function MFCONNECTOR_UDI_EMBEDDED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD5975, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_UDI_EMBEDDED = iid
End Function
Public Function MFCONNECTOR_MIRACAST() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H57CD5977, &HCE47, &H11D9, &H92, &HDB, &H0, &HB, &HDB, &H28, &HFF, &H98)
MFCONNECTOR_MIRACAST = iid
End Function
Public Function MFPROTECTION_DISABLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8CC6D81B, &HFEC6, &H4D8F, &H96, &H4B, &HCF, &HBA, &HB, &HD, &HAD, &HD)
MFPROTECTION_DISABLE = iid
End Function
Public Function MFPROTECTION_CONSTRICTVIDEO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H193370CE, &HC5E4, &H4C3A, &H8A, &H66, &H69, &H59, &HB4, &HDA, &H44, &H42)
MFPROTECTION_CONSTRICTVIDEO = iid
End Function
Public Function MFPROTECTION_CONSTRICTVIDEO_NOOPM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA580E8CD, &HC247, &H4957, &HB9, &H83, &H3C, &H2E, &HEB, &HD1, &HFF, &H59)
MFPROTECTION_CONSTRICTVIDEO_NOOPM = iid
End Function
Public Function MFPROTECTION_CONSTRICTAUDIO() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HFFC99B44, &HDF48, &H4E16, &H8E, &H66, &H9, &H68, &H92, &HC1, &H57, &H8A)
MFPROTECTION_CONSTRICTAUDIO = iid
End Function
Public Function MFPROTECTION_TRUSTEDAUDIODRIVERS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H65BDF3D2, &H168, &H4816, &HA5, &H33, &H55, &HD4, &H7B, &H2, &H71, &H1)
MFPROTECTION_TRUSTEDAUDIODRIVERS = iid
End Function
Public Function MFPROTECTION_HDCP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAE7CC03D, &HC828, &H4021, &HAC, &HB7, &HD5, &H78, &HD2, &H7A, &HAF, &H13)
MFPROTECTION_HDCP = iid
End Function
Public Function MFPROTECTION_CGMSA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE57E69E9, &H226B, &H4D31, &HB4, &HE3, &HD3, &HDB, &H0, &H87, &H36, &HDD)
MFPROTECTION_CGMSA = iid
End Function
Public Function MFPROTECTION_ACP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC3FD11C6, &HF8B7, &H4D20, &HB0, &H8, &H1D, &HB1, &H7D, &H61, &HF2, &HDA)
MFPROTECTION_ACP = iid
End Function
Public Function MFPROTECTION_WMDRMOTA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA267A6A1, &H362E, &H47D0, &H88, &H5, &H46, &H28, &H59, &H8A, &H23, &HE4)
MFPROTECTION_WMDRMOTA = iid
End Function
Public Function MFPROTECTION_FFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H462A56B2, &H2866, &H4BB6, &H98, &HD, &H6D, &H8D, &H9E, &HDB, &H1A, &H8C)
MFPROTECTION_FFT = iid
End Function
Public Function MFPROTECTION_PROTECTED_SURFACE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4F5D9566, &HE742, &H4A25, &H8D, &H1F, &HD2, &H87, &HB5, &HFA, &HA, &HDE)
MFPROTECTION_PROTECTED_SURFACE = iid
End Function
Public Function MFPROTECTION_DISABLE_SCREEN_SCRAPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA21179A4, &HB7CD, &H40D8, &H96, &H14, &H8E, &HF2, &H37, &H1B, &HA7, &H8D)
MFPROTECTION_DISABLE_SCREEN_SCRAPE = iid
End Function
Public Function MFPROTECTION_VIDEO_FRAMES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36A59CBC, &H7401, &H4A8C, &HBC, &H20, &H46, &HA7, &HC9, &HE5, &H97, &HF0)
MFPROTECTION_VIDEO_FRAMES = iid
End Function
Public Function MFPROTECTION_HARDWARE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4EE7F0C1, &H9ED7, &H424F, &HB6, &HBE, &H99, &H6B, &H33, &H52, &H88, &H56)
MFPROTECTION_HARDWARE = iid
End Function
Public Function MFPROTECTION_HDCP_WITH_TYPE_ENFORCEMENT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA4A585E8, &HED60, &H442D, &H81, &H4D, &HDB, &H4D, &H42, &H20, &HA0, &H6D)
MFPROTECTION_HDCP_WITH_TYPE_ENFORCEMENT = iid
End Function
Public Function MFPROTECTIONATTRIBUTE_BEST_EFFORT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC8E06331, &H75F0, &H4EC1, &H8E, &H77, &H17, &H57, &H8F, &H77, &H3B, &H46)
MFPROTECTIONATTRIBUTE_BEST_EFFORT = iid
End Function
Public Function MFPROTECTIONATTRIBUTE_FAIL_OVER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8536ABC5, &H38F1, &H4151, &H9C, &HCE, &HF5, &H5D, &H94, &H12, &H29, &HAC)
MFPROTECTIONATTRIBUTE_FAIL_OVER = iid
End Function
Public Function MFPROTECTION_GRAPHICS_TRANSFER_AES_ENCRYPTION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC873DE64, &HD8A5, &H49E6, &H88, &HBB, &HFB, &H96, &H3F, &HD3, &HD4, &HCE)
MFPROTECTION_GRAPHICS_TRANSFER_AES_ENCRYPTION = iid
End Function
Public Function MFPROTECTIONATTRIBUTE_CONSTRICTVIDEO_IMAGESIZE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8476FC, &H4B58, &H4D80, &HA7, &H90, &HE7, &H29, &H76, &H73, &H16, &H1D)
MFPROTECTIONATTRIBUTE_CONSTRICTVIDEO_IMAGESIZE = iid
End Function
Public Function MFPROTECTIONATTRIBUTE_HDCP_SRM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6F302107, &H3477, &H4468, &H8A, &H8, &HEE, &HF9, &HDB, &H10, &HE2, &HF)
MFPROTECTIONATTRIBUTE_HDCP_SRM = iid
End Function
Public Function MF_SampleProtectionSalt() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H5403DEEE, &HB9EE, &H438F, &HAA, &H83, &H38, &H4, &H99, &H7E, &H56, &H9D)
MF_SampleProtectionSalt = iid
End Function
Public Function MF_REMOTE_PROXY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2F00C90E, &HD2CF, &H4278, &H8B, &H6A, &HD0, &H77, &HFA, &HC3, &HA2, &H5F)
MF_REMOTE_PROXY = iid
End Function
Public Function CLSID_CreateMediaExtensionObject() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HEF65A54D, &H788, &H45B8, &H8B, &H14, &HBC, &HF, &H6A, &H6B, &H51, &H37)
CLSID_CreateMediaExtensionObject = iid
End Function
Public Function MF_SAMI_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H49A89AE7, &HB4D9, &H4EF2, &HAA, &H5C, &HF6, &H5A, &H3E, &H5, &HAE, &H4E)
MF_SAMI_SERVICE = iid
End Function
Public Function MF_PD_SAMI_STYLELIST() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE0B73C7F, &H486D, &H484E, &H98, &H72, &H4D, &HE5, &H19, &H2A, &H7B, &HF8)
MF_PD_SAMI_STYLELIST = iid
End Function
Public Function MF_SD_SAMI_LANGUAGE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H36FCB98A, &H6CD0, &H44CB, &HAC, &HB9, &HA8, &HF5, &H60, &HD, &HD0, &HBB)
MF_SD_SAMI_LANGUAGE = iid
End Function
Public Function MF_TRANSCODE_CONTAINERTYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H150FF23F, &H4ABC, &H478B, &HAC, &H4F, &HE1, &H91, &H6F, &HBA, &H1C, &HCA)
MF_TRANSCODE_CONTAINERTYPE = iid
End Function
Public Function MFTranscodeContainerType_ASF() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H430F6F6E, &HB6BF, &H4FC1, &HA0, &HBD, &H9E, &HE4, &H6E, &HEE, &H2A, &HFB)
MFTranscodeContainerType_ASF = iid
End Function
Public Function MFTranscodeContainerType_MPEG4() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDC6CD05D, &HB9D0, &H40EF, &HBD, &H35, &HFA, &H62, &H2C, &H1A, &HB2, &H8A)
MFTranscodeContainerType_MPEG4 = iid
End Function
Public Function MFTranscodeContainerType_MP3() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE438B912, &H83F1, &H4DE6, &H9E, &H3A, &H9F, &HFB, &HC6, &HDD, &H24, &HD1)
MFTranscodeContainerType_MP3 = iid
End Function
Public Function MFTranscodeContainerType_FLAC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31344AA3, &H5A9, &H42B5, &H90, &H1B, &H8E, &H9D, &H42, &H57, &HF7, &H5E)
MFTranscodeContainerType_FLAC = iid
End Function
Public Function MFTranscodeContainerType_3GP() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H34C50167, &H4472, &H4F34, &H9E, &HA0, &HC4, &H9F, &HBA, &HCF, &H3, &H7D)
MFTranscodeContainerType_3GP = iid
End Function
Public Function MFTranscodeContainerType_AC3() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6D8D91C3, &H8C91, &H4ED1, &H87, &H42, &H8C, &H34, &H7D, &H5B, &H44, &HD0)
MFTranscodeContainerType_AC3 = iid
End Function
Public Function MFTranscodeContainerType_ADTS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H132FD27D, &HF02, &H43DE, &HA3, &H1, &H38, &HFB, &HBB, &HB3, &H83, &H4E)
MFTranscodeContainerType_ADTS = iid
End Function
Public Function MFTranscodeContainerType_MPEG2() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBFC2DBF9, &H7BB4, &H4F8F, &HAF, &HDE, &HE1, &H12, &HC4, &H4B, &HA8, &H82)
MFTranscodeContainerType_MPEG2 = iid
End Function
Public Function MFTranscodeContainerType_WAVE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H64C3453C, &HF26, &H4741, &HBE, &H63, &H87, &HBD, &HF8, &HBB, &H93, &H5B)
MFTranscodeContainerType_WAVE = iid
End Function
Public Function MFTranscodeContainerType_AVI() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7EDFE8AF, &H402F, &H4D76, &HA3, &H3C, &H61, &H9F, &HD1, &H57, &HD0, &HF1)
MFTranscodeContainerType_AVI = iid
End Function
Public Function MFTranscodeContainerType_FMPEG4() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9BA876F1, &H419F, &H4B77, &HA1, &HE0, &H35, &H95, &H9D, &H9D, &H40, &H4)
MFTranscodeContainerType_FMPEG4 = iid
End Function
Public Function MFTranscodeContainerType_AMR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H25D5AD3, &H621A, &H475B, &H96, &H4D, &H66, &HB1, &HC8, &H24, &HF0, &H79)
MFTranscodeContainerType_AMR = iid
End Function
Public Function MF_TRANSCODE_SKIP_METADATA_TRANSFER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4E4469EF, &HB571, &H4959, &H8F, &H83, &H3D, &HCF, &HBA, &H33, &HA3, &H93)
MF_TRANSCODE_SKIP_METADATA_TRANSFER = iid
End Function
Public Function MF_TRANSCODE_TOPOLOGYMODE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3E3DF610, &H394A, &H40B2, &H9D, &HEA, &H3B, &HAB, &H65, &HB, &HEB, &HF2)
MF_TRANSCODE_TOPOLOGYMODE = iid
End Function
Public Function MF_TRANSCODE_ADJUST_PROFILE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9C37C21B, &H60F, &H487C, &HA6, &H90, &H80, &HD7, &HF5, &HD, &H1C, &H72)
MF_TRANSCODE_ADJUST_PROFILE = iid
End Function
Public Function MF_TRANSCODE_ENCODINGPROFILE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6947787C, &HF508, &H4EA9, &HB1, &HE9, &HA1, &HFE, &H3A, &H49, &HFB, &HC9)
MF_TRANSCODE_ENCODINGPROFILE = iid
End Function
Public Function MF_TRANSCODE_QUALITYVSSPEED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H98332DF8, &H3CD, &H476B, &H89, &HFA, &H3F, &H9E, &H44, &H2D, &HEC, &H9F)
MF_TRANSCODE_QUALITYVSSPEED = iid
End Function
Public Function MF_TRANSCODE_DONOT_INSERT_ENCODER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF45AA7CE, &HAB24, &H4012, &HA1, &H1B, &HDC, &H82, &H20, &H20, &H14, &H10)
MF_TRANSCODE_DONOT_INSERT_ENCODER = iid
End Function
Public Function MF_VIDEO_PROCESSOR_ALGORITHM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4A0A1E1F, &H272C, &H4FB6, &H9E, &HB1, &HDB, &H33, &HC, &HBC, &H97, &HCA)
MF_VIDEO_PROCESSOR_ALGORITHM = iid
End Function
Public Function MF_XVP_DISABLE_FRC() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2C0AFA19, &H7A97, &H4D5A, &H9E, &HE8, &H16, &HD4, &HFC, &H51, &H8D, &H8C)
MF_XVP_DISABLE_FRC = iid
End Function
Public Function MF_XVP_CALLER_ALLOCATES_OUTPUT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4A2CABC, &HCAB, &H40B1, &HA1, &HB9, &H75, &HBC, &H36, &H58, &HF0, &H0)
MF_XVP_CALLER_ALLOCATES_OUTPUT = iid
End Function
Public Function CLSID_VideoProcessorMFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H88753B26, &H5B24, &H49BD, &HB2, &HE7, &HC, &H44, &H5C, &H78, &HC9, &H82)
CLSID_VideoProcessorMFT = iid
End Function
Public Function MF_LOCAL_MFT_REGISTRATION_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDDF5CF9C, &H4506, &H45AA, &HAB, &HF0, &H6D, &H5D, &H94, &HDD, &H1B, &H4A)
MF_LOCAL_MFT_REGISTRATION_SERVICE = iid
End Function
Public Function MF_WRAPPED_SAMPLE_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H31F52BF2, &HD03E, &H4048, &H80, &HD0, &H9C, &H10, &H46, &HD8, &H7C, &H61)
MF_WRAPPED_SAMPLE_SERVICE = iid
End Function
Public Function MF_WRAPPED_OBJECT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2B182C4C, &HD6AC, &H49F4, &H89, &H15, &HF7, &H18, &H87, &HDB, &H70, &HCD)
MF_WRAPPED_OBJECT = iid
End Function
Public Function CLSID_HttpSchemePlugin() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H44CB442B, &H9DA9, &H49DF, &HB3, &HFD, &H2, &H37, &H77, &HB1, &H6E, &H50)
CLSID_HttpSchemePlugin = iid
End Function
Public Function CLSID_UrlmonSchemePlugin() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9EC4B4F9, &H3029, &H45AD, &H94, &H7B, &H34, &H4D, &HE2, &HA2, &H49, &HE2)
CLSID_UrlmonSchemePlugin = iid
End Function
Public Function CLSID_NetSchemePlugin() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE9F4EBAB, &HD97B, &H463E, &HA2, &HB1, &HC5, &H4E, &HE3, &HF9, &H41, &H4D)
CLSID_NetSchemePlugin = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HC60AC5FE, &H252A, &H478F, &HA0, &HEF, &HBC, &H8F, &HA5, &HF7, &HCA, &HD3)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_HW_SOURCE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HDE7046BA, &H54D6, &H4487, &HA2, &HA4, &HEC, &H7C, &HD, &H1B, &HD1, &H63)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_HW_SOURCE = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_FRIENDLY_NAME() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H60D0E559, &H52F8, &H4FA2, &HBB, &HCE, &HAC, &HDB, &H34, &HA8, &HEC, &H1)
MF_DEVSOURCE_ATTRIBUTE_FRIENDLY_NAME = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_MEDIA_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H56A819CA, &HC78, &H4DE4, &HA0, &HA7, &H3D, &HDA, &HBA, &HF, &H24, &HD4)
MF_DEVSOURCE_ATTRIBUTE_MEDIA_TYPE = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H77F0AE69, &HC3BD, &H4509, &H94, &H1D, &H46, &H7E, &H4D, &H24, &H89, &H9E)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H58F0AAD8, &H22BF, &H4F8A, &HBB, &H3D, &HD2, &HC4, &H97, &H8C, &H6E, &H2F)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_SYMBOLIC_LINK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H98D24B5E, &H5930, &H4614, &HB5, &HA1, &HF6, &H0, &HF9, &H35, &H5A, &H78)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_SYMBOLIC_LINK = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_MAX_BUFFERS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7DD9B730, &H4F2D, &H41D5, &H8F, &H95, &HC, &HC9, &HA9, &H12, &HBA, &H26)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_MAX_BUFFERS = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H30DA9258, &HFEB9, &H47A7, &HA4, &H53, &H76, &H3A, &H7A, &H8E, &H1C, &H5F)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBC9D118E, &H8C67, &H4A18, &H85, &HD4, &H12, &HD3, &H0, &H40, &H5, &H52)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_GUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H14DD9A1C, &H7CFF, &H41BE, &HB1, &HB9, &HBA, &H1A, &HC6, &HEC, &HB5, &H71)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_GUID = iid
End Function
Public Function MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_GUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8AC3587A, &H4AE7, &H42D8, &H99, &HE0, &HA, &H60, &H13, &HEE, &HF9, &HF)
MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_GUID = iid
End Function
Public Function MF_DEVICESTREAM_IMAGE_STREAM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HA7FFB865, &HE7B2, &H43B0, &H9F, &H6F, &H9A, &HF2, &HA0, &HE5, &HF, &HC0)
MF_DEVICESTREAM_IMAGE_STREAM = iid
End Function
Public Function MF_DEVICESTREAM_INDEPENDENT_IMAGE_STREAM() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3EEEC7E, &HD605, &H4576, &H8B, &H29, &H65, &H80, &HB4, &H90, &HD7, &HD3)
MF_DEVICESTREAM_INDEPENDENT_IMAGE_STREAM = iid
End Function
Public Function MF_DEVICESTREAM_STREAM_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H11BD5120, &HD124, &H446B, &H88, &HE6, &H17, &H6, &H2, &H57, &HFF, &HF9)
MF_DEVICESTREAM_STREAM_ID = iid
End Function
Public Function MF_DEVICESTREAM_STREAM_CATEGORY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2939E7B8, &HA62E, &H4579, &HB6, &H74, &HD4, &H7, &H3D, &HFA, &HBB, &HBA)
MF_DEVICESTREAM_STREAM_CATEGORY = iid
End Function
Public Function MF_DEVICESTREAM_TRANSFORM_STREAM_ID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE63937B7, &HDAAF, &H4D49, &H81, &H5F, &HD8, &H26, &HF8, &HAD, &H31, &HE7)
MF_DEVICESTREAM_TRANSFORM_STREAM_ID = iid
End Function
Public Function MF_DEVICESTREAM_EXTENSION_PLUGIN_CLSID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H48E6558, &H60C4, &H4173, &HBD, &H5B, &H6A, &H3C, &HA2, &H89, &H6A, &HEE)
MF_DEVICESTREAM_EXTENSION_PLUGIN_CLSID = iid
End Function
Public Function MF_DEVICEMFT_EXTENSION_PLUGIN_CLSID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H844DBAE, &H34FA, &H48A0, &HA7, &H83, &H8E, &H69, &H6F, &HB1, &HC9, &HA8)
MF_DEVICEMFT_EXTENSION_PLUGIN_CLSID = iid
End Function
Public Function MF_DEVICESTREAM_EXTENSION_PLUGIN_CONNECTION_POINT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H37F9375C, &HE664, &H4EA4, &HAA, &HE4, &HCB, &H6D, &H1D, &HAC, &HA1, &HF4)
MF_DEVICESTREAM_EXTENSION_PLUGIN_CONNECTION_POINT = iid
End Function
Public Function MF_DEVICESTREAM_TAKEPHOTO_TRIGGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1D180E34, &H538C, &H4FBB, &HA7, &H5A, &H85, &H9A, &HF7, &HD2, &H61, &HA6)
MF_DEVICESTREAM_TAKEPHOTO_TRIGGER = iid
End Function
Public Function MF_DEVICESTREAM_MAX_FRAME_BUFFERS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1684CEBE, &H3175, &H4985, &H88, &H2C, &HE, &HFD, &H3E, &H8A, &HC1, &H1E)
MF_DEVICESTREAM_MAX_FRAME_BUFFERS = iid
End Function
Public Function MF_DEVICEMFT_CONNECTED_FILTER_KSCONTROL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6A2C4FA6, &HD179, &H41CD, &H95, &H23, &H82, &H23, &H71, &HEA, &H40, &HE5)
MF_DEVICEMFT_CONNECTED_FILTER_KSCONTROL = iid
End Function
Public Function MF_DEVICEMFT_CONNECTED_PIN_KSCONTROL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE63310F7, &HB244, &H4EF8, &H9A, &H7D, &H24, &HC7, &H4E, &H32, &HEB, &HD0)
MF_DEVICEMFT_CONNECTED_PIN_KSCONTROL = iid
End Function
Public Function MF_DEVICE_THERMAL_STATE_CHANGED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H70CCD0AF, &HFC9F, &H4DEB, &HA8, &H75, &H9F, &HEC, &HD1, &H6C, &H5B, &HD4)
MF_DEVICE_THERMAL_STATE_CHANGED = iid
End Function
Public Function MFSampleExtension_DeviceTimestamp() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8F3E35E7, &H2DCD, &H4887, &H86, &H22, &H2A, &H58, &HBA, &HA6, &H52, &HB0)
MFSampleExtension_DeviceTimestamp = iid
End Function
Public Function MFSampleExtension_Spatial_CameraViewTransform() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H4E251FA4, &H830F, &H4770, &H85, &H9A, &H4B, &H8D, &H99, &HAA, &H80, &H9B)
MFSampleExtension_Spatial_CameraViewTransform = iid
End Function
Public Function MFSampleExtension_Spatial_CameraCoordinateSystem() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9D13C82F, &H2199, &H4E67, &H91, &HCD, &HD1, &HA4, &H18, &H1F, &H25, &H34)
MFSampleExtension_Spatial_CameraCoordinateSystem = iid
End Function
Public Function MFSampleExtension_Spatial_CameraProjectionTransform() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H47F9FCB5, &H2A02, &H4F26, &HA4, &H77, &H79, &H2F, &HDF, &H95, &H88, &H6A)
MFSampleExtension_Spatial_CameraProjectionTransform = iid
End Function
Public Function CLSID_MPEG2ByteStreamPlugin() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H40871C59, &HAB40, &H471F, &H8D, &HC3, &H1F, &H25, &H9D, &H86, &H24, &H79)
CLSID_MPEG2ByteStreamPlugin = iid
End Function
Public Function MF_MEDIASOURCE_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF09992F7, &H9FBA, &H4C4A, &HA3, &H7F, &H8C, &H47, &HB4, &HE1, &HDF, &HE7)
MF_MEDIASOURCE_SERVICE = iid
End Function
Public Function MF_ACCESS_CONTROLLED_MEDIASOURCE_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H14A5031, &H2F05, &H4C6A, &H9F, &H9C, &H7D, &HD, &HC4, &HED, &HA5, &HF4)
MF_ACCESS_CONTROLLED_MEDIASOURCE_SERVICE = iid
End Function
Public Function MF_WRAPPED_BUFFER_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HAB544072, &HC269, &H4EBC, &HA5, &H52, &H1C, &H3B, &H32, &HBE, &HD5, &HCA)
MF_WRAPPED_BUFFER_SERVICE = iid
End Function
Public Function MF_CONTENT_DECRYPTOR_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H68A72927, &HFC7B, &H44EE, &H85, &HF4, &H7C, &H51, &HBD, &H55, &HA6, &H59)
MF_CONTENT_DECRYPTOR_SERVICE = iid
End Function
Public Function MF_CONTENT_PROTECTION_DEVICE_SERVICE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HFF58436F, &H76A0, &H41FE, &HB5, &H66, &H10, &HCC, &H53, &H96, &H2E, &HDD)
MF_CONTENT_PROTECTION_DEVICE_SERVICE = iid
End Function
Public Function MF_SD_AUDIO_ENCODER_DELAY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H8E85422C, &H73DE, &H403F, &H9A, &H35, &H55, &HA, &HD6, &HE8, &HB9, &H51)
MF_SD_AUDIO_ENCODER_DELAY = iid
End Function
Public Function MF_SD_AUDIO_ENCODER_PADDING() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H529C7F2C, &HAC4B, &H4E3F, &HBF, &HC3, &H9, &H2, &H19, &H49, &H82, &HCB)
MF_SD_AUDIO_ENCODER_PADDING = iid
End Function
Public Function CLSID_MSH264DecoderMFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H62CE7E72, &H4C71, &H4D20, &HB1, &H5D, &H45, &H28, &H31, &HA8, &H7D, &H9D)
CLSID_MSH264DecoderMFT = iid
End Function
Public Function CLSID_MSH264EncoderMFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6CA50344, &H51A, &H4DED, &H97, &H79, &HA4, &H33, &H5, &H16, &H5E, &H35)
CLSID_MSH264EncoderMFT = iid
End Function
Public Function CLSID_MSDDPlusDecMFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H177C0AFE, &H900B, &H48D4, &H9E, &H4C, &H57, &HAD, &HD2, &H50, &HB3, &HD4)
CLSID_MSDDPlusDecMFT = iid
End Function
Public Function CLSID_MP3DecMediaObject() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HBBEEA841, &HA63, &H4F52, &HA7, &HAB, &HA9, &HB3, &HA8, &H4E, &HD3, &H8A)
CLSID_MP3DecMediaObject = iid
End Function
Public Function CLSID_MSAACDecMFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H32D186A7, &H218F, &H4C75, &H88, &H76, &HDD, &H77, &H27, &H3A, &H89, &H99)
CLSID_MSAACDecMFT = iid
End Function
Public Function CLSID_MSH265DecoderMFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H420A51A3, &HD605, &H430C, &HB4, &HFC, &H45, &H27, &H4F, &HA6, &HC5, &H62)
CLSID_MSH265DecoderMFT = iid
End Function
Public Function CLSID_WMVDecoderMFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H82D353DF, &H90BD, &H4382, &H8B, &HC2, &H3F, &H61, &H92, &HB7, &H6E, &H34)
CLSID_WMVDecoderMFT = iid
End Function
Public Function CLSID_WMADecMediaObject() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2EEB4ADF, &H4578, &H4D10, &HBC, &HA7, &HBB, &H95, &H5F, &H56, &H32, &HA)
CLSID_WMADecMediaObject = iid
End Function
Public Function CLSID_MSMPEGAudDecMFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H70707B39, &HB2CA, &H4015, &HAB, &HEA, &HF8, &H44, &H7D, &H22, &HD8, &H8B)
CLSID_MSMPEGAudDecMFT = iid
End Function
Public Function CLSID_MSMPEGDecoderMFT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2D709E52, &H123F, &H49B5, &H9C, &HBC, &H9A, &HF5, &HCD, &HE2, &H8F, &HB9)
CLSID_MSMPEGDecoderMFT = iid
End Function
Public Function CLSID_AudioResamplerMediaObject() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HF447B69E, &H1884, &H4A7E, &H80, &H55, &H34, &H6F, &H74, &HD6, &HED, &HB3)
CLSID_AudioResamplerMediaObject = iid
End Function
Public Function CLSID_MSVPxDecoder() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &HE3AAF548, &HC9A4, &H4C6E, &H23, &H4D, &H5A, &HDA, &H37, &H4B, &H0, &H0)
CLSID_MSVPxDecoder = iid
End Function
Public Function MF_D3D12_SYNCHRONIZATION_OBJECT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2a7c8d6a, &H85a6, &H494d, &Ha0, &H46, &H6, &Hea, &H1a, &H13, &H8f, &H4b)
MF_D3D12_SYNCHRONIZATION_OBJECT = iid
End Function
Public Function MF_MT_D3D_RESOURCE_VERSION() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H174f1e85, &Hfe26, &H453d, &Hb5, &H2e, &H5b, &Hdd, &H4e, &H55, &Hb9, &H44)
MF_MT_D3D_RESOURCE_VERSION = iid
End Function
Public Function MF_MT_D3D12_CPU_READBACK() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H28ee9fe3, &Hd481, &H46a6, &Hb9, &H8a, &H7f, &H69, &Hd5, &H28, &He, &H82)
MF_MT_D3D12_CPU_READBACK = iid
End Function
Public Function MF_MT_D3D12_TEXTURE_LAYOUT() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H97c85caa, &Hbeb, &H4ee1, &H97, &H15, &Hf2, &H2f, &Had, &H8c, &H10, &Hf5)
MF_MT_D3D12_TEXTURE_LAYOUT = iid
End Function
Public Function MF_MT_D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Heeac2585, &H3430, &H498c, &H84, &Ha2, &H77, &Hb1, &Hbb, &Ha5, &H70, &Hf6)
MF_MT_D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET = iid
End Function
Public Function MF_MT_D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb1138dc3, &H1d5, &H4c14, &H9b, &Hdc, &Hcd, &Hc9, &H33, &H6f, &H55, &Hb9)
MF_MT_D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL = iid
End Function
Public Function MF_MT_D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H82c85647, &H5057, &H4960, &H95, &H59, &Hf4, &H5b, &H8e, &H27, &H14, &H27)
MF_MT_D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS = iid
End Function
Public Function MF_MT_D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hba06bfac, &Hffe3, &H474a, &Hab, &H55, &H16, &H1e, &He4, &H41, &H7a, &H2e)
MF_MT_D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE = iid
End Function
Public Function MF_MT_D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha6a1e439, &H2f96, &H4ab5, &H98, &Hdc, &Had, &Hf7, &H49, &H73, &H50, &H5d)
MF_MT_D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER = iid
End Function
Public Function MF_MT_D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha4940b2, &Hcfd6, &H4738, &H9d, &H2, &H98, &H11, &H37, &H34, &H1, &H5a)
MF_MT_D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS = iid
End Function
Public Function MF_SA_D3D12_HEAP_FLAGS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H496b3266, &Hd28f, &H4f8c, &H93, &Ha7, &H4a, &H59, &H6b, &H1a, &H31, &Ha1)
MF_SA_D3D12_HEAP_FLAGS = iid
End Function
Public Function MF_SA_D3D12_HEAP_TYPE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H56f26a76, &Hbbc1, &H4ce0, &Hbb, &H11, &He2, &H23, &H68, &Hd8, &H74, &Hed)
MF_SA_D3D12_HEAP_TYPE = iid
End Function
Public Function MF_SA_D3D12_CLEAR_VALUE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H86ba9a39, &H526, &H495d, &H9a, &Hb5, &H54, &Hec, &H9f, &Had, &H6f, &Hc3)
MF_SA_D3D12_CLEAR_VALUE = iid
End Function
Public Function MF_CAPTURE_ENGINE_INITIALIZED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H219992bc, &Hcf92, &H4531, &Ha1, &Hae, &H96, &He1, &He8, &H86, &Hc8, &Hf1)
MF_CAPTURE_ENGINE_INITIALIZED = iid
End Function
Public Function MF_CAPTURE_ENGINE_PREVIEW_STARTED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Ha416df21, &Hf9d3, &H4a74, &H99, &H1b, &Hb8, &H17, &H29, &H89, &H52, &Hc4)
MF_CAPTURE_ENGINE_PREVIEW_STARTED = iid
End Function
Public Function MF_CAPTURE_ENGINE_PREVIEW_STOPPED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H13d5143c, &H1edd, &H4e50, &Ha2, &Hef, &H35, &H0a, &H47, &H67, &H80, &H60)
MF_CAPTURE_ENGINE_PREVIEW_STOPPED = iid
End Function
Public Function MF_CAPTURE_ENGINE_RECORD_STARTED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hac2b027b, &Hddf9, &H48a0, &H89, &Hbe, &H38, &Hab, &H35, &Hef, &H45, &Hc0)
MF_CAPTURE_ENGINE_RECORD_STARTED = iid
End Function
Public Function MF_CAPTURE_ENGINE_RECORD_STOPPED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H55e5200a, &Hf98f, &H4c0d, &Ha9, &Hec, &H9e, &Hb2, &H5e, &Hd3, &Hd7, &H73)
MF_CAPTURE_ENGINE_RECORD_STOPPED = iid
End Function
Public Function MF_CAPTURE_ENGINE_PHOTO_TAKEN() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3c50c445, &H7304, &H48eb, &H86, &H5d, &Hbb, &Ha1, &H9b, &Ha3, &Haf, &H5c)
MF_CAPTURE_ENGINE_PHOTO_TAKEN = iid
End Function
Public Function MF_CAPTURE_SOURCE_CURRENT_DEVICE_MEDIA_TYPE_SET() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He7e75e4c, &H039c, &H4410, &H81, &H5b, &H87, &H41, &H30, &H7b, &H63, &Haa)
MF_CAPTURE_SOURCE_CURRENT_DEVICE_MEDIA_TYPE_SET = iid
End Function
Public Function MF_CAPTURE_ENGINE_ERROR() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H46b89fc6, &H33cc, &H4399, &H9d, &Had, &H78, &H4d, &He7, &H7d, &H58, &H7c)
MF_CAPTURE_ENGINE_ERROR = iid
End Function
Public Function MF_CAPTURE_ENGINE_EFFECT_ADDED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Haa8dc7b5, &Ha048, &H4e13, &H8e, &Hbe, &Hf2, &H3c, &H46, &Hc8, &H30, &Hc1)
MF_CAPTURE_ENGINE_EFFECT_ADDED = iid
End Function
Public Function MF_CAPTURE_ENGINE_EFFECT_REMOVED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hc6e8db07, &Hfb09, &H4a48, &H89, &Hc6, &Hbf, &H92, &Ha0, &H42, &H22, &Hc9)
MF_CAPTURE_ENGINE_EFFECT_REMOVED = iid
End Function
Public Function MF_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hfded7521, &H8ed8, &H431a, &Ha9, &H6b, &Hf3, &He2, &H56, &H5e, &H98, &H1c)
MF_CAPTURE_ENGINE_ALL_EFFECTS_REMOVED = iid
End Function
Public Function MF_CAPTURE_SINK_PREPARED() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7BFCE257, &H12B1, &H4409, &H8C, &H34, &HD4, &H45, &HDA, &HAB, &H75, &H78)
MF_CAPTURE_SINK_PREPARED = iid
End Function
Public Function MF_CAPTURE_ENGINE_OUTPUT_MEDIA_TYPE_SET() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hcaaad994, &H83ec, &H45e9, &Ha3, &H0a, &H1f, &H20, &Haa, &Hdb, &H98, &H31)
MF_CAPTURE_ENGINE_OUTPUT_MEDIA_TYPE_SET = iid
End Function
Public Function MF_CAPTURE_ENGINE_D3D_MANAGER() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H76e25e7b, &Hd595, &H4283, &H96, &H2c, &Hc5, &H94, &Haf, &Hd7, &H8d, &Hdf)
MF_CAPTURE_ENGINE_D3D_MANAGER = iid
End Function
Public Function MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_UNPROCESSED_SAMPLES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb467f705, &H7913, &H4894, &H9d, &H42, &Ha2, &H15, &Hfe, &Ha2, &H3d, &Ha9)
MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_UNPROCESSED_SAMPLES = iid
End Function
Public Function MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_UNPROCESSED_SAMPLES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1cddb141, &Ha7f4, &H4d58, &H98, &H96, &H4d, &H15, &Ha5, &H3c, &H4e, &Hfe)
MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_UNPROCESSED_SAMPLES = iid
End Function
Public Function MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_PROCESSED_SAMPLES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &He7b4a49e, &H382c, &H4aef, &Ha9, &H46, &Hae, &Hd5, &H49, &Hb, &H71, &H11)
MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_PROCESSED_SAMPLES = iid
End Function
Public Function MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_PROCESSED_SAMPLES() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H9896e12a, &Hf707, &H4500, &Hb6, &Hbd, &Hdb, &H8e, &Hb8, &H10, &Hb5, &Hf)
MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_PROCESSED_SAMPLES = iid
End Function
Public Function MF_CAPTURE_ENGINE_USE_AUDIO_DEVICE_ONLY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H1c8077da, &H8466, &H4dc4, &H8b, &H8e, &H27, &H6b, &H3f, &H85, &H92, &H3b)
MF_CAPTURE_ENGINE_USE_AUDIO_DEVICE_ONLY = iid
End Function
Public Function MF_CAPTURE_ENGINE_USE_VIDEO_DEVICE_ONLY() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H7e025171, &Hcf32, &H4f2e, &H8f, &H19, &H41, &H5, &H77, &Hb7, &H3a, &H66)
MF_CAPTURE_ENGINE_USE_VIDEO_DEVICE_ONLY = iid
End Function
Public Function MF_CAPTURE_ENGINE_DISABLE_HARDWARE_TRANSFORMS() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hb7c42a6b, &H3207, &H4495, &Hb4, &He7, &H81, &Hf9, &Hc3, &H5d, &H59, &H91)
MF_CAPTURE_ENGINE_DISABLE_HARDWARE_TRANSFORMS = iid
End Function
Public Function MF_CAPTURE_ENGINE_DISABLE_DXVA() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hf9818862, &H179d, &H433f, &Ha3, &H2f, &H74, &Hcb, &Hcf, &H74, &H46, &H6d)
MF_CAPTURE_ENGINE_DISABLE_DXVA = iid
End Function
Public Function MF_CAPTURE_ENGINE_MEDIASOURCE_CONFIG() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hbc6989d2, &H0fc1, &H46e1, &Ha7, &H4f, &Hef, &Hd3, &H6b, &Hc7, &H88, &Hde)
MF_CAPTURE_ENGINE_MEDIASOURCE_CONFIG = iid
End Function
Public Function MF_CAPTURE_ENGINE_DECODER_MFT_FIELDOFUSE_UNLOCK_Attribute() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H2b8ad2e8, &H7acb, &H4321, &Ha6, &H06, &H32, &H5c, &H42, &H49, &Hf4, &Hfc)
MF_CAPTURE_ENGINE_DECODER_MFT_FIELDOFUSE_UNLOCK_Attribute = iid
End Function
Public Function MF_CAPTURE_ENGINE_ENCODER_MFT_FIELDOFUSE_UNLOCK_Attribute() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H54c63a00, &H78d5, &H422f, &Haa, &H3e, &H5e, &H99, &Hac, &H64, &H92, &H69)
MF_CAPTURE_ENGINE_ENCODER_MFT_FIELDOFUSE_UNLOCK_Attribute = iid
End Function
Public Function MF_CAPTURE_ENGINE_EVENT_GENERATOR_GUID() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Habfa8ad5, &Hfc6d, &H4911, &H87, &He0, &H96, &H19, &H45, &Hf8, &Hf7, &Hce)
MF_CAPTURE_ENGINE_EVENT_GENERATOR_GUID = iid
End Function
Public Function MF_CAPTURE_ENGINE_EVENT_STREAM_INDEX() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H82697f44, &Hb1cf, &H42eb, &H97, &H53, &Hf8, &H6d, &H64, &H9c, &H88, &H65)
MF_CAPTURE_ENGINE_EVENT_STREAM_INDEX = iid
End Function
Public Function MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H03160B7E, &H1C6F, &H4DB2, &HAD, &H56, &HA7, &HC4, &H30, &HF8, &H23, &H92)
MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE = iid
End Function
Public Function MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE_INDEX() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H3CE88613, &H2214, &H46C3, &HB4, &H17, &H82, &HF8, &HA3, &H13, &HC9, &HC3)
MF_CAPTURE_ENGINE_SELECTEDCAMERAPROFILE_INDEX = iid
End Function
Public Function CLSID_MFCaptureEngine() As UUID
'{efce38d3-8914-4674-a7df-ae1b3d654b8a}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hefce38d3, CInt(&H8914), CInt(&H4674), &Ha7, &Hdf, &Hae, &H1b, &H3d, &H65, &H4b, &H8a)
 CLSID_MFCaptureEngine = iid
End Function
Public Function CLSID_MFCaptureEngineClassFactory() As UUID
'{efce38d3-8914-4674-a7df-ae1b3d654b8a}
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &Hefce38d3, CInt(&H8914), CInt(&H4674), &Ha7, &Hdf, &Hae, &H1b, &H3d, &H65, &H4b, &H8a)
 CLSID_MFCaptureEngineClassFactory = iid
End Function
Public Function MFSampleExtension_DeviceReferenceSystemTime() As UUID
Static iid As UUID
 If (iid.Data1 = 0) Then Call DEFINE_UUID(iid, &H6523775a, &Hba2d, &H405f, &Hb2, &Hc5, &H01, &Hff, &H88, &He2, &He8, &Hf6)
MFSampleExtension_DeviceReferenceSystemTime = iid
End Function


End Module