[
  uuid(6D0FB295-647F-4490-BC6E-73916ADDB06B),
  version(1.11),
  helpstring("OLEEXP MIME - Edanmo's MimeOle TLB Compiled for OLEEXP, v1.11")
]
library MimeOle
{
    // TLib :     // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");
    importlib("oleexp.tlb");

    // Forward declare all types defined in this typelib
    interface IMimeInternational;
    interface IMimeSecurity;
    interface IMimeHeaderTable;
    interface IMimePropertySchema;
    interface IMimePropertySet;
    interface IMimeAddressTable;
    interface IMimeWebDocument;
    interface IMimeBody;
    interface IMimeMessageTree;
    interface IMimeMessage;
    interface IMimeMessageCallback;
    interface IPersistMime;
    interface IMimeMessageParts;
    interface IMimeEnumHeaderRows;
    interface IMimeEnumProperties;
    interface IMimeEnumAddressTypes;
    interface IMimeEnumMessageParts;
    interface IHashTable;
    interface IMimeAllocator;
    interface IMimeObjResolver;
    interface IFontCache;
    interface IFontCacheNotify;
    interface IMimeEditTag;
    interface IMimeEditTagCollection;
    interface IProgressNotify;
    interface IStoreNamespace;
    interface IStoreFolder;
    interface IImnAdviseAccount;
    interface IImnAdviseMigrateServer;
    interface IImnEnumAccounts;
    interface IImnAccountManager;
    interface IImnAccountManager2;
    interface IPropertyContainer;
    interface IImnAccount;
    interface IMimeEdit;

    typedef struct tagBLOB {
                
int cbSize;
                
int pBlobData;
    } BLOB;

    typedef enum {
        MIME_E_REG_CREATE_KEY = -2146644479,
        MIME_E_REG_QUERY_INFO = -2146644478,
        MIME_E_INVALID_ENCTYPE = -2146644477,
        MIME_E_BOUNDARY_MISMATCH = -2146644476,
        MIME_E_NOT_FOUND = -2146644475,
        MIME_E_NO_DATA = -2146644475,
        MIME_E_BUFFER_TOO_SMALL = -2146644474,
        MIME_E_INVALID_ITEM_FLAGS = -2146644473,
        MIME_E_ONE_LINE_ITEM = -2146644472,
        MIME_E_INVALID_HANDLE = -2146644471,
        MIME_E_CHARSET_TRANSLATE = -2146644470,
        MIME_E_NOT_INITIALIZED = -2146644469,
        MIME_E_NO_MORE_ROWS = -2146644468,
        MIME_E_ALREADY_BOUND = -2146644467,
        MIME_E_CANT_RESET_ROOT = -2146644466,
        MIME_E_INSERT_NOT_ALLOWED = -2146644465,
        MIME_E_BAD_BODY_LOCATION = -2146644464,
        MIME_E_NOT_MULTIPART = -2146644463,
        MIME_E_NO_MULTIPART_BOUNDARY = -2146644462,
        MIME_E_CONVERT_NOT_NEEDED = -2146644461,
        MIME_E_CANT_MOVE_BODY = -2146644460,
        MIME_E_UNKNOWN_BODYTREE_VERSION = -2146644459,
        MIME_E_NOTHING_TO_SAVE = -2146644458,
        MIME_E_NEED_SAVE_MESSAGE = -2146644457,
        MIME_E_NOTHING_TO_REVERT = -2146644456,
        MIME_E_MSG_SIZE_DIFF = -2146644455,
        MIME_E_CANT_RESET_PARENT = -2146644454,
        MIME_E_CORRUPT_CACHE_TREE = -2146644453,
        MIME_E_BODYTREE_OUT_OF_SYNC = -2146644452,
        MIME_E_INVALID_ENCODINGTYPE = -2146644451,
        MIME_E_MULTIPART_NO_DATA = -2146644450,
        MIME_E_INVALID_OPTION_VALUE = -2146644449,
        MIME_E_INVALID_OPTION_ID = -2146644448,
        MIME_E_INVALID_HEADER_NAME = -2146644447,
        MIME_E_NOT_BOUND = -2146644446,
        MIME_E_MAX_SIZE_TOO_SMALL = -2146644445,
        MIME_E_MULTIPART_HAS_CHILDREN = -2146644443,
        MIME_E_INVALID_PROP_FLAGS = -2146644442,
        MIME_E_INVALID_ADDRESS_TYPE = -2146644441,
        MIME_E_INVALID_OBJECT_IID = -2146644440,
        MIME_E_MLANG_DLL_NOT_FOUND = -2146644439,
        MIME_E_ROOT_NOT_EMPTY = -2146644438,
        MIME_E_MLANG_BAD_DLL = -2146644437,
        MIME_E_REG_OPEN_KEY = -2146644436,
        MIME_E_INVALID_INET_DATE = -2146644435,
        MIME_E_INVALID_BODYTYPE = -2146644434,
        MIME_E_INVALID_DELETE_TYPE = -2146644433,
        MIME_E_OPTION_HAS_NO_VALUE = -2146644432,
        MIME_E_INVALID_CHARSET_TYPE = -2146644431,
        MIME_E_short_NO_CONVERT = -2146644430,
        MIME_E_INVALID_short = -2146644429,
        MIME_E_NO_MORE_ADDRESS_TYPES = -2146644428,
        MIME_E_INVALID_ENCODING_TYPE = -2146644427,
        MIME_S_ILLEGAL_LINES_FOUND = 839222,
        MIME_S_MIME_VERSION = 839223,
        MIME_E_INVALID_TEXT_TYPE = -2146644424,
        MIME_E_READ_ONLY = -2146644423,
        MIME_S_INVALID_MESSAGE = 839226,
        MIME_S_CHARSET_CONFLICT = 839227,
        MIME_E_UNSUPPORTED_short = -2146644420,
        MIME_S_NO_CHARSET_CONVERT = 839229,
        MIME_E_URL_NOTFOUND = -2146644418,
        MIME_E_BAD_TEXT_DATA = -2146644417,
        MIME_E_NO_SIGNER = 839232,
        MIME_E_SECURITY_NOTINIT = -2146644320,
        MIME_E_SECURITY_LOADCRYPT32 = -2146644319,
        MIME_E_SECURITY_BADPROCADDR = -2146644318,
        MIME_E_SECURITY_NODEFAULT = -2146644304,
        MIME_E_SECURITY_NOOP = -2146644303,
        MIME_S_SECURITY_NOOP = 839345,
        MIME_S_SECURITY_NONE = 839346,
        MIME_S_SECURITY_ERROROCCURED = 839347,
        MIME_E_SECURITY_USERCHOICE = -2146644300,
        MIME_E_SECURITY_UNKMSGTYPE = -2146644299,
        MIME_E_SECURITY_BADMESSAGE = -2146644298,
        MIME_E_SECURITY_BADCONTENT = -2146644297,
        MIME_E_SECURITY_BADSECURETYPE = -2146644296,
        MIME_E_SECURITY_CLASSNOTSUPPORTED = -2146644295,
        MIME_S_SECURITY_RECURSEONLY = 839354,
        MIME_E_SECURITY_BADSTORE = -2146644272,
        MIME_S_SECURITY_NOCERT = 839377,
        MIME_E_SECURITY_NOCERT = -2146644271,
        MIME_E_SECURITY_CERTERROR = -2146644270,
        MIME_S_SECURITY_CERTERROR = 839378,
        MIME_S_SECURITY_NODEFCERT = 839379,
        MIME_E_SECURITY_BADSIGNATURE = -2146644256,
        MIME_E_SECURITY_MULTSIGNERS = -2146644255,
        MIME_E_SECURITY_NOSIGNINGCERT = -2146644254,
        MIME_E_SECURITY_CANTDECRYPT = -2146644240,
        MIME_E_SECURITY_ENCRYPTNOSENDERCERT = -2146644239,
        MIME_S_SECURITY_NOSENDERCERT = 839410,
        MIMEEDIT_E_UNEXPECTED = -2146691328,
        MIMEEDIT_E_DODEFAULT = -2146691327,
        MIMEEDIT_E_LOADLIBRARYFAILURE = -2146691326,
        MIMEEDIT_E_USERCANCEL = -2146691325,
        MIMEEDIT_E_CHARSETNOTFOUND = -2146691324,
        MIMEEDIT_E_ILLEGALBODYFORMAT = -2146691323,
        MIMEEDIT_E_CANNOTSAVEUNTILPARSECOMPLETE = -2146691322,
        MIMEEDIT_E_CANNOTSAVEWHILESOURCEEDITING = -2146691321,
        MIMEEDIT_S_OPENFILE = 792400,
        MIMEEDIT_S_SAVEFILE = 792401,
        MIMEEDIT_W_DOWNLOADNOTCOMPLETE = 792416,
        MIMEEDIT_W_BADURLSNOTATTACHED = 792417
    } MimeOleErrors;

    typedef enum {
        PID_HDR_NEWSGROUP = 2,
        PID_HDR_NEWSGROUPS = 3,
        PID_HDR_REFS = 4,
        PID_HDR_SUBJECT = 5,
        PID_HDR_FROM = 6,
        PID_HDR_MESSAGEID = 7,
        PID_HDR_RETURNPATH = 8,
        PID_HDR_RR = 9,
        PID_HDR_RETRCPTTO = 10,
        PID_HDR_APPARTO = 11,
        PID_HDR_DATE = 12,
        PID_HDR_RECEIVED = 13,
        PID_HDR_REPLYTO = 14,
        PID_HDR_XMAILER = 15,
        PID_HDR_BCC = 16,
        PID_HDR_MIMEVER = 17,
        PID_HDR_CNTTYPE = 18,
        PID_HDR_CNTXFER = 19,
        PID_HDR_CNTID = 20,
        PID_HDR_CNTDESC = 21,
        PID_HDR_CNTDISP = 22,
        PID_HDR_CNTBASE = 23,
        PID_HDR_CNTLOC = 24,
        PID_HDR_TO = 25,
        PID_HDR_PATH = 26,
        PID_HDR_FOLLOWUPTO = 27,
        PID_HDR_EXPIRES = 28,
        PID_HDR_CC = 29,
        PID_HDR_CONTROL = 30,
        PID_HDR_DISTRIB = 31,
        PID_HDR_KEYWORDS = 32,
        PID_HDR_SUMMARY = 33,
        PID_HDR_APPROVED = 34,
        PID_HDR_LINES = 35,
        PID_HDR_XREF = 36,
        PID_HDR_ORG = 37,
        PID_HDR_XNEWSRDR = 38,
        PID_HDR_XPRI = 39,
        PID_HDR_XMSPRI = 40,
        PID_PAR_FILENAME = 41,
        PID_PAR_BOUNDARY = 42,
        PID_PAR_CHARSET = 43,
        PID_PAR_NAME = 44,
        PID_ATT_FILENAME = 45,
        PID_ATT_GENFNAME = 46,
        PID_ATT_PRITYPE = 47,
        PID_ATT_SUBTYPE = 48,
        PID_ATT_NORMSUBJ = 49,
        PID_ATT_ILLEGAL = 50,
        PID_ATT_RENDERED = 51,
        PID_ATT_SENTTIME = 52,
        PID_ATT_RECVTIME = 53,
        PID_ATT_PRIORITY = 54,
        PID_HDR_COMMENT = 55,
        PID_HDR_ENCODING = 56,
        PID_HDR_ENCRYPTED = 57,
        PID_HDR_OFFSETS = 58,
        PID_HDR_XUNSENT = 59,
        PID_HDR_ARTICLEID = 60,
        PID_HDR_SENDER = 61,
        PID_ATT_SERVER = 62,
        PID_ATT_ACCOUNTID = 63,
        PID_ATT_UIDL = 64,
        PID_ATT_STOREMSGID = 65,
        PID_ATT_USERNAME = 66,
        PID_ATT_FORWARDTO = 67,
        PID_ATT_STOREFOLDERID = 68,
        PID_ATT_GHOSTED = 69,
        PID_ATT_UNCACHEDSIZE = 70,
        PID_ATT_COMBINED = 71,
        PID_ATT_AUTOINLINED = 72,
        PID_LAST = 73
    } MIMEPROPID;

    typedef enum {
        OID_ALLOW_8BIT_HEADER = 1,
        OID_CBMAX_HEADER_LINE = 2,
        OID_SAVE_FORMAT = 3,
        OID_WRAP_BODY_TEXT = 4,
        OID_CBMAX_BODY_LINE = 5,
        OID_TRANSMIT_BODY_ENCODING = 6,
        OID_TRANSMIT_TEXT_ENCODING = 7,
        OID_GENERATE_MESSAGE_ID = 8,
        OID_HIDE_TNEF_ATTACHMENTS = 14,
        OID_CLEANUP_TREE_ON_SAVE = 15,
        OID_BODY_REMOVE_NBSP = 20,
        OID_DEFAULT_BODY_CHARSET = 21,
        OID_DEFAULT_HEADER_CHARSET = 22,
        OID_DBCS_ESCAPE_IS_8BIT = 23,
        OID_SECURITY_TYPE = 24,
        OID_SECURITY_ALG_HASH = 25,
        OID_SECURITY_ALG_BULK = 32,
        OID_SECURITY_CERT_SIGNING = 33,
        OID_SECURITY_CERT_DECRYPTION = 34,
        OID_SECURITY_RG_CERT_ENCRYPT = 35,
        OID_SECURITY_HCERTSTORE = 36,
        OID_SECURITY_RG_CERT_BAG = 37,
        OID_SECURITY_CRL = 38,
        OID_SECURITY_SEARCHSTORES = 39,
        OID_SECURITY_RG_IASN = 40,
        OID_SECURITY_SYMCAPS = 41,
        OID_SECURITY_AUTHATTR = 42,
        OID_SECURITY_UNAUTHATTR = 43,
        OID_SECURITY_SIGNTIME = 44,
        OID_SECURITY_USER_VALIDITY = 45,
        OID_SECURITY_RO_MSG_VALIDITY = 46,
        OID_SECURITY_HCRYPTPROV = 47,
        OID_SECURITY_ENCODE_FLAGS = 48,
        OID_SECURITY_CERT_INCLUDED = 49,
        OID_SECURITY_HWND_OWNER = 50,
        OID_SECURITY_REQUESTED_CTE = 51,
        OID_NO_DEFAULT_CNTTYPE = 52,
        OID_XMIT_PLAIN_TEXT_ENCODING = 53,
        OID_XMIT_HTML_TEXT_ENCODING = 54,
        OID_HEADER_RELOAD_TYPE = 55,
        OID_CAN_INLINE_TEXT_BODIES = 56,
        OID_SHOW_MACBINARY = 57,
        OID_SAVEBODY_KEEPBOUNDARY = 64,
        OID_SECURITY_ALG_HASH_RG = 25,
        OID_SECURITY_CERT_SIGNING_RG = 33,
        OID_SECURITY_SYMCAPS_RG = 41,
        OID_SECURITY_AUTHATTR_RG = 42,
        OID_SECURITY_UNAUTHATTR_RG = 43,
        OID_SECURITY_SIGNTIME_RG = 44,
        OID_SECURITY_USER_VALIDITY_RG = 45,
        OID_SECURITY_RO_MSG_VALIDITY_RG = 46,
        OID_SUPPORT_EXTERNAL_BODY = 65,
        OID_LOAD_USE_BIND_FILE = 66,
        OID_SECURITY_SIGNATURE_COUNT = 67,
        OID_HANDSOFF_ONSAVE = 68,
        OID_SECURITY_RECEIPT = 69,
        OID_NOSECURITY_ONSAVE = 70,
        OID_DECODE_RFC1154 = 71
    } OptionsIDs;

    typedef enum {
        MIMEOLE_COMPAT_OE5 = 1,
        MIMEOLE_COMPAT_MLANG2 = 2
    } MimeOleCompatModes;

    typedef enum {
        RELOAD_HEADER_NONE = 0,
        RELOAD_HEADER_RESET = 1,
        RELOAD_HEADER_APPEND = 2,
        RELOAD_HEADER_REPLACE = 3
    } RELOADTYPE;

    typedef enum {
        SAVE_RFC822 = 0,
        SAVE_RFC1521 = 1
    } MIMESAVETYPE;

    typedef enum {
        CSET_APPLY_UNTAGGED = 0,
        CSET_APPLY_ALL = 1,
        CSET_APPLY_TAG_ALL = 2
    } CSETAPPLYTYPE;

    typedef enum {
        IET_BINARY = 0,
        IET_BASE64 = 1,
        IET_UUENCODE = 2,
        IET_QP = 3,
        IET_7BIT = 4,
        IET_8BIT = 5,
        IET_INETCSET = 6,
        IET_UNICODE = 7,
        IET_RFC1522 = 8,
        IET_ENCODED = 9,
        IET_CURRENT = 10,
        IET_UNKNOWN = 11,
        IET_BINHEX40 = 12,
        IET_LAST = 13
    } EncodingType;

    typedef struct tagINETCSETINFO {
                
unsigned char szName[128];
                
int hCharset;
                
int cpiWindows;
                
int cpiInternet;
                
int dwReserved1;
    } INETCSETINFO;

    typedef enum {
        ILM_FAMILY = 1,
        ILM_NAME = 2,
        ILM_BODYCSET = 4,
        ILM_HEADERCSET = 8,
        ILM_WEBCSET = 16,
        ILM_FIXEDFONT = 32,
        ILM_VARIABLEFONT = 64
    } INETLANGMASK;

    typedef struct tagCODEPAGEINFO {
                
INETLANGMASK dwMask;
                
int cpiCodePage;
                
int fIsValidCodePage;
                
int ulMaxCharSize;
                
int fInternetCP;
                
int cpiFamily;
                
unsigned char szName[128];
                
unsigned char szBodyCset[128];
                
unsigned char szHeaderCset[128];
                
unsigned char szWebCset[128];
                
unsigned char szFixedFont[128];
                
unsigned char szVariableFont[128];
                
EncodingType ietNewsDefault;
                
EncodingType ietMailDefault;
                
int dwReserved1;
    } CODEPAGEINFO;

    typedef struct tagRFC1522INFO {
                
int fRfc1522Allowed;
                
int fRfc1522Used;
                
int fAllow8bit;
                
int hRfc1522Cset;
    } RFC1522INFO;

    typedef enum {
        CHARSET_BODY = 0,
        CHARSET_HEADER = 1,
        CHARSET_WEB = 2
    } CharsetType;

    [
      odl,
      uuid(C5588349-7F86-11D0-8252-00C04FD85AB4)
    ]
    interface IMimeInternational : stdole.IUnknown {
        HRESULT _stdcall SetDefaultCharset([in] int hCharset);
        HRESULT _stdcall GetDefaultCharset([out, retval] int* phCharset);
        HRESULT _stdcall GetCodePageCharset(
                        [in] int cpiCodePage, 
                        [in] CharsetType ctCsetType, 
                        [out, retval] int* phCharset);
        HRESULT _stdcall FindCharset(
                        [in] LPSTR pszCharset, 
                        [out, retval] int* phCharset);
        HRESULT _stdcall GetCharsetInfo(
                        [in] int hCharset, 
                        [in, out] INETCSETINFO* pCsetInfo);
        HRESULT _stdcall GetCodePageInfo(
                        [in] int cpiCodePage, 
                        [in, out] CODEPAGEINFO* pCodePageInfo);
        HRESULT _stdcall CanConvertCodePages(
                        [in] int cpiSource, 
                        [in] int cpiDest);
        HRESULT _stdcall DecodeHeader(
                        [in] int hCharset, 
                        [in] LPSTR pszData, 
                        [in, out] VARIANT* pDecoded, 
                        [in, out] RFC1522INFO* pRfc1522Info);
        HRESULT _stdcall EncodeHeader(
                        [in] int hCharset, 
                        [in] VARIANT* pData, 
                        [out] LPSTR* ppszEncoded, 
                        [in, out] RFC1522INFO* pRfc1522Info);
        HRESULT _stdcall ConvertBuffer(
                        [in] int cpiSource, 
                        [in] int cpiDest, 
                        [in] BLOB* pIn, 
                        [in, out] BLOB* pOut, 
                        [out] int* pcbRead);
        HRESULT _stdcall ConvertString(
                        [in] int cpiSource, 
                        [in] int cpiDest, 
                        [in] VARIANT* pIn, 
                        [in, out] VARIANT* pOut);
        HRESULT _stdcall MLANG_ConvertInetReset();
        HRESULT _stdcall MLANG_ConvertInetString(
                        [in] int cpiSource, 
                        [in] int cpiDest, 
                        [in] LPSTR pSource, 
                        [in] int* pnSizeOfSource, 
                        [out] LPSTR pDestination, 
                        [in] int* pnDstSize);
        HRESULT _stdcall Rfc1522Decode(
                        [in] LPSTR pszValue, 
                        [in] LPSTR pszCharset, 
                        [in] int cchmax, 
                        [out] LPSTR* ppszDecoded);
        HRESULT _stdcall Rfc1522Encode(
                        [in] LPSTR pszValue, 
                        [in] int hCharset, 
                        [out] LPSTR* ppszEncoded);
    };

    typedef enum {
        ITT_SIGNING = 1,
        ITT_ENCRYPTION = 2
    } ThumbprintTypes;

    typedef enum {
        SEF_ENCRYPTWITHNOSENDERCERT = 1,
        SEF_SENDERSCERTPROVIDED = 2,
        SEF_MASK = 65535
    } SecureEncodingFlags;

    typedef enum {
        EBF_RECURSE = 65536,
        EBF_COMMITIFDIRTY = 131072,
        EBF_MASK = -65536
    } EncodeBodyFlags;

    typedef enum {
        MSV_OK = 0,
        MSV_BADSIGNATURE = 1,
        MSV_UNVERIFIABLE = 2,
        MSV_UNKHASH = 4,
        MSV_MALFORMEDSIG = 128,
        MSV_SIGNATURE_MASK = 255,
        MSV_EXPIRED_SIGNINGCERT = 256,
        MSV_SIGNING_MASK = 3840,
        MSV_CANTDECRYPT = 4096,
        MSV_ENC_FOR_EXPIREDCERT = 8192,
        MSV_ENCRYPT_MASK = 1044480,
        MSV_INVALID = 16777216,
        MSV_MSG_MASK = 251658240
    } MIMESecurityValidity;

    typedef enum {
        MST_NONE = 0,
        MST_THIS_SIGN = 1,
        MST_THIS_ENCRYPT = 2,
        MST_THIS_BLOBSIGN = 5,
        MST_CHILD_SIGN = 256,
        MST_CHILD_ENCRYPT = 512,
        MST_SUBMSG_SIGN = 4096,
        MST_SUBMSG_ENCRYPT = 8192,
        MST_THIS_MASK = 255,
        MST_CHILD_MASK = 3840,
        MST_SUBMSG_MASK = 61440,
        MST_DESCENDENT_MASK = 65280,
        MST_SIGN_MASK = 4353,
        MST_ENCRYPT_MASK = 8706,
        MST_BLOB_FLAG = 4,
        MST_TYPE_MASK = 65535,
        MST_RECEIPT_REQUEST = 65536,
        MST_CLASS_SMIME_V1 = 0,
        MST_CLASS_PGP = 16777216,
        MST_CLASS_MASK = -16777216
    } MIMESecurityType;

    typedef enum {
        CERTIFICATE_OK = 0,
        CERTIFICATE_NOT_PRESENT = 1,
        CERTIFICATE_EXPIRED = 2,
        CERTIFICATE_CHAIN_TOO_LONG = 3,
        CERTIFICATE_MISSING_ISSUER = 4,
        CERTIFICATE_CRL_LISTED = 5,
        CERTIFICATE_NOT_TRUSTED = 6,
        CERTIFICATE_INVALID = 7,
        CERTIFICATE_ERROR = 8,
        CERTIFICATE_NOPRINT = 9,
        CERTIFICATE_UNKNOWN = 10
    } CERTSTATE;

    typedef enum {
        SIMPLE = 0,
        OID = 1,
        X500 = 2
    } CERTNAMETYPE;

    typedef enum {
        CDID_EMAIL = 0,
        CDID_MAX = 1
    } CERTDATAID;

    typedef struct tagX509CERTRESULT {
                
int cEntries;
                
long rgcs;
                
long rgpCert;
    } X509CERTRESULT;

    [
      odl,
      uuid(C5588353-7F86-11D0-8252-00C04FD85AB4)
    ]
    interface IMimeSecurity : stdole.IUnknown {
        HRESULT _stdcall InitNew();
        HRESULT _stdcall CheckInit();
        HRESULT _stdcall EncodeMessage(
                        [in] IMimeMessageTree* pTree, 
                        [in] int dwFlags);
        HRESULT _stdcall EncodeBody(
                        [in] IMimeMessageTree* pTree, 
                        [in] int hEncodeRoot, 
                        [in] int dwFlags);
        HRESULT _stdcall DecodeMessage(
                        [in] IMimeMessageTree* pTree, 
                        [in] int dwFlags);
        HRESULT _stdcall DecodeBody(
                        [in] IMimeMessageTree* pTree, 
                        [in] int hDecodeRoot, 
                        [in] int dwFlags);
        HRESULT _stdcall EnumCertificates(
                        [in] void* hc, 
                        [in] int dwUsage, 
                        [in] void* pPrev, 
                        [out] void* ppCert);
        HRESULT _stdcall GetCertificateName(
                        [in] void* pX509Cert, 
                        [in] CERTNAMETYPE cn, 
                        [out] LPSTR* ppszName);
        HRESULT _stdcall GetMessageType(
                        [in] int hwndParent, 
                        [in] IMimeBody* pBody, 
                        [out, retval] int* pdwSecType);
        HRESULT _stdcall GetCertData(
                        [in] void* pX509Cert, 
                        [in] CERTDATAID dataid, 
                        [out, retval] VARIANT* pValue);
    };

    typedef struct tagFINDHEADER {
                
LPSTR pszHeader;
                
int dwReserved;
    } FINDHEADER;

    typedef struct tagHEADERROWINFO {
                
int dwRowNumber;
                
int cboffStart;
                
int cboffColon;
                
int cboffEnd;
    } HEADERROWINFO;

    typedef enum {
        HTF_NAMEINDATA = 1,
        HTF_ENUMHANDLESONLY = 2
    } HEADERTABLEFLAGS;

    [
      odl,
      uuid(FD853CD1-7F86-11D0-8252-00C04FD85AB4)
    ]
    interface IMimeHeaderTable : IPersistStream {
        HRESULT _stdcall FindFirstRow(
                        [in, out] FINDHEADER* pFindHeader, 
                        [out, retval] int* phRow);
        HRESULT _stdcall FindNextRow(
                        [in, out] FINDHEADER* pFindHeader, 
                        [out, retval] int* phRow);
        HRESULT _stdcall CountRows(
                        [in] LPSTR pszHeader, 
                        [out, retval] int* pcRows);
        HRESULT _stdcall AppendRow(
                        [in] LPSTR pszHeader, 
                        [in] int dwFlags, 
                        [in] LPSTR pszData, 
                        [in] int cchData, 
                        [out, retval] int* phRow);
        HRESULT _stdcall DeleteRow([in] int hRow);
        HRESULT _stdcall GetRowData(
                        [in] int hRow, 
                        [in] int dwFlags, 
                        [out] LPSTR* ppszData, 
                        [out] int* pcchData);
        HRESULT _stdcall SetRowData(
                        [in] int hRow, 
                        [in] int dwFlags, 
                        [in] LPSTR pszData, 
                        [in] int cchData);
        HRESULT _stdcall GetRowInfo(
                        [in] int hRow, 
                        [in, out] HEADERROWINFO* pInfo);
        HRESULT _stdcall SetRowNumber(
                        [in] int hRow, 
                        [in] int dwRowNumber);
        HRESULT _stdcall EnumRows(
                        [in] LPSTR pszHeader, 
                        [in] int dwFlags, 
                        [out, retval] IMimeEnumHeaderRows** ppEnum);
        HRESULT _stdcall Clone([out, retval] IMimeHeaderTable** ppTable);
        HRESULT _stdcall BindToObject(
                        [in] UUID* riid, 
                        [out, retval] IUnknown** ppvObject);
    };

    typedef enum {
        MPF_INETCSET = 1,
        MPF_RFC1522 = 2,
        MPF_ADDRESS = 4,
        MPF_HASPARAMS = 8,
        MPF_MIME = 16,
        MPF_READONLY = 32
    } MIMEPROPFLAGS;

    [
      odl,
      uuid(FD853CEC-7F86-11D0-8252-00C04FD85AB4)
    ]
    interface IMimePropertySchema : stdole.IUnknown {
        HRESULT _stdcall RegisterProperty(
                        [in] LPSTR pszName, 
                        [in] int dwFlags, 
                        [in] int dwRowNumber, 
                        [in] short vtDefault, 
                        [out, retval] int* pdwPropId);
        HRESULT _stdcall ModifyProperty(
                        [in] LPSTR pszName, 
                        [in] int dwFlags, 
                        [in] int dwRowNumber, 
                        [in] short vtDefault);
        HRESULT _stdcall GetPropertyId(
                        [in] LPSTR pszName, 
                        [out, retval] int* pdwPropId);
        HRESULT _stdcall GetPropertyName(
                        [in] int dwPropId, 
                        [out] LPSTR* ppszName);
        HRESULT _stdcall RegisterAddressType(
                        [in] LPSTR pszName, 
                        [out, retval] int* pdwAdrType);
    };

    typedef enum {
        PDF_ENCODED = 1,
        PDF_NAMEINDATA = 2,
        PDF_HEADERFORMAT = 5,
        PDF_NOCOMMENTS = 8,
        PDF_SAVENOENCODE = 16,
        PDF_VECTOR = 32
    } PDF;

    typedef struct tagMIMEPARAMINFO {
                
LPSTR pszName;
                
LPSTR pszData;
    } MIMEPARAMINFO;

    typedef enum {
        PIM_CHARSET = 1,
        PIM_ENCODINGTYPE = 2,
        PIM_ROWNUMBER = 4,
        PIM_FLAGS = 8,
        PIM_PROPID = 16,
        PIM_VALUES = 32,
        PIM_VTDEFAULT = 64,
        PIM_VTCURRENT = 128
    } PROPINFOMASK;

    typedef struct tagMIMEPROPINFO {
                
int dwMask;
                
int hCharset;
                
EncodingType ietEncoding;
                
int dwRowNumber;
                
int dwFlags;
                
int dwPropId;
                
int cValues;
                
short vtDefault;
                
short vtCurrent;
    } MIMEPROPINFO;

    typedef enum {
        EPF_NONAME = 1
    } EnumPropsFlags;

    [
      odl,
      uuid(FD853CD3-7F86-11D0-8252-00C04FD85AB4)
    ]
    interface IMimePropertySet : IPersistStreamInit {
        HRESULT _stdcall GetPropInfo(
                        [in] int pszName, 
                        [in, out] MIMEPROPINFO* pInfo);
        HRESULT _stdcall SetPropInfo(
                        [in] int pszName, 
                        [in] MIMEPROPINFO* pInfo);
        HRESULT _stdcall GetProp(
                        [in] int pszName, 
                        [in] int dwFlags, 
                        [in, out] VARIANT* pValue);
        HRESULT _stdcall SetProp(
                        [in] int pszName, 
                        [in] int dwFlags, 
                        [in] VARIANT* pValue);
        HRESULT _stdcall AppendProp(
                        [in] int pszName, 
                        [in] int dwFlags, 
                        [in] VARIANT* pValue);
        HRESULT _stdcall DeleteProp([in] int pszName);
        HRESULT _stdcall CopyProps(
                        [in] int cNames, 
                        [in] int* prgszName, 
                        [in] IMimePropertySet* pPropertySet);
        HRESULT _stdcall MoveProps(
                        [in] int cNames, 
                        [in] int* prgszName, 
                        [in] IMimePropertySet* pPropertySet);
        HRESULT _stdcall DeleteExcept(
                        [in] int cNames, 
                        [in] int* prgszName);
        HRESULT _stdcall QueryProp(
                        [in] int pszName, 
                        [in] LPSTR pszCriteria, 
                        [in] BOOL fSubString, 
                        [in] BOOL fCaseSensitive);
        HRESULT _stdcall GetCharset([out] int* phCharset);
        HRESULT _stdcall SetCharset(
                        [in] int hCharset, 
                        [in] CSETAPPLYTYPE applytype);
        HRESULT _stdcall GetParameters(
                        [in] LPSTR pszName, 
                        [out] int* pcParams, 
                        [out] MIMEPARAMINFO** pprgParam);
        int _stdcall IsContentType(
                        [in] LPSTR pszPriType, 
                        [in] LPSTR pszSubType);
        HRESULT _stdcall BindToObject(
                        [in] UUID* riid, 
                        [out, retval] IUnknown** ppvObject);
        HRESULT _stdcall Clone([out, retval] IMimePropertySet** ppPropertySet);
        HRESULT _stdcall SetOption(
                        [in] int OID, 
                        [in] VARIANT* pValue);
        HRESULT _stdcall GetOption(
                        [in] int OID, 
                        [in, out] VARIANT* pValue);
        HRESULT _stdcall EnumProps(
                        [in] EnumPropsFlags dwFlags, 
                        [out] IMimeEnumProperties** ppEnum);
    };

    typedef enum {
        IAT_UNKNOWN = 0,
        IAT_FROM = 1,
        IAT_SENDER = 2,
        IAT_TO = 4,
        IAT_CC = 8,
        IAT_BCC = 16,
        IAT_REPLYTO = 32,
        IAT_RETURNPATH = 64,
        IAT_RETRCPTTO = 128,
        IAT_RR = 256,
        IAT_APPARTO = 512,
        IAT_ALL = -1
    } AddressType;

    typedef enum {
        AFT_DISPLAY_FRIENDLY = 0,
        AFT_DISPLAY_EMAIL = 1,
        AFT_DISPLAY_BOTH = 2,
        AFT_RFC822_DECODED = 3,
        AFT_RFC822_ENCODED = 4,
        AFT_RFC822_TRANSMIT = 5
    } ADDRESSFORMAT;

    typedef enum {
        IAP_CHARSET = 1,
        IAP_HANDLE = 2,
        IAP_ADRTYPE = 4,
        IAP_FRIENDLY = 8,
        IAP_EMAIL = 32,
        IAP_CERTSTATE = 256,
        IAP_SIGNING_PRINT = 512,
        IAP_ENCRYPTION_PRINT = 1024,
        IAP_ENCODING = 2048,
        IAP_COOKIE = 4096,
        IAP_ALL = -1
    } AddressPropMask;

    typedef struct tagADDRESSPROPS {
                
AddressPropMask dwProps;
                
int hAddress;
                
EncodingType ietFriendly;
                
int hCharset;
                
int dwAdrType;
                
LPSTR pszFriendly;
                
int pwszReserved;
                
LPSTR pszEmail;
                
CERTSTATE CERTSTATE;
                
BLOB tbSigning;
                
BLOB tbEncryption;
                
int dwCookie;
                
int dwReserved1;
                
int dwReserved2;
    } ADDRESSPROPS;

    typedef struct tagADDRESSLIST {
                
int cAdrs;
                
int prgAdr;
    } ADDRESSLIST;

    [
      odl,
      uuid(C558834A-7F86-11D0-8252-00C04FD85AB4)
    ]
    interface IMimeAddressTable : stdole.IUnknown {
        HRESULT _stdcall Append(
                        [in] AddressType dwAdrType, 
                        [in] EncodingType ietFriendly, 
                        [in] LPSTR pszFriendly, 
                        [in] LPSTR pszEmail, 
                        [out, retval] int* phAddress);
        HRESULT _stdcall Insert(
                        [in] ADDRESSPROPS* pAddress, 
                        [out, retval] int* phAddress);
        HRESULT _stdcall SetProps(
                        [in] int hAddress, 
                        [in] ADDRESSPROPS* pAddress);
        HRESULT _stdcall GetProps(
                        [in] int hAddress, 
                        [in] ADDRESSPROPS* pAddress);
        HRESULT _stdcall GetSender([in, out] ADDRESSPROPS* pAddress);
        HRESULT _stdcall CountTypes(
                        [in] AddressType dwAdrTypes, 
                        [out, retval] int* pcAdrs);
        HRESULT _stdcall GetTypes(
                        [in] AddressType dwAdrTypes, 
                        [in] int dwProps, 
                        [in, out] ADDRESSLIST* pList);
        HRESULT _stdcall EnumTypes(
                        [in] AddressType dwAdrTypes, 
                        [in] int dwProps, 
                        [out, retval] IMimeEnumAddressTypes** ppEnum);
        HRESULT _stdcall Delete([in] int hAddress);
        HRESULT _stdcall DeleteTypes([in] AddressType dwAdrTypes);
        HRESULT _stdcall GetFormat(
                        [in] AddressType dwAdrType, 
                        [in] ADDRESSFORMAT format, 
                        [out] LPSTR* ppszFormat);
        HRESULT _stdcall AppendRfc822(
                        [in] AddressType dwAdrType, 
                        [in] EncodingType ietEncoding, 
                        [in] LPSTR pszRfc822Adr);
        HRESULT _stdcall ParseRfc822(
                        [in] AddressType dwAdrType, 
                        [in] EncodingType ietEncoding, 
                        [in] LPSTR pszRfc822Adr, 
                        [in, out] ADDRESSLIST* pList);
        HRESULT _stdcall Clone([out, retval] IMimeAddressTable** ppTable);
        HRESULT _stdcall BindToObject(
                        [in] UUID* riid, 
                        [out, retval] IUnknown** ppvObject);
    };

    [
      odl,
      uuid(EE519F11-851A-11D0-825C-00C04FD85AB4)
    ]
    interface IMimeWebDocument : stdole.IUnknown {
        HRESULT _stdcall GetURL([out] LPSTR* ppszURL);
        HRESULT _stdcall BindToStorage(
                        [in] UUID* riid, 
                        [out, retval] IUnknown** ppvObject);
    };

    typedef enum {
        IBT_SECURE = 0,
        IBT_ATTACHMENT = 1,
        IBT_EMPTY = 2,
        IBT_CSETTAGGED = 3,
        IBT_AUTOATTACH = 4
    } IMSGBODYTYPE;

    typedef struct tagBODYOFFSETS {
                
int cbBoundaryStart;
                
int cbHeaderStart;
                
int cbBodyStart;
                
int cbBodyEnd;
    } BODYOFFSETS;

    typedef struct tagTRANSMITINFO {
                
EncodingType ietCurrent;
                
EncodingType ietXmitMime;
                
EncodingType ietXmit822;
                
int cbLongestLine;
                
int cExtended;
                
int ulPercentExt;
                
int cbSize;
                
int cLines;
    } TRANSMITINFO;

    [
      odl,
      uuid(C558834C-7F86-11D0-8252-00C04FD85AB4)
    ]
    interface IMimeBody : IMimePropertySet {
        int _stdcall IsType([in] IMSGBODYTYPE bodytype);
        HRESULT _stdcall SetDisplayName([in] LPSTR pszDisplay);
        HRESULT _stdcall GetDisplayName([out] LPSTR* ppszDisplay);
        HRESULT _stdcall GetOffsets([out] BODYOFFSETS* pOffsets);
        HRESULT _stdcall GetCurrentEncoding([out, retval] EncodingType* pietEncoding);
        HRESULT _stdcall SetCurrentEncoding([in] EncodingType ietEncoding);
        HRESULT _stdcall GetEstimatedSize(
                        [in] EncodingType ietEncoding, 
                        [out, retval] int* pcbSize);
        HRESULT _stdcall GetDataHere(
                        [in] EncodingType ietEncoding, 
                        [in] IStream* pStream);
        HRESULT _stdcall GetData(
                        [in] EncodingType ietEncoding, 
                        [out, retval] IStream** ppStream);
        HRESULT _stdcall SetData(
                        [in] EncodingType ietEncoding, 
                        [in] LPSTR pszPriType, 
                        [in] LPSTR pszSubType, 
                        [in] UUID* riid, 
                        [in] void* pvObject);
        HRESULT _stdcall EmptyData();
        HRESULT _stdcall CopyTo([in] IMimeBody* pBody);
        HRESULT _stdcall GetTransmitInfo([in, out] TRANSMITINFO* pTransmitInfo);
        HRESULT _stdcall SaveToFile(
                        [in] EncodingType ietEncoding, 
                        [in] LPSTR pszFilePath);
        HRESULT _stdcall GetHandle([out, retval] int* phBody);
    };

    typedef enum {
        IBL_ROOT = 0,
        IBL_PARENT = 1,
        IBL_FIRST = 2,
        IBL_LAST = 3,
        IBL_NEXT = 4,
        IBL_PREVIOUS = 5
    } BODYLOCATION;

    typedef struct tagFINDBODY {
                
int pszPriType;
                
int pszSubType;
                
int dwReserved;
    } FINDBODY;

    typedef enum {
        COMMIT_ONLYIFDIRTY = 1,
        COMMIT_REUSESTORAGE = 2,
        COMMIT_SMIMETRANSFERENCODE = 4
    } CommitFlags;

    typedef enum {
        SAVEBODY_KEEPBOUNDARY = 1
    } SaveBodyFlags;

    typedef enum {
        DELETE_PROMOTE_CHILDREN = 1,
        DELETE_CHILDREN_ONLY = 2
    } DeleteBodyFlags;

    [
      odl,
      uuid(FD853CD4-7F86-11D0-8252-00C04FD85AB4)
    ]
    interface IMimeMessageTree : IPersistStreamInit {
        HRESULT _stdcall GetMessageSource(
                        [out] IStream** ppStream, 
                        [in] CommitFlags dwFlags);
        HRESULT _stdcall GetMessageSize(
                        [out] int* pcbSize, 
                        [in] CommitFlags dwFlags);
        HRESULT _stdcall LoadOffsetTable([in] IStream* pStream);
        HRESULT _stdcall SaveOffsetTable(
                        [in] IStream* pStream, 
                        [in] CommitFlags dwFlags);
        HRESULT _stdcall GetFlags([out, retval] int* pdwFlags);
        HRESULT _stdcall Commit([in] CommitFlags dwFlags);
        HRESULT _stdcall HandsOffStorage();
        HRESULT _stdcall BindToObject(
                        [in] int hBody, 
                        [in] UUID* riid, 
                        [out, retval] IUnknown** ppvObject);
        HRESULT _stdcall SaveBody(
                        [in] int hBody, 
                        [in] SaveBodyFlags dwFlags, 
                        [in] IStream* pStream);
        HRESULT _stdcall InsertBody(
                        [in] BODYLOCATION location, 
                        [in] int hPivot, 
                        [out, retval] int* phBody);
        HRESULT _stdcall GetBody(
                        [in] BODYLOCATION location, 
                        [in] int hPivot, 
                        [out, retval] int* phBody);
        HRESULT _stdcall DeleteBody(
                        [in] int hBody, 
                        [in] DeleteBodyFlags dwFlags);
        HRESULT _stdcall MoveBody(
                        [in] int hBody, 
                        [in] BODYLOCATION location);
        HRESULT _stdcall CountBodies(
                        [in] int hParent, 
                        [in] BOOL fRecurse, 
                        [out, retval] int* pcBodies);
        HRESULT _stdcall FindFirst(
                        [in, out] FINDBODY* pFindBody, 
                        [out, retval] int* phBody);
        HRESULT _stdcall FindNext(
                        [in, out] FINDBODY* pFindBody, 
                        [out, retval] int* phBody);
        HRESULT _stdcall ResolveURL(
                        [in] int hRelated, 
                        [in] LPSTR pszBase, 
                        [in] LPSTR pszURL, 
                        [in] int dwFlags, 
                        [out, retval] int* phBody);
        HRESULT _stdcall ToMultipart(
                        [in] int hBody, 
                        [in] LPSTR pszSubType, 
                        [out, retval] int* phMultipart);
        HRESULT _stdcall GetBodyOffsets(
                        [in] int hBody, 
                        [in, out] BODYOFFSETS* pOffsets);
        HRESULT _stdcall GetCharset([out, retval] int* phCharset);
        HRESULT _stdcall SetCharset(
                        [in] int hCharset, 
                        [in] CSETAPPLYTYPE applytype);
        int _stdcall IsBodyType(
                        [in] int hBody, 
                        [in] IMSGBODYTYPE bodytype);
        int _stdcall IsContentType(
                        [in] int hBody, 
                        [in] LPSTR pszPriType, 
                        [in] LPSTR pszSubType);
        HRESULT _stdcall QueryBodyProp(
                        [in] int hBody, 
                        [in] LPSTR pszName, 
                        [in] LPSTR pszCriteria, 
                        [in] BOOL fSubString, 
                        [in] BOOL fCaseSensitive);
        HRESULT _stdcall GetBodyProp(
                        [in] int hBody, 
                        [in] int pszName, 
                        [in] int dwFlags, 
                        [in, out] VARIANT* pValue);
        HRESULT _stdcall SetBodyProp(
                        [in] int hBody, 
                        [in] int pszName, 
                        [in] int dwFlags, 
                        [in] VARIANT* pValue);
        HRESULT _stdcall DeleteBodyProp(
                        [in] int hBody, 
                        [in] LPSTR pszName);
        HRESULT _stdcall SetOption(
                        [in] int OID, 
                        [in] VARIANT* pValue);
        HRESULT _stdcall GetOption(
                        [in] int OID, 
                        [in, out] VARIANT* pValue);
    };

    typedef enum {
        IMF_ATTACHMENTS = 1,
        IMF_MULTIPART = 2,
        IMF_SUBMULTIPART = 4,
        IMF_MIME = 8,
        IMF_HTML = 16,
        IMF_PLAIN = 32,
        IMF_PARTIAL = 64,
        IMF_SIGNED = 128,
        IMF_ENCRYPTED = 256,
        IMF_TNEF = 512,
        IMF_MHTML = 1024,
        IMF_SECURE = 2048,
        IMF_TEXT = 4096,
        IMF_CSETTAGGED = 8192,
        IMF_NEWS = 16384,
        IMF_VOICEMAIL = 32768,
        IMF_HASVCARD = 65536,
        IMF_RFC1154 = 131072
    } IMSGFLAGS;

    typedef enum {
        IMSG_PRI_LOW = 5,
        IMSG_PRI_NORMAL = 3,
        IMSG_PRI_HIGH = 1
    } IMSGPRIORITY;

    typedef enum {
        WPF_HTML = 1,
        WPF_AUTOINLINE = 2,
        WPF_SLIDESHOW = 4,
        WPF_ATTACHLINKS = 8,
        WPF_IMAGESONLY = 16,
        WPF_NOMETACHARSET = 32
    } WebPageOptionsFlags;

    typedef struct tagWEBPAGEOPTIONS {
                
int cbSize;
                
WebPageOptionsFlags dwFlags;
                
int dwDelay;
                
short wchQuote;
    } WEBPAGEOPTIONS;

    typedef enum {
        TXT_PLAIN = 1,
        TXT_HTML = 2
    } TxtFlags;

    typedef enum {
        URL_ATTACH_INTO_MIXED = 1,
        URL_ATTACH_GENERATE_CID = 2,
        URL_ATTACH_SET_CNTTYPE = 4
    } UrlAttachFlags;

    typedef enum {
        URL_RESOLVE_RENDERED = 1,
        URL_RESOLVE_NO_BASE = 2
    } UrlResolveFlags;

    [
      odl,
      uuid(FD853CD5-7F86-11D0-8252-00C04FD85AB4)
    ]
    interface IMimeMessage : IMimeMessageTree {
        HRESULT _stdcall CreateWebPage(
                        [in] IStream* pRootStm, 
                        [in] WEBPAGEOPTIONS* pOptions, 
                        [in] IMimeMessageCallback* pCallback, 
                        [out, retval] IMoniker** ppMoniker);
        HRESULT _stdcall GetProp(
                        [in] int pszName, 
                        [in] int dwFlags, 
                        [in, out] VARIANT* pValue);
        HRESULT _stdcall SetProp(
                        [in] int pszName, 
                        [in] int dwFlags, 
                        [in] VARIANT* pValue);
        HRESULT _stdcall DeleteProp([in] LPSTR pszName);
        HRESULT _stdcall QueryProp(
                        [in] LPSTR pszName, 
                        [in] LPSTR pszCriteria, 
                        [in] BOOL fSubString, 
                        [in] BOOL fCaseSensitive);
        HRESULT _stdcall GetTextBody(
                        [in] TxtFlags dwTxtType, 
                        [in] EncodingType ietEncoding, 
                        [out] IStream** ppStream, 
                        [out] int* phBody);
        HRESULT _stdcall SetTextBody(
                        [in] TxtFlags dwTxtType, 
                        [in] EncodingType ietEncoding, 
                        [in] int hAlternative, 
                        [in] IStream* pStream, 
                        [out, retval] int* phBody);
        HRESULT _stdcall AttachObject(
                        [in] UUID* riid, 
                        [in] IUnknown* pvObject, 
                        [out, retval] int* phBody);
        HRESULT _stdcall AttachFile(
                        [in] LPSTR pszFilePath, 
                        [in] IStream* pstmFile, 
                        [out, retval] int* phBody);
        HRESULT _stdcall AttachURL(
                        [in] LPSTR pszBase, 
                        [in] LPSTR pszURL, 
                        [in] int dwFlags, 
                        [in] IStream* pstmURL, 
                        [out] LPSTR* ppszCIDURL, 
                        [out] int* phBody);
        HRESULT _stdcall GetAttachments(
                        [out] int* pcAttach, 
                        [out] int** pprghAttach);
        HRESULT _stdcall GetAddressTable([out, retval] IMimeAddressTable** ppTable);
        HRESULT _stdcall GetSender([in, out] ADDRESSPROPS* pAddress);
        HRESULT _stdcall GetAddressTypes(
                        [in] int dwAdrTypes, 
                        [in] int dwProps, 
                        [in, out] ADDRESSLIST* pList);
        HRESULT _stdcall GetAddressFormat(
                        [in] int dwAdrType, 
                        [in] ADDRESSFORMAT format, 
                        [out] LPSTR* ppszFormat);
        HRESULT _stdcall EnumAddressTypes(
                        [in] int dwAdrTypes, 
                        [in] int dwProps, 
                        [out, retval] IMimeEnumAddressTypes** ppEnum);
        HRESULT _stdcall SplitMessage(
                        [in] int cbMaxPart, 
                        [out, retval] IMimeMessageParts** ppParts);
        HRESULT _stdcall GetRootMoniker([out, retval] IMoniker** ppMoniker);
    };

    [
      odl,
      uuid(761AA641-7BDA-11D1-8AA9-00C04FB951F3)
    ]
    interface IMimeMessageCallback : stdole.IUnknown {
        HRESULT _stdcall OnWebPageSplitter(
                        [in] int cInlined, 
                        [in] IStream* ppStream);
    };

    typedef enum {
        PMS_HTML = 1,
        PMS_TEXT = 2
    } PersistMimeFlags;

    [
      odl,
      uuid(DE4AD8DA-555F-11D1-8DD0-00C04FB951F9)
    ]
    interface IPersistMime : IPersist {
        HRESULT _stdcall Load([in] IMimeMessage* pMsg);
        HRESULT _stdcall Save(
                        [in] IMimeMessage* pMsg, 
                        [in] PersistMimeFlags dwFlags);
    };

    [
      odl,
      uuid(C558834F-7F86-11D0-8252-00C04FD85AB4)
    ]
    interface IMimeMessageParts : stdole.IUnknown {
        HRESULT _stdcall CombineParts([out, retval] IMimeMessage** ppMessage);
        HRESULT _stdcall AddPart([in] IMimeMessage* pMessage);
        HRESULT _stdcall SetMaxParts([in] int cParts);
        HRESULT _stdcall CountParts([out, retval] int* pcParts);
        HRESULT _stdcall EnumParts([out, retval] IMimeEnumMessageParts** ppEnum);
    };

    typedef struct tagENUMHEADERROW {
                
int hRow;
                
LPSTR pszHeader;
                
LPSTR pszData;
                
int cchData;
                
int dwReserved;
    } ENUMHEADERROW;

    [
      odl,
      uuid(C558834D-7F86-11D0-8252-00C04FD85AB4)
    ]
    interface IMimeEnumHeaderRows : stdole.IUnknown {
        int _stdcall Next(
                        [in] int cFetch, 
                        [in, out] ENUMHEADERROW* prgRow, 
                        [out] int* pcFetched);
        HRESULT _stdcall Skip([in] int cItems);
        HRESULT _stdcall Reset();
        HRESULT _stdcall Clone([out, retval] IMimeEnumHeaderRows** ppEnum);
        HRESULT _stdcall Count([out, retval] int* pcItems);
    };

    typedef struct tagENUMPROPERTY {
                
LPSTR pszName;
                
int hRow;
                
int dwPropId;
    } ENUMPROPERTY;

    [
      odl,
      uuid(FD853CEE-7F86-11D0-8252-00C04FD85AB4)
    ]
    interface IMimeEnumProperties : stdole.IUnknown {
        int _stdcall Next(
                        [in] int cFetch, 
                        [in, out] ENUMPROPERTY* prgProp, 
                        [out] int* pcFetched);
        HRESULT _stdcall Skip([in] int cItems);
        HRESULT _stdcall Reset();
        HRESULT _stdcall Clone([out, retval] IMimeEnumProperties** ppEnum);
        HRESULT _stdcall Count([out, retval] int* pcItems);
    };

    [
      odl,
      uuid(C5588354-7F86-11D0-8252-00C04FD85AB4)
    ]
    interface IMimeEnumAddressTypes : stdole.IUnknown {
        int _stdcall Next(
                        [in] int cFetch, 
                        [in, out] ADDRESSPROPS* prgAdr, 
                        [out] int* pcFetched);
        HRESULT _stdcall Skip([in] int cItems);
        HRESULT _stdcall Reset();
        HRESULT _stdcall Clone([out, retval] IMimeEnumAddressTypes** ppEnum);
        HRESULT _stdcall Count([out, retval] int* pcItems);
    };

    [
      odl,
      uuid(C5588350-7F86-11D0-8252-00C04FD85AB4)
    ]
    interface IMimeEnumMessageParts : stdole.IUnknown {
        int _stdcall Next(
                        [in] int cFetch, 
                        [in, out] IMimeMessage** prgpMessage, 
                        [out] int* pcFetched);
        HRESULT _stdcall Skip([in] int cItems);
        HRESULT _stdcall Reset();
        HRESULT _stdcall Clone([out, retval] IMimeEnumMessageParts** ppEnum);
        HRESULT _stdcall Count([out, retval] int* pcItems);
    };

    typedef enum {
        HF_NO_DUPLICATES = 1
    } HashTableFlags;

    [
      odl,
      uuid(64577981-86D7-11D1-BDFC-00C04FA31009)
    ]
    interface IHashTable : stdole.IUnknown {
        HRESULT _stdcall Init(
                        [in] int dwSize, 
                        [in] int fDupeKeys);
        HRESULT _stdcall Insert(
                        [in] LPSTR psz, 
                        [in] int pv, 
                        [in] HashTableFlags dwFlags);
        HRESULT _stdcall Replace(
                        [in] LPSTR psz, 
                        [in] int pv);
        HRESULT _stdcall Find(
                        [in] LPSTR psz, 
                        [in] int fRemove, 
                        [out, retval] int* ppv);
        HRESULT _stdcall Reset();
        int _stdcall Next(
                        [in] int cFetch, 
                        [in, out] int* prgpv, 
                        [out] int* pcFetched);
    };

    [
      odl,
      uuid(C5588351-7F86-11D0-8252-00C04FD85AB4)
    ]
    interface IMimeAllocator : IMalloc {
        HRESULT _stdcall FreeParamInfoArray(
                        [in] int cParams, 
                        [in] MIMEPARAMINFO* prgParam, 
                        [in] BOOL fFreeArray);
        HRESULT _stdcall FreeAddressList([in, out] ADDRESSLIST* pList);
        HRESULT _stdcall FreeAddressProps([in, out] ADDRESSPROPS* pAddress);
        HRESULT _stdcall ReleaseObjects(
                        [in] int cObjects, 
                        [in] IUnknown** prgpUnknown, 
                        [in] BOOL fFreeArray);
        HRESULT _stdcall FreeEnumHeaderRowArray(
                        [in] int cRows, 
                        [in] ENUMHEADERROW* prgRow, 
                        [in] BOOL fFreeArray);
        HRESULT _stdcall FreeEnumPropertyArray(
                        [in] int cProps, 
                        [in] ENUMPROPERTY* prgProp, 
                        [in] BOOL fFreeArray);
        HRESULT _stdcall FreeThumbprint([in] BLOB* pthumbprint);
        HRESULT _stdcall PropVariantClear([in] VARIANT* pProp);
    };

    [
      odl,
      uuid(FECEAFFD-C441-11D1-960E-00C04FBD7C09)
    ]
    interface IMimeObjResolver : stdole.IUnknown {
        HRESULT _stdcall MimeOleObjectFromMoniker(
                        [in] BINDF bindf, 
                        [in] IMoniker* pmkOriginal, 
                        [in] IBindCtx* pBindCtx, 
                        [in] UUID* riid, 
                        [out] void* ppvObject, 
                        [out] IMoniker** ppmkNew);
    };

    typedef enum {
        FNT_SYS_ICON = 0,
        FNT_SYS_ICON_BOLD = 1,
        FNT_SYS_MENU = 2,
        FNT_SYS_ICON_STRIKEOUT = 3,
        FNT_SYS_LAST = 4
    } FNTSYSTYPE;

    [
      odl,
      uuid(B0D17FC4-7BC4-11D1-BDFA-00C04FA31009)
    ]
    interface IFontCache : stdole.IUnknown {
        HRESULT _stdcall Init(
                        [in] int hkey, 
                        [in] LPSTR pszIntlKey, 
                        [in] int dwFlags);
        HRESULT _stdcall GetFont(
                        [in] FNTSYSTYPE fntType, 
                        [in] int hCharset, 
                        [out, retval] int* phFont);
        HRESULT _stdcall OnOptionChange();
        HRESULT _stdcall GetJP_ISOControl([out, retval] int* pfUseSIO);
    };

    [
      odl,
      uuid(B0D17FC5-7BC4-11D1-BDFA-00C04FA31009)
    ]
    interface IFontCacheNotify : stdole.IUnknown {
        HRESULT _stdcall OnPreFontChange();
        HRESULT _stdcall OnPostFontChange();
    };

    [
      odl,
      uuid(70183210-7B36-11D2-8C12-00C04FA31009)
    ]
    interface IMimeEditTag : stdole.IUnknown {
        HRESULT _stdcall GetSrc([out, retval] BSTR* pbstr);
        HRESULT _stdcall SetSrc([in] BSTR bstr);
        HRESULT _stdcall GetDest([out, retval] BSTR* pbstr);
        HRESULT _stdcall SetDest([in] BSTR bstr);
        HRESULT _stdcall OnPreSave();
        HRESULT _stdcall OnPostSave();
        HRESULT _stdcall CanPackage();
        int _stdcall IsValidMimeType([in] LPWSTR pszTypeW);
    };

    [
      odl,
      uuid(D09EE528-7B38-11D2-8C12-00C04FA31009)
    ]
    interface IMimeEditTagCollection : stdole.IUnknown {
        HRESULT _stdcall Init([in] IUnknown* pHtmlDoc);
        int _stdcall Next(
                        [in] int cFetch, 
                        [out] IMimeEditTag** ppTag, 
                        [out] int* pcFetched);
        HRESULT _stdcall Reset();
        HRESULT _stdcall Count([out, retval] int* pcItems);
    };

    typedef enum {
        MECMDID_DIRTY = 1,
        MECMDID_EMPTY = 2,
        MECMDID_STYLE = 3,
        MECMDID_EDITHTML = 4,
        MECMDID_DOWNGRADEPLAINTEXT = 5,
        MECMDID_SETTEXT = 6,
        MECMDID_ROT13 = 7,
        MECMDID_INSERTTEXTFILE = 8,
        MECMDID_VIEWSOURCE = 9,
        MECMDID_FORMATFONT = 10,
        MECMDID_PREVIEWFORMAT = 11,
        MECMDID_EDITMODE = 12,
        MECMDID_CHARSET = 13,
        MECMDID_SAVEASSTATIONERY = 14,
        MECMDID_BACKGROUNDIMAGE = 15,
        MECMDID_INSERTTEXT = 16,
        MECMDID_INSERTHTML = 17,
        MECMDID_BACKGROUNDCOLOR = 18,
        MECMDID_APPLYDOCUMENT = 19,
        MECMDID_SAVEATTACHMENTS = 20,
        MECMDID_BACKGROUNDSOUND = 21,
        MECMDID_INSERTBGSOUND = 22,
        MECMDID_SHOWSOURCETABS = 23,
        MECMDID_SETSOURCETAB = 24,
        MECMDID_TABLINKS = 25,
        MECMDID_FORMATPARAGRAPH = 26
    } MimeEditCommands;

    typedef enum {
        MEO_FLAGS_INCLUDEMSG = 1,
        MEO_FLAGS_HTML = 2,
        MEO_FLAGS_AUTOINLINE = 4,
        MEO_FLAGS_SLIDESHOW = 8,
        MEO_FLAGS_AUTOTEXT = 16,
        MEO_FLAGS_BLOCKQUOTE = 32,
        MEO_FLAGS_SENDIMAGES = 64,
        MEO_FLAGS_DONTSPELLCHECKQUOTED = 128,
        MEO_FLAGS_SENDEXTERNALIMGSRC = 256
    } MEO_Flags;

    typedef enum {
        MECMD_VS_HTML = 1,
        MECMD_VS_MESSAGE = 2
    } ViewSourceOptions;

    typedef enum {
        MEST_EDIT = 0,
        MEST_SOURCE = 1,
        MEST_PREVIEW = 2,
        MEST_NEXT = 3,
        MEST_PREVIOUS = 4
    } SetSourceTabOptions;

    typedef enum {
        MESTYLE_NOHEADER = 0,
        MESTYLE_PREVIEW = 1,
        MESTYLE_FORMATBAR = 2,
        MESTYLE_MINIHEADER = 3
    } StyleOptions;

    typedef enum {
        MEHEADER_NONE = 0,
        MEHEADER_NEWS = 1,
        MEHEADER_MAIL = 2,
        MEHEADER_FORCE_ENGLISH = 4
    } HeaderTypeOptions;

    typedef enum {
        MESIG_AUTO = 1,
        MESIG_MANUAL = 2
    } SignatureEnabledOptions;

    typedef enum {
        MESIGOPT_PLAIN = 1,
        MESIGOPT_TOP = 2,
        MESIGOPT_PREFIX = 4,
        MESIGOPT_BOTTOM = 8,
        MESIGOPT_HTML = 16
    } SignatureOptions;

    typedef enum {
        MEBF_OUTERCLIENTEDGE = 1,
        MEBF_INNERCLIENTEDGE = 2,
        MEBF_FORMATBARSEP = 4,
        MEBF_NOSCROLL = 8
    } BorderFlagsOptions;

    typedef enum {
        MESPELLOPT_IGNORENUMBER = 1,
        MESPELLOPT_IGNOREUPPER = 2,
        MESPELLOPT_IGNOREDBCS = 4,
        MESPELLOPT_IGNOREPROTECT = 8,
        MESPELLOPT_IGNOREURL = 16,
        MESPELLOPT_ALWAYSSUGGEST = 32,
        MESPELLOPT_CHECKONSEND = 64,
        MESPELLOPT_CHECKONTYPE = 128
    } SpellOptions;

    typedef enum {
        MESRCFLAGS_COLOR = 1
    } SourceEditFlags;

    typedef enum {
        MEHOSTCMDID_SIGNATURE_ENABLED = 1,
        MEHOSTCMDID_SIGNATURE_OPTIONS = 2,
        MEHOSTCMDID_SIGNATURE = 3,
        MEHOSTCMDID_HEADER_TYPE = 4,
        MEHOSTCMDID_ONPARSECOMPLETE = 5,
        MEHOSTCMDID_FLAGS = 6,
        MEHOSTCMDID_QUOTE_CHAR = 7,
        MEHOSTCMDID_REPLY_TICK_COLOR = 8,
        MEHOSTCMDID_COMPOSE_FONT = 9,
        MEHOSTCMDID_ADD_TO_ADDRESSBOOK = 10,
        MEHOSTCMDID_ADD_TO_FAVORITES = 11,
        MEHOSTCMDID_SLIDESHOW_DELAY = 12,
        MEHOSTCMDID_FONTCACHE = 13,
        MEHOSTCMDID_BORDERFLAGS = 14,
        MEHOSTCMDID_SECURITY_ZONE = 15,
        MEHOSTCMDID_SPELL_OPTIONS = 16,
        MEHOSTCMDID_SAVEATTACH_PATH = 17,
        MEHOSTCMDID_SOURCEEDIT_FLAGS = 18,
        MEHOSTCMDID_SPELL_LANGUAGE = 19,
        MEHOSTCMDID_IS_READ_IN_TEXT_ONLY = 22
    } MimeEditHostcommands;

    [
      uuid(05300401-BCBC-11D0-85E3-00C04FD85AB4)
    ]
    coclass MimeHtmlProtocol {
        [default] interface IUnknown;
    };

    [
      uuid(FD853CD9-7F86-11D0-8252-00C04FD85AB4)
    ]
    coclass MimeInternational {
        [default] interface IMimeInternational;
    };

    [
      uuid(FD853CDB-7F86-11D0-8252-00C04FD85AB4)
    ]
    coclass MimeBody {
        [default] interface IMimeBody;
    };

    [
      uuid(FD853CDC-7F86-11D0-8252-00C04FD85AB4)
    ]
    coclass MimeMessageParts {
        [default] interface IMimeMessageParts;
    };

    [
      uuid(FD853CDD-7F86-11D0-8252-00C04FD85AB4)
    ]
    coclass MimeAllocator {
        [default] interface IMimeAllocator;
    };

    [
      uuid(FD853CDE-7F86-11D0-8252-00C04FD85AB4)
    ]
    coclass MimeSecurity {
        [default] interface IMimeSecurity;
    };

    [
      uuid(FD853CDF-7F86-11D0-8252-00C04FD85AB4)
    ]
    coclass VirtualStream {
        [default] interface IStream;
    };

    [
      uuid(FD853CE0-7F86-11D0-8252-00C04FD85AB4)
    ]
    coclass MimeHeaderTable {
        [default] interface IMimeHeaderTable;
    };

    [
      uuid(FD853CE1-7F86-11D0-8252-00C04FD85AB4)
    ]
    coclass MimePropertySet {
        [default] interface IMimePropertySet;
    };

    [
      uuid(FD853CE2-7F86-11D0-8252-00C04FD85AB4)
    ]
    coclass MimeMessageTree {
        [default] interface IMimeMessageTree;
    };

    [
      uuid(FD853CE3-7F86-11D0-8252-00C04FD85AB4)
    ]
    coclass MimeMessage {
        [default] interface IMimeMessage;
    };

    [
      uuid(FD853CED-7F86-11D0-8252-00C04FD85AB4)
    ]
    coclass MimePropertySchema {
        [default] interface IMimePropertySchema;
    };

    [
      uuid(64577982-86D7-11D1-BDFC-00C04FA31009)
    ]
    coclass HashTable {
        [default] interface IHashTable;
    };

    [
      uuid(B0D17FC2-7BC4-11D1-BDFA-00C04FA31009)
    ]
    coclass FontCache {
        [default] interface IFontCache;
    };

    [
      uuid(35461E30-C488-11D1-960E-00C04FBD7C09)
    ]
    coclass MimeObjResolver {
        [default] interface IMimeObjResolver;
    };

    typedef enum {
        MECD_HTML = 1,
        MECD_PLAINTEXT = 2,
        MECD_ENCODEIMAGES = 4,
        MECD_ENCODEFILEURLSONLY = 8,
        MECD_ENCODESOUNDS = 16,
        MECD_ENCODEVIDEO = 32,
        MECD_ENCODEPLUGINS = 64
    } MimeEditCreateDocumentFlags;

    [
      dllname("INETCOMM.DLL")
    ]
    module MimeOle {
        [entry("MimeOleSetCompatMode")]
        HRESULT _stdcall MimeOleSetCompatMode([in] MimeOleCompatModes dwMode);
        [entry("MimeOleContentTypeFromUrl")]
        HRESULT _stdcall MimeOleContentTypeFromUrl(
                        [in] LPSTR pszBase, 
                        [in] LPSTR pszURL, 
                        [out] LPSTR* ppszCntType);
        [entry("MimeOleParseMhtmlUrl")]
        HRESULT _stdcall MimeOleParseMhtmlUrl(
                        [in] LPSTR pszURL, 
                        [out] int* ppszRootUrl, 
                        [out] int* ppszBodyUrl);
        [entry("MimeOleObjectFromUrl")]
        HRESULT _stdcall MimeOleObjectFromUrl(
                        [in] LPSTR pszURL, 
                        [in] int fCreate, 
                        [in] UUID* riid, 
                        [out] void* ppvObject, 
                        [out] IUnknown** ppUnkKeepAlive);
        [entry("MimeOleObjectFromMoniker")]
        HRESULT _stdcall MimeOleObjectFromMoniker(
                        [in] BINDF bindf, 
                        [in] IMoniker* pmkOriginal, 
                        [in] IBindCtx* pBindCtx, 
                        [in] UUID* riid, 
                        [out] void* ppvObject, 
                        [out] IMoniker** ppmkNew);
        [entry("MimeOleCombineURL")]
        HRESULT _stdcall MimeOleCombineURL(
                        [in] LPSTR pszBase, 
                        [in] int cchBase, 
                        [in] LPSTR pszURL, 
                        [in] int cchURL, 
                        [in] int fUnEscape, 
                        [out] LPSTR* ppszAbsolute);
        [entry("MimeOleGetSubjectFileName")]
        HRESULT _stdcall MimeOleGetSubjectFileName(
                        [in] IMimePropertySet* pPropertySet, 
                        [out] int* pulPart, 
                        [out] int* pulTotal, 
                        [in, out] LPSTR pszFileName, 
                        [in] int cchmax);
        [entry("MimeOleCreateWebDocument")]
        HRESULT _stdcall MimeOleCreateWebDocument(
                        [in] LPSTR pszBase, 
                        [in] LPSTR pszURL, 
                        [out, retval] IMimeWebDocument** ppDocument);
        [entry("MimeOleGetRelatedSection")]
        HRESULT _stdcall MimeOleGetRelatedSection(
                        [in] IMimeMessageTree* pTree, 
                        [in] BOOL fCreate, 
                        [out] int* phRelated, 
                        [out] BOOL* pfMultiple);
        [entry("MimeOleGetMixedSection")]
        HRESULT _stdcall MimeOleGetMixedSection(
                        [in] IMimeMessageTree* pTree, 
                        [in] BOOL fCreate, 
                        [out] int* phMixed, 
                        [out] BOOL* pfMultiple);
        [entry("MimeOleGetAlternativeSection")]
        HRESULT _stdcall MimeOleGetAlternativeSection(
                        [in] IMimeMessageTree* pTree, 
                        [out] int* phAlternative, 
                        [out] BOOL* pfMultiple);
        [entry("MimeOleGenerateCID")]
        HRESULT _stdcall MimeOleGenerateCID(
                        [in, out] LPSTR pszCID, 
                        [in] int cchmax, 
                        [in] BOOL fAbsolute);
        [entry("MimeOleGenerateMID")]
        HRESULT _stdcall MimeOleGenerateMID(
                        [in, out] LPSTR pszMID, 
                        [in] int cchmax, 
                        [in] BOOL fAbsolute);
        [entry("MimeOleCreateByteStream")]
        HRESULT _stdcall MimeOleCreateByteStream([out, retval] IStream** ppStream);
        [entry("MimeOleGetPropertySchema")]
        HRESULT _stdcall MimeOleGetPropertySchema([out, retval] IMimePropertySchema** ppSchema);
        [entry("MimeOleQueryString")]
        HRESULT _stdcall MimeOleQueryString(
                        [in] LPSTR pszSearchMe, 
                        [in] LPSTR pszCriteria, 
                        [in] BOOL fSubString, 
                        [in] BOOL fCaseSensitive);
        [entry("MimeOleGetPropA")]
        HRESULT _stdcall MimeOleGetPropA(
                        [in] IMimePropertySet* pPropertySet, 
                        [in] LPSTR pszName, 
                        [in] int dwFlags, 
                        [out] LPSTR* ppszData);
        [entry("MimeOleSetPropA")]
        HRESULT _stdcall MimeOleSetPropA(
                        [in] IMimePropertySet* pPropertySet, 
                        [in] LPSTR pszName, 
                        [in] int dwFlags, 
                        [in] LPSTR pszData);
        [entry("MimeOleGetPropW")]
        HRESULT _stdcall MimeOleGetPropW(
                        [in] IMimePropertySet* pPropertySet, 
                        [in] LPSTR pszName, 
                        [in] int dwFlags, 
                        [out] LPWSTR* ppszData);
        [entry("MimeOleSetPropW")]
        HRESULT _stdcall MimeOleSetPropW(
                        [in] IMimePropertySet* pPropertySet, 
                        [in] LPSTR pszName, 
                        [in] int dwFlags, 
                        [in] LPWSTR pszData);
        [entry("MimeOleGetBodyPropA")]
        HRESULT _stdcall MimeOleGetBodyPropA(
                        [in] IMimeMessageTree* pTree, 
                        [in] int hBody, 
                        [in] int pszName, 
                        [in] int dwFlags, 
                        [out] LPSTR* ppszData);
        [entry("MimeOleSetBodyPropA")]
        HRESULT _stdcall MimeOleSetBodyPropA(
                        [in] IMimeMessageTree* pTree, 
                        [in] int hBody, 
                        [in] LPSTR pszName, 
                        [in] int dwFlags, 
                        [in] LPSTR pszData);
        [entry("MimeOleGetBodyPropW")]
        HRESULT _stdcall MimeOleGetBodyPropW(
                        [in] IMimeMessageTree* pTree, 
                        [in] int hBody, 
                        [in] int pszName, 
                        [in] int dwFlags, 
                        [out] LPWSTR* ppszData);
        [entry("MimeOleSetBodyPropW")]
        HRESULT _stdcall MimeOleSetBodyPropW(
                        [in] IMimeMessageTree* pTree, 
                        [in] int hBody, 
                        [in] LPSTR pszName, 
                        [in] int dwFlags, 
                        [in] LPWSTR pszData);
        [entry("MimeOleCreateHeaderTable")]
        HRESULT _stdcall MimeOleCreateHeaderTable([out, retval] IMimeHeaderTable** ppTable);
        [entry("MimeOleVariantFree")]
        HRESULT _stdcall MimeOleVariantFree([in, out] VARIANT* pProp);
        [entry("MimeOleVariantCopy")]
        HRESULT _stdcall MimeOleVariantCopy(
                        [out] VARIANT* pDest, 
                        [in] VARIANT* pSource);
        [entry("MimeOleGetExtClassId")]
        HRESULT _stdcall MimeOleGetExtClassId(
                        [in] LPSTR pszExtension, 
                        [out] UUID* pclsid);
        [entry("MimeOleEncodeHeader")]
        HRESULT _stdcall MimeOleEncodeHeader(
                        [in] int hCharset, 
                        [in] VARIANT* pData, 
                        [out] LPSTR* ppszEncoded, 
                        [in, out] RFC1522INFO* pRfc1522Info);
        [entry("MimeOleDecodeHeader")]
        HRESULT _stdcall MimeOleDecodeHeader(
                        [in] int hCharset, 
                        [in] LPSTR pszData, 
                        [out] VARIANT* pDecoded, 
                        [in, out] RFC1522INFO* pRfc1522Info);
        [entry("MimeOleRfc1522Decode")]
        HRESULT _stdcall MimeOleRfc1522Decode(
                        [in] LPSTR pszValue, 
                        [in] LPSTR pszCharset, 
                        [in] int cchmax, 
                        [out] LPSTR* ppszDecoded);
        [entry("MimeOleRfc1522Encode")]
        HRESULT _stdcall MimeOleRfc1522Encode(
                        [in] LPSTR pszValue, 
                        [in] int hCharset, 
                        [out] LPSTR* ppszEncoded);
        [entry("MimeOleGetInternat")]
        HRESULT _stdcall MimeOleGetInternat([out, retval] IMimeInternational** ppInternat);
        [entry("MimeOleFindCharset")]
        HRESULT _stdcall MimeOleFindCharset(
                        [in] LPSTR pszCharset, 
                        [out, retval] int* phCharset);
        [entry("MimeOleGetCharsetInfo")]
        HRESULT _stdcall MimeOleGetCharsetInfo(
                        [in] int hCharset, 
                        [out] INETCSETINFO* pCsetInfo);
        [entry("MimeOleGetCodePageInfo")]
        HRESULT _stdcall MimeOleGetCodePageInfo(
                        [in] int cpiCodePage, 
                        [out] CODEPAGEINFO* pCodePageInfo);
        [entry("MimeOleGetDefaultCharset")]
        HRESULT _stdcall MimeOleGetDefaultCharset([out, retval] int* phCharset);
        [entry("MimeOleSetDefaultCharset")]
        HRESULT _stdcall MimeOleSetDefaultCharset([in] int hCharset);
        [entry("MimeOleGetCodePageCharset")]
        HRESULT _stdcall MimeOleGetCodePageCharset(
                        [in] int cpiCodePage, 
                        [in] CharsetType ctCsetType, 
                        [out, retval] int* phCharset);
        [entry("MimeOleCreateVirtualStream")]
        HRESULT _stdcall MimeOleCreateVirtualStream([out, retval] IStream** ppStream);
        [entry("MimeOleOpenFileStream")]
        HRESULT _stdcall MimeOleOpenFileStream(
                        [in] LPSTR pszFilePath, 
                        [in] int dwCreationDistribution, 
                        [in] int dwAccess, 
                        [out, retval] IStream** ppstmFile);
        [entry("MimeOleIsTnefStream")]
        HRESULT _stdcall MimeOleIsTnefStream([in] IStream* pStream);
        [entry("MimeOleGenerateFileName")]
        HRESULT _stdcall MimeOleGenerateFileName(
                        [in] LPSTR pszContentType, 
                        [in] LPSTR pszSuggest, 
                        [in] LPSTR pszDefaultExt, 
                        [in, out] LPSTR* ppszFileName);
        [entry("MimeOleGetFileExtension")]
        HRESULT _stdcall MimeOleGetFileExtension(
                        [in] LPSTR pszFilePath, 
                        [in, out] LPSTR pszExt, 
                        [in] int cchmax);
        [entry("MimeOleCreateSecurity")]
        HRESULT _stdcall MimeOleCreateSecurity([out, retval] IMimeSecurity** ppSecurity);
        [entry("MimeOleInetDateToFileTime")]
        HRESULT _stdcall MimeOleInetDateToFileTime(
                        [in] LPSTR pszDate, 
                        [out, retval] CURRENCY* pft);
        [entry("MimeOleFileTimeToInetDate")]
        HRESULT _stdcall MimeOleFileTimeToInetDate(
                        [in] CURRENCY* pft, 
                        [in, out] LPSTR pszDate, 
                        [in] int cchmax);
        [entry("MimeOleCreateMessageParts")]
        HRESULT _stdcall MimeOleCreateMessageParts([out, retval] IMimeMessageParts** ppParts);
        [entry("MimeOleGetAllocator")]
        HRESULT _stdcall MimeOleGetAllocator([out, retval] IMimeAllocator** ppAllocator);
        [entry("MimeOleParseRfc822Address")]
        HRESULT _stdcall MimeOleParseRfc822Address(
                        [in] int dwAdrType, 
                        [in] EncodingType ietEncoding, 
                        [in] LPSTR pszRfc822Adr, 
                        [out] ADDRESSLIST* pList);
        [entry("MimeOleCreateMessage")]
        HRESULT _stdcall MimeOleCreateMessage(
                        [in] IUnknown* pUnkOuter, 
                        [out, retval] IMimeMessage** ppMessage);
        [entry("MimeOleMergePartialHeaders")]
        HRESULT _stdcall MimeOleMergePartialHeaders(
                        [in] IStream* pstmIn, 
                        [in] IStream* pstmOut);
        [entry("MimeOleEscapeString")]
        HRESULT _stdcall MimeOleEscapeString(
                        [in] int cpiCodePage, 
                        [in] LPSTR pszIn, 
                        [out] LPSTR* ppszOut);
        [entry("MimeOleGetExtContentType")]
        HRESULT _stdcall MimeOleGetExtContentType(
                        [in] LPSTR pszExtension, 
                        [out] LPSTR* ppszContentType);
        [entry("MimeOleGetContentTypeExt")]
        HRESULT _stdcall MimeOleGetContentTypeExt(
                        [in] LPSTR pszContentType, 
                        [out] LPSTR* ppszExtension);
        [entry("MimeOleGetFileInfo")]
        HRESULT _stdcall MimeOleGetFileInfo(
                        [in] LPSTR pszFilePath, 
                        [out] LPSTR* ppszCntType, 
                        [out] LPSTR* ppszSubType, 
                        [out] LPSTR* ppszCntDesc, 
                        [out] LPSTR* ppszFileName, 
                        [out] LPSTR* ppszExtension);
        [entry("MimeOleCreateBody")]
        HRESULT _stdcall MimeOleCreateBody([out, retval] IMimeBody** ppBody);
        [entry("MimeOleCreatePropertySet")]
        HRESULT _stdcall MimeOleCreatePropertySet(
                        [in] IUnknown* pUnkOuter, 
                        [out, retval] IMimePropertySet** ppPropertySet);
        [entry("MimeOleCreateMessageTree")]
        HRESULT _stdcall MimeOleCreateMessageTree(
                        [in] IUnknown* pUnkOuter, 
                        [out, retval] IMimeMessageTree** ppMessageTree);
        [entry("MimeOleGetCertsFromThumbprints")]
        HRESULT _stdcall MimeOleGetCertsFromThumbprints(
                        [in] BLOB* rgThumbprint, 
                        [in, out] X509CERTRESULT* pResults, 
                        [in] int* rghCertStore, 
                        [in] int cCertStore);
        [entry("MimeOleSplitMessage")]
        HRESULT _stdcall MimeOleSplitMessage(
                        [in] IMimeMessage* pMessage, 
                        [in] int cbMaxPart, 
                        [out, retval] IMimeMessageParts** ppParts);
        [entry("MimeOleClearDirtyTree")]
        HRESULT _stdcall MimeOleClearDirtyTree([in] IMimeMessageTree* pTree);
        [entry("MimeOleConvertEnrichedToHTML")]
        HRESULT _stdcall MimeOleConvertEnrichedToHTML(
                        [in] int codepage, 
                        [in] IStream* pIn, 
                        [in] IStream* pOut);
        [entry("MimeOleIsEnrichedStream")]
        HRESULT _stdcall MimeOleIsEnrichedStream([in] IStream* pStream);
        [entry("MimeOleSMimeCapsToDlg")]
        HRESULT _stdcall MimeOleSMimeCapsToDlg(
                        [in] unsigned char* pbSMimeCaps, 
                        [in] int cbSMimeCaps, 
                        [in] int cCerts, 
                        [in] void** rgCerts, 
                        [in] int hwndDlg, 
                        [in] int idEncAlgs, 
                        [in] int idSignAlgs, 
                        [in] int idBlob);
        [entry("MimeOleSMimeCapsFromDlg")]
        HRESULT _stdcall MimeOleSMimeCapsFromDlg(
                        [in] int hwnd, 
                        [in] int idEncAlgs, 
                        [in] int idSignAlgs, 
                        [in] int idBlob, 
                        [in, out] unsigned char* pbSMimeCaps, 
                        [in, out] int* pcbSmimeCaps);
        [entry("MimeOleSMimeCapInit")]
        HRESULT _stdcall MimeOleSMimeCapInit(
                        [in] unsigned char* pbSMimeCap, 
                        [in] int cbSMimeCap, 
                        [out] void* ppv);
        [entry("MimeOleSMimeCapAddSMimeCap")]
        HRESULT _stdcall MimeOleSMimeCapAddSMimeCap(
                        [in] unsigned char* pbSMimeCap, 
                        [in] int cbSMimeCap, 
                        [in, out] void* pv);
        [entry("MimeOleSMimeCapAddCert")]
        HRESULT _stdcall MimeOleSMimeCapAddCert(
                        [in] unsigned char* pbCert, 
                        [in] int cbCert, 
                        [in] int fParanoid, 
                        [in, out] void* pv);
        [entry("MimeOleSMimeCapGetEncAlg")]
        HRESULT _stdcall MimeOleSMimeCapGetEncAlg(
                        [in] void* pv, 
                        [in, out] unsigned char* pbEncode, 
                        [in, out] int* pcbEncode, 
                        [in, out] int* pdwBits);
        [entry("MimeOleSMimeCapGetHashAlg")]
        HRESULT _stdcall MimeOleSMimeCapGetHashAlg(
                        [in] void* pv, 
                        [in, out] unsigned char* pbEncode, 
                        [in, out] int* pcbEncode, 
                        [in, out] int* pfBlobSign);
        [entry("MimeOleSMimeCapRelease")]
        HRESULT _stdcall MimeOleSMimeCapRelease([in] void* pv);
        [entry("MimeOleAlgNameFromSMimeCap")]
        HRESULT _stdcall MimeOleAlgNameFromSMimeCap(
                        [in] unsigned char* pb, 
                        [in] int cb, 
                        [out] LPSTR* ppzProtocol);
        [entry("MimeOleAlgStrengthFromSMimeCap")]
        HRESULT _stdcall MimeOleAlgStrengthFromSMimeCap(
                        [in] unsigned char* pb, 
                        [in] int cb, 
                        [in] int fEncryption, 
                        [out] int* pdwStrength);
        [entry("MimeOleSMimeCapsFull")]
        HRESULT _stdcall MimeOleSMimeCapsFull(
                        [in] void* pv, 
                        [in] int fFullEncryption, 
                        [in] int fFullSigning, 
                        [in, out] unsigned char* pbSymCaps, 
                        [in, out] int* pcbSymCaps);
        [entry("MimeOleCreateHashTable")]
        HRESULT _stdcall MimeOleCreateHashTable(
                        [in] int dwSize, 
                        [in] int fDupeKeys, 
                        [out, retval] IHashTable** ppHashTable);
        [entry("MimeOleStripHeaders")]
        HRESULT _stdcall MimeOleStripHeaders(
                        [in] IMimeMessage* pMessage, 
                        [in] int hBody, 
                        [in] LPSTR pszNameDelete, 
                        [in] LPSTR pszHeaderAdd, 
                        [in] IStream** ppStream);
        [entry("MimeEditViewSource")]
        HRESULT _stdcall MimeEditViewSource(
                        [in] int hwndParent, 
                        [in] IMimeMessage* pMsg);
        [entry("MimeEditIsSafeToRun")]
        HRESULT _stdcall MimeEditIsSafeToRun(
                        [in] int hwndParent, 
                        [in] LPSTR lpszFileName);
        [entry("MimeEditVerifyTrust")]
        HRESULT _stdcall MimeEditVerifyTrust(
                        [in] int hwndParent, 
                        [in] LPSTR lpszFileName, 
                        [in] LPSTR lpszPathName);
        [entry("MimeEditCreateMimeDocument")]
        HRESULT _stdcall MimeEditCreateMimeDocument(
                        [in] IUnknown* pDoc, 
                        [in] IMimeMessage* pMsgSrc, 
                        [in] MimeEditCreateDocumentFlags dwFlags, 
                        [out, retval] IMimeMessage** ppMsg);
        [entry("MimeEditGetBackgroundImageUrl")]
        HRESULT _stdcall MimeEditGetBackgroundImageUrl(
                        [in] IUnknown* pDoc, 
                        [out, retval] BSTR* pbstr);
        [entry("MimeEditDocumentFromStream")]
        HRESULT _stdcall MimeEditDocumentFromStream(
                        [in] IStream* pstm, 
                        [in] UUID* riid, 
                        [out] void* ppDoc);
        const LPSTR STR_HDR_FROM = "From";
        const LPSTR STR_HDR_TO = "To";
        const LPSTR STR_HDR_CC = "Cc";
        const LPSTR STR_HDR_BCC = "Bcc";
        const LPSTR STR_HDR_SENDER = "Sender";
        const LPSTR STR_HDR_REPLYTO = "Reply-To";
        const LPSTR STR_HDR_RETURNPATH = "Return-Path";
        const LPSTR STR_HDR_RR = "Rr";
        const LPSTR STR_HDR_RETRCPTTO = "Return-Receipt-To";
        const LPSTR STR_HDR_APPARTO = "Apparently-To";
        const LPSTR STR_HDR_DATE = "Date";
        const LPSTR STR_HDR_RECEIVED = "Received";
        const LPSTR STR_HDR_MESSAGEID = "Message-ID";
        const LPSTR STR_HDR_XMAILER = "X-Mailer";
        const LPSTR STR_HDR_ENCODING = "Encoding";
        const LPSTR STR_HDR_ENCRYPTED = "Encrypted";
        const LPSTR STR_HDR_COMMENT = "Comment";
        const LPSTR STR_HDR_SUBJECT = "Subject";
        const LPSTR STR_HDR_MIMEVER = "MIME-Version";
        const LPSTR STR_HDR_CNTTYPE = "Content-Type";
        const LPSTR STR_HDR_CNTXFER = "Content-Transfer-Encoding";
        const LPSTR STR_HDR_CNTID = "Content-ID";
        const LPSTR STR_HDR_CNTDESC = "Content-Description";
        const LPSTR STR_HDR_CNTDISP = "Content-Disposition";
        const LPSTR STR_HDR_CNTBASE = "Content-Base";
        const LPSTR STR_HDR_CNTLOC = "Content-Location";
        const LPSTR STR_HDR_NEWSGROUPS = "Newsgroups";
        const LPSTR STR_HDR_PATH = "Path";
        const LPSTR STR_HDR_FOLLOWUPTO = "Followup-To";
        const LPSTR STR_HDR_EXPIRES = "Expires";
        const LPSTR STR_HDR_REFS = "References";
        const LPSTR STR_HDR_CONTROL = "Control";
        const LPSTR STR_HDR_DISTRIB = "Distribution";
        const LPSTR STR_HDR_KEYWORDS = "Keywords";
        const LPSTR STR_HDR_SUMMARY = "Summary";
        const LPSTR STR_HDR_APPROVED = "Approved";
        const LPSTR STR_HDR_LINES = "Lines";
        const LPSTR STR_HDR_XREF = "Xref";
        const LPSTR STR_HDR_ORG = "Organization";
        const LPSTR STR_HDR_XNEWSRDR = "X-Newsreader";
        const LPSTR STR_HDR_XPRI = "X-Priority";
        const LPSTR STR_HDR_XMSPRI = "X-MSMail-Priority";
        const LPSTR STR_HDR_OFFSETS = "X-Offsets";
        const LPSTR STR_HDR_XUNSENT = "X-Unsent";
        const LPSTR STR_HDR_ARTICLEID = "X-ArticleId";
        const LPSTR STR_HDR_NEWSGROUP = "X-Newsgroup";
        const LPSTR STR_HDR_XVOICEMAIL = "X-VoiceMail";
        const LPSTR STR_PAR_CHARSET = "par:content-type:charset";
        const LPSTR STR_PAR_NUMBER = "par:content-type:number";
        const LPSTR STR_PAR_TOTAL = "par:content-type:total";
        const LPSTR STR_PAR_ID = "par:content-type:id";
        const LPSTR STR_PAR_BOUNDARY = "par:content-type:boundary";
        const LPSTR STR_PAR_NAME = "par:content-type:name";
        const LPSTR STR_PAR_PROTOCOL = "par:content-type:protocol";
        const LPSTR STR_PAR_MICALG = "par:content-type:micalg";
        const LPSTR STR_PAR_FILENAME = "par:content-disposition:filename";
        const LPSTR STR_PAR_TYPE = "par:content-type:type";
        const LPSTR STR_PAR_START = "par:content-type:start";
        const LPSTR STR_PAR_ACCESSTYPE = "par:content-type:access-type";
        const LPSTR STR_PAR_XURL = "par:content-type:X-URL";
        const LPSTR STR_PAR_SIZE = "par:content-type:size";
        const LPSTR STR_PAR_SMIMETYPE = "par:content-type:smime-type";
        const LPSTR STR_ATT_FILENAME = "att:filename";
        const LPSTR STR_ATT_GENFNAME = "att:generated-filename";
        const LPSTR STR_ATT_PRITYPE = "att:pri-content-type";
        const LPSTR STR_ATT_SUBTYPE = "att:sub-content-type";
        const LPSTR STR_ATT_NORMSUBJ = "att:normalized-subject";
        const LPSTR STR_ATT_ILLEGAL = "att:illegal-lines";
        const LPSTR STR_ATT_RENDERED = "att:rendered";
        const LPSTR STR_ATT_AUTOINLINED = "att:auto-inlined";
        const LPSTR STR_ATT_SENTTIME = "att:sent-time";
        const LPSTR STR_ATT_RECVTIME = "att:received-time";
        const LPSTR STR_ATT_PRIORITY = "att:priority";
        const LPSTR STR_ATT_SERVER = "att:athena-server";
        const LPSTR STR_ATT_ACCOUNTNAME = "att:athena-account-name";
        const LPSTR STR_ATT_ACCOUNT = "att:athena-account";
        const LPSTR STR_ATT_UIDL = "att:athena-pop3-uidl";
        const LPSTR STR_ATT_STOREMSGID = "att:athena-store-msgid";
        const LPSTR STR_ATT_USERNAME = "att:athena-user-name";
        const LPSTR STR_ATT_FORWARDTO = "att:athena-forward-to";
        const LPSTR STR_ATT_STOREFOLDERID = "att:athena-store-fdrid";
        const LPSTR STR_ATT_GHOSTED = "att:athena-ghosted";
        const LPSTR STR_ATT_UNCACHEDSIZE = "att:athena-uncachedsize";
        const LPSTR STR_ATT_COMBINED = "att:athena-combined";
        const LPSTR STR_ATT_ACCOUNTID = "att:athena-account-id";
        const LPSTR STR_MIME_TEXT_PLAIN = "text/plain";
        const LPSTR STR_MIME_TEXT_HTML = "text/html";
        const LPSTR STR_MIME_APPL_STREAM = "application/octet-stream";
        const LPSTR STR_MIME_MPART_MIXED = "multipart/mixed";
        const LPSTR STR_MIME_MPART_ALT = "multipart/alternative";
        const LPSTR STR_MIME_MPART_RELATED = "multipart/related";
        const LPSTR STR_MIME_MSG_PART = "message/partial";
        const LPSTR STR_MIME_MSG_RFC822 = "message/rfc822";
        const LPSTR STR_MIME_APPLY_MSTNEF = "application/ms-tnef";
        const LPSTR STR_MIME_APPL_PKCS7SIG = "application/x-pkcs7-signature";
        const LPSTR STR_MIME_APPL_PKCS7SIG_1 = "application/pkcs7-signature";
        const LPSTR STR_MIME_TEXT_ENRCICHED = "text/enriched";
        const LPSTR STR_CNT_TEXT = "text";
        const LPSTR STR_CNT_MULTIPART = "multipart";
        const LPSTR STR_CNT_MESSAGE = "message";
        const LPSTR STR_CNT_IMAGE = "image";
        const LPSTR STR_CNT_AUDIO = "audio";
        const LPSTR STR_CNT_VIDEO = "video";
        const LPSTR STR_CNT_APPLICATION = "application";
        const LPSTR STR_SUB_PLAIN = "plain";
        const LPSTR STR_SUB_HTML = "html";
        const LPSTR STR_SUB_ENRICHED = "enriched";
        const LPSTR STR_SUB_RTF = "ms-rtf";
        const LPSTR STR_SUB_MIXED = "mixed";
        const LPSTR STR_SUB_PARALLEL = "parallel";
        const LPSTR STR_SUB_DIGEST = "digest";
        const LPSTR STR_SUB_RELATED = "related";
        const LPSTR STR_SUB_ALTERNATIVE = "alternative";
        const LPSTR STR_SUB_RFC822 = "rfc822";
        const LPSTR STR_SUB_PARTIAL = "partial";
        const LPSTR STR_SUB_EXTERNAL = "external-body";
        const LPSTR STR_SUB_OCTETSTREAM = "octet-stream";
        const LPSTR STR_SUB_POSTSCRIPT = "postscript";
        const LPSTR STR_SUB_GIF = "gif";
        const LPSTR STR_SUB_JPEG = "jpeg";
        const LPSTR STR_SUB_BASIC = "basic";
        const LPSTR STR_SUB_MPEG = "mpeg";
        const LPSTR STR_SUB_MSTNEF = "ms-tnef";
        const LPSTR STR_SUB_MSWORD = "msword";
        const LPSTR STR_SUB_WAV = "wav";
        const LPSTR STR_SUB_PKCS7MIME = "pkcs7-mime";
        const LPSTR STR_SUB_PKCS7SIG = "pkcs7-signature";
        const LPSTR STR_SUB_XPKCS7MIME = "x-pkcs7-mime";
        const LPSTR STR_SUB_XPKCS7SIG = "x-pkcs7-signature";
        const LPSTR STR_SUB_SIGNED = "signed";
        const LPSTR STR_SUB_BINHEX = "mac-binhex40";
        const LPSTR STR_SUB_VCARD = "x-vcard";
        const LPSTR STR_ENC_7BIT = "7bit";
        const LPSTR STR_ENC_QP = "quoted-printable";
        const LPSTR STR_ENC_BASE64 = "base64";
        const LPSTR STR_ENC_8BIT = "8bit";
        const LPSTR STR_ENC_BINARY = "binary";
        const LPSTR STR_ENC_UUENCODE = "uuencode";
        const LPSTR STR_ENC_XUUENCODE = "x-uuencode";
        const LPSTR STR_ENC_XUUE = "x-uue";
        const LPSTR STR_ENC_BINHEX40 = "mac-binhex40";
        const LPSTR STR_DIS_INLINE = "inline";
        const LPSTR STR_DIS_ATTACHMENT = "attachment";
        const LPSTR STR_PRO_SHA1 = "sha1";
        const LPSTR STR_PRO_MD5 = "rsa-md5";
        const LPSTR STR_PRI_MS_HIGH = "High";
        const LPSTR STR_PRI_MS_NORMAL = "Normal";
        const LPSTR STR_PRI_MS_LOW = "Low";
        const LPSTR STR_PRI_HIGH = "1";
        const LPSTR STR_PRI_NORMAL = "3";
        const LPSTR STR_PRI_LOW = "5";
        const LPSTR STR_CF_HTML = "HTML Format";
        const LPSTR STR_CF_INETMSG = "Internet Message (rfc822/rfc1522)";
        const LPSTR STR_CF_RFC822 = "message/rfc822";
        const int MAX_CBMAX_HEADER_LINE = -1;
        const int MIN_CBMAX_HEADER_LINE = 76;
        const int MAX_CBMAX_BODY_LINE = -1;
        const int MIN_CBMAX_BODY_LINE = 30;
        const short CCHMAX_HEADER_LINE = 1000;
        const int CP_USASCII = 1252;
        const int CP_UNICODE = 1200;
        const int CP_JAUTODETECT = 50932;
        const int CP_KAUTODETECT = 50949;
        const int CP_ISO2022JPESC = 50221;
        const int CP_ISO2022JPSIO = 50222;
        const short CCHMAX_CSET_NAME = 128;
        const short CCHMAX_LANG_NAME = 128;
        const short CCHMAX_FACE_NAME = 128;
        const int HBODY_ROOT = -1;
        const LPSTR CMDSETID_MimeEdit = "{1C82EADA-508E-11D1-8DCF-00C04FB951F9}";
        const LPSTR CMDSETID_MimeEditHost = "{1C82EADB-508E-11D1-8DCF-00C04FB951F9}";
        const LPSTR IIDSTR_IMimeMessage = "{FD853CD5-7F86-11d0-8252-00C04FD85AB4}";
    };

    typedef enum {
        MSOEAPI_START_SHOWSPLASH = 1,
        MSOEAPI_START_MESSAGEPUMP = 2,
        MSOEAPI_START_ALLOWCOMPACTION = 4,
        MSOEAPI_START_INSTANCEMUTEX = 8,
        MSOEAPI_START_SHOWERRORS = 16,
        MSOEAPI_START_APPWINDOW = 32,
        MSOEAPI_START_DEFAULTIDENTITY = 64,
        MSOEAPI_START_APPLICATION = 63
    } StartFlags;

    [
      dllname("MSOE.DLL")
    ]
    module MSOE {
		[entry("CoStartOutlookExpress")]
        HRESULT _stdcall CoStartOutlookExpress(
                        [in] StartFlags dwFlags, 
                        [in] LPSTR pszCmdLine, 
                        [in] int nCmdShow);
        const int CCHMAX_FOLDER_NAME = 256;
    };

    typedef enum {
        MSOEAPI_E_FILE_NOT_FOUND = -2146644123,
        MSOEAPI_E_STORE_INITIALIZE = -2146644122,
        MSOEAPI_E_INVALID_STRUCT_SIZE = -2146644121,
        MSOEAPI_E_CANT_LOAD_MSOERT = -2146644120,
        MSOEAPI_E_CANT_LOAD_INETCOMM = -2146644119,
        MSOEAPI_E_CANT_LOAD_MSOEACCT = -2146644112,
        MSOEAPI_E_CANT_MSOERT_BADVER = -2146644111,
        MSOEAPI_E_CANT_INETCOMM_BADVER = -2146644110,
        MSOEAPI_E_CANT_MSOEACCT_BADVER = -2146644109
    } MSOEAPI_ERROR;

    typedef enum {
        MSOEAPI_ACDM_CMDLINE = 1,
        MSOEAPI_ACDM_NOTIFY = 2,
        MSOEAPI_ACDM_ODBNOTIFY = 3,
        MSOEAPI_ACDM_STGNOTIFY = 4
    } MSOEAPI_ACDM;

    typedef enum {
        FOLDERID_ROOT = 0,
        FOLDERID_INVALID = -1
    } SpecialFolders;

    typedef enum {
        MSGID_INVALID = -1,
        MSGID_FIRST = -1
    } SpecialMessages;

    typedef enum {
        WM_FOLDERNOTIFY = 2624,
        WM_NEWMSGS = 2674,
        WM_DELETEMSGS = 2675,
        WM_DELETEFOLDER = 2676,
        WM_MARKEDASREAD = 2677,
        WM_MARKEDASUNREAD = 2678
    } NotificationMessages;

    typedef enum {
        NEW_FOLDER = 1,
        DELETE_FOLDER = 2,
        RENAME_FOLDER = 3,
        MOVE_FOLDER = 4,
        UNREAD_CHANGE = 5,
        IMAPFLAG_CHANGE = 6,
        UPDATEFLAG_CHANGE = 7,
        FOLDER_PROPS_CHANGED = 8
    } FolderNotifyType;

    typedef struct tagFolderNotifyEx {
                
FolderNotifyType type;
                
int idFolderOld;
                
int idFolderNew;
    } FolderNotifyEx;

    typedef struct tagMessageIdList {
                
int cbSize;
                
int cMsgs;
                
int* prgdwMsgId;
    } MessageIdList;

    typedef enum {
        FOLDER_NOTSPECIAL = -1,
        FOLDER_INBOX = 0,
        FOLDER_OUTBOX = 1,
        FOLDER_SENT = 2,
        FOLDER_DELETED = 3,
        FOLDER_DRAFT = 4,
        FOLDER_MAX = 5
    } SpecialFolder;

    typedef struct tagFolderProps {
                
int cbSize;
                
int dwFolderId;
                
int cSubFolders;
                
SpecialFolder sfType;
                
int cUnread;
                
int cMessage;
                
unsigned char szName[256];
    } FolderProps;

    typedef enum {
        Copy = 0,
        Move = 1,
        Delete = 2
    } CopyMoveMessagesFlags;

    typedef enum {
        MSG_DELETED = 1,
        MSG_UNREAD = 2,
        MSG_SUBMITTED = 4,
        MSG_UNSENT = 8,
        MSG_RECEIVED = 16,
        MSG_NEWSMSG = 32,
        MSG_NOSECUI = 64,
        MSG_VOICEMAIL = 128,
        MSG_REPLIED = 256,
        MSG_FORWARDED = 512,
        MSG_RCPTSENT = 1024,
        MSG_FLAGGED = 2048,
        MSG_EXTERNAL_FLAGS = 254,
        MSG_FLAGS = 15
    } MessageStateFlags;

    typedef struct tagMESSAGEPROPS {
                
int cbSize;
                
int dwReserved;
                
int dwMsg;
                
int dwLanguage;
                
MessageStateFlags dwState;
                
int cbMessage;
                
IMSGPRIORITY priority;
                
CURRENCY ftReceived;
                
CURRENCY ftSent;
                
int pszDisplayTo;
                
int pszDisplayFrom;
                
int pszSubject;
                
int pszNormalSubject;
                
IMSGFLAGS dwFlags;
                
IStream* pStmOffsetTable;
    } MESSAGEPROPS;

    typedef enum {
        MSGPROPS_FAST = 1
    } GetMessagePropsFlags;

    typedef enum {
        COMMITSTREAM_REVERT = 1
    } CommitStreamFlags;

    [
      odl,
      uuid(A9D758A0-4617-11CF-95FC-00AA00680DB4)
    ]
    interface IProgressNotify : stdole.IUnknown {
        HRESULT _stdcall OnProgress(
                        [in] int dwProgressCurrent, 
                        [in] int dwProgressMaximum, 
                        [in] int fAccurate, 
                        [in] int fOwner);
    };

    [
      odl,
      uuid(E70C92AA-4BFD-11D1-8A95-00C04FB951F3)
    ]
    interface IStoreNamespace : stdole.IUnknown {
        HRESULT _stdcall Initialize(
                        [in] int hwndOwner, 
                        [in] int dwReserved);
        HRESULT _stdcall GetDirectory(
                        [in, out] LPSTR pszPath, 
                        [in] int cchMaxPath);
        HRESULT _stdcall OpenSpecialFolder(
                        [in] SpecialFolder sfType, 
                        [in] int dwReserved, 
                        [out, retval] IStoreFolder** ppFolder);
        HRESULT _stdcall OpenFolder(
                        [in] int dwFolderId, 
                        [in] int dwReserved, 
                        [out, retval] IStoreFolder** ppFolder);
        HRESULT _stdcall CreateFolder(
                        [in] int dwParentId, 
                        [in] LPSTR pszName, 
                        [in] int dwReserved, 
                        [out, retval] int* pdwFolderId);
        HRESULT _stdcall RenameFolder(
                        [in] int dwFolderId, 
                        [in] int dwReserved, 
                        [in] LPSTR pszNewName);
        HRESULT _stdcall MoveFolder(
                        [in] int dwFolderId, 
                        [in] int dwParentId, 
                        [in] int dwReserved);
        HRESULT _stdcall DeleteFolder(
                        [in] int dwFolderId, 
                        [in] int dwReserved);
        HRESULT _stdcall GetFolderProps(
                        [in] int dwFolderId, 
                        [in] int dwReserved, 
                        [in, out] FolderProps* pProps);
        HRESULT _stdcall CopyMoveMessages(
                        [in] IStoreFolder* pSource, 
                        [in] IStoreFolder* pDest, 
                        [in] MessageIdList* pMsgIdList, 
                        [in] CopyMoveMessagesFlags dwFlags, 
                        [in] MessageStateFlags dwFlagsRemove, 
                        [in] IProgressNotify* pProgress);
        HRESULT _stdcall RegisterNotification(
                        [in] int dwReserved, 
                        [in] int hwnd);
        HRESULT _stdcall UnregisterNotification(
                        [in] int dwReserved, 
                        [in] int hwnd);
        HRESULT _stdcall CompactAll([in] int dwReserved);
        HRESULT _stdcall GetFirstSubFolder(
                        [in] int dwFolderId, 
                        [in, out] FolderProps* pProps, 
                        [out, retval] int* phEnum);
        int _stdcall GetNextSubFolder(
                        [in] int hEnum, 
                        [in, out] FolderProps* pProps);
        HRESULT _stdcall GetSubFolderClose([in] int hEnum);
    };

    [
      odl,
      uuid(E70C92AC-4BFD-11D1-8A95-00C04FB951F3)
    ]
    interface IStoreFolder : stdole.IUnknown {
        HRESULT _stdcall GetFolderProps(
                        [in] int dwReserved, 
                        [in, out] FolderProps* pProps);
        HRESULT _stdcall GetMessageProps(
                        [in] int dwMsg, 
                        [in] GetMessagePropsFlags dwFlags, 
                        [in, out] MESSAGEPROPS* pProps);
        HRESULT _stdcall FreeMessageProps([in, out] MESSAGEPROPS* pProps);
        HRESULT _stdcall DeleteMessages(
                        [in] MessageIdList* pMsgIdList, 
                        [in] int dwReserved, 
                        [in] IProgressNotify* pProgress);
        HRESULT _stdcall SetLanguage(
                        [in] int dwLanguage, 
                        [in] int dwReserved, 
                        [in] MessageIdList* pMsgIdList);
        HRESULT _stdcall MarkMessagesAsRead(
                        [in] int fRead, 
                        [in] int dwReserved, 
                        [in] MessageIdList* pMsgIdList);
        HRESULT _stdcall SetFlags(
                        [in] MessageIdList* pMsgIdList, 
                        [in] int dwState, 
                        [in] int dwStatemask, 
                        [out] int* prgdwNewFlags);
        HRESULT _stdcall OpenMessage(
                        [in] int dwMsg, 
                        [in] UUID* riid, 
                        [out, retval] IUnknown** ppvObject);
        HRESULT _stdcall SaveMessage(
                        [in] UUID* riid, 
                        [in] IUnknown* pvObject, 
                        [in] int dwMsgFlags, 
                        [out, retval] int* pdwint);
        HRESULT _stdcall BatchLock(
                        [in] int dwReserved, 
                        [out, retval] int* pint);
        HRESULT _stdcall BatchFlush(
                        [in] int dwReserved, 
                        [in] int lock);
        HRESULT _stdcall BatchUnlock(
                        [in] int dwReserved, 
                        [in] int lock);
        HRESULT _stdcall CreateStream(
                        [in] int lock, 
                        [in] int dwReserved, 
                        [out] IStream** ppStream, 
                        [out] int* pdwMsg);
        HRESULT _stdcall CommitStream(
                        [in] int int, 
                        [in] CommitStreamFlags dwFlags, 
                        [in] MessageStateFlags dwMsgFlags, 
                        [in] IStream* pStream, 
                        [in] int dwMsg, 
                        [in] IMimeMessage* pMessage);
        HRESULT _stdcall RegisterNotification(
                        [in] int dwReserved, 
                        [in] int hwnd);
        HRESULT _stdcall UnregisterNotification(
                        [in] int dwReserved, 
                        [in] int hwnd);
        HRESULT _stdcall Compact([in] int dwReserved);
        HRESULT _stdcall GetFirstMessage(
                        [in] GetMessagePropsFlags dwFlags, 
                        [in] MessageStateFlags dwMsgFlags, 
                        [in] int dwMsgIdFirst, 
                        [in, out] MESSAGEPROPS* pProps, 
                        [out, retval] int* phEnum);
        int _stdcall GetNextMessage(
                        [in] int hEnum, 
                        [in] GetMessagePropsFlags dwFlags, 
                        [in, out] MESSAGEPROPS* pProps);
        HRESULT _stdcall GetMessageClose([in] int hEnum);
    };

    [
      uuid(0006F01A-0000-0000-C000-000000000046)
    ]
    coclass Envelope {
        [default] interface IPersistMime;
    };

    [
      uuid(E70C92A9-4BFD-11D1-8A95-00C04FB951F3)
    ]
    coclass StoreNamespace {
        [default] interface IStoreNamespace;
    };

    typedef enum {
        E_RegCreateKeyFailed = -2146644736,
        E_RegQueryInfoKeyFailed = -2146644735,
        E_UserCancel = -2146644734,
        E_RegOpenKeyFailed = -2146644733,
        E_RegSetValueFailed = -2146644732,
        E_RegDeleteKeyFailed = -2146644731,
        E_DuplicateAccountName = -2146644730,
        S_NonStandardValue = 838919,
        E_InvalidValue = -2146644728,
        S_AlreadyInitialized = 838921
    } AccountManagerGeneralErrors;

    typedef enum {
        E_NoPropData = -2146644576,
        E_BufferTooSmall = -2146644575,
        E_BadPropType = -2146644574,
        E_BufferSizeMismatch = -2146644573,
        E_InvalidBooleanValue = -2146644572,
        E_InvalidMinMaxValue = -2146644571,
        E_PropNotFound = -2146644570,
        E_InvalidPropTag = -2146644569,
        E_InvalidPropertySet = -2146644568,
        E_EnumFinished = -2146644567,
        S_NoSaveNeeded = 839082,
        S_PasswordDeleted = 839083,
        S_PasswordNotFound = 839084
    } PropertyContainerErrors;

    typedef enum {
        E_NoAccounts = -2146644528,
        E_BadFriendlyName = -2146644527,
        E_NoIdentities = -2146644526
    } AccountManagerErrors;

    typedef enum {
        TYPE_ERROR = 1000,
        TYPE_DWORD = 1001,
        TYPE_LONG = 1002,
        TYPE_WORD = 1003,
        TYPE_SHORT = 1004,
        TYPE_BYTE = 1005,
        TYPE_CHAR = 1006,
        TYPE_FILETIME = 1007,
        TYPE_STRING = 1008,
        TYPE_BINARY = 1009,
        TYPE_FLAGS = 1010,
        TYPE_STREAM = 1011,
        TYPE_WSTRING = 1012,
        TYPE_BOOL = 1013,
        TYPE_PASS = 1014,
        TYPE_LAST = 1015
    } PROPTYPE;

    typedef enum {
        AP_ACCOUNT_NAME = 4661,
        AP_TEMP_ACCOUNT = 4663,
        AP_LAST_UPDATED = 4664,
        AP_RAS_CONNECTION_TYPE = 4665,
        AP_RAS_CONNECTOID = 4666,
        AP_RAS_CONNECTION_FLAGS = 4667,
        AP_ACCOUNT_ID = 4669,
        AP_RAS_BACKUP_CONNECTOID = 4670,
        AP_SERVICE = 4671,
        AP_AVAIL_OFFLINE = 4672,
        AP_UNIQUE_ID = 4673,
        AP_SERVER_READ_ONLY = 4674,
        AP_IMAP_SERVER = 4760,
        AP_IMAP_USERNAME = 4761,
        AP_IMAP_PASSWORD = 4762,
        AP_IMAP_USE_SICILY = 4764,
        AP_IMAP_PORT = 4765,
        AP_IMAP_SSL = 4766,
        AP_IMAP_TIMEOUT = 4767,
        AP_IMAP_ROOT_FOLDER = 4768,
        AP_IMAP_DATA_DIR = 4769,
        AP_IMAP_USE_LSUB = 4771,
        AP_IMAP_POLL = 4772,
        AP_IMAP_FULL_LIST = 4773,
        AP_IMAP_NOOP_INTERVAL = 4774,
        AP_IMAP_SVRSPECIALFLDRS = 4776,
        AP_IMAP_SENTITEMSFLDR = 4777,
        AP_IMAP_DRAFTSFLDR = 4779,
        AP_IMAP_PROMPT_PASSWORD = 4784,
        AP_IMAP_DIRTY = 4785,
        AP_IMAP_POLL_ALL_FOLDERS = 4786,
        AP_LDAP_SERVER = 4860,
        AP_LDAP_USERNAME = 4861,
        AP_LDAP_PASSWORD = 4862,
        AP_LDAP_AUTHENTICATION = 4863,
        AP_LDAP_TIMEOUT = 4864,
        AP_LDAP_SEARCH_RETURN = 4865,
        AP_LDAP_SEARCH_BASE = 4866,
        AP_LDAP_SERVER_ID = 4867,
        AP_LDAP_RESOLVE_FLAG = 4868,
        AP_LDAP_URL = 4869,
        AP_LDAP_PORT = 4870,
        AP_LDAP_SSL = 4871,
        AP_LDAP_LOGO = 4872,
        AP_LDAP_USE_BIND_DN = 4873,
        AP_LDAP_SIMPLE_SEARCH = 4874,
        AP_LDAP_ADVANCED_SEARCH_ATTR = 4875,
        AP_LDAP_PAGED_RESULTS = 4876,
        AP_LDAP_NTDS = 4877,
        AP_HTTPMAIL_SERVER = 4910,
        AP_HTTPMAIL_USERNAME = 4911,
        AP_HTTPMAIL_PASSWORD = 4912,
        AP_HTTPMAIL_PROMPT_PASSWORD = 4913,
        AP_HTTPMAIL_USE_SICILY = 4914,
        AP_HTTPMAIL_FRIENDLY_NAME = 4915,
        AP_HTTPMAIL_DOMAIN_MSN = 4916,
        AP_HTTPMAIL_POLL = 4917,
        AP_NNTP_SERVER = 4960,
        AP_NNTP_USERNAME = 4961,
        AP_NNTP_PASSWORD = 4962,
        AP_NNTP_USE_SICILY = 4964,
        AP_NNTP_PORT = 4965,
        AP_NNTP_SSL = 4966,
        AP_NNTP_TIMEOUT = 4967,
        AP_NNTP_DISPLAY_NAME = 4968,
        AP_NNTP_ORG_NAME = 4969,
        AP_NNTP_EMAIL_ADDRESS = 4970,
        AP_NNTP_REPLY_EMAIL_ADDRESS = 4971,
        AP_NNTP_SPLIT_MESSAGES = 4972,
        AP_NNTP_SPLIT_SIZE = 4973,
        AP_NNTP_USE_DESCRIPTIONS = 4974,
        AP_NNTP_DATA_DIR = 4975,
        AP_NNTP_POLL = 4976,
        AP_NNTP_POST_FORMAT = 4977,
        AP_NNTP_SIGNATURE = 4978,
        AP_NNTP_PROMPT_PASSWORD = 4979,
        AP_POP3_SERVER = 5060,
        AP_POP3_USERNAME = 5061,
        AP_POP3_PASSWORD = 5062,
        AP_POP3_USE_SICILY = 5064,
        AP_POP3_PORT = 5065,
        AP_POP3_SSL = 5066,
        AP_POP3_TIMEOUT = 5067,
        AP_POP3_LEAVE_ON_SERVER = 5068,
        AP_POP3_REMOVE_DELETED = 5069,
        AP_POP3_REMOVE_EXPIRED = 5070,
        AP_POP3_EXPIRE_DAYS = 5071,
        AP_POP3_SKIP = 5072,
        AP_POP3_OUTLOOK_CACHE_NAME = 5073,
        AP_POP3_PROMPT_PASSWORD = 5074,
        AP_SMTP_SERVER = 5160,
        AP_SMTP_USERNAME = 5161,
        AP_SMTP_PASSWORD = 5162,
        AP_SMTP_USE_SICILY = 5164,
        AP_SMTP_PORT = 5165,
        AP_SMTP_SSL = 5166,
        AP_SMTP_TIMEOUT = 5167,
        AP_SMTP_DISPLAY_NAME = 5168,
        AP_SMTP_ORG_NAME = 5169,
        AP_SMTP_EMAIL_ADDRESS = 5170,
        AP_SMTP_REPLY_EMAIL_ADDRESS = 5171,
        AP_SMTP_SPLIT_MESSAGES = 5172,
        AP_SMTP_SPLIT_SIZE = 5173,
        AP_SMTP_CERTIFICATE = 5174,
        AP_SMTP_SIGNATURE = 5175,
        AP_SMTP_PROMPT_PASSWORD = 5176
    } AccountProperties;

    typedef enum {
        ACCT_FLAG_NEWS = 1,
        ACCT_FLAG_MAIL = 2,
        ACCT_FLAG_DIR_SERV = 4,
        ACCT_FLAG_ALL = 7
    } AccountFlags;

    typedef enum {
        SRV_NNTP = 1,
        SRV_IMAP = 2,
        SRV_POP3 = 4,
        SRV_SMTP = 8,
        SRV_LDAP = 16,
        SRV_HTTPMAIL = 32,
        SRV_MAIL = 46,
        SRV_ALL = 63
    } ServerTypes;

    typedef enum {
        LDAP_AUTH_ANONYMOUS = 0,
        LDAP_AUTH_PASSWORD = 1,
        LDAP_AUTH_MEMBER_SYSTEM = 2,
        LDAP_AUTH_MAX = 2
    } LDAPAuthenticationTypes;

    typedef enum {
        LDAP_PRESULT_UNKNOWN = 0,
        LDAP_PRESULT_SUPPORTED = 1,
        LDAP_PRESULT_NOTSUPPORTED = 2,
        LDAP_PRESULT_MAX = 2
    } LDAPPagedResultSupportTypes;

    typedef enum {
        LDAP_NTDS_UNKNOWN = 0,
        LDAP_NTDS_IS = 1,
        LDAP_NTDS_ISNOT = 2,
        LDAP_NTDS_MAX = 2
    } LDAPNTDSTypes;

    typedef enum {
        POST_USE_DEFAULT = 0,
        POST_USE_PLAIN_TEXT = 1,
        POST_USE_HTML = 2
    } AP_NNTP_POST_FORMATTypes;

    typedef enum {
        AN_ACCOUNT_DELETED = 1025,
        AN_ACCOUNT_ADDED = 1026,
        AN_ACCOUNT_CHANGED = 1027,
        AN_DEFAULT_CHANGED = 1028,
        AN_SERVERTYPES_CHANGED = 1029,
        AN_ACCOUNT_PREDELETE = 1030
    } AccountManagerNotificationTypes;

    typedef enum {
        ACCTDLG_NO_IMAP = 1,
        ACCTDLG_NO_REMOVEDELETE = 2,
        ACCTDLG_NO_BREAKMESSAGES = 4,
        ACCTDLG_NO_REMOVEAFTER = 8,
        ACCTDLG_NO_SENDRECEIVE = 16,
        ACCTDLG_NO_NEWSPOLL = 32,
        ACCTDLG_NO_SECURITY = 64,
        ACCTDLG_BACKUP_CONNECT = 128,
        ACCTDLG_NO_IMAPPOLL = 256,
        ACCTDLG_NO_NEW_POP = 512,
        ACCTDLG_SHOWIMAPSPECIAL = 1024,
        ACCTDLG_INTERNETCONNECTION = 2048,
        ACCTDLG_HTTPMAIL = 4096,
        ACCTDLG_REVOCATION = 8192,
        ACCTDLG_OE = 16384,
        ACCTDLG_ALL = 32767
    } AccountListDialogFlags;

    typedef enum {
        CONNECTION_TYPE_LAN = 0,
        CONNECTION_TYPE_MANUAL = 1,
        CONNECTION_TYPE_RAS = 2,
        CONNECTION_TYPE_INETSETTINGS = 3
    } AP_RAS_CONNECTION_TYPES;

    typedef enum {
        ACCT_WIZ_MIGRATE = 1,
        ACCT_WIZ_MAILIMPORT = 2,
        ACCT_WIZ_OUTLOOK = 4,
        ACCT_WIZ_NEWSIMPORT = 8,
        ACCT_WIZ_NO_NEW_POP = 16,
        ACCT_WIZ_INTERNETCONNECTION = 32,
        ACCT_WIZ_HTTPMAIL = 64,
        ACCT_WIZ_OE = 128
    } DoWizardFlags;

    typedef enum {
        ACCT_INIT_ATHENA = 1,
        ACCT_INIT_OUTLOOK = 2
    } InitExFlags;

    typedef enum {
        IMAP_FLDRLIST_DIRTY = 1,
        IMAP_OE4MIGRATE_DIRTY = 2,
        IMAP_SENTITEMS_DIRTY = 4,
        IMAP_DRAFTS_DIRTY = 8
    } AP_IMAP_DIRTY_Flags;

    typedef enum {
        SMTP_AUTH_NONE = 0,
        SMTP_AUTH_SICILY = 1,
        SMTP_AUTH_USE_POP3ORIMAP_SETTINGS = 2,
        SMTP_AUTH_USE_SMTP_SETTINGS = 3
    } SMTPAUTHTYPE;

    typedef enum {
        ACCT_NEWS = 0,
        ACCT_MAIL = 1,
        ACCT_DIR_SERV = 2,
        ACCT_LAST = 3
    } ACCTTYPE;

    typedef struct tagAccountContext {
                
ACCTTYPE ACCTTYPE;
                
LPSTR pszAccountID;
                
LPSTR pszOldName;
                
int dwServerType;
    } AccountContext;

    [
      odl,
      uuid(0A06BD31-166F-11D0-81B9-00C04FD85AB4)
    ]
    interface IImnAdviseAccount : stdole.IUnknown {
        HRESULT _stdcall AdviseAccount(
                        [in] int dwAdviseType, 
                        [in] AccountContext* pAcctCtx);
    };

    [
      odl,
      uuid(8D0AED11-1638-11D0-81B9-00C04FD85AB4)
    ]
    interface IImnAdviseMigrateServer : stdole.IUnknown {
        HRESULT _stdcall MigrateServer(
                        [in] int dwSrvType, 
                        [in] IImnAccount* pAccount);
    };

    [
      odl,
      uuid(FD465483-1384-11D0-ABBD-0020AFDFD10A)
    ]
    interface IImnEnumAccounts : stdole.IUnknown {
        HRESULT _stdcall GetCount([out, retval] int* pcItems);
        HRESULT _stdcall SortByAccountName();
        HRESULT _stdcall GetNext([out, retval] IImnAccount** ppAccount);
        HRESULT _stdcall Reset();
    };

    typedef struct tagACCTLISTINFO {
                
int cbSize;
                
ACCTTYPE AcctTypeInit;
                
int dwAcctFlags;
                
int dwFlags;
    } ACCTLISTINFO;

    [
      odl,
      uuid(FD465481-1384-11D0-ABBD-0020AFDFD10A)
    ]
    interface IImnAccountManager : stdole.IUnknown {
        HRESULT _stdcall Init([in] IImnAdviseMigrateServer* pAdviseMigrateServer);
        HRESULT _stdcall CreateAccountObject(
                        [in] ACCTTYPE ACCTTYPE, 
                        [out, retval] IImnAccount** ppAccount);
        HRESULT _stdcall Enumerate(
                        [in] int dwSrvTypes, 
                        [out, retval] IImnEnumAccounts** ppEnumAccounts);
        HRESULT _stdcall GetAccountCount(
                        [in] ACCTTYPE ACCTTYPE, 
                        [out, retval] int* pcServers);
        HRESULT _stdcall FindAccount(
                        [in] int dwPropTag, 
                        [in] LPSTR pszSearchData, 
                        [out, retval] IImnAccount** ppAccount);
        HRESULT _stdcall GetDefaultAccount(
                        [in] ACCTTYPE ACCTTYPE, 
                        [out, retval] IImnAccount** ppAccount);
        HRESULT _stdcall GetDefaultAccountName(
                        [in] ACCTTYPE ACCTTYPE, 
                        [in] LPSTR pszAccount, 
                        [in] int cchmax);
        HRESULT _stdcall ProcessNotification(
                        [in] int uMsg, 
                        [in] int wParam, 
                        [in] int lParam);
        HRESULT _stdcall ValidateDefaultSendAccount();
        HRESULT _stdcall AccountListDialog(
                        [in] int hwnd, 
                        [in] ACCTLISTINFO* pInfo);
        HRESULT _stdcall Advise(
                        [in] IImnAdviseAccount* pAdviseAccount, 
                        [out, retval] int* pdwConnection);
        HRESULT _stdcall Unadvise([in] int dwConnection);
        HRESULT _stdcall GetUniqueAccountName(
                        [in] LPSTR szName, 
                        [in] int cch);
        HRESULT _stdcall InitEx(
                        [in] IImnAdviseMigrateServer* pAdviseMigrateServer, 
                        [in] int dwFlags);
    };

    [
      odl,
      uuid(C43DFC6F-62BB-11D2-A727-00C04F79E7C8)
    ]
    interface IImnAccountManager2 : IImnAccountManager {
        HRESULT _stdcall InitUser(
                        [in] IImnAdviseMigrateServer* pAdviseMigrateServer, 
                        [in] UUID* rguidID, 
                        [in] int dwFlags);
        HRESULT _stdcall GetIncompleteAccount(
                        [in] ACCTTYPE ACCTTYPE, 
                        [in] LPSTR pszAccountID, 
                        [in] int cchmax);
        HRESULT _stdcall SetIncompleteAccount(
                        [in] ACCTTYPE ACCTTYPE, 
                        [in] LPSTR pszAccountID);
    };

    [
      odl,
      uuid(FD465484-1384-11D0-ABBD-0020AFDFD10A)
    ]
    interface IPropertyContainer : stdole.IUnknown {
        HRESULT _stdcall GetProp(
                        [in] int dwPropTag, 
                        [in] unsigned char* pb, 
                        [in] int* pcb);
        HRESULT _stdcall GetPropDw(
                        [in] int dwPropTag, 
                        [out, retval] int* pdw);
        HRESULT _stdcall GetPropSz(
                        [in] int dwPropTag, 
                        [in] LPSTR psz, 
                        [in] int cchmax);
        HRESULT _stdcall SetProp(
                        [in] int dwPropTag, 
                        [in] unsigned char* pb, 
                        [in] int cb);
        HRESULT _stdcall SetPropDw(
                        [in] int dwPropTag, 
                        [in] int dw);
        HRESULT _stdcall SetPropSz(
                        [in] int dwPropTag, 
                        [in] LPSTR psz);
    };

    [
      odl,
      uuid(FD465482-1384-11D0-ABBD-0020AFDFD10A)
    ]
    interface IImnAccount : IPropertyContainer {
        HRESULT _stdcall Exist();
        HRESULT _stdcall SetAsDefault();
        HRESULT _stdcall Delete();
        HRESULT _stdcall SaveChanges();
        HRESULT _stdcall GetAccountType([out, retval] ACCTTYPE* pAcctType);
        HRESULT _stdcall GetServerTypes([out, retval] int* pdwSrvTypes);
        HRESULT _stdcall ShowProperties(
                        [in] int hwnd, 
                        [in] int dwFlags);
        HRESULT _stdcall ValidateProperty(
                        [in] int dwPropTag, 
                        [in] unsigned char* pb, 
                        [in] int cb);
        HRESULT _stdcall DoWizard(
                        [in] int hwnd, 
                        [in] int dwFlags);
        HRESULT _stdcall DoImportWizard(
                        [in] int hwnd, 
                        [in] UUID clsid, 
                        [in] int dwFlags);
    };

    [
      uuid(8D4B04E1-1331-11D0-81B8-00C04FD85AB4)
    ]
    coclass AccountManager {
        interface IImnAccountManager;
        [default] interface IImnAccountManager2;
    };

    [
      dllname("MSOEACCT.DLL")
    ]
    module MSOEACCT {
        [entry("HrCreateAccountManager")]
        HRESULT _stdcall HrCreateAccountManager([out, retval] IImnAccountManager** ppAccountManager);
        [entry(0x101)]
        int _stdcall ValidEmailAddress([in] LPSTR lpAddress);
        const short CCHMAX_ORG_NAME = 256;
        const short CCHMAX_DISPLAY_NAME = 256;
        const short CCHMAX_ACCOUNT_NAME = 256;
        const short CCHMAX_SERVER_NAME = 256;
        const short CCHMAX_PASSWORD = 256;
        const short CCHMAX_USERNAME = 256;
        const short CCHMAX_EMAIL_ADDRESS = 256;
        const short CCHMAX_CONNECTOID = 256;
        const short CCHMAX_SEARCH_BASE = 256;
        const short CCHMAX_ROOT_FOLDER = 256;
        const short CCHMAX_SIGNATURE = 16;
        const short CCHMAX_SERVICE = 256;
    };

    [
      odl,
      uuid(6A98B73E-8C4D-11D1-BDFF-00C04FA31009),
      helpstring("IMimeEdit"),
      dual,
      oleautomation
    ]
    interface IMimeEdit : IDispatch {
        [id(0x00000065), propput]
        HRESULT src([in] BSTR pbstr);
        [id(0x00000065), propget]
        HRESULT src([out, retval] BSTR* pbstr);
        [id(0x00000066), propput]
        HRESULT header([in] long plStyle);
        [id(0x00000066), propget]
        HRESULT header([out, retval] long* plStyle);
        [id(0x00000067), propput]
        HRESULT editMode([in] BOOL pbool);
        [id(0x00000067), propget]
        HRESULT editMode([out, retval] BOOL* pbool);
        [id(0x00000068), propget]
        HRESULT messageSource([out, retval] BSTR* pbstr);
        [id(0x00000069), propget]
        HRESULT text([out, retval] int* pbstr);
        [id(0x0000006a), propget]
        HRESULT html([out, retval] BSTR* pbstr);
        [id(0x0000006b)]
        HRESULT clear();
        [id(0x0000006c), propget]
        HRESULT doc([out, retval] IDispatch** ppDoc);
    };

    [
      uuid(1C82EAD9-508E-11D1-8DCF-00C04FB951F9)
    ]
    coclass MimeEdit {
        [default] interface IMimeEdit;
    };
};
