//exp_opc.odl - Package Manager: msopc.idl and related



interface IOpcUri;
interface IOpcPartUri;

[
    odl,
    uuid(bc9c1b9b-d62c-49eb-aef0-3b4e0b28ebed)
]
interface IOpcUri : IUri
{
    HRESULT
        GetRelationshipsPartUri(
            [out, retval]   IOpcPartUri** relationshipPartUri
        );

    HRESULT
        GetRelativeUri(
            [in]            IOpcPartUri* targetPartUri,
            [out, retval]   IUri** relativeUri
        );

    HRESULT
        CombinePartUri(
            [in]          IUri* relativeUri,
            [out, retval] IOpcPartUri** combinedUri
        );

};

[
    odl,
    uuid(7d3babe7-88b2-46ba-85cb-4203cb016c87)
]
interface IOpcPartUri : IOpcUri
{
    HRESULT
        ComparePartUri(
            [in]            IOpcPartUri* partUri,
            [out, retval]   INT32* comparisonResult
        );

    HRESULT
        GetSourceUri(
            [out, retval]   IOpcUri** sourceUri
        );

    HRESULT
        IsRelationshipsPartUri(
            [out, retval]   BOOL* isRelationshipUri
        );

};

typedef enum OPC_URI_TARGET_MODE
{
    OPC_URI_TARGET_MODE_INTERNAL = 0,
    OPC_URI_TARGET_MODE_EXTERNAL = 1
} OPC_URI_TARGET_MODE;

typedef enum OPC_COMPRESSION_OPTIONS
{
    OPC_COMPRESSION_NONE = -1,
    OPC_COMPRESSION_NORMAL = 0,
    OPC_COMPRESSION_MAXIMUM = 1,
    OPC_COMPRESSION_FAST = 2,
    OPC_COMPRESSION_SUPERFAST = 3
} OPC_COMPRESSION_OPTIONS;

typedef enum OPC_STREAM_IO_MODE
{
    OPC_STREAM_IO_READ = 1,
    OPC_STREAM_IO_WRITE = 2,
} OPC_STREAM_IO_MODE;

typedef enum OPC_ERRORS
{
    OPC_E_NONCONFORMING_URI = 0x80510001, //MAKE_HRESULT(1, FACILITY_OPC, & H1)
    OPC_E_RELATIVE_URI_REQUIRED = 0x80510002,
    OPC_E_RELATIONSHIP_URI_REQUIRED = 0x80510003,
    OPC_E_PART_CANNOT_BE_DIRECTORY = 0x80510004,
    OPC_E_UNEXPECTED_CONTENT_TYPE = 0x80510005,
    OPC_E_INVALID_CONTENT_TYPE_XML = 0x80510006,
    OPC_E_MISSING_CONTENT_TYPES = 0x80510007,
    OPC_E_NONCONFORMING_CONTENT_TYPES_XML = 0x80510008,
    OPC_E_NONCONFORMING_RELS_XML = 0x80510009,
    OPC_E_INVALID_RELS_XML = 0x8051000A,
    OPC_E_DUPLICATE_PART = 0x8051000B,
    OPC_E_INVALID_OVERRIDE_PART_NAME = 0x8051000C,
    OPC_E_DUPLICATE_OVERRIDE_PART = 0x8051000D,
    OPC_E_INVALID_DEFAULT_EXTENSION = 0x8051000E,
    OPC_E_DUPLICATE_DEFAULT_EXTENSION = 0x8051000F,
    OPC_E_INVALID_RELATIONSHIP_ID = 0x80510010,
    OPC_E_INVALID_RELATIONSHIP_TYPE = 0x80510011,
    OPC_E_INVALID_RELATIONSHIP_TARGET = 0x80510012,
    OPC_E_DUPLICATE_RELATIONSHIP = 0x80510013,
    OPC_E_CONFLICTING_SETTINGS = 0x80510014,
    OPC_E_DUPLICATE_PIECE = 0x80510015,
    OPC_E_INVALID_PIECE = 0x80510016,
    OPC_E_MISSING_PIECE = 0x80510017,
    OPC_E_NO_SUCH_PART = 0x80510018,
    OPC_E_DS_SIGNATURE_CORRUPT = 0x80510019,
    OPC_E_DS_DIGEST_VALUE_ERROR = 0x8051001A,
    OPC_E_DS_DUPLICATE_SIGNATURE_ORIGIN_RELATIONSHIP = 0x8051001B,
    OPC_E_DS_INVALID_SIGNATURE_ORIGIN_RELATIONSHIP = 0x8051001C,
    OPC_E_DS_INVALID_CERTIFICATE_RELATIONSHIP = 0x8051001D,
    OPC_E_DS_EXTERNAL_SIGNATURE = 0x8051001E,
    OPC_E_DS_MISSING_SIGNATURE_ORIGIN_PART = 0x8051001F,
    OPC_E_DS_MISSING_SIGNATURE_PART = 0x80510020,
    OPC_E_DS_INVALID_RELATIONSHIP_TRANSFORM_XML = 0x80510021,
    OPC_E_DS_INVALID_CANONICALIZATION_METHOD = 0x80510022,
    OPC_E_DS_INVALID_RELATIONSHIPS_SIGNING_OPTION = 0x80510023,
    OPC_E_DS_INVALID_OPC_SIGNATURE_TIME_FORMAT = 0x80510024,
    OPC_E_DS_PACKAGE_REFERENCE_URI_RESERVED = 0x80510025,
    OPC_E_DS_MISSING_SIGNATURE_PROPERTIES_ELEMENT = 0x80510026,
    OPC_E_DS_MISSING_SIGNATURE_PROPERTY_ELEMENT = 0x80510027,
    OPC_E_DS_DUPLICATE_SIGNATURE_PROPERTY_ELEMENT = 0x80510028,
    OPC_E_DS_MISSING_SIGNATURE_TIME_PROPERTY = 0x80510029,
    OPC_E_DS_INVALID_SIGNATURE_XML = 0x8051002A,
    OPC_E_DS_INVALID_SIGNATURE_COUNT = 0x8051002B,
    OPC_E_DS_MISSING_SIGNATURE_ALGORITHM = 0x8051002C,
    OPC_E_DS_DUPLICATE_PACKAGE_OBJECT_REFERENCES = 0x8051002D,
    OPC_E_DS_MISSING_PACKAGE_OBJECT_REFERENCE = 0x8051002E,
    OPC_E_DS_EXTERNAL_SIGNATURE_REFERENCE = 0x8051002F,
    OPC_E_DS_REFERENCE_MISSING_CONTENT_TYPE = 0x80510030,
    OPC_E_DS_MULTIPLE_RELATIONSHIP_TRANSFORMS = 0x80510031,
    OPC_E_DS_MISSING_CANONICALIZATION_TRANSFORM = 0x80510032,
    OPC_E_MC_UNEXPECTED_ELEMENT = 0x80510033,
    OPC_E_MC_UNEXPECTED_REQUIRES_ATTR = 0x80510034,
    OPC_E_MC_MISSING_REQUIRES_ATTR = 0x80510035,
    OPC_E_MC_UNEXPECTED_ATTR = 0x80510036,
    OPC_E_MC_INVALID_PREFIX_LIST = 0x80510037,
    OPC_E_MC_INVALID_QNAME_LIST = 0x80510038,
    OPC_E_MC_NESTED_ALTERNATE_CONTENT = 0x80510039,
    OPC_E_MC_UNEXPECTED_CHOICE = 0x8051003A,
    OPC_E_MC_MISSING_CHOICE = 0x8051003B,
    OPC_E_MC_INVALID_ENUM_TYPE = 0x8051003C,
    OPC_E_MC_UNKNOWN_NAMESPACE = 0x8051003E,
    OPC_E_MC_UNKNOWN_PREFIX = 0x8051003F,
    OPC_E_MC_INVALID_ATTRIBUTES_ON_IGNORABLE_ELEMENT = 0x80510040,
    OPC_E_MC_INVALID_XMLNS_ATTRIBUTE = 0x80510041,
    OPC_E_INVALID_XML_ENCODING = 0x80510042,
    OPC_E_DS_SIGNATURE_REFERENCE_MISSING_URI = 0x80510043,
    OPC_E_INVALID_CONTENT_TYPE = 0x80510044,
    OPC_E_DS_SIGNATURE_PROPERTY_MISSING_TARGET = 0x80510045,
    OPC_E_DS_SIGNATURE_METHOD_NOT_SET = 0x80510046,
    OPC_E_DS_DEFAULT_DIGEST_METHOD_NOT_SET = 0x80510047,
    OPC_E_NO_SUCH_RELATIONSHIP = 0x80510048,
    OPC_E_MC_MULTIPLE_FALLBACK_ELEMENTS = 0x80510049,
    OPC_E_MC_INCONSISTENT_PROCESS_CONTENT = 0x8051004A,
    OPC_E_MC_INCONSISTENT_PRESERVE_ATTRIBUTES = 0x8051004B,
    OPC_E_MC_INCONSISTENT_PRESERVE_ELEMENTS = 0x8051004C,
    OPC_E_INVALID_RELATIONSHIP_TARGET_MODE = 0x8051004D,
    OPC_E_COULD_NOT_RECOVER = 0x8051004E,
    OPC_E_UNSUPPORTED_PACKAGE = 0x8051004F,
    OPC_E_ENUM_COLLECTION_CHANGED = 0x80510050,
    OPC_E_ENUM_CANNOT_MOVE_NEXT = 0x80510051,
    OPC_E_ENUM_CANNOT_MOVE_PREVIOUS = 0x80510052,
    OPC_E_ENUM_INVALID_POSITION = 0x80510053,
    OPC_E_DS_SIGNATURE_ORIGIN_EXISTS = 0x80510054,
    OPC_E_DS_UNSIGNED_PACKAGE = 0x80510055,
    OPC_E_DS_MISSING_CERTIFICATE_PART = 0x80510056,
    OPC_E_NO_SUCH_SETTINGS = 0x80510057,

//////////////////////////////////////////////////////////////////
//                   OPC Zip Layer Error Codes                  //
//                                                              //
//                   Range : &H1000 - &H1010                    //
//////////////////////////////////////////////////////////////////

    OPC_E_ZIP_INCORRECT_DATA_SIZE = 0x80511001,
    OPC_E_ZIP_CORRUPTED_ARCHIVE = 0x80511002,
    OPC_E_ZIP_COMPRESSION_FAILED = 0x80511003,
    OPC_E_ZIP_DECOMPRESSION_FAILED = 0x80511004,
    OPC_E_ZIP_INCONSISTENT_FILEITEM = 0x80511005,
    OPC_E_ZIP_INCONSISTENT_DIRECTORY = 0x80511006,
    OPC_E_ZIP_MISSING_DATA_DESCRIPTOR = 0x80511007,
    OPC_E_ZIP_UNSUPPORTEDARCHIVE = 0x80511008,
    OPC_E_ZIP_CENTRAL_DIRECTORY_TOO_LARGE = 0x80511009,
    OPC_E_ZIP_NAME_TOO_LARGE = 0x8051100A,
    OPC_E_ZIP_DUPLICATE_NAME = 0x8051100B,
    OPC_E_ZIP_COMMENT_TOO_LARGE = 0x8051100C,
    OPC_E_ZIP_EXTRA_FIELDS_TOO_LARGE = 0x8051100D,
    OPC_E_ZIP_FILE_HEADER_TOO_LARGE = 0x8051100E,
    OPC_E_ZIP_MISSING_END_OF_CENTRAL_DIRECTORY = 0x8051100F,
    OPC_E_ZIP_REQUIRES_64_BIT = 0x80511010
} OPC_ERRORS;

interface IOpcPackage;
interface IOpcPart;
interface IOpcRelationship;
interface IOpcPartSet;
interface IOpcRelationshipSet;
interface IOpcPartEnumerator;
interface IOpcRelationshipEnumerator;

//
// Enumerations
//
typedef enum OPC_READ_FLAGS
{
    OPC_READ_DEFAULT = 0x00000000,
    OPC_VALIDATE_ON_LOAD = 0x00000001,
    OPC_CACHE_ON_ACCESS = 0x00000002
} OPC_READ_FLAGS;


typedef enum OPC_WRITE_FLAGS
{
    OPC_WRITE_DEFAULT = 0x00000000,
    OPC_WRITE_FORCE_ZIP32 = 0x00000001
} OPC_WRITE_FLAGS;

[
    odl,
    uuid(42195949-3B79-4fc8-89C6-FC7FB979EE70)
]
interface IOpcPackage : stdole.IUnknown
{

    HRESULT
        GetPartSet(
            [out, retval] IOpcPartSet** partSet
        );

    HRESULT
        GetRelationshipSet(
            [out, retval] IOpcRelationshipSet** relationshipSet
        );
}

[
    odl,
    uuid(42195949-3B79-4fc8-89C6-FC7FB979EE71)
]
interface IOpcPart : stdole.IUnknown
{
    HRESULT
        GetRelationshipSet(
            [out, retval] IOpcRelationshipSet** relationshipSet
        );

    HRESULT
        GetContentStream(
            [out, retval] IStream** stream
        );

    HRESULT
        GetName(
            [out, retval] IOpcPartUri** name
        );

    HRESULT
        GetContentType(
            [out, retval] LongPtr* contentType
        );

    HRESULT
        GetCompressionOptions(
            [out, retval] OPC_COMPRESSION_OPTIONS* compressionOptions
        );
}

[
    odl,
    uuid(42195949-3B79-4fc8-89C6-FC7FB979EE72)
]
interface IOpcRelationship : stdole.IUnknown
{
    HRESULT
        GetId(
            [out, retval] LongPtr* relationshipIdentifier
        );

    HRESULT
        GetRelationshipType(
            [out, retval] LongPtr* relationshipType
        );

    HRESULT
        GetSourceUri(
            [out, retval] IOpcUri** sourceUri
        );

    HRESULT
        GetTargetUri(
            [out, retval] IUri** targetUri
        );

    HRESULT
        GetTargetMode(
            [out, retval] OPC_URI_TARGET_MODE* targetMode
        );
}

[
    odl,
    uuid(42195949-3B79-4fc8-89C6-FC7FB979EE73)
]
interface IOpcPartSet : stdole.IUnknown
{
    HRESULT
        GetPart(
            [in] IOpcPartUri* name,
            [out, retval] IOpcPart** part
        );

    // part - out param not optional
    HRESULT
        CreatePart(
            [in] IOpcPartUri* name,
            [in] LongPtr contentType,
            [in] OPC_COMPRESSION_OPTIONS compressionOptions,
            [out, retval] IOpcPart** part
        );

    HRESULT
        DeletePart(
            [in] IOpcPartUri* name
        );

    HRESULT
        PartExists(
            [in] IOpcPartUri* name,
            [out, retval] BOOL* partExists
        );

    HRESULT
        GetEnumerator(
            [out, retval] IOpcPartEnumerator** partEnumerator
        );
}

[
    odl,
    uuid(42195949-3B79-4fc8-89C6-FC7FB979EE74)
]
interface IOpcRelationshipSet : stdole.IUnknown
{
    HRESULT
        GetRelationship(
            [in] LongPtr relationshipIdentifier,
            [out, retval] IOpcRelationship** relationship
        );

    // relationshipIdentifier - Optional - If passed NULL the method creates and uses a randomly generated unique identifier.
    // relationship - out param optional.
    HRESULT
        CreateRelationship(
            [in] LongPtr relationshipIdentifier,
            [in] LongPtr relationshipType,
            [in] IUri* targetUri,
            [in] OPC_URI_TARGET_MODE targetMode,
            [out, retval] IOpcRelationship** relationship
        );

    HRESULT
        DeleteRelationship(
            [in] LongPtr relationshipIdentifier
        );

    HRESULT
        RelationshipExists(
            [in] LongPtr relationshipIdentifier,
            [out, retval] BOOL* relationshipExists
        );

    HRESULT
        GetEnumerator(
            [out, retval] IOpcRelationshipEnumerator** relationshipEnumerator
        );

    HRESULT
        GetEnumeratorForType(
            [in] LongPtr relationshipType,
            [out, retval] IOpcRelationshipEnumerator** relationshipEnumerator
        );

    HRESULT
        GetRelationshipsContentStream(
            [out, retval] IStream** contents
        );
}

[
    odl,
    uuid(42195949-3B79-4fc8-89C6-FC7FB979EE75)
]
interface IOpcPartEnumerator : stdole.IUnknown
{
    HRESULT MoveNext([out, retval] BOOL* hasNext);

    HRESULT MovePrevious([out, retval] BOOL* hasPrevious);

    HRESULT GetCurrent([out, retval] IOpcPart** part);

    HRESULT Clone([out, retval] IOpcPartEnumerator** copy);
}

[
    odl,
    uuid(42195949-3B79-4fc8-89C6-FC7FB979EE76)
]
interface IOpcRelationshipEnumerator : stdole.IUnknown
{
    HRESULT MoveNext([out, retval] BOOL* hasNext);

    HRESULT MovePrevious([out, retval] BOOL* hasPrevious);

    HRESULT GetCurrent([out, retval] IOpcRelationship** relationship);

    HRESULT Clone([out, retval] IOpcRelationshipEnumerator** copy);
}

interface IOpcSignaturePartReference;
interface IOpcSignatureRelationshipReference;
interface IOpcRelationshipSelector;
interface IOpcSignatureReference;
interface IOpcSignatureCustomObject;
interface IOpcDigitalSignature;
interface IOpcSigningOptions;
interface IOpcDigitalSignatureManager;

//
// Enumerator Interfaces
//
interface IOpcSignaturePartReferenceEnumerator;
interface IOpcSignatureRelationshipReferenceEnumerator;
interface IOpcRelationshipSelectorEnumerator;
interface IOpcSignatureReferenceEnumerator;
interface IOpcSignatureCustomObjectEnumerator;
interface IOpcCertificateEnumerator;
interface IOpcDigitalSignatureEnumerator;

//
// Set Interfaces
//
interface IOpcSignaturePartReferenceSet;
interface IOpcSignatureRelationshipReferenceSet;
interface IOpcRelationshipSelectorSet;
interface IOpcSignatureReferenceSet;
interface IOpcSignatureCustomObjectSet;
interface IOpcCertificateSet;

//==========================ENUMs============================================//
typedef enum OPC_SIGNATURE_VALIDATION_RESULT
{
    OPC_SIGNATURE_VALID = 0,
    OPC_SIGNATURE_INVALID = -1,
} OPC_SIGNATURE_VALIDATION_RESULT;

typedef enum OPC_CANONICALIZATION_METHOD
{
    OPC_CANONICALIZATION_NONE = 0,
    OPC_CANONICALIZATION_C14N = 1,
    OPC_CANONICALIZATION_C14N_WITH_COMMENTS = 2
} OPC_CANONICALIZATION_METHOD;

typedef enum OPC_RELATIONSHIP_SELECTOR
{
    OPC_RELATIONSHIP_SELECT_BY_ID = 0,     // Sign the relationships selected by the relationship Id.
    OPC_RELATIONSHIP_SELECT_BY_TYPE = 1,   // Sign the relationships selected by the relationship Type.
} OPC_RELATIONSHIP_SELECTOR;

typedef enum OPC_RELATIONSHIPS_SIGNING_OPTION
{
    OPC_RELATIONSHIP_SIGN_USING_SELECTORS = 0,
    OPC_RELATIONSHIP_SIGN_PART = 1
} OPC_RELATIONSHIPS_SIGNING_OPTION;

typedef enum OPC_CERTIFICATE_EMBEDDING_OPTION
{
    OPC_CERTIFICATE_IN_CERTIFICATE_PART = 0,
    OPC_CERTIFICATE_IN_SIGNATURE_PART = 1,
    OPC_CERTIFICATE_NOT_EMBEDDED = 2
} OPC_CERTIFICATE_EMBEDDING_OPTION;

typedef enum OPC_SIGNATURE_TIME_FORMAT
{
    OPC_SIGNATURE_TIME_FORMAT_MILLISECONDS = 0,
    OPC_SIGNATURE_TIME_FORMAT_SECONDS = 1,
    OPC_SIGNATURE_TIME_FORMAT_MINUTES = 2,
    OPC_SIGNATURE_TIME_FORMAT_DAYS = 3,
    OPC_SIGNATURE_TIME_FORMAT_MONTHS = 4,
    OPC_SIGNATURE_TIME_FORMAT_YEARS = 5
} OPC_SIGNATURE_TIME_FORMAT;

//==========================INTERFACEs============================================//

[
    odl,
    uuid(e24231ca-59f4-484e-b64b-36eeda36072c)
]
interface IOpcSignaturePartReference : stdole.IUnknown
{
    HRESULT
        GetPartName(
            [out, retval] IOpcPartUri** partName
        );

    HRESULT
        GetContentType(
            [out, retval] LongPtr* contentType
        );

    HRESULT
        GetDigestMethod(
            [out, retval] LongPtr* digestMethod
        );

    HRESULT
        GetDigestValue(
            [out] LongPtr* digestValue,
            [out] UINT32* count
        );

    HRESULT
        GetTransformMethod(
            [out, retval] OPC_CANONICALIZATION_METHOD* transformMethod
        );
}

[
    odl,
    uuid(f8f26c7f-b28f-4899-84c8-5d5639ede75f)
]
interface IOpcRelationshipSelector : stdole.IUnknown
{
    HRESULT
        GetSelectorType(
            [out, retval] OPC_RELATIONSHIP_SELECTOR* selector
        );

    HRESULT
        GetSelectionCriterion(
            [out, retval] LongPtr* selectionCriterion
        );
}

[
    odl,
    uuid(57babac6-9d4a-4e50-8b86-e5d4051eae7c)
]
interface IOpcSignatureRelationshipReference : stdole.IUnknown
{
    HRESULT
        GetSourceUri(
            [out, retval] IOpcUri** sourceUri
        );

    HRESULT
        GetDigestMethod(
            [out, retval] LongPtr* digestMethod
        );

    HRESULT
        GetDigestValue(
            [out] LongPtr* digestValue,
            [out] UINT32* count
        );

    HRESULT
        GetTransformMethod(
            [out, retval] OPC_CANONICALIZATION_METHOD* transformMethod
        );

    HRESULT
        GetRelationshipSigningOption(
            [out, retval] OPC_RELATIONSHIPS_SIGNING_OPTION* relationshipSigningOption
        );

    HRESULT
        GetRelationshipSelectorEnumerator(
            [out, retval] IOpcRelationshipSelectorEnumerator** selectorEnumerator
        );
}

[
    odl,
    uuid(1b47005e-3011-4edc-be6f-0f65e5ab0342)
]
interface IOpcSignatureReference : stdole.IUnknown
{
    HRESULT
        GetId(
            [out, retval] LongPtr* referenceId
        );

    HRESULT
        GetUri(
            [out, retval] IUri** referenceUri
        );

    HRESULT
        GetType(
            [out, retval] LongPtr* type
        );

    HRESULT
        GetTransformMethod(
            [out, retval] OPC_CANONICALIZATION_METHOD* transformMethod
        );

    HRESULT
        GetDigestMethod(
            [out, retval] LongPtr* digestMethod
        );

    HRESULT
        GetDigestValue(
            [out] LongPtr* digestValue,
            [out] UINT32* count
        );
}

[
    odl,
    uuid(5d77a19e-62c1-44e7-becd-45da5ae51a56)
]
interface IOpcSignatureCustomObject : stdole.IUnknown
{
    // Custom Object Contents as valid xml markup [optional]
    // This includes the <Object> and </Object> tags which gives applications
    // complete control over xml namespaces.
    HRESULT
        GetXml(
            [out] LongPtr* xmlMarkup,
            [out] UINT32* count
        );
}

[
    odl,
    uuid(80eb1561-8c77-49cf-8266-459b356ee99a)
]
interface IOpcSignaturePartReferenceEnumerator : stdole.IUnknown
{
    HRESULT
        MoveNext(
            [out, retval] BOOL* hasNext
        );

    HRESULT
        MovePrevious(
            [out, retval] BOOL* hasPrevious
        );

    HRESULT
        GetCurrent(
            [out, retval] IOpcSignaturePartReference** partReference
        );

    HRESULT
        Clone(
            [out, retval] IOpcSignaturePartReferenceEnumerator** copy
        );
};

[
    odl,
    uuid(5e50a181-a91b-48ac-88d2-bca3d8f8c0b1)
]
interface IOpcRelationshipSelectorEnumerator : stdole.IUnknown
{
    HRESULT
        MoveNext(
            [out, retval] BOOL* hasNext
        );

    HRESULT
        MovePrevious(
            [out, retval] BOOL* hasPrevious
        );

    HRESULT
        GetCurrent(
            [out, retval] IOpcRelationshipSelector** relationshipSelector
        );

    HRESULT
        Clone(
            [out, retval] IOpcRelationshipSelectorEnumerator** copy
        );
};

[
    odl,
    uuid(773ba3e4-f021-48e4-aa04-9816db5d3495)
]
interface IOpcSignatureRelationshipReferenceEnumerator : stdole.IUnknown
{
    HRESULT
        MoveNext(
            [out, retval] BOOL* hasNext
        );

    HRESULT
        MovePrevious(
            [out, retval] BOOL* hasPrevious
        );

    HRESULT
        GetCurrent(
            [out, retval] IOpcSignatureRelationshipReference** relationshipReference
        );

    HRESULT
        Clone(
            [out, retval] IOpcSignatureRelationshipReferenceEnumerator** copy
        );
};

[
    odl,
    uuid(cfa59a45-28b1-4868-969e-fa8097fdc12a)
]
interface IOpcSignatureReferenceEnumerator : stdole.IUnknown
{
    HRESULT
        MoveNext(
            [out, retval] BOOL* hasNext
        );

    HRESULT
        MovePrevious(
            [out, retval] BOOL* hasPrevious
        );

    HRESULT
        GetCurrent(
            [out, retval] IOpcSignatureReference** reference
        );

    HRESULT
        Clone(
            [out, retval] IOpcSignatureReferenceEnumerator** copy
        );
};

[
    odl,
    uuid(5ee4fe1d-e1b0-4683-8079-7ea0fcf80b4c)
]
interface IOpcSignatureCustomObjectEnumerator : stdole.IUnknown
{
    HRESULT
        MoveNext(
            [out, retval] BOOL* hasNext
        );

    HRESULT
        MovePrevious(
            [out, retval] BOOL* hasPrevious
        );

    HRESULT
        GetCurrent(
            [out, retval] IOpcSignatureCustomObject** customObject
        );

    HRESULT
        Clone(
            [out, retval] IOpcSignatureCustomObjectEnumerator** copy
        );
};

typedef struct CERT_CONTEXT {
    DWORD      dwCertEncodingType;
    LongPtr  pbCertEncoded;
    DWORD      cbCertEncoded;
    /*PCERT_INFO*/ LongPtr pCertInfo;
    /*HCERTSTORE*/ LongPtr hCertStore;
} CERT_CONTEXT;

[
    odl,
    uuid(85131937-8f24-421f-b439-59ab24d140b8)
]
interface IOpcCertificateEnumerator : stdole.IUnknown
{
    HRESULT
        MoveNext(
            [out, retval] BOOL* hasNext
        );

    HRESULT
        MovePrevious(
            [out, retval] BOOL* hasPrevious
        );

    HRESULT
        GetCurrent(
            [out, retval] CERT_CONTEXT** certificate
        );

    HRESULT
        Clone(
            [out, retval] IOpcCertificateEnumerator** copy
        );
};

[
    odl,
    uuid(967b6882-0ba3-4358-b9e7-b64c75063c5e)
]
interface IOpcDigitalSignatureEnumerator : stdole.IUnknown
{
    HRESULT
        MoveNext(
            [out, retval] BOOL* hasNext
        );

    HRESULT
        MovePrevious(
            [out, retval] BOOL* hasPrevious
        );

    HRESULT
        GetCurrent(
            [out, retval] IOpcDigitalSignature** digitalSignature
        );

    HRESULT
        Clone(
            [out, retval] IOpcDigitalSignatureEnumerator** copy
        );
};

//
// Set Interfaces
//
[
    odl,
    uuid(6c9fe28c-ecd9-4b22-9d36-7fdde670fec0)
]
interface IOpcSignaturePartReferenceSet : stdole.IUnknown
{
    HRESULT
        Create(
            [in]          IOpcPartUri* partUri,
            [in]  LongPtr                 digestMethod,
            [in]          OPC_CANONICALIZATION_METHOD    transformMethod,
            [out, retval] IOpcSignaturePartReference** partReference
        );

    HRESULT
        Delete(
            [in] IOpcSignaturePartReference* partReference
        );

    HRESULT
        GetEnumerator(
            [out, retval] IOpcSignaturePartReferenceEnumerator** partReferenceEnumerator
        );
}

[
    odl,
    uuid(6e34c269-a4d3-47c0-b5c4-87ff2b3b6136)
]
interface IOpcRelationshipSelectorSet : stdole.IUnknown
{
    HRESULT
        Create(
            [in]    OPC_RELATIONSHIP_SELECTOR selector,
            [in]    LongPtr         selectionCriterion,
            [out, retval] IOpcRelationshipSelector** relationshipSelector
        );

    HRESULT
        Delete(
            [in] IOpcRelationshipSelector* relationshipSelector
        );

    HRESULT
        GetEnumerator(
            [out, retval] IOpcRelationshipSelectorEnumerator** relationshipSelectorEnumerator
        );
}

[
    odl,
    uuid(9f863ca5-3631-404c-828d-807e0715069b)
]
interface IOpcSignatureRelationshipReferenceSet : stdole.IUnknown
{
    HRESULT
        Create(
            [in]          IOpcUri* sourceUri,
            [in]  LongPtr     digestMethod,
            [in]          OPC_RELATIONSHIPS_SIGNING_OPTION relationshipSigningOption,
            [in]  IOpcRelationshipSelectorSet* selectorSet,
            [in]          OPC_CANONICALIZATION_METHOD    transformMethod,
            [out, retval] IOpcSignatureRelationshipReference** relationshipReference
        );

    HRESULT
        CreateRelationshipSelectorSet(
            [out] IOpcRelationshipSelectorSet** selectorSet
        );

    HRESULT
        Delete(
            [in] IOpcSignatureRelationshipReference* relationshipReference
        );

    HRESULT
        GetEnumerator(
            [out, retval] IOpcSignatureRelationshipReferenceEnumerator** relationshipReferenceEnumerator
        );
}

[
    odl,
    uuid(f3b02d31-ab12-42dd-9e2f-2b16761c3c1e)
]
interface IOpcSignatureReferenceSet : stdole.IUnknown
{
    HRESULT
        Create(
            [in]          IUri* referenceUri,
            [in]  LongPtr                referenceId,
            [in]  LongPtr                type,
            [in]  LongPtr                digestMethod,   // can be NULL and we will use default digest method
            [in]          OPC_CANONICALIZATION_METHOD   transformMethod,
            [out, retval] IOpcSignatureReference** reference
        );

    HRESULT
        Delete(
            [in] IOpcSignatureReference* reference
        );

    HRESULT
        GetEnumerator(
            [out, retval] IOpcSignatureReferenceEnumerator** referenceEnumerator
        );
}

[
    odl,
    uuid(8f792ac5-7947-4e11-bc3d-2659ff046ae1)
]
interface IOpcSignatureCustomObjectSet : stdole.IUnknown
{
    HRESULT
        Create(
            [in] UINT8* xmlMarkup,
            [in] UINT32           count,
            [out, retval] IOpcSignatureCustomObject** customObject
        );

    HRESULT
        Delete(
            [in] IOpcSignatureCustomObject* customObject
        );

    HRESULT
        GetEnumerator(
            [out, retval] IOpcSignatureCustomObjectEnumerator** customObjectEnumerator
        );
}

[
    odl,
    uuid(56ea4325-8e2d-4167-b1a4-e486d24c8fa7)
]
interface IOpcCertificateSet : stdole.IUnknown
{
    HRESULT
        Add(
            [in] CERT_CONTEXT* certificate
        );

    HRESULT
        Remove(
            [in] CERT_CONTEXT* certificate
        );

    HRESULT
        GetEnumerator(
            [out, retval] IOpcCertificateEnumerator** certificateEnumerator
        );
}

[
    odl,
    uuid(52ab21dd-1cd0-4949-bc80-0c1232d00cb4)
]
interface IOpcDigitalSignature : stdole.IUnknown
{
    HRESULT
        GetNamespaces(
            [out] LongPtr* prefixes,
            [out] LongPtr* namespaces,
            [out] UINT32* count
        );

    HRESULT
        GetSignatureId(
            [out, retval] LongPtr* signatureId
        );

    HRESULT
        GetSignaturePartName(
            [out, retval] IOpcPartUri** signaturePartName
        );

    HRESULT
        GetSignatureMethod(
            [out, retval] LongPtr* signatureMethod
        );

    HRESULT
        GetCanonicalizationMethod(
            [out, retval] OPC_CANONICALIZATION_METHOD* canonicalizationMethod
        );

    HRESULT
        GetSignatureValue(
            [out] LongPtr* signatureValue,
            [out] UINT32* count
        );

    HRESULT
        GetSignaturePartReferenceEnumerator(
            [out, retval] IOpcSignaturePartReferenceEnumerator** partReferenceEnumerator
        );

    HRESULT
        GetSignatureRelationshipReferenceEnumerator(
            [out, retval] IOpcSignatureRelationshipReferenceEnumerator** relationshipReferenceEnumerator
        );

    HRESULT
        GetSigningTime(
            [out, retval] LongPtr* signingTime
        );

    HRESULT
        GetTimeFormat(
            [out, retval] OPC_SIGNATURE_TIME_FORMAT* timeFormat
        );

    HRESULT
        GetPackageObjectReference(
            [out, retval] IOpcSignatureReference** packageObjectReference
        );

    HRESULT
        GetCertificateEnumerator(
            [out, retval] IOpcCertificateEnumerator** certificateEnumerator
        );

    HRESULT
        GetCustomReferenceEnumerator(
            [out, retval] IOpcSignatureReferenceEnumerator** customReferenceEnumerator
        );

    HRESULT
        GetCustomObjectEnumerator(
            [out, retval] IOpcSignatureCustomObjectEnumerator** customObjectEnumerator
        );

    HRESULT
        GetSignatureXml(
            [out] LongPtr* signatureXml,
            [out] UINT32* count
        );
};

[
    odl,
    uuid(50d2d6a5-7aeb-46c0-b241-43ab0e9b407e)
]
interface IOpcSigningOptions : stdole.IUnknown
{
    HRESULT
        GetSignatureId(
            [out, retval] LongPtr* signatureId
        );

    HRESULT
        SetSignatureId(
            [in] LongPtr signatureId
        );

    HRESULT
        GetSignatureMethod(
            [out, retval] LongPtr* signatureMethod
        );

    HRESULT
        SetSignatureMethod(
            [in] LongPtr signatureMethod
        );

    HRESULT
        GetDefaultDigestMethod(
            [out, retval] LongPtr* digestMethod
        );

    HRESULT
        SetDefaultDigestMethod(
            [in] LongPtr digestMethod
        );

    HRESULT
        GetCertificateEmbeddingOption(
            [out, retval] OPC_CERTIFICATE_EMBEDDING_OPTION* embeddingOption
        );

    HRESULT
        SetCertificateEmbeddingOption(
            [in] OPC_CERTIFICATE_EMBEDDING_OPTION embeddingOption
        );

    // Time Format
    HRESULT
        GetTimeFormat(
            [out, retval] OPC_SIGNATURE_TIME_FORMAT* timeFormat
        );

    HRESULT
        SetTimeFormat(
            [in] OPC_SIGNATURE_TIME_FORMAT timeFormat
        );

    HRESULT
        GetSignaturePartReferenceSet(
            [out, retval] IOpcSignaturePartReferenceSet** partReferenceSet
        );

    HRESULT
        GetSignatureRelationshipReferenceSet(
            [out, retval] IOpcSignatureRelationshipReferenceSet** relationshipReferenceSet
        );

    HRESULT
        GetCustomObjectSet(
            [out, retval] IOpcSignatureCustomObjectSet** customObjectSet
        );

    HRESULT
        GetCustomReferenceSet(
            [out, retval] IOpcSignatureReferenceSet** customReferenceSet
        );

    HRESULT
        GetCertificateSet(
            [out, retval] IOpcCertificateSet** certificateSet
        );

    HRESULT
        GetSignaturePartName(
            [out, retval] IOpcPartUri** signaturePartName
        );

    HRESULT
        SetSignaturePartName(
            [in] IOpcPartUri* signaturePartName
        );
};

[
    odl,
    uuid(d5e62a0b-696d-462f-94df-72e33cef2659)
]
interface IOpcDigitalSignatureManager : stdole.IUnknown
{
    HRESULT
        GetSignatureOriginPartName(
            [out, retval] IOpcPartUri** signatureOriginPartName
        );

    HRESULT
        SetSignatureOriginPartName(
            [in] IOpcPartUri* signatureOriginPartName
        );

    HRESULT
        GetSignatureEnumerator(
            [out, retval] IOpcDigitalSignatureEnumerator** signatureEnumerator
        );

    HRESULT
        RemoveSignature(
            [in] IOpcPartUri* signaturePartName
        );

    HRESULT
        CreateSigningOptions(
            [out, retval] IOpcSigningOptions** signingOptions
        );

    HRESULT
        Validate(
            [in] IOpcDigitalSignature* signature,
            [in] CERT_CONTEXT* certificate,
            [out, retval] OPC_SIGNATURE_VALIDATION_RESULT* validationResult
        );

    HRESULT
        Sign(
            [in]  CERT_CONTEXT* certificate,
            [in]  IOpcSigningOptions* signingOptions,
            [out, retval] IOpcDigitalSignature** digitalSignature
        );

    HRESULT
        ReplaceSignatureXml(
            [in] IOpcPartUri* signaturePartName,
            [in] UINT8* newSignatureXml,
            [in] UINT32          count,
            [out, retval] IOpcDigitalSignature** digitalSignature
        );
};

[
    odl,
    uuid(6d0b4446-cd73-4ab3-94f4-8ccdf6116154)
]
interface IOpcFactory : stdole.IUnknown
{
    HRESULT
        CreatePackageRootUri(
            [out, retval]   IOpcUri** rootUri
        );

    HRESULT
        CreatePartUri(
            [in]    LongPtr         pwzUri,
            [out, retval]   IOpcPartUri** partUri
        );

    HRESULT
        CreateStreamOnFile(
            [in]    LongPtr                 filename,
            [in]            OPC_STREAM_IO_MODE      ioMode,
            [in]    SECURITY_ATTRIBUTES   *securityAttributes,
            [in]            DWORD                   dwFlagsAndAttributes,
            [out, retval]   IStream** stream
        );

    HRESULT
        CreatePackage(
            [out, retval]   IOpcPackage** package
        );

    HRESULT
        ReadPackageFromStream(
            [in]            IStream* stream,
            [in]            OPC_READ_FLAGS          flags,
            [out, retval]   IOpcPackage** package
        );

    HRESULT
        WritePackageToStream(
            [in]            IOpcPackage* package,
            [in]            OPC_WRITE_FLAGS         flags,
            [in]            IStream* stream
        );

    HRESULT
        CreateDigitalSignatureManager(
            [in]            IOpcPackage* package,
            [out, retval]   IOpcDigitalSignatureManager** signatureManager
        );
}

[
    uuid(6B2D6BA0-9F3E-4f27-920B-313CC426A39E)
]
coclass OpcFactory
{
    interface IOpcFactory;
};