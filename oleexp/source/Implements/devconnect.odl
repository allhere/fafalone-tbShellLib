
//oleexpimp add
[
	uuid(FC4801A3-2BA9-11CF-A229-00AA003D7352),
	helpstring("IObjectWithSite Interface"),
	odl
]
interface IObjectWithSite : stdole.IUnknown
{
	HRESULT SetSite([in] oleexp.IUnknown * pSite);
	HRESULT GetSite([in] UUID* priid,
		[in, out] VOID* ppvObj);
}

[
	odl,
	uuid(b7d14566-0509-4cce-a71f-0a554233bd9b)
]
interface IInitializeWithFile : stdole.IUnknown
{
	HRESULT Initialize(
		[in] LONG pszFilePath,
		[in] DWORD grfMode);
};

[
	odl,
	uuid(b824b49d-22ac-4161-ac8a-9916e8fa3f7f)
]
interface IInitializeWithStream : stdole.IUnknown
{
	HRESULT Initialize(
		[in] IStream * pstream,
		[in] DWORD grfMode);

////[call_as(Initialize)] HRESULT RemoteInitialize(
////    [in] IStream *pstream,
////    [in] DWORD grfMode);
};
[
	odl,
	uuid(7f73be3f-fb79-493c-a6c7-7ee14e245841)
]
interface IInitializeWithItem : stdole.IUnknown
{
	// grfMode is STGM_ values indicating read/readwrite and sharing modes
	HRESULT Initialize([in] IShellItem * psi,[in] DWORD grfMode);
}
[
	odl,
	uuid(8895b1c6-b41f-4c1c-a562-0d564250836f)
]
interface IPreviewHandler : stdole.IUnknown
{
	HRESULT SetWindow(
		[in] HWND hwnd,
		[in] RECT * prc);

	HRESULT SetRect([in] RECT* prc);

	HRESULT DoPreview();

	HRESULT Unload();

	HRESULT SetFocus();

	HRESULT QueryFocus([in, out] HWND* phwnd);

	HRESULT TranslateAccelerator([in] MSG* pmsg);
};
[
	odl,
	uuid(196bf9a5-b346-4ef0-aa1e-5dcdb76768b1)
]
interface IPreviewHandlerVisuals : stdole.IUnknown
{
	HRESULT SetBackgroundColor([in] COLORREF color);

//HRESULT SetFont([in] const LOGFONTW *plf);
HRESULT SetFont([in] LONG plf);

HRESULT SetTextColor([in] COLORREF color);
};

typedef struct PREVIEWHANDLERFRAMEINFO
{
	HACCEL haccel;
	UINT   cAccelEntries;
} PREVIEWHANDLERFRAMEINFO;
[
	odl,
	uuid(fec87aaf-35f9-447a-adb7-20234491401a)
]
interface IPreviewHandlerFrame : stdole.IUnknown
{

	HRESULT GetWindowContext([out] PREVIEWHANDLERFRAMEINFO * pinfo);

	HRESULT TranslateAccelerator([in] MSG* pmsg);
};

[
	odl,
	helpstring("ICategoryProvider - Provides a list of catagorizers registered on an IShellFolder"),
	uuid(9af64809-5864-4c26-a720-c1f78c086ee3)
]
interface ICategoryProvider : stdole.IUnknown{

	[helpstring("Returns S_OK if the view should display this column in category selection UI, or S_FALSE to remove it.")]
	HRESULT CanCategorizeOnSCID(
		[in] SHCOLUMNID * pscid);

	[helpstring("Returns either a GUID to create in CreateCategory, or a SHCOLUNNID that is used by the default categorizer. Return S_FALSE if you do not support a default group. GUID_NULL returned in pguid indicates to the client to use pscid as the default category.")]
	HRESULT GetDefaultCategory(
		[in, out] UUID* pguid,
		[in, out] SHCOLUMNID* pscid);

	[helpstring("Returns either a GUID that represents the categoizer to use for the specified SHCOLUMNID.")]
	HRESULT GetCategoryForSCID(
		[in, out] SHCOLUMNID* pscid,
		[in, out] UUID* pguid);

	[helpstring("Returns an IEnumGUID that has a list of GUIDs that represent categories.")]
	HRESULT EnumCategories(
		[out, retval] IEnumGUID** penum);

	[helpstring("Returns the name of the given category.")]
	HRESULT GetCategoryName(
		[in, out] UUID* pguid,
		[in, out] LPWSTR pszName,
		[in] INT cch);

	[helpstring("Creates the category.")]
	HRESULT CreateCategory(
		[in, out] UUID* pguid,
		[in] UUID* riid,
		[in, out] LONG* ppv);
}

[
  odl,
  uuid(625E2DF8-6392-4CF0-9AD1-3CFA5F17775C),
  helpstring("IPortableDeviceConnector Interface")
]
interface IPortableDeviceConnector : stdole.IUnknown {
    long Connect([in] IConnectionRequestCallback* pCallback);
    long Disconnect([in] IConnectionRequestCallback* pCallback);
    long Cancel([in] IConnectionRequestCallback* pCallback);
    long GetProperty(
                    [in] PROPERTYKEY* pPropertyKey, 
                    [out] long* pPropertyType, 
                    [out] LONG* ppData, //VarPtr(bytArr(0))
                    [out] LONG* pcbData);
    long SetProperty(
                    [in] PROPERTYKEY* pPropertyKey, 
                    [in] long PropertyType, 
                    [in] LONG pData, //VarPtr(bytArr(0))
                    [in] LONG cbData);
    long GetPnPID([out] LONG* ppwszPnPID);
};
[
  odl,
  uuid(BFDEF549-9247-454F-BD82-06FE80853FAA),
  helpstring("IEnumPortableDeviceConnectors Interface")
]
interface IEnumPortableDeviceConnectors : stdole.IUnknown {
    long Next(
                    [in] LONG cRequested, 
                    [out] IPortableDeviceConnector** pConnectors, 
                    [in, out] LONG* pcFetched);
    long Skip([in] LONG cConnectors);
    long Reset();
    long Clone([out] IEnumPortableDeviceConnectors** ppEnum);
};

[ uuid(A1570149-E645-4F43-8B0D-409B061DB2FC) ]
coclass EnumBthMtpConnectors {
    [default] interface IEnumPortableDeviceConnectors;
};