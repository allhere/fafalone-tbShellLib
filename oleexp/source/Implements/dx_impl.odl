// Forward declare all types defined in this typelib
interface IDWriteTextRendererImp;
interface IDWriteInlineObjectImp;
interface IDWriteFontFileStreamImp;
interface IDWriteFontCollectionLoaderImp;
interface IDWriteFontFileLoaderImp;

typedef struct DWRITE_MATRIX {

    float m11;

    float m12;

    float m21;

    float m22;

    float dx;

    float dy;
} DWRITE_MATRIX;

[
    odl,
    uuid(EF8A8135-5CC6-45FE-8825-C5A0724EB819),
    helpstring("The IDWriteTextLayout interface represents a set of application-defined callbacks that perform rendering of text, inline objects, and decorations such as underlines.")
]
interface IDWriteTextRendererImp : IUnknown {
    [helpstring("Determines whether pixel snapping is disabled. The recommended default is FALSE, unless doing animation that requires subpixel vertical placement.")]
    HRESULT _stdcall IsPixelSnappingDisabled(
        [in] long pClientDrawingContext,
        [out, retval] long* isDisabled);
    [helpstring("Gets the current transform that maps abstract coordinates to DIPs, which may disable pixel snapping upon any rotation or shear.")]
    HRESULT _stdcall GetCurrentTransform(
        [in] long pClientDrawingContext,
        [in, out] DWRITE_MATRIX* transform);
    [helpstring("Gets the number of physical pixels per DIP. A DIP (device-independent pixel) is 1/96 inch, so the pixelsPerDip value is the number of logical pixels per inch divided by 96 (yieldinga value of 1 for 96 DPI and 1.25 for 120).")]
    HRESULT _stdcall GetPixelsPerDip(
        [in] long pClientDrawingContext,
        [out, retval] float* pixelsPerDip);
    [helpstring("IDWriteTextLayout::Draw calls this function to instruct the client to render a run of glyphs.")]
    HRESULT _stdcall DrawGlyphRun(
        [in] long pClientDrawingContext,
        [in] float baselineOriginX,
        [in] float baselineOriginY,
        [in] DWRITE_MEASURING_MODE measuringMode,
        [in] DWRITE_GLYPH_RUN* glyphRun,
        [in] DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription,
        [in] long pClientDrawingEffect);
    [helpstring("IDWriteTextLayout::Draw calls this function to instruct the client to draw an underline.")]
    HRESULT _stdcall DrawUnderline(
        [in] long pClientDrawingContext,
        [in] float baselineOriginX,
        [in] float baselineOriginY,
        [in] DWRITE_UNDERLINE* underline,
        [in] long pClientDrawingEffect);
    [helpstring("IDWriteTextLayout::Draw calls this function to instruct the client to draw a strikethrough.")]
    HRESULT _stdcall DrawStrikethrough(
        [in] long pClientDrawingContext,
        [in] float baselineOriginX,
        [in] float baselineOriginY,
        [in] DWRITE_STRIKETHROUGH* strikethrough,
        [in] long pClientDrawingEffect);
    [helpstring("IDWriteTextLayout::Draw calls this application callback when it needs to draw an inline object.")]
    HRESULT _stdcall DrawInlineObject(
        [in] long pClientDrawingContext,
        [in] float originX,
        [in] float originY,
        [in] long pInlineObject,
        [in] long isSideways,
        [in] long isRightToLeft,
        [in] long pClientDrawingEffect);
};

[
    odl,
    uuid(8339FDE3-106F-47AB-8373-1C6295EB10B3),
    helpstring("The IDWriteInlineObject interface wraps an application defined inline graphic, allowing DWrite to query metrics as if it was a glyph inline with the text.")
]
interface IDWriteInlineObjectImp : IUnknown {
    [helpstring("The application implemented rendering callback (IDWriteTextRenderer::DrawInlineObject) can use this to draw the inline object without needing to cast or query the object type. The text layout does not call this method directly.")]
    HRESULT _stdcall Draw(
        [in] long pClientDrawingContext,
        [in] IDWriteTextRenderer* renderer,
        [in] float originX,
        [in] float originY,
        [in] long isSideways,
        [in] long isRightToLeft,
        [in] long pClientDrawingEffect);
    [helpstring("TextLayout calls this callback function to get the measurement of the inline object.")]
    HRESULT _stdcall GetMetrics([out, retval] DWRITE_INLINE_OBJECT_METRICS* metrics);
    [helpstring("TextLayout calls this callback function to get the visible extents (in DIPs) of the inline object.")]
    HRESULT _stdcall GetOverhangMetrics([out, retval] DWRITE_OVERHANG_METRICS* overhangs);
    [helpstring("Layout uses this to determine the line breaking behavior of the inline object amidst the text.")]
    HRESULT _stdcall GetBreakConditions(
        [in] DWRITE_BREAK_CONDITION* breakConditionBefore,
        [in] DWRITE_BREAK_CONDITION* breakConditionAfter);
};

[
    odl,
    uuid(6D4865FE-0AB8-4D91-8F62-5DD6BE34A3E0),
    helpstring("The interface for loading font file data.")
]
interface IDWriteFontFileStreamImp : IUnknown {
    [helpstring("Reads a fragment from a file.")]
    HRESULT _stdcall ReadFileFragment(
        [in] long* pFragmentStart,
        [in] CURRENCY fileOffset,
        [in] CURRENCY fragmentSize,
        [in] long* pFragmentContext);
    [helpstring("Releases a fragment from a file.")]
    HRESULT _stdcall ReleaseFileFragment([in] long pFragmentContext);
    [helpstring("Obtains the total size of a file.")]
    HRESULT _stdcall GetFileSize([out, retval] CURRENCY* fileSize);
    [helpstring("Obtains the last modified time of the file. The last modified time is used by DirectWrite font selection algorithms to determine whether one font resource is more up to date than another one.")]
    HRESULT _stdcall GetLastWriteTime([out, retval] CURRENCY* lastWriteTime);
};

[
    odl,
    uuid(CCA920E4-52F0-492B-BFA8-29C72EE0A468),
    helpstring("The font collection loader interface is used to construct a collection of fonts given a particular type of key.")
]
interface IDWriteFontCollectionLoaderImp : IUnknown {
    [helpstring("Creates a font file enumerator object that encapsulates a collection of font files.")]
    HRESULT _stdcall CreateEnumeratorFromKey(
        [in] IDWriteFactory* factory,
        [in] long pCollectionKey,
        [in] long collectionKeySize,
        [out, retval] IDWriteFontFileEnumerator** fontFileEnumerator);
};

[
    odl,
    uuid(727CAD4E-D6AF-4C9E-8A08-D695B11CAA49),
    helpstring("Font file loader interface handles loading font file resources of a particular type from a key.")
]
interface IDWriteFontFileLoaderImp : IUnknown {
    [helpstring("Creates a font file stream object that encapsulates an open file resource.")]
    HRESULT _stdcall CreateStreamFromKey(
        [in] long pFontFileReferenceKey,
        [in] long fontFileReferenceKeySize,
        [out, retval] IDWriteFontFileStream** fontFileStream);
};
