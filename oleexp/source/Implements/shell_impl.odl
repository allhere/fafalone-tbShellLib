interface IShellBrowser;
interface IShellView;
interface IShellView2;
 
typedef LONG PITEMID_CHILD;
typedef LONG LPITEMIDLIST;
typedef LONG LPCITEMIDLIST;
typedef LONG PCIDLIST_ABSOLUTE;
typedef LONG PCIDLIST_CHILD;
typedef LONG PIDLIST_ABSOLUTE;
typedef LONG PIDLIST_CHILD;
typedef LONG PCUITEMID_ABSOLUTE;
typedef LONG PCUITEMID_CHILD;
typedef LONG PUITEMID_CHILD;
typedef LONG PCUIDLIST_RELATIVE;


typedef boolean           VARIANT_BOOL;
typedef long            UINT;
typedef long            DWORD;


    [
        odl,
        uuid(000214F2-0000-0000-C000-000000000046),
        helpstring("IEnumIDList interface")
    ]
    interface IEnumIDList : stdole.IUnknown {

        HRESULT Next(
            [in] LONG celt,
            [in, out] LONG *rgelt,
            [in, out] LONG *pceltFetched);

        HRESULT Skip(
            [in] LONG celt);

        HRESULT Reset();

        HRESULT Clone(
            [out, retval] IEnumIDList **ppenum);
    }
 [
    odl,
    uuid(000214E3-0000-0000-C000-000000000046),
    helpstring("IShellView interface")
]
interface IShellView : stdole.IUnknown {

    // *** IOleWindow methods ***
    HRESULT GetWindow(
        [out, retval] LONG * lpLONG);

    HRESULT ContextSensitiveHelp(
        [in] LONG fEnterMode);

    // *** IShellView methods ***
    HRESULT TranslateAccelerator(
        [in, out] MSG *lpmsg);

    HRESULT EnableModelessSV(
        [in] LONG fEnable);

    HRESULT UIActivate(
        [in] SVUIA_STATUS uState);

    HRESULT Refresh();

    HRESULT CreateViewWindow(
        [in] IShellView *lpPrevView,
        [in] FOLDERSETTINGS *lpfs,
        [in] IShellBrowser *psb,
        [in] RECT *prcView,
        [out, retval] LONG *pLONG);

    HRESULT DestroyViewWindow();

    HRESULT GetCurrentInfo(
        [in, out] FOLDERSETTINGS *lpfs);

    HRESULT AddPropertySheetPages(
        [in] LONG dwReserved,
        [in] LONG lpfn,
        [in] LONG lParam);

    HRESULT SaveViewState();

    HRESULT SelectItem(
        [in] LONG pidlItem,
        [in] SVSI_Flags uFlags);

    HRESULT GetItemObject(
        [in] LONG uItem,
        [in, out] UUID *riid,
        [out, retval] LONG *ppv);

};   
 [
    odl,
    uuid(000214E2-0000-0000-C000-000000000046),
    helpstring("IShellBrowser ")
]
interface IShellBrowser : stdole.IUnknown /* IOleWindow */{

    [helpstring("IOleWindow.GetWindow")]
    HRESULT GetWindow(
        [out, retval] LONG * lpLONG);

    [helpstring("IOleWindow.ContextSensitiveHelp")]
    HRESULT ContextSensitiveHelp(
        [in] LONG fEnterMode);

    HRESULT InsertMenusSB(
        [in] LONG hmenuShared,
        [in] long lpMenuWidths);

    HRESULT SetMenuSB(
        [in] LONG hmenuShared,
        [in] LONG holemenuReserved,
        [in] LONG LONGActiveObject);

    HRESULT RemoveMenusSB(
        [in] LONG hmenuShared);

    HRESULT SetStatusTextSB(
        [in] long lpszStatusText);

    HRESULT EnableModelessSB(
        [in] BOOL fEnable);

    HRESULT TranslateAcceleratorSB(
        [in, out] MSG *lpmsg,
        [in] short wID);

    HRESULT BrowseObject(
        [in] LONG pidl,
        [in] BO_Flags wFlags);

    HRESULT GetViewStateStream(
        [in] LONG grfMode,
        [out, retval] IStream **ppStrm);

    HRESULT GetControlWindow(
        [in] GCW_IDs id,
        [out, retval] LONG *lpLONG);

    HRESULT SendControlMsg(
        [in] GCW_IDs id,
        [in] LONG uMsg,
        [in] LONG wParam,
        [in] long lParam,
        [out, retval] LONG * pret);

    HRESULT QueryActiveShellView(
        [out, retval] IShellView ** ppshv);

    HRESULT OnViewWindowActive(
        [in] IShellView * ppshv);

    HRESULT SetToolbarItems(
        [in] long lpButtons,
        [in] LONG nButtons,
        [in] STI_Flags uFlags);
};   



//[
//	odl,
//	uuid(000214E6-0000-0000-C000-000000000046),
//	helpstring("IShellFolder interface")
//]
//interface IShellFolder : stdole.IUnknown{
//
//	HRESULT ParseDisplayName(
//	[in] long hwndOwner,
//		[in] long pbcReserved,
//		[in] long lpszDisplayName,
//		[in, out] long* pchEaten,
//		[in, out] long* ppidl,
//		[in, out] long* pdwAttributes);
//
//HRESULT EnumObjects(
//	[in] long hwndOwner,
//	[in] SHCONTF grfFlags,
//	[out, retval] IEnumIDList** ppenumIDList);
//
//HRESULT BindToObject(
//	[in] long pidl,
//	[in] long pbcReserved,
//	[in, out] UUID *riid,
//	[in, out] long *ppvOut);
//
//HRESULT BindToStorage(
//	[in] long pidl,
//	[in] long pbcReserved,
//	[in, out] UUID *riid,
//	[out, retval] IStorage **ppvObj);
//
//HRESULT CompareIDs(
//	[in] long lparam,
//	[in] long pidl1,
//	[in] long pidl2);
//
//HRESULT CreateViewObject(
//	[in] long hwndOwner,
//	[in, out] UUID* riid,
//	[out, retval] long *ppvOut);
//
//HRESULT GetAttributesOf(
//	[in] long cidl,
//	[in, out] long* apidl,
//	[in, out] long* rgfInOut);
//
//HRESULT GetUIObjectOf(
//	[in] long hwndOwner,
//	[in] long cidl,
//	[in, out] long *apidl,
//	[in, out] UUID  *riid,
//	[in, out] long *prgfInOut,
//	[out, retval] long *ppvOut);
//
//HRESULT GetDisplayNameOf(
//	[in] long pidl,
//	[in] SHGNO_Flags uFlags,
//	[in, out] STRRET* lpName);
//
//HRESULT SetNameOf(
//	[in] long hwndOwner,
//	[in] long pidl,
//	[in] long lpszName,
//	[in] SHGNO_Flags uFlags,
//	[out, retval] long* ppidlOut);
//};

[
	odl,
	uuid(000214E6-0000-0000-C000-000000000046),
	helpstring("IShellFolder interface")
]
interface IShellFolder : stdole.IUnknown{

	HRESULT ParseDisplayName(
	[in] long hwndOwner,
		[in] long pbcReserved,
		[in] long lpszDisplayName,
		[in, out] long* pchEaten,
		[in, out] long* ppidl,
		[in, out] long* pdwAttributes);

HRESULT EnumObjects(
	[in] long hwndOwner,
	[in] SHCONTF grfFlags,
	[out, retval] IEnumIDList** ppenumIDList);

//HRESULT BindToObject(
//	[in] long pidl,
//	[in] long pbcReserved,
//	[in, out] UUID *riid,
//	[out, retval] IUnknown **ppvOut);
HRESULT BindToObject(
	[in] long pidl,
	[in] long pbcReserved,
	[in, out] UUID *riid,
	[in, out] long *ppvOut);

HRESULT BindToStorage(
	[in] long pidl,
	[in] long pbcReserved,
	[in, out] UUID *riid,
	[out, retval] IStorage **ppvObj);

HRESULT CompareIDs(
	[in] long lparam,
	[in] long pidl1,
	[in] long pidl2);

//HRESULT CreateViewObject(
//	[in] long hwndOwner,
//	[in, out] UUID* riid,
//	[out, retval] stdole.IUnknown **ppvOut);
HRESULT CreateViewObject(
	[in] long hwndOwner,
	[in, out] UUID* riid,
	[out, retval] long *ppvOut);

HRESULT GetAttributesOf(
	[in] long cidl,
	[in, out] long* apidl,
	[in, out] long* rgfInOut);

//HRESULT GetUIObjectOf(
//	[in] long hwndOwner,
//	[in] long cidl,
//	[in, out] long *apidl,
//	[in, out] UUID  *riid,
//	[in, out] long *prgfInOut,
//	[out, retval] stdole.IUnknown **ppvOut);
HRESULT GetUIObjectOf(
	[in] long hwndOwner,
	[in] long cidl,
	[in, out] long *apidl,
	[in, out] UUID  *riid,
	[in, out] long *prgfInOut,
	[out, retval] long *ppvOut);

HRESULT GetDisplayNameOf(
	[in] long pidl,
	[in] SHGNO_Flags uFlags,
	[in, out] STRRET* lpName);

HRESULT SetNameOf(
	[in] long hwndOwner,
	[in] long pidl,
	[in] long lpszName,
	[in] SHGNO_Flags uFlags,
	[out, retval] long* ppidlOut);
};


[
	odl,
    helpstring("IShellFolder2"),
    uuid(93F2F68C-1D1B-11d3-A30E-00C04F79ABD1),
]
interface IShellFolder2 : stdole.IUnknown {

    HRESULT ParseDisplayName(
        [in] long hwndOwner,
        [in] long pbcReserved,
        [in] long lpszDisplayName,
        [in, out] long* pchEaten,
        [in, out] long* ppidl,
        [in, out] long* pdwAttributes);

    HRESULT EnumObjects(
        [in] long hwndOwner,
        [in] SHCONTF grfFlags,
        [out, retval] IEnumIDList** ppenumIDList);

    HRESULT BindToObject(
        [in] long pidl,
        [in] long pbcReserved,
        [in, out] UUID *riid,
        [in, out] long *ppvOut);

    HRESULT BindToStorage(
        [in] long pidl,
        [in] long pbcReserved,
        [in, out] UUID *riid,
        [out, retval] IStorage **ppvObj);

    HRESULT CompareIDs(
        [in] long lparam,
        [in] long pidl1,
        [in] long pidl2);

    HRESULT CreateViewObject(
        [in] long hwndOwner,
        [in, out] UUID* riid,
        [out, retval] long *ppvOut);

    HRESULT GetAttributesOf(
        [in] long cidl,
        [in, out] long* apidl,
        [in, out] long* rgfInOut);

    HRESULT GetUIObjectOf(
        [in] long hwndOwner,
        [in] long cidl,
        [in, out] long *apidl,
        [in, out] UUID  *riid,
        [in, out] long *prgfInOut,
        [out, retval] long *ppvOut);

    HRESULT GetDisplayNameOf(
        [in] long pidl,
        [in] SHGNO_Flags uFlags,
        [in, out] STRRET* lpName);

    HRESULT SetNameOf(
        [in] long hwndOwner,
        [in] long pidl,
        [in] long lpszName,
        [in] SHGNO_Flags uFlags,
        [out, retval] long* ppidlOut);

    // Returns the guid of the search that is to be invoked when user clicks 
    // on the search toolbar button
    HRESULT GetDefaultSearchGUID(
		[in, out] UUID *pguid);

    // gives an enumerator of the searches to be added to the search menu
    HRESULT EnumSearches(
		[out, retval] IEnumExtraSearch **ppenum);
    
    HRESULT GetDefaultColumn(
		[in] LONG dwRes,
		[in, out] LONG *pSort,
		[in, out] LONG *pDisplay);

    // return SHCOLSTATE_ values
    HRESULT GetDefaultColumnState(
		[in] INT iColumn, 
		[out, retval] SHCOLSTATEF *pcsFlags);
    
    HRESULT GetDetailsEx(
		[in] LONG pidl,
		[in] SHCOLUMNID *pscid,
		[out, retval] VARIANT *pv);
    
    HRESULT GetDetailsOf(
		[in] LONG pidl,
		[in] INT iColumn,
		[in, out] SHELLDETAILS *psd);
    
    HRESULT MapColumnToSCID(
		[in] INT iColumn,
		[in] SHCOLUMNID *pscid);
};

[
	odl,
	helpstring("IShellFolder3 (Undocumented)"),
	uuid(711B2CFD-93D1-422B-BDF4-69BE923F2449),
]
interface IShellFolder3 : stdole.IUnknown {
	HRESULT ParseDisplayName(
	[in] long hwndOwner,
		[in] long pbcReserved,
		[in] long lpszDisplayName,
		[in, out] long* pchEaten,
		[in, out] long* ppidl,
		[in, out] long* pdwAttributes);

HRESULT EnumObjects(
	[in] long hwndOwner,
	[in] SHCONTF grfFlags,
	[out, retval] IEnumIDList** ppenumIDList);

HRESULT BindToObject(
	[in] long pidl,
	[in] long pbcReserved,
	[in, out] UUID *riid,
	[in, out] long *ppvOut);

HRESULT BindToStorage(
	[in] long pidl,
	[in] long pbcReserved,
	[in, out] UUID *riid,
	[out, retval] IStorage **ppvObj);

HRESULT CompareIDs(
	[in] long lparam,
	[in] long pidl1,
	[in] long pidl2);

HRESULT CreateViewObject(
	[in] long hwndOwner,
	[in, out] UUID* riid,
	[out, retval] long *ppvOut);

HRESULT GetAttributesOf(
	[in] long cidl,
	[in, out] long* apidl,
	[in, out] long* rgfInOut);

HRESULT GetUIObjectOf(
	[in] long hwndOwner,
	[in] long cidl,
	[in, out] long *apidl,
	[in, out] UUID  *riid,
	[in, out] long *prgfInOut,
	[out, retval] long *ppvOut);

HRESULT GetDisplayNameOf(
	[in] long pidl,
	[in] SHGNO_Flags uFlags,
	[in, out] STRRET* lpName);

HRESULT SetNameOf(
	[in] long hwndOwner,
	[in] long pidl,
	[in] long lpszName,
	[in] SHGNO_Flags uFlags,
	[out, retval] long* ppidlOut);

// Returns the guid of the search that is to be invoked when user clicks 
// on the search toolbar button
HRESULT GetDefaultSearchGUID(
	[in, out] UUID *pguid);

// gives an enumerator of the searches to be added to the search menu
HRESULT EnumSearches(
	[out, retval] IEnumExtraSearch **ppenum);

HRESULT GetDefaultColumn(
	[in] LONG dwRes,
	[out] LONG *pSort,
	[out] LONG *pDisplay);

// return SHCOLSTATE_ values
HRESULT GetDefaultColumnState(
	[in] INT iColumn,
	[out, retval] SHCOLSTATEF *pcsFlags);

HRESULT GetDetailsEx(
	[in] LONG pidl,
	[in] SHCOLUMNID *pscid,
	[out, retval] VARIANT *pv);

HRESULT GetDetailsOf(
	[in] LONG pidl,
	[in] INT iColumn,
	[in, out] SHELLDETAILS *psd);

HRESULT MapColumnToSCID(
	[in] INT iColumn,
	[in] SHCOLUMNID *pscid);

HRESULT CreateFilteredIDList(
	[in] long pFilterCon /* IFilterCondition  */,
	[in] INT unknownFilterListType, 
	[in] IPropertyStore* store, 
	[in] PITEMID_CHILD* pPidl);

HRESULT GetFilteredIDListType(
	[in] long pidl,
	[in] INT unknownFilterListType);

HRESULT ModifyFilteredIDList(
	[in] long pidl,
	[in] long pFilterCon /* IFilterCondition  */,
	[in, out] long* pPidl);

HRESULT ReparentFilteredIDList(
	[in] long pidl, 
	[in] long* pPidl);

HRESULT CreateStackedIDList(
	[in] PROPERTYKEY* pKey, 
	[in] long* pPidl);

HRESULT GetStackedKey([in] PROPERTYKEY* pKey);

HRESULT GetStackData([in] UUID* iid, [in, out] long* ppv); //New Method after Windows 7

HRESULT EnumObjectsEx(
	[in] long hwnd,
	[in] IBindCtx* ctx, 
	[in] LONG ulongVal, 
	[in] long pFilter /* IItemFilter */,
	[in] IEnumIDList* pEnumList);

HRESULT GetConditions(
	[in] PROPERTYKEY* pKey, 
	[in] long pQueryUnit,
	[in] UUID *riid, 
	[in, out] long* ppvOut);

HRESULT GetAutoListFlags([in, out] LONG* flags);


};




[
    uuid(88E39E80-3578-11CF-AE69-08002B2E1262),
    odl
]
interface IShellView2 : stdole.IUnknown {

    // *** IOleWindow methods ***
    HRESULT GetWindow(
        [out, retval] LONG * lpLONG);

    HRESULT ContextSensitiveHelp(
        [in] LONG fEnterMode);

    // *** IShellView methods ***
    HRESULT TranslateAccelerator(
        [in, out] MSG *lpmsg);

    HRESULT EnableModelessSV(
        [in] LONG fEnable);

    HRESULT UIActivate(
        [in] SVUIA_STATUS uState);

    HRESULT Refresh();

    HRESULT CreateViewWindow(
        [in] IShellView *lpPrevView,
        [in] FOLDERSETTINGS *lpfs,
        [in] IShellBrowser *psb,
        [in] RECT *prcView,
        [out, retval] LONG *pLONG);

    HRESULT DestroyViewWindow();

    HRESULT GetCurrentInfo(
        [in, out] FOLDERSETTINGS *lpfs);

    HRESULT AddPropertySheetPages(
        [in] LONG dwReserved,
        [in] LONG lpfn,
        [in] LONG lParam);

    HRESULT SaveViewState();

    HRESULT SelectItem(
        [in] LONG pidlItem,
        [in] SVSI_Flags uFlags);

    HRESULT GetItemObject(
        [in] LONG uItem,
        [in, out] UUID *riid,
        [out, retval] LONG *ppv);

    // *** IShellView2 methods ***
    HRESULT GetView(
        [in, out] UUID* pvid, 
        [in] SV2GV_Flags uView);

    HRESULT CreateViewWindow2(
        [in, out] SV2CVW2_PARAMS *lpParams);

    HRESULT HandleRename(
        [in] LONG pidlNew);

    HRESULT SelectAndPositionItem(
        [in] LONG pidlItem,
        [in] SVSI_Flags uFlags,
        [in, out] POINT *point);
};



[
	odl,
	uuid(ec39fa88-f8af-41c5-8421-38bed28f4673)
]
interface IShellView3 : stdole.IUnknown
{
	// *** IOleWindow methods ***
	HRESULT GetWindow(
		[out, retval] LONG * lpLONG);

	HRESULT ContextSensitiveHelp(
		[in] LONG fEnterMode);

	// *** IShellView methods ***
	HRESULT TranslateAccelerator(
		[in, out] MSG *lpmsg);

	HRESULT EnableModelessSV(
		[in] LONG fEnable);

	HRESULT UIActivate(
		[in] SVUIA_STATUS uState);

	HRESULT Refresh();

	HRESULT CreateViewWindow(
		[in] IShellView *lpPrevView,
		[in] FOLDERSETTINGS *lpfs,
		[in] IShellBrowser *psb,
		[in] RECT *prcView,
		[out, retval] LONG *pLONG);

	HRESULT DestroyViewWindow();

	HRESULT GetCurrentInfo(
		[in, out] FOLDERSETTINGS *lpfs);

	HRESULT AddPropertySheetPages(
		[in] LONG dwReserved,
		[in] LONG lpfn,
		[in] LONG lParam);

	HRESULT SaveViewState();

	HRESULT SelectItem(
		[in] LONG pidlItem,
		[in] SVSI_Flags uFlags);

	HRESULT GetItemObject(
		[in] LONG uItem,
		[in, out] UUID *riid,
		[out, retval] LONG *ppv);

	// *** IShellView2 methods ***
	HRESULT GetView(
		[in, out] UUID* pvid,
		[in] SV2GV_Flags uView);

	HRESULT CreateViewWindow2(
		[in, out] SV2CVW2_PARAMS *lpParams);

	HRESULT HandleRename(
		[in] LONG pidlNew);

	HRESULT SelectAndPositionItem(
		[in] LONG pidlItem,
		[in] SVSI_Flags uFlags,
		[in, out] POINT *point);

	//IShellView3
	HRESULT CreateViewWindow3(
		[in] IShellBrowser *psbOwner,
		[in] IShellView *psvPrev,
		[in] SV3CVW3_FLAGS dwViewFlags,
		[in] FOLDERFLAGS dwMask,
		[in] FOLDERFLAGS dwFlags,
		[in] FOLDERVIEWMODE fvMode,
		[in] UUID *pvid,
		[in] RECT *prcView,
		[in, out] LONG *phwndView);
}


[
	odl,
    uuid(c8e2d566-186e-4d49-bf41-6909ead56acc)
]
interface IPropertyStoreCapabilities : stdole.IUnknown
{
    HRESULT IsPropertyWritable([in] PROPERTYKEY *key);
}


//OLE Shell Viewinterface FolderItemVerbs;

interface FolderItemVerbs;

[
	uuid(FAC32C80-CBE4-11CE-8350-444553540000), // IID_FolderItem
	helpstring("Definition of interface FolderItem"),
	oleautomation,
	dual
]
interface FolderItem : IDispatch
{

	[propget, helpstring("Get Application object")]
	HRESULT Application([out, retval] IDispatch **ppid);

	[propget, helpstring("Get Parent object")]
	HRESULT Parent([out, retval] IDispatch **ppid);

	[id(0), propget, helpstring("Get display name for item")]
	HRESULT Name([out, retval] BSTR *pbs);

	[id(0), propput, helpstring("Set the name for the item")]
	HRESULT Name([in] BSTR bs);

	[propget, helpstring("Get the pathname to the item")]
	HRESULT Path([out, retval]BSTR *pbs);

	[propget, helpstring("If item is link return link object")]
	HRESULT GetLink([out, retval] IDispatch **ppid);

	[propget, helpstring("If item is a folder return folder object")]
	HRESULT GetFolder([out, retval] IDispatch **ppid);

	[propget, helpstring("Is the item a link?")]
	HRESULT IsLink([out, retval] VARIANT_BOOL *pb);

	[propget, helpstring("Is the item a Folder?")]
	HRESULT IsFolder([out, retval] VARIANT_BOOL *pb);

	[propget, helpstring("Is the item a file system object?")]
	HRESULT IsFileSystem([out, retval] VARIANT_BOOL *pb);

	[propget, helpstring("Is the item browsable?")]
	HRESULT IsBrowsable([out, retval] VARIANT_BOOL *pb);

	[propget, helpstring("Modification Date?")]
	HRESULT ModifyDate([out, retval] DATE *pdt);

	[propput, helpstring("Modification Date?")]
	HRESULT ModifyDate([in] DATE dt);

	[propget, helpstring("Size")]
	HRESULT Size([out, retval] LONG *pul);

	[propget, helpstring("Type")]
	HRESULT Type([out, retval] BSTR *pbs);

	[helpstring("Get the list of verbs for the object")]
	HRESULT Verbs([out, retval] FolderItemVerbs **ppfic);

	[helpstring("Execute a command on the item")]
	HRESULT InvokeVerb([in, optional] VARIANT vVerb);
}

[
	uuid(744129E0-CBE5-11CE-8350-444553540000), // IID_FolderItems
	helpstring("Definition of interface FolderItems"),
	oleautomation,
	dual
]
interface FolderItems : IDispatch
{
	//Properties
	[propget, helpstring("Get count of items in the folder")]
	HRESULT Count([out, retval] long *plCount);

	[propget, helpstring("Get Application object")]
	HRESULT Application([out, retval] IDispatch **ppid);

	[propget, helpstring("Get Parent object")]
	HRESULT Parent([out, retval] IDispatch **ppid);

	//Methods
	//Standard Methods
	[helpstring("Return the figure for the given index")]
	HRESULT Item([in, optional] VARIANT index, [out, retval]FolderItem **ppid);

	[id(-4), helpstring("Enumerates the figures")]
	HRESULT _NewEnum([out, retval] IUnknown **ppunk);
}

[
	uuid(BBCBDE60-C3FF-11CE-8350-444553540000), // IID_Folder
	helpstring("Definition of interface Folder"),
	oleautomation,
	dual,
]
interface Folder : IDispatch
{
	//Properties
	[id(0), propget, helpstring("Get the display name for the window")]
	HRESULT Title([out, retval] BSTR *pbs);

	[propget, helpstring("Get Application object")]
	HRESULT Application([out, retval] IDispatch **ppid);

	[propget, helpstring("Get Parent object")]
	HRESULT Parent([out, retval] IDispatch **ppid);

	[propget, helpstring("Get Parent object")]
	HRESULT ParentFolder([out, retval] Folder **ppsf);

	//Methods
	[helpstring("The collection of Items in folder")]
	HRESULT Items([out, retval] FolderItems **ppid);

	[helpstring("Parse the name to get an item.")]
	HRESULT ParseName([in] BSTR bName, [out, retval] FolderItem **ppid);

	[helpstring("Create a new sub folder in this folder.")]
	HRESULT NewFolder([in] BSTR bName, [in, optional] VARIANT vOptions);

	[helpstring("Move Items to this folder.")]
	HRESULT MoveHere([in] VARIANT vItem, [in, optional] VARIANT vOptions);

	[helpstring("Copy Items to this folder.")]
	HRESULT CopyHere([in] VARIANT vItem, [in, optional] VARIANT vOptions);

	[helpstring("Get the details about an item.")]
	HRESULT GetDetailsOf([in] VARIANT vItem, [in] int iColumn, [out, retval]BSTR *pbs);
}

[
	uuid(08EC3E00-50B0-11CF-960C-0080C7F4EE85), // IID_FolderItemVerb
	helpstring("Definition of interface FolderItemVerb"),
	oleautomation,
	dual
]
interface FolderItemVerb : IDispatch
{
	[propget, helpstring("Get Application object")]
	HRESULT Application([out, retval] IDispatch **ppid);

	[propget, helpstring("Get Parent object")]
	HRESULT Parent([out, retval] IDispatch **ppid);

	[id(0), propget, helpstring("Get display name for item")]
	HRESULT Name([out, retval] BSTR *pbs);

	[helpstring("Execute the verb")]
	HRESULT DoIt();
}

[
	uuid(1F8352C0-50B0-11CF-960C-0080C7F4EE85), // IID_FolderItemVerbs
	helpstring("Definition of interface FolderItemVerbs"),
	oleautomation,
	dual
]
interface FolderItemVerbs : IDispatch
{
	//Properties
	[propget, helpstring("Get count of open folder windows")]
	HRESULT Count([out, retval] long *plCount);

	[propget, helpstring("Get Application object")]
	HRESULT Application([out, retval] IDispatch **ppid);

	[propget, helpstring("Get Parent object")]
	HRESULT Parent([out, retval] IDispatch **ppid);

	//Methods
	//Standard Methods
	[helpstring("Return the specified verb")]
	HRESULT Item([in, optional] VARIANT index, [out, retval]FolderItemVerb **ppid);

	[id(-4), helpstring("Enumerates the figures")]
	HRESULT _NewEnum([out, retval] IUnknown **ppunk);
}

[
	uuid(E7A1AF80-4D96-11CF-960C-0080C7F4EE85), // IID_IShellFolderViewDual
	helpstring("definition of interface IShellFolderViewDual"),
	oleautomation,
	dual
]
interface IShellFolderViewDual : IDispatch
{
	[propget, helpstring("Get Application object")]
	HRESULT Application([out, retval] IDispatch **ppid);

	[propget, helpstring("Get Parent object")]
	HRESULT Parent([out, retval] IDispatch **ppid);

	[propget, helpstring("Get the folder being viewed")]
	HRESULT Folder([out, retval] Folder **ppid);

	[helpstring("The collection of Selected Items in folder")]
	HRESULT SelectedItems([out, retval] FolderItems **ppid);

	[propget, helpstring("The currently focused item in the folder")]
	HRESULT FocusedItem([out, retval] FolderItem **ppid);

	[helpstring("Select the item")]
	HRESULT SelectItem([in]VARIANT *pvfi, [in] int dwFlags);

	[helpstring("Show items menu and return command selected")]
	HRESULT PopupItemMenu([in]FolderItem *pfi, [in, optional]VARIANT vx, [in, optional]VARIANT vy, [out, retval] BSTR *pbs);

	[propget, helpstring("Returns the scripting automation model.")]
	HRESULT Script([out, retval] IDispatch** ppDisp);

	[propget, helpstring("Returns the view options for showing a folder.")]
	HRESULT ViewOptions([out, retval] long * plViewOptions);
}

[
	uuid(31C147b6-0ADE-4A3C-B514-DDF932EF6D17), // IID_IShellFolderViewDual2
	helpstring("definition of interface IShellFolderViewDual2"),
	oleautomation,
	dual
]
interface IShellFolderViewDual2 : IDispatch
{
	//IShellFolderViewDual
	[propget, helpstring("Get Application object")]
	HRESULT Application([out, retval] IDispatch **ppid);
	[propget, helpstring("Get Parent object")]
	HRESULT Parent([out, retval] IDispatch **ppid);
	[propget, helpstring("Get the folder being viewed")]
	HRESULT Folder([out, retval] Folder **ppid);
	[helpstring("The collection of Selected Items in folder")]
	HRESULT SelectedItems([out, retval] FolderItems **ppid);
	[propget, helpstring("The currently focused item in the folder")]
	HRESULT FocusedItem([out, retval] FolderItem **ppid);
	[helpstring("Select the item")]
	HRESULT SelectItem([in]VARIANT *pvfi, [in] int dwFlags);
	[helpstring("Show items menu and return command selected")]
	HRESULT PopupItemMenu([in]FolderItem *pfi, [in, optional]VARIANT vx, [in, optional]VARIANT vy, [out, retval] BSTR *pbs);
	[propget, helpstring("Returns the scripting automation model.")]
	HRESULT Script([out, retval] IDispatch** ppDisp);
	[propget, helpstring("Returns the view options for showing a folder.")]
	HRESULT ViewOptions([out, retval] long * plViewOptions);

	//IShellFolderViewDual2
	[propget, helpstring("Get Current View Mode")]
	HRESULT CurrentViewMode([out, retval] UINT *pViewMode);
	[propput, helpstring("Put Current View Mode")]
	HRESULT CurrentViewMode([in] UINT ViewMode);
	[helpstring("Select Item relative to the Current Item")]
	HRESULT SelectItemRelative([in] int iRelative);
}

[
	uuid(29EC8E6C-46D3-411f-BAAA-611A6C9CAC66), // IID_IShellFolderViewDual3
	helpstring("definition of interface IShellFolderViewDual3"),
	oleautomation,
	dual
]
interface IShellFolderViewDual3 : IDispatch
{
	//IShellFolderViewDual
	[propget, helpstring("Get Application object")]
	HRESULT Application([out, retval] IDispatch **ppid);
	[propget, helpstring("Get Parent object")]
	HRESULT Parent([out, retval] IDispatch **ppid);
	[propget, helpstring("Get the folder being viewed")]
	HRESULT Folder([out, retval] Folder **ppid);
	[helpstring("The collection of Selected Items in folder")]
	HRESULT SelectedItems([out, retval] FolderItems **ppid);
	[propget, helpstring("The currently focused item in the folder")]
	HRESULT FocusedItem([out, retval] FolderItem **ppid);
	[helpstring("Select the item")]
	HRESULT SelectItem([in]VARIANT *pvfi, [in] int dwFlags);
	[helpstring("Show items menu and return command selected")]
	HRESULT PopupItemMenu([in]FolderItem *pfi, [in, optional]VARIANT vx, [in, optional]VARIANT vy, [out, retval] BSTR *pbs);
	[propget, helpstring("Returns the scripting automation model.")]
	HRESULT Script([out, retval] IDispatch** ppDisp);
	[propget, helpstring("Returns the view options for showing a folder.")]
	HRESULT ViewOptions([out, retval] long * plViewOptions);

	//IShellFolderViewDual2
	[propget, helpstring("Get Current View Mode")]
	HRESULT CurrentViewMode([out, retval] UINT *pViewMode);
	[propput, helpstring("Put Current View Mode")]
	HRESULT CurrentViewMode([in] UINT ViewMode);
	[helpstring("Select Item relative to the Current Item")]
	HRESULT SelectItemRelative([in] int iRelative);

	//IShellFolderViewDual3
	[propget, helpstring("Get Group By Column")]
	HRESULT GroupBy([out, retval] BSTR *pbstrGroupBy);
	[propput, helpstring("Set Group By Column")]
	HRESULT GroupBy([in] BSTR bstrGroupBy);
	[propget, helpstring("Get Folder Flags")]
	HRESULT FolderFlags([out, retval] DWORD *pdwFlags);
	[propput, helpstring("Set Folder Flags")]
	HRESULT FolderFlags([in] DWORD dwFlags);
	[propget, helpstring("Get Sorting Columns")]
	HRESULT SortColumns([out, retval] BSTR* pbstrSortColumns);
	[propput, helpstring("Set Sorting Columns")]
	HRESULT SortColumns([in] BSTR bstrSortColumns);
	[propput, helpstring("Set Icon Size")]
	HRESULT IconSize([in] int iIconSize);
	[propget, helpstring("Get Icon Size")]
	HRESULT IconSize([out, retval] int* piIconSize);
	[helpstring("Filter View")]
	HRESULT FilterView([in] BSTR bstrFilterText);
}


typedef enum BrowserNavConstants {
	[helpstring("Open in new window")]              navOpenInNewWindow = 0x0001,
	[helpstring("Exclude from history list")]       navNoHistory = 0x0002,
	[helpstring("Don't read from cache")]           navNoReadFromCache = 0x0004,
	[helpstring("Don't write from cache")]          navNoWriteToCache = 0x0008,
	[helpstring("Try other sites on failure")]      navAllowAutosearch = 0x0010,
	[helpstring("OpenBrowserBar")]                  navBrowserBar = 0x0020,
	[helpstring("Hyperlink")]                       navHyperlink = 0x0040,
	[helpstring("Enforce restricted zone")]         navEnforceRestricted = 0x0080,
	[helpstring("Apply new window management")]     navNewWindowsManaged = 0x0100,
	[helpstring("Untrusted download")]              navUntrustedForDownload = 0x0200,
	[helpstring("Trusted for ActiveX prompt")]      navTrustedForActiveX = 0x0400,
	[helpstring("Open in new tab")]                 navOpenInNewTab = 0x0800,
	[helpstring("Open in a background tab")]        navOpenInBackgroundTab = 0x1000,
	[helpstring("Maintain the wordwheel text")]     navKeepWordWheelText = 0x2000,
	[helpstring("Virtual tab across MIC levels")]   navVirtualTab = 0x4000,
	[helpstring("Block x-domain redirects")]        navBlockRedirectsXDomain = 0x8000,
	[helpstring("Force open in foreground tab")]    navOpenNewForegroundTab = 0x10000,
	[helpstring("Travel Log nav with screenshot")]  navTravelLogScreenshot = 0x20000,
	[helpstring("Defer unload of virtual tab")]     navDeferUnload = 0x40000,
	[helpstring("Speculative navigate")]            navSpeculative = 0x80000,
	[helpstring("Suggest open in new window")]      navSuggestNewWindow = 0x100000,
	[helpstring("Suggest open in new tab")]         navSuggestNewTab = 0x200000,
	[helpstring("Reserved")]                        navReserved1 = 0x400000,
	[helpstring("HP navigation")]                   navHomepageNavigate = 0x800000,
	[helpstring("Treat nav as refresh")]            navRefresh = 0x1000000,
	[helpstring("Host initiated navigation")]       navHostNavigation = 0x2000000,
	[helpstring("Reserved")]                        navReserved2 = 0x4000000,
	[helpstring("Reserved")]                        navReserved3 = 0x8000000,
	[helpstring("Reserved")]                        navReserved4 = 0x10000000,
	[helpstring("Reserved")]                        navReserved5 = 0x20000000,
	[helpstring("Reserved")]                        navReserved6 = 0x40000000,
} BrowserNavConstants;

typedef enum RefreshConstants {                                         // must map to these in sdk\inc\docobj.h
	[helpstring("Refresh normal")]     REFRESH_NORMAL = 0,  //== OLECMDIDF_REFRESH_NORMAL
	[helpstring("Refresh if expired")] REFRESH_IFEXPIRED = 1,  //== OLECMDIDF_REFRESH_IFEXPIRED
	[helpstring("Refresh completely")] REFRESH_COMPLETELY = 3   //== OLECMDIDF_REFRESH_COMPLETELY
} RefreshConstants;

[
	uuid(EAB22AC1-30C1-11CF-A7EB-0000C05BAE0B), // IID_IWebBrowser
	helpstring("Web Browser interface"),
	dual,
	oleautomation,
	odl
]
interface IWebBrowser : IDispatch
{
	[id(100), helpstring("Navigates to the previous item in the history list.")]
	HRESULT GoBack();
	[id(101), helpstring("Navigates to the next item in the history list.")]
	HRESULT GoForward();
	[id(102), helpstring("Go home/start page.")]
	HRESULT GoHome();
	[id(103), helpstring("Go Search Page.")]
	HRESULT GoSearch();

	[id(104), helpstring("Navigates to a URL or file.")]
	HRESULT Navigate([in] BSTR URL,
		[in, optional] VARIANT * Flags,
		[in, optional] VARIANT * TargetFrameName,
		[in, optional] VARIANT * PostData,
		[in, optional] VARIANT * Headers);


	[id(107), helpstring("Refresh the currently viewed page.")]
	HRESULT Refresh();

	// The standard Refresh takes no parameters and we need some... use a new name
	[id(105), helpstring("Refresh the currently viewed page.")]
	HRESULT Refresh2([in, optional] VARIANT * Level);


	[id(106), helpstring("Stops opening a file.")]
	HRESULT Stop();

	// Automation heirarchy...
	[id(200), propget, helpstring("Returns the application automation object if accessible, this automation object otherwise..")]
	HRESULT Application([out, retval] IDispatch** ppDisp);

	[id(201), propget, helpstring("Returns the automation object of the container/parent if one exists or this automation object.")]
	HRESULT Parent([out, retval] IDispatch** ppDisp);

	[id(202), propget, helpstring("Returns the container/parent automation object, if any.")]
	HRESULT Container([out, retval] IDispatch** ppDisp);

	[id(203), propget, helpstring("Returns the active Document automation object, if any.")]
	HRESULT Document([out, retval] IDispatch** ppDisp);

	[id(204), propget, helpstring("Returns True if this is the top level object.")]
	HRESULT TopLevelContainer([out, retval] VARIANT_BOOL* pBool);

	[id(205), propget, helpstring("Returns the type of the contained document object.")]
	HRESULT Type([out, retval] BSTR* Type);

	// Window stuff...
	[id(206), propget, helpstring("The horizontal position (pixels) of the frame window relative to the screen/container.")]
	HRESULT Left([out, retval] long *pl);
	[id(206), propput]
	HRESULT Left([in] long Left);
	[id(207), propget, helpstring("The vertical position (pixels) of the frame window relative to the screen/container.")]
	HRESULT Top([out, retval] long *pl);
	[id(207), propput]
	HRESULT Top([in] long Top);
	[id(208), propget, helpstring("The horizontal dimension (pixels) of the frame window/object.")]
	HRESULT Width([out, retval] long *pl);
	[id(208), propput]
	HRESULT Width([in] long Width);
	[id(209), propget, helpstring("The vertical dimension (pixels) of the frame window/object.")]
	HRESULT Height([out, retval] long *pl);
	[id(209), propput]
	HRESULT Height([in] long Height);

	// WebBrowser stuff...
	[id(210), propget, helpstring("Gets the short (UI-friendly) name of the URL/file currently viewed.")]
	HRESULT LocationName([out, retval] BSTR *LocationName);

	[id(211), propget, helpstring("Gets the full URL/path currently viewed.")]
	HRESULT LocationURL([out, retval] BSTR * LocationURL);

	// Added a property to see if the viewer is currenly busy or not...
	[id(212), propget, helpstring("Query to see if something is still in progress.")]
	HRESULT Busy([out, retval] VARIANT_BOOL *pBool);
}

typedef enum CommandStateChangeConstants {
	[helpstring("Command Change")]      CSC_UPDATECOMMANDS = 0xFFFFFFFF,
	[helpstring("Navigate Forward")]    CSC_NAVIGATEFORWARD = 0x00000001,
	[helpstring("Navigate Back")]       CSC_NAVIGATEBACK = 0x00000002,
} CommandStateChangeConstants;

[
	uuid(0002DF05-0000-0000-C000-000000000046), // IID_IWebBrowserApp
	helpstring("Web Browser Application Interface."),
	oleautomation,
	dual
]
interface IWebBrowserApp : IDispatch // IWebBrowser
{
	//IWebBrowser Methods
	[id(100), helpstring("Navigates to the previous item in the history list.")]
	HRESULT GoBack();
	[id(101), helpstring("Navigates to the next item in the history list.")]
	HRESULT GoForward();
	[id(102), helpstring("Go home/start page.")]
	HRESULT GoHome();
	[id(103), helpstring("Go Search Page.")]
	HRESULT GoSearch();

	[id(104), helpstring("Navigates to a URL or file.")]
	HRESULT Navigate([in] BSTR URL,
		[in, optional] VARIANT * Flags,
		[in, optional] VARIANT * TargetFrameName,
		[in, optional] VARIANT * PostData,
		[in, optional] VARIANT * Headers);


	[id(107), helpstring("Refresh the currently viewed page.")]
	HRESULT Refresh();

	// The standard Refresh takes no parameters and we need some... use a new name
	[id(105), helpstring("Refresh the currently viewed page.")]
	HRESULT Refresh2([in, optional] VARIANT * Level);

	[id(106), helpstring("Stops opening a file.")]
	HRESULT Stop();

	// Automation heirarchy...
	[id(200), propget, helpstring("Returns the application automation object if accessible, this automation object otherwise..")]
	HRESULT Application([out, retval] IDispatch** ppDisp);

	[id(201), propget, helpstring("Returns the automation object of the container/parent if one exists or this automation object.")]
	HRESULT Parent([out, retval] IDispatch** ppDisp);

	[id(202), propget, helpstring("Returns the container/parent automation object, if any.")]
	HRESULT Container([out, retval] IDispatch** ppDisp);

	[id(203), propget, helpstring("Returns the active Document automation object, if any.")]
	HRESULT Document([out, retval] IDispatch** ppDisp);

	[id(204), propget, helpstring("Returns True if this is the top level object.")]
	HRESULT TopLevelContainer([out, retval] VARIANT_BOOL* pBool);

	[id(205), propget, helpstring("Returns the type of the contained document object.")]
	HRESULT Type([out, retval] BSTR* Type);

	// Window stuff...
	[id(206), propget, helpstring("The horizontal position (pixels) of the frame window relative to the screen/container.")]
	HRESULT Left([out, retval] long *pl);
	[id(206), propput]
	HRESULT Left([in] long Left);
	[id(207), propget, helpstring("The vertical position (pixels) of the frame window relative to the screen/container.")]
	HRESULT Top([out, retval] long *pl);
	[id(207), propput]
	HRESULT Top([in] long Top);
	[id(208), propget, helpstring("The horizontal dimension (pixels) of the frame window/object.")]
	HRESULT Width([out, retval] long *pl);
	[id(208), propput]
	HRESULT Width([in] long Width);
	[id(209), propget, helpstring("The vertical dimension (pixels) of the frame window/object.")]
	HRESULT Height([out, retval] long *pl);
	[id(209), propput]
	HRESULT Height([in] long Height);

	// WebBrowser stuff...
	[id(210), propget, helpstring("Gets the short (UI-friendly) name of the URL/file currently viewed.")]
	HRESULT LocationName([out, retval] BSTR *LocationName);

	[id(211), propget, helpstring("Gets the full URL/path currently viewed.")]
	HRESULT LocationURL([out, retval] BSTR * LocationURL);

	// Added a property to see if the viewer is currenly busy or not...
	[id(212), propget, helpstring("Query to see if something is still in progress.")]
	HRESULT Busy([out, retval] VARIANT_BOOL *pBool);


	//IWebBrowserApp methods
	[id(300), helpstring("Exits application and closes the open document.")]
	HRESULT Quit();

	[id(301), helpstring("Converts client sizes into window sizes.")]
	HRESULT ClientToWindow([in, out] int* pcx, [in, out] int* pcy);

	[id(302), helpstring("Associates vtValue with the name szProperty in the context of the object.")]
	HRESULT PutProperty([in] BSTR Property, [in] VARIANT vtValue);

	[id(303), helpstring("Retrieve the Associated value for the property vtValue in the context of the object.")]
	HRESULT GetProperty([in] BSTR Property, [out, retval] VARIANT *pvtValue);

	[id(0), propget, helpstring("Returns name of the application.")]
	HRESULT Name([out, retval] BSTR* Name);

	[id(304), propget, helpstring("Returns the HWND of the current IE window.")]
	HRESULT HWND([out, retval] long * pHWND);

	[id(400), propget, helpstring("Returns file specification of the application, including path.")]
	HRESULT FullName([out, retval] BSTR* FullName);

	[id(401), propget, helpstring("Returns the path to the application.")]
	HRESULT Path([out, retval] BSTR* Path);

	[id(402), propget, helpstring("Determines whether the application is visible or hidden.")]
	HRESULT Visible([out, retval] VARIANT_BOOL* pBool);
	[id(402), propput, helpstring("Determines whether the application is visible or hidden.")]
	HRESULT Visible([in] VARIANT_BOOL Value);

	[id(403), propget, helpstring("Turn on or off the statusbar.")]
	HRESULT StatusBar([out, retval] VARIANT_BOOL* pBool);
	[id(403), propput, helpstring("Turn on or off the statusbar.")]
	HRESULT StatusBar([in] VARIANT_BOOL Value);

	[id(404), propget, helpstring("Text of Status window.")]
	HRESULT StatusText([out, retval] BSTR *StatusText);
	[id(404), propput, helpstring("Text of Status window.")]
	HRESULT StatusText([in] BSTR StatusText);

	[id(405), propget, helpstring("Controls which toolbar is shown.")]
	HRESULT ToolBar([out, retval] int * Value);
	[id(405), propput, helpstring("Controls which toolbar is shown.")]
	HRESULT ToolBar([in] int Value);

	[id(406), propget, helpstring("Controls whether menubar is shown.")]
	HRESULT MenuBar([out, retval] VARIANT_BOOL * Value);
	[id(406), propput, helpstring("Controls whether menubar is shown.")]
	HRESULT MenuBar([in] VARIANT_BOOL Value);

	[id(407), propget, helpstring("Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.")]
	HRESULT FullScreen([out, retval] VARIANT_BOOL * pbFullScreen);
	[id(407), propput, helpstring("Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.")]
	HRESULT FullScreen([in] VARIANT_BOOL bFullScreen);
}


[
	odl,
	helpstring("IFolderView"),
	uuid(cde725b0-ccc9-4519-917e-325d72fab4ce),
]
interface IFolderView : stdole.IUnknown
{

	HRESULT GetCurrentViewMode(
	[in, out] INT *pViewMode);

HRESULT SetCurrentViewMode(
	[in] INT ViewMode);

HRESULT GetFolder(
	[in] UUID *riid,
	[in, out] long *ppv);

HRESULT Item(
	[in] int iItemIndex,
	[in, out] LONG *ppidl);

HRESULT ItemCount(
	[in] SVGIO_Flags uFlags,
	[in, out] int *pcItems);

HRESULT Items(
	[in] SVGIO_Flags uFlags,
	[in] UUID *riid,
	[in, out] long *ppv);

HRESULT GetSelectionMarkedItem(
	[in, out] int *piItem);

HRESULT GetFocusedItem(
	[in, out] int *piItem);

HRESULT GetItemPosition(
	[in] LONG pidl,
	[in, out] POINT *ppt);

HRESULT GetSpacing(
	[in, out] POINT *ppt);

HRESULT GetDefaultSpacing(
	[in, out] POINT *ppt);

HRESULT GetAutoArrange();

// like IShellView::SelectItem() by index
HRESULT SelectItem(
	[in] int iItem,
	[in] SVSI_Flags dwFlags);

HRESULT SelectAndPositionItems(
	[in] INT cidl,
	[in] LONG *apidl,
	[in, out] POINT *apt,
	[in] SVSI_Flags dwFlags);
};




[
	odl,
	uuid(1af3a467-214f-4298-908e-06b03e0b39f9)
]
interface IFolderView2 : stdole.IUnknown
{
	//IFolderView methods
	HRESULT GetCurrentViewMode(
		[in, out] INT *pViewMode);

	HRESULT SetCurrentViewMode(
		[in] INT ViewMode);

	HRESULT GetFolder(
		[in] UUID *riid,
		[in, out] long *ppv);

	HRESULT Item(
		[in] int iItemIndex,
		[in, out] LONG *ppidl);

	HRESULT ItemCount(
		[in] SVGIO_Flags uFlags,
		[in, out] int *pcItems);

	HRESULT Items(
		[in] SVGIO_Flags uFlags,
		[in] UUID *riid,
		[in, out] long *ppv);

	HRESULT GetSelectionMarkedItem(
		[in, out] int *piItem);

	HRESULT GetFocusedItem(
		[in, out] int *piItem);

	HRESULT GetItemPosition(
		[in] LONG pidl,
		[in, out] POINT *ppt);

	HRESULT GetSpacing(
		[in, out] POINT *ppt);

	HRESULT GetDefaultSpacing(
		[in, out] POINT *ppt);

	HRESULT GetAutoArrange();

	// like IShellView::SelectItem() by index
	HRESULT SelectItem(
		[in] int iItem,
		[in] SVSI_Flags dwFlags);

	HRESULT SelectAndPositionItems(
		[in] INT cidl,
		[in] LONG *apidl,
		[in, out] POINT *apt,
		[in] SVSI_Flags dwFlags);



//IFolderView2 methods
	// Sets the group by property and starts a grouping operation
	HRESULT SetGroupBy(
		[in] PROPERTYKEY *key,
		[in] BOOL fAscending);

	HRESULT GetGroupBy(
		[in, out] PROPERTYKEY* pkey,
		[in, out] BOOL *pfAscending);

	// Setting and Getting per item view properties is not possible for Libraries or Search results views.
	// Consider using existing item properties instead.
	HRESULT SetViewProperty(
		[in] PCUITEMID_CHILD pidl,
		[in] PROPERTYKEY *propkey,
		[in] VARIANT *propvar);

	// Setting and Getting per item view properties is not possible for Libraries or Search results views.
	// Consider using existing item properties instead.
	HRESULT GetViewProperty(
		[in] PCUITEMID_CHILD pidl,
		[in] PROPERTYKEY *propkey,
		[in, out] VARIANT *ppropvar);

	// Setting per item Tile view properties is not possible for Libraries or Search results views.
	// Consider setting property lists for your item types instead (see PKEY_PropList_TileInfo)
	HRESULT SetTileViewProperties(
		[in] PCUITEMID_CHILD pidl,
		[in] LONG pszPropList);

	// Setting per item Extended Tile view properties is not possible for Libraries or Search results views.
	// Consider setting property lists for your item types instead (see PKEY_PropList_ExtendedTileInfo)
	HRESULT SetExtendedTileViewProperties(
		[in] PCUITEMID_CHILD pidl,
		[in] LONG pszPropList);

	HRESULT SetText(
		[in] FVTEXTTYPE iType,
		[in] LONG pwszText);

	HRESULT SetCurrentFolderFlags(
		[in] FOLDERFLAGS dwMask,
		[in] FOLDERFLAGS dwFlags);



	HRESULT GetCurrentFolderFlags([in, out] FOLDERFLAGS *pdwFlags);



	HRESULT GetSortColumnCount([in, out] int *pcColumns);

	// Sets the sort by property and starts a sort operation
	HRESULT SetSortColumns(
		[in] long rgSortColumns,
		[in] int cColumns);

	HRESULT GetSortColumns(
		[in] long rgSortColumns,
		[in] int cColumns);
	// return IShellItem for an item based on its index
	HRESULT GetItem(
		[in] int iItem,
		[in] UUID *riid,
		[in, out] long *ppv);

	HRESULT GetVisibleItem(
		[in] int iStart,
		[in] BOOL fPrevious,
		[in, out] int *piItem);

	HRESULT GetSelectedItem(
		[in] int iStart,
		[in, out] int *piItem);

	HRESULT GetSelection(
		[in] BOOL fNoneImpliesFolder,
		[in, out] IShellItemArray **ppsia);

	// Gets the selection state including check state.  Same as the flags for IFolderView::SelectAndPositionItems
	HRESULT GetSelectionState(
		[in] PCUITEMID_CHILD pidl,
		[in, out] SVSI_Flags *pdwFlags);

	// If pszVerb is NULL, then the default verb is invoked.
	HRESULT InvokeVerbOnSelection([in] LONG pszVerb);

	// Sets default icon size if iImageSize == -1
	HRESULT SetViewModeAndIconSize(
		[in] FOLDERVIEWMODE uViewMode,
		[in] int iImageSize);

	HRESULT GetViewModeAndIconSize(
		[in, out] FOLDERVIEWMODE *puViewMode,
		[in, out] int *piImageSize);

	HRESULT SetGroupSubsetCount([in] UINT cVisibleRows);

	HRESULT GetGroupSubsetCount([in, out] UINT *pcVisibleRows);

	HRESULT SetRedraw([in] BOOL fRedrawOn);

	// S_OK means this view sourced the current drag drop or cut/paste operation (used by drop target objects)
	HRESULT IsMoveInSameFolder();

	HRESULT DoRename();
}


[
	odl,
	uuid(ae8c987d-8797-4ed3-be72-2a47dd938db0)
]
interface IFolderViewSettings : stdole.IUnknown
{
	// GetColumnPropertyList - returns IPropertyDescriptionList.  Ordered list of columns that must correspond to column enumerated
	// via ISF::GetDetailsOf. Any column from ISF::GetDetailsOf not included in this list will be marked SHCOLSTATE_SECONDARYUI
	// (or maintain SHCOLSTATE_HIDDEN)
	HRESULT GetColumnPropertyList(
		[in] UUID * riid,
		[in, out] long* ppv);

	HRESULT GetGroupByProperty(
		[in, out] PROPERTYKEY* pkey,
		[in, out] BOOL* pfGroupAscending);

	HRESULT GetViewMode(
		[in, out] FOLDERLOGICALVIEWMODE* plvm);

	HRESULT GetIconSize(
		[in, out] UINT* puIconSize);

	HRESULT GetFolderFlags(
		[in, out] FOLDERFLAGS* pfolderMask,
		[in, out] FOLDERFLAGS* pfolderFlags);

	HRESULT GetSortColumns(
		[in, out] SORTCOLUMN* rgSortColumns,
		[in] UINT cColumnsIn,
		[in, out] UINT* pcColumnsOut);
}

[
	odl,
	helpstring("OpenSearch Data Source API"),
	uuid(F0EE7333-E6FC-479b-9F25-A860C234A38E)
]
interface IOpenSearchSource : stdole.IUnknown
{
	HRESULT GetResults(
		[in] HWND hwnd,
		[in] long pszQuery,
		[in] long dwStartIndex,
		[in] long dwCount,
		[in] UUID* riid,
		[in, out] long* ppv);  // return IStream

}


;

