//OLE Shell Viewinterface FolderItemVerbs;


[
    uuid(9BA05970-F6A8-11CF-A442-00A0C90A8F39), // IID_IFolderViewOC
    helpstring("Folder View Events Forwarder Object"),
    helpcontext(0x0000),
    oleautomation,
    dual,
    odl
]
interface IFolderViewOC : IDispatch
{
    [helpstring("Set the ShellFolderView object to monitor events of."), helpcontext(0x0000)]
    HRESULT SetFolderView([in] IDispatch* pdisp);
}

[
    uuid(62112AA2-EBE4-11cf-A5FB-0020AFE7292D), // IID_DShellFolderViewEvents
    helpstring("Event interface for ShellFolderView"),
]
dispinterface DShellFolderViewEvents
{
    properties:
    methods:
    [id(DISPID_SELECTIONCHANGED), helpstring("The Selection in the view changed."), helpcontext(0x0000)]
    void SelectionChanged();

    [id(DISPID_FILELISTENUMDONE), helpstring("The folder has finished enumerating (flashlight is gone)."), helpcontext(0x0000)]
    void EnumDone();

    [id(DISPID_VERBINVOKED), helpstring("A verb was invoked on an items in the view (return false to cancel)."), helpcontext(0x0000)]
    VARIANT_BOOL VerbInvoked();

    [id(DISPID_DEFAULTVERBINVOKED), helpstring("the default verb (double click) was invoked on an items in the view (return false to cancel)."), helpcontext(0x0000)]
    VARIANT_BOOL DefaultVerbInvoked();

    [id(DISPID_BEGINDRAG), helpstring("user started to drag an item (return false to cancel)."), helpcontext(0x0000)]
    VARIANT_BOOL BeginDrag();
}

[
    uuid(9BA05971-F6A8-11CF-A442-00A0C90A8F39), // CLSID_ShellFolderViewOC
    helpstring("Shell Folder View Events Router.")
]
coclass ShellFolderViewOC
{
    [default] interface     IFolderViewOC;
    [default, source] dispinterface DShellFolderViewEvents;
}

[
    uuid(4a3df050-23bd-11d2-939f-00a0c91eedba), // IID_DFConstraint
    helpstring("Constraint used in search command"),
    oleautomation,
    dual,
]
interface DFConstraint : IDispatch
{
    [propget, helpstring("Get the constraint name")]
    HRESULT Name([out, retval] BSTR* pbs);

    [propget, helpstring("Get the constraint Value")]
    HRESULT Value([out, retval] VARIANT* pv);
}

// Setup a set of Forward references
interface FolderItem;
interface FolderItems;
interface FolderItemVerb;
interface FolderItemVerbs;

[
    uuid(BBCBDE60-C3FF-11CE-8350-444553540000), // IID_Folder
    helpstring("Definition of interface Folder"),
    oleautomation,
    dual,
]
interface Folder : IDispatch
{
    //Properties
    [id(0), propget, helpstring("Get the display name for the window")]
    HRESULT Title([out, retval] BSTR* pbs);

    [propget, helpstring("Get Application object")]
    HRESULT Application([out, retval] IDispatch** ppid);

    [propget, helpstring("Get Parent object")]
    HRESULT Parent([out, retval] IDispatch** ppid);

    [propget, helpstring("Get Parent object")]
    HRESULT ParentFolder([out, retval] Folder** ppsf);

    //Methods
    [helpstring("The collection of Items in folder")]
    HRESULT Items([out, retval] FolderItems** ppid);

    [helpstring("Parse the name to get an item.")]
    HRESULT ParseName([in] BSTR bName, [out, retval] FolderItem** ppid);

    [helpstring("Create a new sub folder in this folder.")]
    HRESULT NewFolder([in] BSTR bName, [in, optional] VARIANT vOptions);

    [helpstring("Move Items to this folder.")]
    HRESULT MoveHere([in] VARIANT vItem, [in, optional] VARIANT vOptions);

    [helpstring("Copy Items to this folder.")]
    HRESULT CopyHere([in] VARIANT vItem, [in, optional] VARIANT vOptions);

    [helpstring("Get the details about an item.")]
    HRESULT GetDetailsOf([in] VARIANT vItem, [in] int iColumn, [out, retval]BSTR* pbs);
}

[
    uuid(f0d2d8ef-3890-11d2-bf8b-00c04fb93661), //IID_Folder2
    helpstring("Definition of interface Folder2"),
    oleautomation,
    dual
]
// ie5+ interface
interface Folder2 : Folder
{
    [propget, helpstring("Folder's FolderItem interface")]
    HRESULT Self([out, retval] FolderItem** ppfi);

    [propget, helpstring("Offline status of the server?")]
    HRESULT OfflineStatus([out, retval] LONG* pul);

    [helpstring("Synchronize all offline files")]
    HRESULT Synchronize(void);

    [id(1), propget, helpstring("Should the WebView barricade be shown?")]
    HRESULT HaveToShowWebViewBarricade([out, retval] VARIANT_BOOL* pbHaveToShowWebViewBarricade);

    [helpstring("Call this after the WebView barricade is dismissed by the user")]
    HRESULT DismissedWebViewBarricade();
}

typedef
[
    helpstring("Constants for Folder2.OfflineStatus")
]
enum OfflineFolderStatus {
    [helpstring("Offline caching not available for this folder")] OFS_INACTIVE = -1,
    [helpstring("Server is online")]                                OFS_ONLINE,
    [helpstring("Server is offline")]                               OFS_OFFLINE,
    [helpstring("Server is offline but is reachable")]              OFS_SERVERBACK,
    [helpstring("Server is online with unmerged changes")]          OFS_DIRTYCACHE,
} OfflineFolderStatus;

[
    uuid(A7AE5F64-C4D7-4d7f-9307-4D24EE54B841), //IID_Folder3
    helpstring("Definition of interface Folder version 3"),
    oleautomation,
    dual
]
// Windows Me interface
interface Folder3 : Folder2
{
    [id(2), propget, helpstring("Ask if the WebView barricade should be shown or not")]
    HRESULT ShowWebViewBarricade([out, retval] VARIANT_BOOL* pbShowWebViewBarricade);

    [id(2), propput, helpstring("Set if the WebView barricade should be shown or not for this barricadable folder")]
    HRESULT ShowWebViewBarricade([in] VARIANT_BOOL bShowWebViewBarricade);
}

[
    uuid(FAC32C80-CBE4-11CE-8350-444553540000), // IID_FolderItem
    helpstring("Definition of interface FolderItem"),
    oleautomation,
    dual
]
interface FolderItem : IDispatch
{
    typedef FolderItem* LPFOLDERITEM;      // For C callers

    [propget, helpstring("Get Application object")]
    HRESULT Application([out, retval] IDispatch** ppid);

    [propget, helpstring("Get Parent object")]
    HRESULT Parent([out, retval] IDispatch** ppid);

    [id(0), propget, helpstring("Get display name for item")]
    HRESULT Name([out, retval] BSTR* pbs);

    [id(0), propput, helpstring("Set the name for the item")]
    HRESULT Name([in] BSTR bs);

    [propget, helpstring("Get the pathname to the item")]
    HRESULT Path([out, retval]BSTR* pbs);

    [propget, helpstring("If item is link return link object")]
    HRESULT GetLink([out, retval] IDispatch** ppid);

    [propget, helpstring("If item is a folder return folder object")]
    HRESULT GetFolder([out, retval] IDispatch** ppid);

    [propget, helpstring("Is the item a link?")]
    HRESULT IsLink([out, retval] VARIANT_BOOL* pb);

    [propget, helpstring("Is the item a Folder?")]
    HRESULT IsFolder([out, retval] VARIANT_BOOL* pb);

    [propget, helpstring("Is the item a file system object?")]
    HRESULT IsFileSystem([out, retval] VARIANT_BOOL* pb);

    [propget, helpstring("Is the item browsable?")]
    HRESULT IsBrowsable([out, retval] VARIANT_BOOL* pb);

    [propget, helpstring("Modification Date?")]
    HRESULT ModifyDate([out, retval] DATE* pdt);

    [propput, helpstring("Modification Date?")]
    HRESULT ModifyDate([in] DATE dt);

    [propget, helpstring("Size")]
    HRESULT Size([out, retval] LONG* pul);

    [propget, helpstring("Type")]
    HRESULT Type([out, retval] BSTR* pbs);

    [helpstring("Get the list of verbs for the object")]
    HRESULT Verbs([out, retval] FolderItemVerbs** ppfic);

    [helpstring("Execute a command on the item")]
    HRESULT InvokeVerb([in, optional] VARIANT vVerb);
}

[
    uuid(edc817aa-92b8-11d1-b075-00c04fc33aa5), // IID_FolderItem2
    helpstring("Definition of interface FolderItem Version 2"),
    oleautomation,
    dual
]
// IE5+ interface, right?
interface FolderItem2 : FolderItem
{
    [helpstring("Extended version of InvokeVerb")]
    HRESULT InvokeVerbEx([in, optional] VARIANT vVerb, [in, optional] VARIANT vArgs);

    [helpstring("Access an extended property")]
    HRESULT ExtendedProperty([in] BSTR bstrPropName, [out, retval] VARIANT* pvRet);
}

[
    uuid(2fe352ea-fd1f-11d2-b1f4-00c04f8eeb3e), // CLSID_ShellFolderItem
    noncreatable,
    helpstring("Shell Folder Item"),
]
coclass ShellFolderItem
{
    [default] interface FolderItem2;
}

[
    uuid(744129E0-CBE5-11CE-8350-444553540000), // IID_FolderItems
    helpstring("Definition of interface FolderItems"),
    oleautomation,
    dual
]
interface FolderItems : IDispatch
{
    //Properties
    [propget, helpstring("Get count of items in the folder")]
    HRESULT Count([out, retval] long* plCount);

    [propget, helpstring("Get Application object")]
    HRESULT Application([out, retval] IDispatch** ppid);

    [propget, helpstring("Get Parent object")]
    HRESULT Parent([out, retval] IDispatch** ppid);

    //Methods
    //Standard Methods
    [helpstring("Return the figure for the given index")]
    HRESULT Item([in, optional] VARIANT index, [out, retval]FolderItem** ppid);

    [id(-4), helpstring("Enumerates the figures")]
    HRESULT _NewEnum([out, retval] IUnknown** ppunk);
}

// IE5+ interface
[
    uuid(C94F0AD0-F363-11d2-A327-00C04F8EEC7F), // IID_FolderItems2
    helpstring("Definition of interface FolderItems Version 2"),
    oleautomation,
    dual,
    odl,
]
interface FolderItems2 : FolderItems
{
    [helpstring("Extended version of InvokeVerb for a collection of Folder Items")]
    HRESULT InvokeVerbEx([in, optional] VARIANT vVerb, [in, optional] VARIANT vArgs);
}

// Millennium interface
[
    uuid(eaa7c309-bbec-49d5-821d-64d966cb667f), // IID_FolderItems3
    helpstring("Definition of interface FolderItems Version 3"),
    oleautomation,
    dual,
    odl,
]
interface FolderItems3 : FolderItems2
{
    [helpstring("Set a wildcard filter to apply to the items returned")]
    HRESULT Filter([in] long grfFlags, [in] BSTR bstrFileSpec);

    [id(0), propget, helpstring("Get the list of verbs common to all the items")]
    HRESULT Verbs([out, retval] FolderItemVerbs** ppfic);
}

[
    uuid(08EC3E00-50B0-11CF-960C-0080C7F4EE85), // IID_FolderItemVerb
    helpstring("Definition of interface FolderItemVerb"),
    oleautomation,
    dual
]
interface FolderItemVerb : IDispatch
{
    [propget, helpstring("Get Application object")]
    HRESULT Application([out, retval] IDispatch** ppid);

    [propget, helpstring("Get Parent object")]
    HRESULT Parent([out, retval] IDispatch** ppid);

    [id(0), propget, helpstring("Get display name for item")]
    HRESULT Name([out, retval] BSTR* pbs);

    [helpstring("Execute the verb")]
    HRESULT DoIt();
}

[
    uuid(1F8352C0-50B0-11CF-960C-0080C7F4EE85), // IID_FolderItemVerbs
    helpstring("Definition of interface FolderItemVerbs"),
    oleautomation,
    dual
]
interface FolderItemVerbs : IDispatch
{
    //Properties
    [propget, helpstring("Get count of open folder windows")]
    HRESULT Count([out, retval] long* plCount);

    [propget, helpstring("Get Application object")]
    HRESULT Application([out, retval] IDispatch** ppid);

    [propget, helpstring("Get Parent object")]
    HRESULT Parent([out, retval] IDispatch** ppid);

    //Methods
    //Standard Methods
    [helpstring("Return the specified verb")]
    HRESULT Item([in, optional] VARIANT index, [out, retval]FolderItemVerb** ppid);

    [id(-4), helpstring("Enumerates the figures")]
    HRESULT _NewEnum([out, retval] IUnknown** ppunk);
}

[
    uuid(88A05C00-F000-11CE-8350-444553540000), // IID_IShellLinkDual
    helpstring("Definition of Shell Link IDispatch interface"),
    oleautomation,
    dual
]
interface IShellLinkDual : IDispatch
{
    [propget, helpstring("Get the path of the link")]
    HRESULT Path([out, retval] BSTR* pbs);

    [propput, helpstring("Set the path of the link")]
    HRESULT Path([in] BSTR bs);

    [propget, helpstring("Get the description for the link")]
    HRESULT Description([out, retval] BSTR* pbs);

    [propput, helpstring("Set the description for the link")]
    HRESULT Description([in] BSTR bs);

    [propget, helpstring("Get the working directory for the link")]
    HRESULT WorkingDirectory([out, retval] BSTR* pbs);

    [propput, helpstring("Set the working directory for the link")]
    HRESULT WorkingDirectory([in] BSTR bs);

    [propget, helpstring("Get the arguments for the link")]
    HRESULT Arguments([out, retval] BSTR* pbs);

    [propput, helpstring("Set the arguments for the link")]
    HRESULT Arguments([in] BSTR bs);


    [propget, helpstring("Get the Hotkey for the link")]
    HRESULT Hotkey([out, retval] int* piHK);

    [propput, helpstring("Set the Hotkey for the link")]
    HRESULT Hotkey([in] int iHK);

    [propget, helpstring("Get the Show Command for the link")]
    HRESULT ShowCommand([out, retval] int* piShowCommand);

    [propput, helpstring("Set the Show Command for the link")]
    HRESULT ShowCommand([in] int iShowCommand);

    // STDMETHOD(SetRelativePath)(THIS_ LPCSTR pszPathRel, DWORD dwReserved) PURE;
    //Methods
    [helpstring("Tell the link to resolve itself")]
    HRESULT Resolve([in] int fFlags);

    [helpstring("Get the IconLocation for the link")]
    HRESULT GetIconLocation([out] BSTR* pbs, [out, retval] int* piIcon);

    [helpstring("Set the IconLocation for the link")]
    HRESULT SetIconLocation([in] BSTR bs, [in] int iIcon);

    [helpstring("Tell the link to save the changes")]
    HRESULT Save([in, optional] VARIANT vWhere);
}

[
    uuid(317EE249-F12E-11d2-B1E4-00C04F8EEB3E), // IID_IShellLinkDual2
    helpstring("Shell Link2 IDispatch interface"),
    oleautomation,
    dual
]
interface IShellLinkDual2 : IShellLinkDual
{
    [propget, helpstring("Get the target of a link object")]
    HRESULT Target([out, retval] FolderItem** ppfi);
}

[
    // note, this object does not really exist, leave this for compat with
    // VB programs that do "dim foo as ShellLinkObject"
    uuid(11219420-1768-11d1-95BE-00609797EA4F), // CLSID_ShellLinkObject
    helpstring("Shell Link object"),
    noncreatable,
]
coclass ShellLinkObject // funny name so we don't conflict with CLSID_ShellLink
{
    [default] interface IShellLinkDual2;
}


[
    uuid(E7A1AF80-4D96-11CF-960C-0080C7F4EE85), // IID_IShellFolderViewDual
    helpstring("definition of interface IShellFolderViewDual"),
    oleautomation,
    dual
]
interface IShellFolderViewDual : IDispatch
{
    [propget, helpstring("Get Application object")]
    HRESULT Application([out, retval] IDispatch** ppid);

    [propget, helpstring("Get Parent object")]
    HRESULT Parent([out, retval] IDispatch** ppid);

    [propget, helpstring("Get the folder being viewed")]
    HRESULT Folder([out, retval] Folder** ppid);

    [helpstring("The collection of Selected Items in folder")]
    HRESULT SelectedItems([out, retval] FolderItems** ppid);

    [propget, helpstring("The currently focused item in the folder")]
    HRESULT FocusedItem([out, retval] FolderItem** ppid);

    [helpstring("Select the item")]
    HRESULT SelectItem([in]VARIANT* pvfi, [in] int dwFlags);

    [helpstring("Show items menu and return command selected")]
    HRESULT PopupItemMenu([in]FolderItem* pfi, [in, optional]VARIANT vx, [in, optional]VARIANT vy, [out, retval] BSTR* pbs);

    [propget, helpstring("Returns the scripting automation model."), helpcontext(0x0000)]
    HRESULT Script([out, retval] IDispatch** ppDisp);

    [propget, helpstring("Returns the view options for showing a folder."), helpcontext(0x0000)]
    HRESULT ViewOptions([out, retval] long* plViewOptions);
}

[
    uuid(31C147b6-0ADE-4A3C-B514-DDF932EF6D17), // IID_IShellFolderViewDual2
    helpstring("definition of interface IShellFolderViewDual2"),
    oleautomation,
    dual
]
interface IShellFolderViewDual2 : IShellFolderViewDual
{
    [propget, helpstring("Get Current View Mode")]
    HRESULT CurrentViewMode([out, retval] UINT* pViewMode);
    [propput, helpstring("Put Current View Mode")]
    HRESULT CurrentViewMode([in] UINT ViewMode);
    [helpstring("Select Item relative to the Current Item")]
    HRESULT SelectItemRelative([in] int iRelative);
}

[
    uuid(29EC8E6C-46D3-411f-BAAA-611A6C9CAC66), // IID_IShellFolderViewDual3
    helpstring("definition of interface IShellFolderViewDual3"),
    oleautomation,
    dual
]
interface IShellFolderViewDual3 : IShellFolderViewDual2
{
    [propget, helpstring("Get Group By Column")]
    HRESULT GroupBy([out, retval] BSTR* pbstrGroupBy);
    [propput, helpstring("Set Group By Column")]
    HRESULT GroupBy([in] BSTR bstrGroupBy);

    [propget, helpstring("Get Folder Flags")]
    HRESULT FolderFlags([out, retval] DWORD* pdwFlags);
    [propput, helpstring("Set Folder Flags")]
    HRESULT FolderFlags([in] DWORD dwFlags);

    [propget, helpstring("Get Sorting Columns")]
    HRESULT SortColumns([out, retval] BSTR* pbstrSortColumns);
    [propput, helpstring("Set Sorting Columns")]
    HRESULT SortColumns([in] BSTR bstrSortColumns);

    [propput, helpstring("Set Icon Size")]
    HRESULT IconSize([in] int iIconSize);
    [propget, helpstring("Get Icon Size")]
    HRESULT IconSize([out, retval] int* piIconSize);
    [helpstring("Filter View")]
    HRESULT FilterView([in] BSTR bstrFilterText);
}

[
    uuid(62112AA1-EBE4-11cf-A5FB-0020AFE7292D),  // CLSID_ShellFolderView
    helpstring("Shell Folder View Object")
]
coclass ShellFolderView
{
    [default] interface IShellFolderViewDual3;
    [source, default] dispinterface DShellFolderViewEvents;
}

typedef
[
    helpstring("Constants for ViewOptions")
]
enum ShellFolderViewOptions {
    [helpstring("Show All Objects")] SFVVO_SHOWALLOBJECTS = 0x00000001,
    [helpstring("Show File Extensions")]                    SFVVO_SHOWEXTENSIONS = 0x00000002,
    [helpstring("Color encode Compressed files")]           SFVVO_SHOWCOMPCOLOR = 0x00000008,
    [helpstring("Show System Files")]                       SFVVO_SHOWSYSFILES = 0x00000020,
    [helpstring("Use Windows 95 UI settings")]              SFVVO_WIN95CLASSIC = 0x00000040,
    [helpstring("User needs to double click in web View")]  SFVVO_DOUBLECLICKINWEBVIEW = 0x00000080,
    [helpstring("Is Desktop HTML enabled")]                 SFVVO_DESKTOPHTML = 0x00000200,
} ShellFolderViewOptions;

[
    uuid(D8F015C0-C278-11CE-A49E-444553540000), // IID_IShellDispatch
    helpstring("Definition of interface IShellDispatch"),
    oleautomation,
    dual
]
interface IShellDispatch : IDispatch
{
    [propget, helpstring("Get Application object")]
    HRESULT Application([out, retval] IDispatch** ppid);

    [propget, helpstring("Get Parent object")]
    HRESULT Parent([out, retval] IDispatch** ppid);

    //=========================================================
    // Name Space methods and properties

    [helpstring("Get special folder from ShellSpecialFolderConstants")]
    HRESULT NameSpace([in] VARIANT vDir, [out, retval] Folder** ppsdf);

    [helpstring("Browse the name space for a Folder")]
    HRESULT BrowseForFolder([in] long Hwnd,
        [in] BSTR Title,
        [in] long Options,
        [in, optional] VARIANT RootFolder,
        [out, retval] FOLDER** ppsdf);

    [helpstring("The collection of open folder windows")]
    HRESULT Windows([out, retval] IDispatch** ppid);

    [helpstring("Open a folder")]
    HRESULT Open([in] VARIANT vDir);

    [helpstring("Explore a folder")]
    HRESULT Explore([in] VARIANT vDir);

    [helpstring("Minimize all windows")]
    HRESULT MinimizeAll(void);

    [helpstring("Undo Minimize All")]
    HRESULT UndoMinimizeALL(void);

    [helpstring("Bring up the file run")]
    HRESULT FileRun(void);

    [helpstring("Cascade Windows")]
    HRESULT CascadeWindows(void);

    [helpstring("Tile windows vertically")]
    HRESULT TileVertically(void);

    [helpstring("Tile windows horizontally")]
    HRESULT TileHorizontally(void);

    [helpstring("Exit Windows")]
    HRESULT ShutdownWindows(void);

    [helpstring("Suspend the pc")]
    HRESULT Suspend(void);

    [helpstring("Eject the pc")]
    HRESULT EjectPC(void);

    [helpstring("Bring up the Set time dialog")]
    HRESULT SetTime(void);

    [helpstring("Handle Tray properties")]
    HRESULT TrayProperties(void);

    [helpstring("Display shell help")]
    HRESULT Help(void);

    [helpstring("Find Files")]
    HRESULT FindFiles(void);

    [helpstring("Find a computer")]
    HRESULT FindComputer(void);

    [helpstring("Refresh the menu")]
    HRESULT RefreshMenu(void);

    [helpstring("Run a Control Panel Item")]
    HRESULT ControlPanelItem([in] BSTR bstrDir);
}

[
    uuid(A4C6892C-3BA9-11d2-9DEA-00C04FB16162), // IID_IShellDispatch2
    helpstring("Updated IShellDispatch"),
    oleautomation,
    dual
]
interface IShellDispatch2 : IShellDispatch
{
    [helpstring("get restriction settings")]
    HRESULT IsRestricted([in] BSTR Group, [in] BSTR Restriction, [out, retval] long* plRestrictValue);

    [helpstring("Execute generic command")]
    HRESULT ShellExecute([in] BSTR File, [in, optional] VARIANT vArgs,
        [in, optional] VARIANT vDir, [in, optional] VARIANT vOperation,
        [in, optional] VARIANT vShow);

    // search for a printer
    [helpstring("Find a Printer in the Directory Service")]
    HRESULT FindPrinter([in] BSTR name, [in] BSTR location, [in] BSTR model);

    [helpstring("Retrieve info about the user's system")]
    HRESULT GetSystemInformation([in] BSTR name, [out, retval] VARIANT* pv);

    [helpstring("Start a service by name, and optionally set it to autostart.")]
    HRESULT ServiceStart([in] BSTR ServiceName, [in] VARIANT Persistent,
        [out, retval] VARIANT* pSuccess);

    [helpstring("Stop a service by name, and optionally disable autostart.")]
    HRESULT ServiceStop([in] BSTR ServiceName, [in] VARIANT Persistent,
        [out, retval] VARIANT* pSuccess);

    [helpstring("Determine if a service is running by name.")]
    HRESULT IsServiceRunning([in] BSTR ServiceName,
        [out, retval] VARIANT* pRunning);

    [helpstring("Determine if the current user can start/stop the named service.")]
    HRESULT CanStartStopService([in] BSTR ServiceName,
        [out, retval] VARIANT* pCanStartStop);

    [helpstring("Show/Hide browser bar.")]
    HRESULT ShowBrowserBar([in]BSTR bstrClsid, [in]VARIANT bShow, [out, retval] VARIANT* pSuccess);
}

// Windows Me interface
[
    uuid(177160ca-bb5a-411c-841d-bd38facdeaa0), // IID_IShellDispatch3
    helpstring("Updated IShellDispatch"),
    oleautomation,
    dual
]
interface IShellDispatch3 : IShellDispatch2
{
    [helpstring("Add an object to the Recent Docuements")]
    HRESULT AddToRecent([in] VARIANT varFile, [in] BSTR bstrCategory);
}


// Windows XP interface
[
    uuid(efd84b2d-4bcf-4298-be25-eb542a59fbda), // IID_IShellDispatch4
    helpstring("Updated IShellDispatch"),
    oleautomation,
    dual
]
interface IShellDispatch4 : IShellDispatch3
{
    [helpstring("Windows Security")]
    HRESULT WindowsSecurity(void);

    [helpstring("Raise/lower the desktop")]
    HRESULT ToggleDesktop(void);

    [helpstring("Return explorer policy value")]
    HRESULT ExplorerPolicy([in] BSTR bstrPolicyName, [out, retval] VARIANT* pValue);

    [helpstring("Return shell global setting")]
    HRESULT GetSetting([in] long lSetting, [out, retval] VARIANT_BOOL* pResult);
}

// Vista Interface
[
    uuid(866738b9-6cf2-4de8-8767-f794ebe74f4e), // IID_IShellDispatch5
    helpstring("Updated IShellDispatch"),
    oleautomation,
    dual
]
interface IShellDispatch5 : IShellDispatch4
{
    [helpstring("Window Switcher")]
    HRESULT WindowSwitcher(void);
}

// Search Command
[
    uuid(286e6f1b-7113-4355-9562-96b7e9d64c54), // IID_IShellDispatch6
    helpstring("Updated IShellDispatch"),
    oleautomation,
    dual,
]
interface IShellDispatch6 : IShellDispatch5
{
    [helpstring("Immersive Search")]
    HRESULT SearchCommand(void);
}

[
    uuid(13709620-C279-11CE-A49E-444553540000), // CLSID_Shell
    helpstring("Shell Object Type Information")
]
coclass Shell
{
    [default] interface IShellDispatch6;
}

[
    uuid(0A89A860-D7B1-11CE-8350-444553540000), // CLSID_ShellDispatchInproc
    helpstring("ShellDispatch Load in Shell Context")
]
coclass ShellDispatchInproc
{
    interface IUnknown;
};

typedef enum BrowserNavConstants {
    [helpstring("Open in new window")] navOpenInNewWindow = 0x0001,
    [helpstring("Exclude from history list")]       navNoHistory = 0x0002,
    [helpstring("Don't read from cache")]           navNoReadFromCache = 0x0004,
    [helpstring("Don't write from cache")]          navNoWriteToCache = 0x0008,
    [helpstring("Try other sites on failure")]      navAllowAutosearch = 0x0010,
    [helpstring("OpenBrowserBar")]                  navBrowserBar = 0x0020,
    [helpstring("Hyperlink")]                       navHyperlink = 0x0040,
    [helpstring("Enforce restricted zone")]         navEnforceRestricted = 0x0080,
    [helpstring("Apply new window management")]     navNewWindowsManaged = 0x0100,
    [helpstring("Untrusted download")]              navUntrustedForDownload = 0x0200,
    [helpstring("Trusted for ActiveX prompt")]      navTrustedForActiveX = 0x0400,
    [helpstring("Open in new tab")]                 navOpenInNewTab = 0x0800,
    [helpstring("Open in a background tab")]        navOpenInBackgroundTab = 0x1000,
    [helpstring("Maintain the wordwheel text")]     navKeepWordWheelText = 0x2000,
    [helpstring("Virtual tab across MIC levels")]   navVirtualTab = 0x4000,
    [helpstring("Block x-domain redirects")]        navBlockRedirectsXDomain = 0x8000,
    [helpstring("Force open in foreground tab")]    navOpenNewForegroundTab = 0x10000,
    [helpstring("Travel Log nav with screenshot")]  navTravelLogScreenshot = 0x20000,
    [helpstring("Defer unload of virtual tab")]     navDeferUnload = 0x40000,
    [helpstring("Speculative navigate")]            navSpeculative = 0x80000,
    [helpstring("Suggest open in new window")]      navSuggestNewWindow = 0x100000,
    [helpstring("Suggest open in new tab")]         navSuggestNewTab = 0x200000,
    [helpstring("Reserved")]                        navReserved1 = 0x400000,
    [helpstring("HP navigation")]                   navHomepageNavigate = 0x800000,
    [helpstring("Treat nav as refresh")]            navRefresh = 0x1000000,
    [helpstring("Host initiated navigation")]       navHostNavigation = 0x2000000,
    [helpstring("Reserved")]                        navReserved2 = 0x4000000,
    [helpstring("Reserved")]                        navReserved3 = 0x8000000,
    [helpstring("Reserved")]                        navReserved4 = 0x10000000,
    [helpstring("Reserved")]                        navReserved5 = 0x20000000,
    [helpstring("Reserved")]                        navReserved6 = 0x40000000,
} BrowserNavConstants;

typedef enum RefreshConstants {                                         // must map to these in sdk\inc\docobj.h
    [helpstring("Refresh normal")] REFRESH_NORMAL = 0,  //== OLECMDIDF_REFRESH_NORMAL
    [helpstring("Refresh if expired")] REFRESH_IFEXPIRED = 1,  //== OLECMDIDF_REFRESH_IFEXPIRED
    [helpstring("Refresh completely")] REFRESH_COMPLETELY = 3   //== OLECMDIDF_REFRESH_COMPLETELY
} RefreshConstants;

[
    uuid(EAB22AC1-30C1-11CF-A7EB-0000C05BAE0B), // IID_IWebBrowser
    helpstring("Web Browser interface"),
    dual,
    oleautomation,
    odl
]
interface IWebBrowser : IDispatch
{
    [id(100), helpstring("Navigates to the previous item in the history list.")]
    HRESULT GoBack();
    [id(101), helpstring("Navigates to the next item in the history list.")]
    HRESULT GoForward();
    [id(102), helpstring("Go home/start page.")]
    HRESULT GoHome();
    [id(103), helpstring("Go Search Page.")]
    HRESULT GoSearch();

    [id(104), helpstring("Navigates to a URL or file.")]
    HRESULT Navigate([in] BSTR URL,
        [in, optional] VARIANT* Flags,
        [in, optional] VARIANT* TargetFrameName,
        [in, optional] VARIANT* PostData,
        [in, optional] VARIANT* Headers);


    [id(107), helpstring("Refresh the currently viewed page.")]
    HRESULT Refresh();

    // The standard Refresh takes no parameters and we need some... use a new name
    [id(105), helpstring("Refresh the currently viewed page.")]
    HRESULT Refresh2([in, optional] VARIANT* Level);


    [id(106), helpstring("Stops opening a file.")]
    HRESULT Stop();

    // Automation heirarchy...
    [id(200), propget, helpstring("Returns the application automation object if accessible, this automation object otherwise..")]
    HRESULT Application([out, retval] IDispatch** ppDisp);

    [id(201), propget, helpstring("Returns the automation object of the container/parent if one exists or this automation object.")]
    HRESULT Parent([out, retval] IDispatch** ppDisp);

    [id(202), propget, helpstring("Returns the container/parent automation object, if any.")]
    HRESULT Container([out, retval] IDispatch** ppDisp);

    [id(203), propget, helpstring("Returns the active Document automation object, if any.")]
    HRESULT Document([out, retval] IDispatch** ppDisp);

    [id(204), propget, helpstring("Returns True if this is the top level object.")]
    HRESULT TopLevelContainer([out, retval] VARIANT_BOOL* pBool);

    [id(205), propget, helpstring("Returns the type of the contained document object.")]
    HRESULT Type([out, retval] BSTR* Type);

    // Window stuff...
    [id(206), propget, helpstring("The horizontal position (pixels) of the frame window relative to the screen/container.")]
    HRESULT Left([out, retval] long* pl);
    [id(206), propput]
    HRESULT Left([in] long Left);
    [id(207), propget, helpstring("The vertical position (pixels) of the frame window relative to the screen/container.")]
    HRESULT Top([out, retval] long* pl);
    [id(207), propput]
    HRESULT Top([in] long Top);
    [id(208), propget, helpstring("The horizontal dimension (pixels) of the frame window/object.")]
    HRESULT Width([out, retval] long* pl);
    [id(208), propput]
    HRESULT Width([in] long Width);
    [id(209), propget, helpstring("The vertical dimension (pixels) of the frame window/object.")]
    HRESULT Height([out, retval] long* pl);
    [id(209), propput]
    HRESULT Height([in] long Height);

    // WebBrowser stuff...
    [id(210), propget, helpstring("Gets the short (UI-friendly) name of the URL/file currently viewed.")]
    HRESULT LocationName([out, retval] BSTR* LocationName);

    [id(211), propget, helpstring("Gets the full URL/path currently viewed.")]
    HRESULT LocationURL([out, retval] BSTR* LocationURL);

    // Added a property to see if the viewer is currenly busy or not...
    [id(212), propget, helpstring("Query to see if something is still in progress.")]
    HRESULT Busy([out, retval] VARIANT_BOOL* pBool);
}


typedef enum CommandStateChangeConstants {
    [helpstring("Command Change")] CSC_UPDATECOMMANDS = 0xFFFFFFFF,
    [helpstring("Navigate Forward")]    CSC_NAVIGATEFORWARD = 0x00000001,
    [helpstring("Navigate Back")]       CSC_NAVIGATEBACK = 0x00000002,
} CommandStateChangeConstants;

[
    uuid(0002DF05-0000-0000-C000-000000000046), // IID_IWebBrowserApp
    helpstring("Web Browser Application Interface."),
    oleautomation,
    dual
]
interface IWebBrowserApp : IDispatch // IWebBrowser
{
    //IWebBrowser Methods
    [id(100), helpstring("Navigates to the previous item in the history list.")]
    HRESULT GoBack();
    [id(101), helpstring("Navigates to the next item in the history list.")]
    HRESULT GoForward();
    [id(102), helpstring("Go home/start page.")]
    HRESULT GoHome();
    [id(103), helpstring("Go Search Page.")]
    HRESULT GoSearch();

    [id(104), helpstring("Navigates to a URL or file.")]
    HRESULT Navigate([in] BSTR URL,
        [in, optional] VARIANT* Flags,
        [in, optional] VARIANT* TargetFrameName,
        [in, optional] VARIANT* PostData,
        [in, optional] VARIANT* Headers);


    [id(107), helpstring("Refresh the currently viewed page.")]
    HRESULT Refresh();

    // The standard Refresh takes no parameters and we need some... use a new name
    [id(105), helpstring("Refresh the currently viewed page.")]
    HRESULT Refresh2([in, optional] VARIANT* Level);

    [id(106), helpstring("Stops opening a file.")]
    HRESULT Stop();

    // Automation heirarchy...
    [id(200), propget, helpstring("Returns the application automation object if accessible, this automation object otherwise..")]
    HRESULT Application([out, retval] IDispatch** ppDisp);

    [id(201), propget, helpstring("Returns the automation object of the container/parent if one exists or this automation object.")]
    HRESULT Parent([out, retval] IDispatch** ppDisp);

    [id(202), propget, helpstring("Returns the container/parent automation object, if any.")]
    HRESULT Container([out, retval] IDispatch** ppDisp);

    [id(203), propget, helpstring("Returns the active Document automation object, if any.")]
    HRESULT Document([out, retval] IDispatch** ppDisp);

    [id(204), propget, helpstring("Returns True if this is the top level object.")]
    HRESULT TopLevelContainer([out, retval] VARIANT_BOOL* pBool);

    [id(205), propget, helpstring("Returns the type of the contained document object.")]
    HRESULT Type([out, retval] BSTR* Type);

    // Window stuff...
    [id(206), propget, helpstring("The horizontal position (pixels) of the frame window relative to the screen/container.")]
    HRESULT Left([out, retval] long* pl);
    [id(206), propput]
    HRESULT Left([in] long Left);
    [id(207), propget, helpstring("The vertical position (pixels) of the frame window relative to the screen/container.")]
    HRESULT Top([out, retval] long* pl);
    [id(207), propput]
    HRESULT Top([in] long Top);
    [id(208), propget, helpstring("The horizontal dimension (pixels) of the frame window/object.")]
    HRESULT Width([out, retval] long* pl);
    [id(208), propput]
    HRESULT Width([in] long Width);
    [id(209), propget, helpstring("The vertical dimension (pixels) of the frame window/object.")]
    HRESULT Height([out, retval] long* pl);
    [id(209), propput]
    HRESULT Height([in] long Height);

    // WebBrowser stuff...
    [id(210), propget, helpstring("Gets the short (UI-friendly) name of the URL/file currently viewed.")]
    HRESULT LocationName([out, retval] BSTR* LocationName);

    [id(211), propget, helpstring("Gets the full URL/path currently viewed.")]
    HRESULT LocationURL([out, retval] BSTR* LocationURL);

    // Added a property to see if the viewer is currenly busy or not...
    [id(212), propget, helpstring("Query to see if something is still in progress.")]
    HRESULT Busy([out, retval] VARIANT_BOOL* pBool);


    //IWebBrowserApp methods
    [id(300), helpstring("Exits application and closes the open document.")]
    HRESULT Quit();

    [id(301), helpstring("Converts client sizes into window sizes.")]
    HRESULT ClientToWindow([in, out] int* pcx, [in, out] int* pcy);

    [id(302), helpstring("Associates vtValue with the name szProperty in the context of the object.")]
    HRESULT PutProperty([in] BSTR Property, [in] VARIANT vtValue);

    [id(303), helpstring("Retrieve the Associated value for the property vtValue in the context of the object.")]
    HRESULT GetProperty([in] BSTR Property, [out, retval] VARIANT* pvtValue);

    [id(0), propget, helpstring("Returns name of the application.")]
    HRESULT Name([out, retval] BSTR* Name);

    [id(304), propget, helpstring("Returns the HWND of the current IE window.")]
    HRESULT HWND([out, retval] long* pHWND);

    [id(400), propget, helpstring("Returns file specification of the application, including path.")]
    HRESULT FullName([out, retval] BSTR* FullName);

    [id(401), propget, helpstring("Returns the path to the application.")]
    HRESULT Path([out, retval] BSTR* Path);

    [id(402), propget, helpstring("Determines whether the application is visible or hidden.")]
    HRESULT Visible([out, retval] VARIANT_BOOL* pBool);
    [id(402), propput, helpstring("Determines whether the application is visible or hidden.")]
    HRESULT Visible([in] VARIANT_BOOL Value);

    [id(403), propget, helpstring("Turn on or off the statusbar.")]
    HRESULT StatusBar([out, retval] VARIANT_BOOL* pBool);
    [id(403), propput, helpstring("Turn on or off the statusbar.")]
    HRESULT StatusBar([in] VARIANT_BOOL Value);

    [id(404), propget, helpstring("Text of Status window.")]
    HRESULT StatusText([out, retval] BSTR* StatusText);
    [id(404), propput, helpstring("Text of Status window.")]
    HRESULT StatusText([in] BSTR StatusText);

    [id(405), propget, helpstring("Controls which toolbar is shown.")]
    HRESULT ToolBar([out, retval] int* Value);
    [id(405), propput, helpstring("Controls which toolbar is shown.")]
    HRESULT ToolBar([in] int Value);

    [id(406), propget, helpstring("Controls whether menubar is shown.")]
    HRESULT MenuBar([out, retval] VARIANT_BOOL* Value);
    [id(406), propput, helpstring("Controls whether menubar is shown.")]
    HRESULT MenuBar([in] VARIANT_BOOL Value);

    [id(407), propget, helpstring("Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.")]
    HRESULT FullScreen([out, retval] VARIANT_BOOL* pbFullScreen);
    [id(407), propput, helpstring("Maximizes window and turns off statusbar, toolbar, menubar, and titlebar.")]
    HRESULT FullScreen([in] VARIANT_BOOL bFullScreen);
}

typedef enum READYSTATE {
    READYSTATE_UNINITIALIZED = 0,
    READYSTATE_LOADING = 1,
    READYSTATE_LOADED = 2,
    READYSTATE_INTERACTIVE = 3,
    READYSTATE_COMPLETE = 4
} READYSTATE;

#define DISPID_AUTOSIZE                 (-500)
#define DISPID_BACKCOLOR                (-501)
#define DISPID_BACKSTYLE                (-502)
#define DISPID_BORDERCOLOR              (-503)
#define DISPID_BORDERSTYLE              (-504)
#define DISPID_BORDERWIDTH              (-505)
#define DISPID_DRAWMODE                 (-507)
#define DISPID_DRAWSTYLE                (-508)
#define DISPID_DRAWWIDTH                (-509)
#define DISPID_FILLCOLOR                (-510)
#define DISPID_FILLSTYLE                (-511)
#define DISPID_FONT                     (-512)
#define DISPID_FORECOLOR                (-513)
#define DISPID_ENABLED                  (-514)
#define DISPID_HWND                     (-515)
#define DISPID_TABSTOP                  (-516)
#define DISPID_TEXT                     (-517)
#define DISPID_CAPTION                  (-518)
#define DISPID_BORDERVISIBLE            (-519)
#define DISPID_APPEARANCE               (-520)
#define DISPID_MOUSEPOINTER             (-521)
#define DISPID_MOUSEICON                (-522)
#define DISPID_PICTURE                  (-523)
#define DISPID_VALID                    (-524)
#define DISPID_READYSTATE               (-525)
#define DISPID_LISTINDEX                (-526)
#define DISPID_SELECTED                 (-527)
#define DISPID_LIST                     (-528)
#define DISPID_COLUMN                   (-529)
#define DISPID_LISTCOUNT                (-531)
#define DISPID_MULTISELECT              (-532)
#define DISPID_MAXLENGTH                (-533)
#define DISPID_PASSWORDCHAR             (-534)
#define DISPID_SCROLLBARS               (-535)
#define DISPID_WORDWRAP                 (-536)
#define DISPID_MULTILINE                (-537)
#define DISPID_NUMBEROFROWS             (-538)
#define DISPID_NUMBEROFCOLUMNS          (-539)
#define DISPID_DISPLAYSTYLE             (-540)
#define DISPID_GROUPNAME                (-541)
#define DISPID_IMEMODE                  (-542)
#define DISPID_ACCELERATOR              (-543)
#define DISPID_ENTERKEYBEHAVIOR         (-544)
#define DISPID_TABKEYBEHAVIOR           (-545)
#define DISPID_SELTEXT                  (-546)
#define DISPID_SELSTART                 (-547)
#define DISPID_SELLENGTH                (-548)

#define DISPID_REFRESH                  (-550)
#define DISPID_DOCLICK                  (-551)
#define DISPID_ABOUTBOX                 (-552)
#define DISPID_ADDITEM                  (-553)
#define DISPID_CLEAR                    (-554)
#define DISPID_REMOVEITEM               (-555)

#define DISPID_CLICK                    (-600)
#define DISPID_DBLCLICK                 (-601)
#define DISPID_KEYDOWN                  (-602)
#define DISPID_KEYPRESS                 (-603)
#define DISPID_KEYUP                    (-604)
#define DISPID_MOUSEDOWN                (-605)
#define DISPID_MOUSEMOVE                (-606)
#define DISPID_MOUSEUP                  (-607)
#define DISPID_ERROREVENT               (-608)
#define DISPID_READYSTATECHANGE         (-609)
#define DISPID_CLICK_VALUE              (-610)
#define DISPID_RIGHTTOLEFT              (-611)
#define DISPID_TOPTOBOTTOM              (-612)
#define DISPID_THIS                     (-613)

#define DISPID_AMBIENT_BACKCOLOR        (-701)
#define DISPID_AMBIENT_DISPLAYNAME      (-702)
#define DISPID_AMBIENT_FONT             (-703)
#define DISPID_AMBIENT_FORECOLOR        (-704)
#define DISPID_AMBIENT_LOCALEID         (-705)
#define DISPID_AMBIENT_MESSAGEREFLECT   (-706)
#define DISPID_AMBIENT_SCALEUNITS       (-707)
#define DISPID_AMBIENT_TEXTALIGN        (-708)
#define DISPID_AMBIENT_USERMODE         (-709)
#define DISPID_AMBIENT_UIDEAD           (-710)
#define DISPID_AMBIENT_SHOWGRABHANDLES  (-711)
#define DISPID_AMBIENT_SHOWHATCHING     (-712)
#define DISPID_AMBIENT_DISPLAYASDEFAULT (-713)
#define DISPID_AMBIENT_SUPPORTSMNEMONICS (-714)
#define DISPID_AMBIENT_AUTOCLIP         (-715)
#define DISPID_AMBIENT_APPEARANCE       (-716)

#define DISPID_AMBIENT_CODEPAGE         (-725)
#define DISPID_AMBIENT_PALETTE          (-726)
#define DISPID_AMBIENT_CHARSET          (-727)
#define DISPID_AMBIENT_TRANSFERPRIORITY (-728)

#define DISPID_AMBIENT_RIGHTTOLEFT      (-732)
#define DISPID_AMBIENT_TOPTOBOTTOM      (-733)

#define DISPID_Name                     (-800)
#define DISPID_Delete                   (-801)
#define DISPID_Object                   (-802)
#define DISPID_Parent                   (-803)

[
	uuid(D30C1661-CDAF-11d0-8A3E-00C04FC9E26E), // IID_IWebBrowser2
	helpstring("Web Browser Interface for IE4."),
	helpcontext(0x0000),
	oleautomation,
	dual
]
interface IWebBrowser2 : IWebBrowserApp
{
	[id(500), helpstring("Navigates to a URL or file or pidl."), helpcontext(0x0000)]
	HRESULT Navigate2([in] VARIANT* URL,
		[in, optional] VARIANT* Flags,
		[in, optional] VARIANT* TargetFrameName,
		[in, optional] VARIANT* PostData,
		[in, optional] VARIANT* Headers);


	[id(501), helpstring("IOleCommandTarget::QueryStatus"), helpcontext(0x0000)]
	HRESULT QueryStatusWB([in] OLECMDID cmdID, [out, retval] OLECMDF* pcmdf);
	[id(502), helpstring("IOleCommandTarget::Exec"), helpcontext(0x0000)]
	HRESULT ExecWB([in] OLECMDID cmdID, [in] OLECMDEXECOPT cmdexecopt, [in, optional] VARIANT* pvaIn, [in, out, optional] VARIANT* pvaOut);
	[id(503), helpstring("Set BrowserBar to Clsid"), helpcontext(0x0000)]
	HRESULT ShowBrowserBar([in] VARIANT* pvaClsid,
		[in, optional] VARIANT* pvarShow,
		[in, optional] VARIANT* pvarSize);

	[id(DISPID_READYSTATE), propget, bindable]
	HRESULT ReadyState([retval, out] READYSTATE* plReadyState);

	[id(550), propget, helpstring("Controls if the frame is offline (read from cache)"), helpcontext(0x0000)]
	HRESULT Offline([out, retval] VARIANT_BOOL* pbOffline);
	[id(550), propput, helpstring("Controls if the frame is offline (read from cache)"), helpcontext(0x0000)]
	HRESULT Offline([in] VARIANT_BOOL bOffline);

	[id(551), propget, helpstring("Controls if any dialog boxes can be shown"), helpcontext(0x0000)]
	HRESULT Silent([out, retval] VARIANT_BOOL* pbSilent);
	[id(551), propput, helpstring("Controls if any dialog boxes can be shown"), helpcontext(0x0000)]
	HRESULT Silent([in] VARIANT_BOOL bSilent);

	[id(552), propget, helpstring("Registers OC as a top-level browser (for target name resolution)"), helpcontext(0x0000)]
	HRESULT RegisterAsBrowser([out, retval] VARIANT_BOOL* pbRegister);
	[id(552), propput, helpstring("Registers OC as a top-level browser (for target name resolution)"), helpcontext(0x0000)]
	HRESULT RegisterAsBrowser([in] VARIANT_BOOL bRegister);

	[id(553), propget, helpstring("Registers OC as a drop target for navigation"), helpcontext(0x0000)]
	HRESULT RegisterAsDropTarget([out, retval] VARIANT_BOOL* pbRegister);
	[id(553), propput, helpstring("Registers OC as a drop target for navigation"), helpcontext(0x0000)]
	HRESULT RegisterAsDropTarget([in] VARIANT_BOOL bRegister);

	[id(554), propget, helpstring("Controls if the browser is in theater mode"), helpcontext(0x0000)]
	HRESULT TheaterMode([out, retval] VARIANT_BOOL* pbRegister);
	[id(554), propput, helpstring("Controls if the browser is in theater mode"), helpcontext(0x0000)]
	HRESULT TheaterMode([in] VARIANT_BOOL bRegister);

	[id(555), propget, helpstring("Controls whether address bar is shown"), helpcontext(0x0000)]
	HRESULT AddressBar([out, retval] VARIANT_BOOL* Value);
	[id(555), propput, helpstring("Controls whether address bar is shown"), helpcontext(0x0000)]
	HRESULT AddressBar([in] VARIANT_BOOL Value);

	[id(556), propget, helpstring("Controls whether the window is resizable"), helpcontext(0x0000)]
	HRESULT Resizable([out, retval] VARIANT_BOOL* Value);
	[id(556), propput, helpstring("Controls whether the window is resizable"), helpcontext(0x0000)]
	HRESULT Resizable([in] VARIANT_BOOL Value);
}

typedef
[
	uuid(65507BE0-91A8-11d3-A845-009027220E6D),
	helpstring("Constants for WebBrowser security icon notification")
]
enum SecureLockIconConstants {
	secureLockIconUnsecure = 0x0000,
	secureLockIconMixed = 0x0001,
	secureLockIconSecureUnknownBits = 0x0002,
	secureLockIconSecure40Bit = 0x0003,
	secureLockIconSecure56Bit = 0x0004,
	secureLockIconSecureFortezza = 0x0005,
	secureLockIconSecure128Bit = 0x0006,
} SecureLockIconConstants;

typedef
[
	uuid(a8317d46-03cb-4975-ae94-85e9f2e1d020),
	helpstring("Constants for WebBrowser NewProcess notification")
]
enum NewProcessCauseConstants {
	ProtectedModeRedirect = 0x0001,
} NewProcessCauseConstants;

[
	uuid(34A715A0-6587-11D0-924A-0020AFC7AC4D), // IID_DWebBrowserEvents2
	helpstring("Web Browser Control events interface"),
	hidden
]
dispinterface DWebBrowserEvents2
{
	properties:
	methods:
	[id(DISPID_STATUSTEXTCHANGE), helpstring("Statusbar text changed."), helpcontext(0x0000)]
	void StatusTextChange([in]BSTR Text);

	[id(DISPID_PROGRESSCHANGE), helpstring("Fired when download progress is updated."), helpcontext(0x0000)]
	void ProgressChange([in] long Progress,[in] long ProgressMax);

	[id(DISPID_COMMANDSTATECHANGE), helpstring("The enabled state of a command changed."), helpcontext(0x0000)]
	void CommandStateChange([in] long Command,[in] VARIANT_BOOL Enable);

	[id(DISPID_DOWNLOADBEGIN), helpstring("Download of a page started."), helpcontext(0x000)]
	void DownloadBegin();

	[id(DISPID_DOWNLOADCOMPLETE), helpstring("Download of page complete."), helpcontext(0x0000)]
	void DownloadComplete();

	[id(DISPID_TITLECHANGE), helpstring("Document title changed."), helpcontext(0x0000)]
	void TitleChange([in] BSTR Text);

	[id(DISPID_PROPERTYCHANGE), helpstring("Fired when the PutProperty method has been called."), helpcontext(0x0000)]
	void PropertyChange([in] BSTR szProperty);

	// New events for IE40:
	//
	[id(DISPID_BEFORENAVIGATE2), helpstring("Fired before navigate occurs in the given WebBrowser (window or frameset element). The processing of this navigation may be modified."), helpcontext(0x0000)]
	void BeforeNavigate2([in] IDispatch* pDisp,
						 [in] VARIANT* URL,[in] VARIANT* Flags,[in] VARIANT* TargetFrameName,[in] VARIANT* PostData,[in] VARIANT* Headers,
						 [in,out] VARIANT_BOOL* Cancel);

	[id(DISPID_NEWWINDOW2), helpstring("A new, hidden, non-navigated WebBrowser window is needed."), helpcontext(0x0000)]
	void NewWindow2([in, out] IDispatch** ppDisp,[in, out] VARIANT_BOOL* Cancel);

	[id(DISPID_NAVIGATECOMPLETE2), helpstring("Fired when the document being navigated to becomes visible and enters the navigation stack."), helpcontext(0x0000)]
	void NavigateComplete2([in] IDispatch* pDisp,[in] VARIANT* URL);

	[id(DISPID_DOCUMENTCOMPLETE), helpstring("Fired when the document being navigated to reaches ReadyState_Complete."), helpcontext(0x0000)]
	void DocumentComplete([in] IDispatch* pDisp,[in] VARIANT* URL);

	[id(DISPID_ONQUIT), helpstring("Fired when application is quiting."), helpcontext(0x0000)]
	void OnQuit();

	[id(DISPID_ONVISIBLE), helpstring("Fired when the window should be shown/hidden"), helpcontext(0x0000)]
	void OnVisible([in] VARIANT_BOOL Visible);

	[id(DISPID_ONTOOLBAR), helpstring("Fired when the toolbar  should be shown/hidden"), helpcontext(0x0000)]
	void OnToolBar([in] VARIANT_BOOL ToolBar);

	[id(DISPID_ONMENUBAR), helpstring("Fired when the menubar should be shown/hidden"), helpcontext(0x0000)]
	void OnMenuBar([in] VARIANT_BOOL MenuBar);

	[id(DISPID_ONSTATUSBAR), helpstring("Fired when the statusbar should be shown/hidden"), helpcontext(0x0000)]
	void OnStatusBar([in] VARIANT_BOOL StatusBar);

	[id(DISPID_ONFULLSCREEN), helpstring("Fired when fullscreen mode should be on/off"), helpcontext(0x0000)]
	void OnFullScreen([in] VARIANT_BOOL FullScreen);

	[id(DISPID_ONTHEATERMODE), helpstring("Fired when theater mode should be on/off"), helpcontext(0x0000)]
	void OnTheaterMode([in] VARIANT_BOOL TheaterMode);

	// New events for IE 5.5

	[id(DISPID_WINDOWSETRESIZABLE), helpstring("Fired when the host window should allow/disallow resizing"), helpcontext(0x0000)]
	void WindowSetResizable([in] VARIANT_BOOL Resizable);

	[id(DISPID_WINDOWSETLEFT), helpstring("Fired when the host window should change its Left coordinate"), helpcontext(0x0000)]
	void WindowSetLeft([in] long Left);

	[id(DISPID_WINDOWSETTOP), helpstring("Fired when the host window should change its Top coordinate"), helpcontext(0x0000)]
	void WindowSetTop([in] long Top);

	[id(DISPID_WINDOWSETWIDTH), helpstring("Fired when the host window should change its width"), helpcontext(0x0000)]
	void WindowSetWidth([in] long Width);

	[id(DISPID_WINDOWSETHEIGHT), helpstring("Fired when the host window should change its height"), helpcontext(0x0000)]
	void WindowSetHeight([in] long Height);

	[id(DISPID_WINDOWCLOSING), helpstring("Fired when the WebBrowser is about to be closed by script"), helpcontext(0x0000)]
	void WindowClosing([in] VARIANT_BOOL IsChildWindow,[in, out] VARIANT_BOOL* Cancel);

	[id(DISPID_CLIENTTOHOSTWINDOW), helpstring("Fired to request client sizes be converted to host window sizes"), helpcontext(0x0000)]
	void ClientToHostWindow([in, out] long* CX,[in, out] long* CY);

	[id(DISPID_SETSECURELOCKICON), helpstring("Fired to indicate the security level of the current web page contents"), helpcontext(0x0000)]
	void SetSecureLockIcon([in] long SecureLockIcon);

	[id(DISPID_FILEDOWNLOAD), helpstring("Fired to indicate the File Download dialog is opening"), helpcontext(0x0000)]
	void FileDownload([in] VARIANT_BOOL ActiveDocument,[in, out] VARIANT_BOOL* Cancel);

	// New events for IE 6.0

	[id(DISPID_NAVIGATEERROR), helpstring("Fired when a binding error occurs (window or frameset element)."), helpcontext(0x0000)]
	void NavigateError([in] IDispatch* pDisp,[in] VARIANT* URL,[in] VARIANT* Frame,[in] VARIANT* StatusCode,[in,out] VARIANT_BOOL* Cancel);

	[id(DISPID_PRINTTEMPLATEINSTANTIATION), helpstring("Fired when a print template is instantiated."), helpcontext(0x0000)]
	void PrintTemplateInstantiation([in] IDispatch* pDisp);

	[id(DISPID_PRINTTEMPLATETEARDOWN), helpstring("Fired when a print template destroyed."), helpcontext(0x0000)]
	void PrintTemplateTeardown([in] IDispatch* pDisp);

	[id(DISPID_UPDATEPAGESTATUS), helpstring("Fired when a page is spooled. When it is fired can be changed by a custom template."), helpcontext(0x0000)]
	void UpdatePageStatus([in] IDispatch* pDisp,[in] VARIANT* nPage,[in] VARIANT* fDone);

	[id(DISPID_PRIVACYIMPACTEDSTATECHANGE), helpstring("Fired when the global privacy impacted state changes"), helpcontext(0x0000)]
	void PrivacyImpactedStateChange([in] VARIANT_BOOL bImpacted);

	[id(DISPID_NEWWINDOW3), helpstring("A new, hidden, non-navigated WebBrowser window is needed."), helpcontext(0x0000)]
	void NewWindow3([in, out] IDispatch** ppDisp,[in, out] VARIANT_BOOL* Cancel,[in] DWORD dwFlags,[in] BSTR bstrUrlContext,[in] BSTR bstrUrl);

	// New events for IE 7.0

	[id(DISPID_SETPHISHINGFILTERSTATUS), helpstring("Fired to indicate the progress and status of the Phishing Filter analysis of the current web page"), helpcontext(0x0000)]
	void SetPhishingFilterStatus([in] long PhishingFilterStatus);

	[id(DISPID_WINDOWSTATECHANGED), helpstring("Fired to indicate that the browser window's visibility or enabled state has changed."), helpcontext(0x0000)]
	void WindowStateChanged([in] DWORD dwWindowStateFlags,[in] DWORD dwValidFlagsMask);

	// New Events for IE 8.0
	[id(DISPID_NEWPROCESS), helpstring("A new, hidden, non-navigated process is created to handle the navigation."), helpcontext(0x0000)]
	void NewProcess([in] long lCauseFlag,[in] IDispatch* pWB2,[in, out] VARIANT_BOOL* Cancel);

	[id(DISPID_THIRDPARTYURLBLOCKED), helpstring("Fired when a third-party URL is blocked."), helpcontext(0x0000)]
	void ThirdPartyUrlBlocked([in] VARIANT* URL,[in] DWORD dwCount);

	[id(DISPID_REDIRECTXDOMAINBLOCKED), helpstring("Fired when a x-domain redirect is blocked."), helpcontext(0x0000)]
	void RedirectXDomainBlocked([in] IDispatch* pDisp,[in] VARIANT* StartURL,[in] VARIANT* RedirectURL,[in] VARIANT* Frame,[in] VARIANT* StatusCode);

	// New Events for IE 10.0
	[id(DISPID_BEFORESCRIPTEXECUTE), helpstring("Fired prior to the first script execution."), helpcontext(0x0000)]
	void BeforeScriptExecute([in] IDispatch* pDispWindow);

	[id(DISPID_WEBWORKERSTARTED), helpstring("Fired after a Web Worker has been started."), helpcontext(0x0000)]
	void WebWorkerStarted([in] DWORD dwUniqueID,[in] BSTR bstrWorkerLabel);

	[id(DISPID_WEBWORKERFINISHED), helpstring("Fired after a Web Worker has closed"), helpcontext(0x0000)]
	void WebWorkerFinsihed([in] DWORD dwUniqueID);
}

[
    uuid(EAB22AC2-30C1-11CF-A7EB-0000C05BAE0B), // DIID_DWebBrowserEvents
    helpstring("Web Browser Control Events (old)"),
    hidden
]
dispinterface DWebBrowserEvents
{
    properties:
    methods:
    [id(DISPID_BEFORENAVIGATE), helpstring("Fired when a new hyperlink is being navigated to."), helpcontext(0x0000)]
    void BeforeNavigate([in] BSTR URL, long Flags, BSTR TargetFrameName, VARIANT * PostData, BSTR Headers,[in, out]VARIANT_BOOL * Cancel);

    [id(DISPID_NAVIGATECOMPLETE), helpstring("Fired when the document being navigated to becomes visible and enters the navigation stack."), helpcontext(0x0000)]
    void NavigateComplete([in] BSTR URL);

    [id(DISPID_STATUSTEXTCHANGE), helpstring("Statusbar text changed."), helpcontext(0x0000)]
    void StatusTextChange([in]BSTR Text);

    [id(DISPID_PROGRESSCHANGE), helpstring("Fired when download progress is updated."), helpcontext(0x0000)]
    void ProgressChange([in] long Progress,[in] long ProgressMax);

    [id(DISPID_DOWNLOADCOMPLETE), helpstring("Download of page complete."), helpcontext(0x0000)]
    void DownloadComplete();

    [id(DISPID_COMMANDSTATECHANGE), helpstring("The enabled state of a command changed"), helpcontext(0x0000)]
    void CommandStateChange([in] long Command,[in] VARIANT_BOOL Enable);

    [id(DISPID_DOWNLOADBEGIN), helpstring("Download of a page started."), helpcontext(0x000)]
    void DownloadBegin();

    [id(DISPID_NEWWINDOW), helpstring("Fired when a new window should be created."), helpcontext(0x0000)]
    void NewWindow([in] BSTR URL,[in] long Flags,[in] BSTR TargetFrameName,[in] VARIANT* PostData,[in] BSTR Headers,[in,out] VARIANT_BOOL* Processed);

    [id(DISPID_TITLECHANGE), helpstring("Document title changed."), helpcontext(0x0000)]
    void TitleChange([in]BSTR Text);

    [id(DISPID_FRAMEBEFORENAVIGATE), helpstring("Fired when a new hyperlink is being navigated to in a frame."), helpcontext(0x0000)]
    void FrameBeforeNavigate([in] BSTR URL, long Flags, BSTR TargetFrameName, VARIANT* PostData, BSTR Headers,[in, out]VARIANT_BOOL* Cancel);

    [id(DISPID_FRAMENAVIGATECOMPLETE), helpstring("Fired when a new hyperlink is being navigated to in a frame."), helpcontext(0x0000)]
    void FrameNavigateComplete([in] BSTR URL);

    [id(DISPID_FRAMENEWWINDOW), helpstring("Fired when a new window should be created."), helpcontext(0x0000)]
    void FrameNewWindow([in] BSTR URL,[in] long Flags,[in] BSTR TargetFrameName,[in] VARIANT* PostData,[in] BSTR Headers,[in,out] VARIANT_BOOL* Processed);

    // The following are IWebBrowserApp specific:
    //
    [id(DISPID_QUIT), helpstring("Fired when application is quiting."), helpcontext(0x0000)]
    void Quit([in, out] VARIANT_BOOL* Cancel);

    [id(DISPID_WINDOWMOVE), helpstring("Fired when window has been moved."), helpcontext(0x0000)]
    void WindowMove();

    [id(DISPID_WINDOWRESIZE), helpstring("Fired when window has been sized."), helpcontext(0x0000)]
    void WindowResize();

    [id(DISPID_WINDOWACTIVATE), helpstring("Fired when window has been activated."), helpcontext(0x0000)]
    void WindowActivate();

    [id(DISPID_PROPERTYCHANGE), helpstring("Fired when the PutProperty method has been called."), helpcontext(0x0000)]
    void PropertyChange([in] BSTR Property);
}

#define DISPID_BEFORENAVIGATE     100   // this is sent before navigation to give a chance to abort
#define DISPID_NAVIGATECOMPLETE   101   // in async, this is sent when we have enough to show
#define DISPID_STATUSTEXTCHANGE   102
#define DISPID_QUIT               103
#define DISPID_DOWNLOADCOMPLETE   104
#define DISPID_COMMANDSTATECHANGE 105
#define DISPID_DOWNLOADBEGIN      106
#define DISPID_NEWWINDOW          107   // sent when a new window should be created
#define DISPID_PROGRESSCHANGE     108   // sent when download progress is updated
#define DISPID_WINDOWMOVE         109   // sent when main window has been moved
#define DISPID_WINDOWRESIZE       110   // sent when main window has been sized
#define DISPID_WINDOWACTIVATE     111   // sent when main window has been activated
#define DISPID_PROPERTYCHANGE     112   // sent when the PutProperty method is called
#define DISPID_TITLECHANGE        113   // sent when the document title changes
#define DISPID_TITLEICONCHANGE    114   // sent when the top level window icon may have changed.

#define DISPID_FRAMEBEFORENAVIGATE    200
#define DISPID_FRAMENAVIGATECOMPLETE  201
#define DISPID_FRAMENEWWINDOW         204

#define DISPID_BEFORENAVIGATE2              250           // hyperlink clicked on
#define DISPID_NEWWINDOW2                   251
#define DISPID_NAVIGATECOMPLETE2            252           // UIActivate new document
#define DISPID_ONQUIT                       253
#define DISPID_ONVISIBLE                    254           // sent when the window goes visible/hidden
#define DISPID_ONTOOLBAR                    255           // sent when the toolbar should be shown/hidden
#define DISPID_ONMENUBAR                    256           // sent when the menubar should be shown/hidden
#define DISPID_ONSTATUSBAR                  257           // sent when the statusbar should be shown/hidden
#define DISPID_ONFULLSCREEN                 258           // sent when kiosk mode should be on/off
#define DISPID_DOCUMENTCOMPLETE             259           // new document goes ReadyState_Complete
#define DISPID_ONTHEATERMODE                260           // sent when theater mode should be on/off
#define DISPID_ONADDRESSBAR                 261           // sent when the address bar should be shown/hidden
#define DISPID_WINDOWSETRESIZABLE           262           // sent to set the style of the host window frame
#define DISPID_WINDOWCLOSING                263           // sent before script window.close closes the window 
#define DISPID_WINDOWSETLEFT                264           // sent when the put_left method is called on the WebOC
#define DISPID_WINDOWSETTOP                 265           // sent when the put_top method is called on the WebOC
#define DISPID_WINDOWSETWIDTH               266           // sent when the put_width method is called on the WebOC
#define DISPID_WINDOWSETHEIGHT              267           // sent when the put_height method is called on the WebOC 
#define DISPID_CLIENTTOHOSTWINDOW           268           // sent during window.open to request conversion of dimensions
#define DISPID_SETSECURELOCKICON            269           // sent to suggest the appropriate security icon to show
#define DISPID_FILEDOWNLOAD                 270           // Fired to indicate the File Download dialog is opening
#define DISPID_NAVIGATEERROR                271           // Fired to indicate the a binding error has occured
#define DISPID_PRIVACYIMPACTEDSTATECHANGE   272           // Fired when the user's browsing experience is impacted
#define DISPID_NEWWINDOW3                   273
#define DISPID_VIEWUPDATE                   281           // Fired when the contents of a shell browser window change
#define DISPID_SETPHISHINGFILTERSTATUS      282           // Fired by the Phishing Filter API to signal what state the analysis is in
#define DISPID_WINDOWSTATECHANGED           283           // Fired to indicate that the browser window's visibility or enabled state has changed
#define DISPID_NEWPROCESS                   284           // Fired when a navigation must be redirected due to Protected Mode
#define DISPID_THIRDPARTYURLBLOCKED         285           // Fired when a third-party url is blocked due to Privacy Advisor   
#define DISPID_REDIRECTXDOMAINBLOCKED       286           // Fired when a x-domain redirect is blocked due to browser nav constant   
#define DISPID_WEBWORKERSTARTED             288
#define DISPID_WEBWORKERFINISHED            289
#define DISPID_BEFORESCRIPTEXECUTE          290           // Fired prior to any of a page's script is executed

// Printing events
#define DISPID_PRINTTEMPLATEINSTANTIATION   225           // Fired to indicate that a print template is instantiated
#define DISPID_PRINTTEMPLATETEARDOWN        226           // Fired to indicate that a print templete is completely gone 
#define DISPID_UPDATEPAGESTATUS             227           // Fired to indicate that the spooling status has changed

// define the events for the shell window list
#define DISPID_WINDOWREGISTERED             200           // Window registered
#define DISPID_WINDOWREVOKED                201           // Window Revoked

#define DISPID_RESETFIRSTBOOTMODE       1
#define DISPID_RESETSAFEMODE            2
#define DISPID_REFRESHOFFLINEDESKTOP    3
#define DISPID_ADDFAVORITE              4
#define DISPID_ADDCHANNEL               5
#define DISPID_ADDDESKTOPCOMPONENT      6
#define DISPID_ISSUBSCRIBED             7
#define DISPID_NAVIGATEANDFIND          8
#define DISPID_IMPORTEXPORTFAVORITES    9
#define DISPID_AUTOCOMPLETESAVEFORM     10
#define DISPID_AUTOSCAN                 11
#define DISPID_AUTOCOMPLETEATTACH       12
#define DISPID_SHOWBROWSERUI            13
#define DISPID_ADDSEARCHPROVIDER        14
#define DISPID_RUNONCESHOWN             15
#define DISPID_SKIPRUNONCE              16
#define DISPID_CUSTOMIZESETTINGS        17
#define DISPID_SQMENABLED               18
#define DISPID_PHISHINGENABLED          19
#define DISPID_BRANDIMAGEURI            20
#define DISPID_SKIPTABSWELCOME          21
#define DISPID_DIAGNOSECONNECTION       22
#define DISPID_CUSTOMIZECLEARTYPE       23
#define DISPID_ISSEARCHPROVIDERINSTALLED 24
#define DISPID_ISSEARCHMIGRATED         25
#define DISPID_DEFAULTSEARCHPROVIDER    26
#define DISPID_RUNONCEREQUIREDSETTINGSCOMPLETE 27
#define DISPID_RUNONCEHASSHOWN          28
#define DISPID_SEARCHGUIDEURL           29
#define DISPID_ADDSERVICE               30
#define DISPID_ISSERVICEINSTALLED       31
#define DISPID_ADDTOFAVORITESBAR        32
#define DISPID_BUILDNEWTABPAGE          33
#define DISPID_SETRECENTLYCLOSEDVISIBLE 34
#define DISPID_SETACTIVITIESVISIBLE     35
#define DISPID_CONTENTDISCOVERYRESET    36
#define DISPID_INPRIVATEFILTERINGENABLED    37
#define DISPID_SUGGESTEDSITESENABLED    38
#define DISPID_ENABLESUGGESTEDSITES     39
#define DISPID_NAVIGATETOSUGGESTEDSITES 40
#define DISPID_SHOWTABSHELP             41
#define DISPID_SHOWINPRIVATEHELP        42
#define DISPID_ISSITEMODE               43
#define DISPID_SETSITEMODEICONOVERLAY   44
#define DISPID_CLEARSITEMODEICONOVERLAY 45
#define DISPID_UPDATETHUMBNAILBUTTON    46
#define DISPID_SETTHUMBNAILBUTTONS      47 
#define DISPID_ADDTHUMBNAILBUTTONS      48
#define DISPID_ADDSITEMODE              49
#define DISPID_SETSITEMODEPROPERTIES    50
#define DISPID_SITEMODECREATEJUMPLIST   51
#define DISPID_SITEMODEADDJUMPLISTITEM  52
#define DISPID_SITEMODECLEARJUMPLIST    53
#define DISPID_SITEMODEADDBUTTONSTYLE   54 
#define DISPID_SITEMODESHOWBUTTONSTYLE  55
#define DISPID_SITEMODESHOWJUMPLIST     56
#define DISPID_ADDTRACKINGPROTECTIONLIST    57
#define DISPID_SITEMODEACTIVATE         58
#define DISPID_ISSITEMODEFIRSTRUN       59
#define DISPID_TRACKINGPROTECTIONENABLED 60
#define DISPID_ACTIVEXFILTERINGENABLED  61
#define DISPID_PROVISIONNETWORKS        62
#define DISPID_REPORTSAFEURL            63
#define DISPID_SITEMODEREFRESHBADGE     64
#define DISPID_SITEMODECLEARBADGE       65
#define DISPID_DIAGNOSECONNECTIONUILESS 66
#define DISPID_LAUNCHNETWORKCLIENTHELP  67
#define DISPID_CHANGEDEFAULTBROWSER     68
#define DISPID_STOPPERIODICUPDATE       69
#define DISPID_STARTPERIODICUPDATE      70
#define DISPID_CLEARNOTIFICATION        71
#define DISPID_ENABLENOTIFICATIONQUEUE  72
#define DISPID_PINNEDSITESTATE          73
#define DISPID_LAUNCHINTERNETOPTIONS   74
#define DISPID_STARTPERIODICUPDATEBATCH 75
#define DISPID_ENABLENOTIFICATIONQUEUESQUARE   76
#define DISPID_ENABLENOTIFICATIONQUEUEWIDE     77
#define DISPID_ENABLENOTIFICATIONQUEUELARGE    78
#define DISPID_SCHEDULEDTILENOTIFICATION       79
#define DISPID_REMOVESCHEDULEDTILENOTIFICATION 80
#define DISPID_STARTBADGEUPDATE         81
#define DISPID_STOPBADGEUPDATE          82
#define DISPID_ISMETAREFERRERAVAILABLE  83
#define DISPID_SETEXPERIMENTALFLAG      84
#define DISPID_GETEXPERIMENTALFLAG      85
#define DISPID_SETEXPERIMENTALVALUE     86
#define DISPID_GETEXPERIMENTALVALUE     87
#define DISPID_HASNEEDIEAUTOLAUNCHFLAG  88
#define DISPID_GETNEEDIEAUTOLAUNCHFLAG  89
#define DISPID_SETNEEDIEAUTOLAUNCHFLAG  90
#define DISPID_LAUNCHIE                 91
#define DISPID_RESETEXPERIMENTALFLAGS   92
#define DISPID_GETCVLISTDATA            93
#define DISPID_GETCVLISTLOCALDATA       94
#define DISPID_GETEMIELISTDATA          95
#define DISPID_GETEMIELISTLOCALDATA     96
#define DISPID_OPENFAVORITESPANE        97
#define DISPID_OPENFAVORITESSETTINGS    98
#define DISPID_LAUNCHINHVSI             99
#define DISPID_GETNEEDHVSIAUTOLAUNCHFLAG 100
#define DISPID_SETNEEDHVSIAUTOLAUNCHFLAG 101
#define DISPID_HASNEEDHVSIAUTOLAUNCHFLAG 102
#define DISPID_GETOSSKU                  103
#define DISPID_SETMSDEFAULTS             104
#define DISPID_SHELLUIHELPERLAST         105

#define DISPID_ADVANCEERROR             10
#define DISPID_RETREATERROR             11
#define DISPID_CANADVANCEERROR          12
#define DISPID_CANRETREATERROR          13
#define DISPID_GETERRORLINE             14
#define DISPID_GETERRORCHAR             15
#define DISPID_GETERRORCODE             16
#define DISPID_GETERRORMSG              17
#define DISPID_GETERRORURL              18
#define DISPID_GETDETAILSSTATE          19
#define DISPID_SETDETAILSSTATE          20
#define DISPID_GETPERERRSTATE           21
#define DISPID_SETPERERRSTATE           22
#define DISPID_GETALWAYSSHOWLOCKSTATE   23

// Dispatch IDS for ShellFavoritesNameSpace Dispatch Events.
//
#define DISPID_FAVSELECTIONCHANGE       1
#define DISPID_SELECTIONCHANGE          2
#define DISPID_DOUBLECLICK              3
#define DISPID_INITIALIZED              4

#define DISPID_MOVESELECTIONUP          1
#define DISPID_MOVESELECTIONDOWN        2
#define DISPID_RESETSORT                3
#define DISPID_NEWFOLDER                4
#define DISPID_SYNCHRONIZE              5
#define DISPID_IMPORT                   6
#define DISPID_EXPORT                   7
#define DISPID_INVOKECONTEXTMENU        8
#define DISPID_MOVESELECTIONTO          9
#define DISPID_SUBSCRIPTIONSENABLED     10
#define DISPID_CREATESUBSCRIPTION       11
#define DISPID_DELETESUBSCRIPTION       12
#define DISPID_SETROOT                  13
#define DISPID_ENUMOPTIONS              14
#define DISPID_SELECTEDITEM             15
#define DISPID_ROOT                     16
#define DISPID_DEPTH                    17
#define DISPID_MODE                     18
#define DISPID_FLAGS                    19
#define DISPID_TVFLAGS                  20
#define DISPID_NSCOLUMNS                21
#define DISPID_COUNTVIEWTYPES           22
#define DISPID_SETVIEWTYPE              23
#define DISPID_SELECTEDITEMS            24
#define DISPID_EXPAND                   25
#define DISPID_UNSELECTALL              26

[
    uuid(729FE2F8-1EA8-11d1-8F85-00C04FC2FBE1),     // IID_IShellUIHelper
    helpstring("Shell UI Helper Control Interface"),
    oleautomation, dual
]
interface IShellUIHelper : IDispatch
{
    [hidden, id(DISPID_RESETFIRSTBOOTMODE)] HRESULT ResetFirstBootMode();
    [hidden, id(DISPID_RESETSAFEMODE)] HRESULT ResetSafeMode();
    [hidden, id(DISPID_REFRESHOFFLINEDESKTOP)] HRESULT RefreshOfflineDesktop();
    [id(DISPID_ADDFAVORITE)] HRESULT AddFavorite([in] BSTR URL, [in, optional] VARIANT* Title);
    [id(DISPID_ADDCHANNEL)] HRESULT AddChannel([in] BSTR URL);
    [id(DISPID_ADDDESKTOPCOMPONENT)] HRESULT AddDesktopComponent([in] BSTR URL, [in] BSTR Type,
        [in, optional] VARIANT* Left,
        [in, optional] VARIANT* Top,
        [in, optional] VARIANT* Width,
        [in, optional] VARIANT* Height);
    [id(DISPID_ISSUBSCRIBED)] HRESULT IsSubscribed([in] BSTR URL, [out, retval] VARIANT_BOOL* pBool);
    [id(DISPID_NAVIGATEANDFIND)] HRESULT NavigateAndFind([in] BSTR URL, [in] BSTR strQuery, [in] VARIANT* varTargetFrame);
    [id(DISPID_IMPORTEXPORTFAVORITES)] HRESULT ImportExportFavorites([in] VARIANT_BOOL fImport, [in] BSTR strImpExpPath);
    [id(DISPID_AUTOCOMPLETESAVEFORM)] HRESULT AutoCompleteSaveForm([in, optional] VARIANT* Form);
    [id(DISPID_AUTOSCAN)] HRESULT AutoScan([in] BSTR strSearch, [in] BSTR strFailureUrl, [in, optional] VARIANT* pvarTargetFrame);
    [hidden, id(DISPID_AUTOCOMPLETEATTACH)] HRESULT AutoCompleteAttach([in, optional] VARIANT* Reserved);
    [id(DISPID_SHOWBROWSERUI)] HRESULT ShowBrowserUI([in] BSTR bstrName, [in] VARIANT* pvarIn, [out, retval] VARIANT* pvarOut);
}

[
    uuid(a7fe6eda-1932-4281-b881-87b31b8bc52c),     // IID_IShellUIHelper2
    helpstring("Shell UI Helper Control Interface 2"),
    oleautomation, dual
]
interface IShellUIHelper2 : IShellUIHelper
{
    [id(DISPID_ADDSEARCHPROVIDER)] HRESULT AddSearchProvider([in] BSTR URL);
    [id(DISPID_RUNONCESHOWN)] HRESULT RunOnceShown();
    [id(DISPID_SKIPRUNONCE)] HRESULT SkipRunOnce();
    [id(DISPID_CUSTOMIZESETTINGS)] HRESULT CustomizeSettings(
        [in] VARIANT_BOOL fSQM,
        [in] VARIANT_BOOL fPhishing,
        [in] BSTR bstrLocale);
    [id(DISPID_SQMENABLED)] HRESULT SqmEnabled([out, retval] VARIANT_BOOL* pfEnabled);
    [id(DISPID_PHISHINGENABLED)] HRESULT PhishingEnabled([out, retval] VARIANT_BOOL* pfEnabled);
    [id(DISPID_BRANDIMAGEURI)] HRESULT BrandImageUri([out, retval] BSTR* pbstrUri);
    [id(DISPID_SKIPTABSWELCOME)] HRESULT SkipTabsWelcome();
    [id(DISPID_DIAGNOSECONNECTION)] HRESULT DiagnoseConnection();
    [id(DISPID_CUSTOMIZECLEARTYPE)] HRESULT CustomizeClearType([in] VARIANT_BOOL fSet);
    [id(DISPID_ISSEARCHPROVIDERINSTALLED)] HRESULT IsSearchProviderInstalled([in] BSTR URL, [out, retval] DWORD* pdwResult);
    [id(DISPID_ISSEARCHMIGRATED)] HRESULT IsSearchMigrated([out, retval] VARIANT_BOOL* pfMigrated);
    [id(DISPID_DEFAULTSEARCHPROVIDER)] HRESULT DefaultSearchProvider([out, retval] BSTR* pbstrName);
    [id(DISPID_RUNONCEREQUIREDSETTINGSCOMPLETE)] HRESULT RunOnceRequiredSettingsComplete([in] VARIANT_BOOL fComplete);
    [id(DISPID_RUNONCEHASSHOWN)] HRESULT RunOnceHasShown([out, retval] VARIANT_BOOL* pfShown);
    [id(DISPID_SEARCHGUIDEURL)] HRESULT SearchGuideUrl([out, retval] BSTR* pbstrUrl);
}

[

    uuid(528DF2EC-D419-40bc-9B6D-DCDBF9C1B25D),     // IID_IShellUIHelper3

    helpstring("Shell UI Helper Control Interface 3"),
    oleautomation, dual
]
interface IShellUIHelper3 : IShellUIHelper2
{
    [id(DISPID_ADDSERVICE)] HRESULT AddService([in] BSTR URL);
    [id(DISPID_ISSERVICEINSTALLED)] HRESULT IsServiceInstalled([in] BSTR URL, [in] BSTR Verb, [out, retval] DWORD* pdwResult);
    [id(DISPID_INPRIVATEFILTERINGENABLED)] HRESULT InPrivateFilteringEnabled([out, retval] VARIANT_BOOL* pfEnabled);
    [id(DISPID_ADDTOFAVORITESBAR)] HRESULT AddToFavoritesBar([in] BSTR URL, [in] BSTR Title, [optional, in] VARIANT* Type);
    [id(DISPID_BUILDNEWTABPAGE)] HRESULT BuildNewTabPage();
    [id(DISPID_SETRECENTLYCLOSEDVISIBLE)] HRESULT SetRecentlyClosedVisible([in] VARIANT_BOOL fVisible);
    [id(DISPID_SETACTIVITIESVISIBLE)] HRESULT SetActivitiesVisible([in] VARIANT_BOOL fVisible);
    [id(DISPID_CONTENTDISCOVERYRESET)] HRESULT ContentDiscoveryReset();
    [id(DISPID_SUGGESTEDSITESENABLED)] HRESULT IsSuggestedSitesEnabled([out, retval] VARIANT_BOOL* pfEnabled);
    [id(DISPID_ENABLESUGGESTEDSITES)] HRESULT EnableSuggestedSites([in] VARIANT_BOOL fEnable);
    [id(DISPID_NAVIGATETOSUGGESTEDSITES)] HRESULT NavigateToSuggestedSites([in] BSTR bstrRelativeUrl);
    [id(DISPID_SHOWTABSHELP)] HRESULT ShowTabsHelp();
    [id(DISPID_SHOWINPRIVATEHELP)] HRESULT ShowInPrivateHelp();
}

[
    uuid(B36E6A53-8073-499E-824C-D776330A333E),     // IID_IShellUIHelper4

    helpstring("Shell UI Helper Control Interface 4"),
    oleautomation, dual
]
interface IShellUIHelper4 : IShellUIHelper3
{
    [id(DISPID_ISSITEMODE)] HRESULT msIsSiteMode([out, retval] VARIANT_BOOL* pfSiteMode);
    [id(DISPID_SETTHUMBNAILBUTTONS)] HRESULT msSiteModeShowThumbBar();
    [id(DISPID_ADDTHUMBNAILBUTTONS)] HRESULT msSiteModeAddThumbBarButton([in] BSTR bstrIconURL, [in] BSTR bstrTooltip, [out, retval] VARIANT* pvarButtonID);
    [id(DISPID_UPDATETHUMBNAILBUTTON)] HRESULT msSiteModeUpdateThumbBarButton([in] VARIANT ButtonID, [in] VARIANT_BOOL fEnabled, [in] VARIANT_BOOL fVisible);
    [id(DISPID_SETSITEMODEICONOVERLAY)] HRESULT msSiteModeSetIconOverlay([in] BSTR IconUrl, [optional, in] VARIANT* pvarDescription);
    [id(DISPID_CLEARSITEMODEICONOVERLAY)] HRESULT msSiteModeClearIconOverlay();
    [id(DISPID_ADDSITEMODE)] HRESULT msAddSiteMode();
    [id(DISPID_SITEMODECREATEJUMPLIST)] HRESULT msSiteModeCreateJumpList([in] BSTR bstrHeader);
    [id(DISPID_SITEMODEADDJUMPLISTITEM)] HRESULT msSiteModeAddJumpListItem([in] BSTR bstrName, [in] BSTR bstrActionUri, [in] BSTR bstrIconUri, [optional, in] VARIANT* pvarWindowType);
    [id(DISPID_SITEMODECLEARJUMPLIST)] HRESULT msSiteModeClearJumpList();
    [id(DISPID_SITEMODESHOWJUMPLIST)] HRESULT msSiteModeShowJumpList();
    [id(DISPID_SITEMODEADDBUTTONSTYLE)] HRESULT msSiteModeAddButtonStyle([in] VARIANT uiButtonID, [in] BSTR bstrIconUrl, [in] BSTR bstrTooltip, [out, retval] VARIANT* pvarStyleID);
    [id(DISPID_SITEMODESHOWBUTTONSTYLE)] HRESULT msSiteModeShowButtonStyle([in] VARIANT uiButtonID, [in] VARIANT uiStyleID);
    [id(DISPID_SITEMODEACTIVATE)] HRESULT msSiteModeActivate();
    [id(DISPID_ISSITEMODEFIRSTRUN)] HRESULT msIsSiteModeFirstRun([in] VARIANT_BOOL fPreserveState, [out, retval] VARIANT* puiFirstRun);
    [id(DISPID_ADDTRACKINGPROTECTIONLIST)] HRESULT msAddTrackingProtectionList([in] BSTR URL, [in] BSTR bstrFilterName);
    [id(DISPID_TRACKINGPROTECTIONENABLED)] HRESULT msTrackingProtectionEnabled([out, retval] VARIANT_BOOL* pfEnabled);
    [id(DISPID_ACTIVEXFILTERINGENABLED)] HRESULT msActiveXFilteringEnabled([out, retval] VARIANT_BOOL* pfEnabled);
}

[
    uuid(A2A08B09-103D-4D3F-B91C-EA455CA82EFA),     // IID_IShellUIHelper5

    helpstring("Shell UI Helper Control Interface 5"),
    oleautomation, dual
]
interface IShellUIHelper5 : IShellUIHelper4
{
    [id(DISPID_PROVISIONNETWORKS)] HRESULT msProvisionNetworks([in] BSTR bstrProvisioningXml, [out, retval] VARIANT* puiResult);
    [id(DISPID_REPORTSAFEURL)] HRESULT msReportSafeUrl();
    [id(DISPID_SITEMODEREFRESHBADGE)] HRESULT msSiteModeRefreshBadge();
    [id(DISPID_SITEMODECLEARBADGE)] HRESULT msSiteModeClearBadge();
    [id(DISPID_DIAGNOSECONNECTIONUILESS)] HRESULT msDiagnoseConnectionUILess();
    [id(DISPID_LAUNCHNETWORKCLIENTHELP)] HRESULT msLaunchNetworkClientHelp();
    [id(DISPID_CHANGEDEFAULTBROWSER)] HRESULT msChangeDefaultBrowser([in] VARIANT_BOOL fChange);
}

[
    uuid(987A573E-46EE-4E89-96AB-DDF7F8FDC98C),     // IID_IShellUIHelper6 

    helpstring("Shell UI Helper Control Interface 6"),
    oleautomation, dual
]
interface IShellUIHelper6 : IShellUIHelper5
{
    [id(DISPID_STOPPERIODICUPDATE)] HRESULT msStopPeriodicTileUpdate();
    [id(DISPID_STARTPERIODICUPDATE)] HRESULT msStartPeriodicTileUpdate([in] VARIANT pollingUris, [optional, in] VARIANT startTime, [optional, in] VARIANT uiUpdateRecurrence);
    [id(DISPID_STARTPERIODICUPDATEBATCH)] HRESULT msStartPeriodicTileUpdateBatch([in] VARIANT pollingUris, [optional, in] VARIANT startTime, [optional, in] VARIANT uiUpdateRecurrence);
    [id(DISPID_CLEARNOTIFICATION)] HRESULT msClearTile();
    [id(DISPID_ENABLENOTIFICATIONQUEUE)] HRESULT msEnableTileNotificationQueue([in] VARIANT_BOOL fChange);
    [id(DISPID_PINNEDSITESTATE)] HRESULT msPinnedSiteState([out, retval] VARIANT* pvarSiteState);
    [id(DISPID_ENABLENOTIFICATIONQUEUESQUARE)] HRESULT msEnableTileNotificationQueueForSquare150x150([in] VARIANT_BOOL fChange);
    [id(DISPID_ENABLENOTIFICATIONQUEUEWIDE)] HRESULT msEnableTileNotificationQueueForWide310x150([in] VARIANT_BOOL fChange);
    [id(DISPID_ENABLENOTIFICATIONQUEUELARGE)] HRESULT msEnableTileNotificationQueueForSquare310x310([in] VARIANT_BOOL fChange);
    [id(DISPID_SCHEDULEDTILENOTIFICATION)] HRESULT msScheduledTileNotification([in] BSTR bstrNotificationXml, [in] BSTR bstrNotificationId, [in] BSTR bstrNotificationTag, [optional, in] VARIANT startTime, [optional, in] VARIANT expirationTime);
    [id(DISPID_REMOVESCHEDULEDTILENOTIFICATION)] HRESULT msRemoveScheduledTileNotification([in] BSTR bstrNotificationId);
    [id(DISPID_STARTBADGEUPDATE)] HRESULT msStartPeriodicBadgeUpdate([in] BSTR pollingUri, [optional, in] VARIANT startTime, [optional, in] VARIANT uiUpdateRecurrence);
    [id(DISPID_STOPBADGEUPDATE)] HRESULT msStopPeriodicBadgeUpdate();
    [id(DISPID_LAUNCHINTERNETOPTIONS)] HRESULT msLaunchInternetOptions();
}

[
    uuid(60E567C8-9573-4AB2-A264-637C6C161CB1),     // IID_IShellUIHelper7

    helpstring("Shell UI Helper Control Interface 7"),
    oleautomation, dual
]
interface IShellUIHelper7 : IShellUIHelper6
{
    [id(DISPID_GETEXPERIMENTALFLAG)] HRESULT SetExperimentalFlag([in] BSTR bstrFlagString, [in] VARIANT_BOOL vfFlag);
    [id(DISPID_SETEXPERIMENTALFLAG)] HRESULT GetExperimentalFlag([in] BSTR bstrFlagString, [out, retval] VARIANT_BOOL* vfFlag);
    [id(DISPID_SETEXPERIMENTALVALUE)] HRESULT SetExperimentalValue([in] BSTR bstrValueString, [in] DWORD dwValue);
    [id(DISPID_GETEXPERIMENTALVALUE)] HRESULT GetExperimentalValue([in] BSTR bstrValueString, [out, retval] DWORD* pdwValue);
    [id(DISPID_RESETEXPERIMENTALFLAGS)] HRESULT ResetAllExperimentalFlagsAndValues();
    [id(DISPID_GETNEEDIEAUTOLAUNCHFLAG)] HRESULT GetNeedIEAutoLaunchFlag([in] BSTR bstrUrl, [out, retval] VARIANT_BOOL* flag);
    [id(DISPID_SETNEEDIEAUTOLAUNCHFLAG)] HRESULT SetNeedIEAutoLaunchFlag([in] BSTR bstrUrl, [in] VARIANT_BOOL flag);
    [id(DISPID_HASNEEDIEAUTOLAUNCHFLAG)] HRESULT HasNeedIEAutoLaunchFlag([in] BSTR bstrUrl, [out, retval] VARIANT_BOOL* exists);
    [id(DISPID_LAUNCHIE)] HRESULT LaunchIE([in] BSTR bstrUrl, [in] VARIANT_BOOL automated);
}

[
    uuid(66DEBCF2-05B0-4F07-B49B-B96241A65DB2),     // IID_IShellUIHelper8

    helpstring("Shell UI Helper Control Interface 8"),
    oleautomation, dual
]
interface IShellUIHelper8 : IShellUIHelper7
{
    [id(DISPID_GETCVLISTDATA)] HRESULT GetCVListData([out, retval] BSTR* pbstrResult);
    [id(DISPID_GETCVLISTLOCALDATA)] HRESULT GetCVListLocalData([out, retval] BSTR* pbstrResult);
    [id(DISPID_GETEMIELISTDATA)] HRESULT GetEMIEListData([out, retval] BSTR* pbstrResult);
    [id(DISPID_GETEMIELISTLOCALDATA)] HRESULT GetEMIEListLocalData([out, retval] BSTR* pbstrResult);
    [id(DISPID_OPENFAVORITESPANE)] HRESULT OpenFavoritesPane();
    [id(DISPID_OPENFAVORITESSETTINGS)] HRESULT OpenFavoritesSettings();
    [id(DISPID_LAUNCHINHVSI)] HRESULT LaunchInHVSI([in] BSTR bstrUrl);
}

[
    uuid(6cdf73b0-7f2f-451f-bc0f-63e0f3284e54),     // IID_IShellUIHelper9

    helpstring("Shell UI Helper Control Interface 9"),
    oleautomation, dual
]
interface IShellUIHelper9 : IShellUIHelper8
{
    [id(DISPID_GETOSSKU)] HRESULT GetOSSku([out, retval] DWORD* pdwResult);
}

[
    uuid(64AB4BB7-111E-11d1-8F79-00C04FC2FBE1)  // CLSID_ShellUIHelper
]
coclass ShellUIHelper
{
    [default] interface IShellUIHelper9;
}

[
    uuid(55136806-B2DE-11D1-B9F2-00A0C98BC547)      //DIID_DShellNameSpaceEvents
]
dispinterface DShellNameSpaceEvents
{
    properties:
    methods:
        [id(DISPID_FAVSELECTIONCHANGE)]
            void FavoritesSelectionChange([in] long cItems,[in] long hItem,[in] BSTR strName,
                         [in] BSTR strUrl,[in] long cVisits,[in] BSTR strDate,
                         [in] BOOL fAvailableOffline);
        [id(DISPID_SELECTIONCHANGE)]
            void SelectionChange();
        [id(DISPID_DOUBLECLICK)]
            void DoubleClick();
        [id(DISPID_INITIALIZED)]
            void Initialized();
}

[
    //object,
    uuid(55136804-B2DE-11D1-B9F2-00A0C98BC547),     //IID_IShellFavoritesNameSpace
    dual,
    helpstring("IShellFavoritesNameSpace Interface"),
    //pointer_default(unique),
    //hidden
]
interface IShellFavoritesNameSpace : IDispatch
{
    [id(DISPID_MOVESELECTIONUP), helpstring("method MoveSelectionUp")]
    HRESULT MoveSelectionUp();
    [id(DISPID_MOVESELECTIONDOWN), helpstring("method MoveSelectionDown")]
    HRESULT MoveSelectionDown();
    [id(DISPID_RESETSORT), helpstring("method ResetSort")]
    HRESULT ResetSort();
    [id(DISPID_NEWFOLDER), helpstring("method NewFolder")]
    HRESULT NewFolder();
    [id(DISPID_SYNCHRONIZE), helpstring("method Synchronize")]
    HRESULT Synchronize();
    [id(DISPID_IMPORT), helpstring("method Import")]
    HRESULT Import();
    [id(DISPID_EXPORT), helpstring("method Export")]
    HRESULT Export();
    [id(DISPID_INVOKECONTEXTMENU), helpstring("method InvokeContextMenuCommand")]
    HRESULT InvokeContextMenuCommand([in] BSTR strCommand);
    [id(DISPID_MOVESELECTIONTO), helpstring("method MoveSelectionTo")]
    HRESULT MoveSelectionTo();
    [propget, id(DISPID_SUBSCRIPTIONSENABLED), helpstring("Query to see if subscriptions are enabled")]
    HRESULT SubscriptionsEnabled([out, retval] VARIANT_BOOL* pBool);
    [id(DISPID_CREATESUBSCRIPTION), helpstring("method CreateSubscriptionForSelection")]
    HRESULT CreateSubscriptionForSelection([out, retval] VARIANT_BOOL* pBool);
    [id(DISPID_DELETESUBSCRIPTION), helpstring("method DeleteSubscriptionForSelection")]
    HRESULT DeleteSubscriptionForSelection([out, retval] VARIANT_BOOL* pBool);

    [id(DISPID_SETROOT), helpstring("old, use put_Root() instead")]
    HRESULT SetRoot([in] BSTR bstrFullPath);
}

[
    //object,
    uuid(e572d3c9-37be-4ae2-825d-d521763e3108),     // IID_IShellNameSpace
    dual,
    helpstring("IShellNameSpace Interface"),
    //pointer_default(unique),
    //hidden
]
interface IShellNameSpace : IShellFavoritesNameSpace
{
    [propget, id(DISPID_ENUMOPTIONS), helpstring("options ")]
    HRESULT EnumOptions([out, retval] LONG* pgrfEnumFlags);
    [propput, id(DISPID_ENUMOPTIONS), helpstring("options ")]
    HRESULT EnumOptions([in] LONG lVal);

    [propget, id(DISPID_SELECTEDITEM), helpstring("get the selected item")]
    HRESULT SelectedItem([out, retval] IDispatch** pItem);
    [propput, id(DISPID_SELECTEDITEM), helpstring("select an item in the tree")]
    HRESULT SelectedItem([in] IDispatch* pItem);

    [propget, id(DISPID_ROOT), helpstring("get the root item")]
    HRESULT Root([out, retval] VARIANT* pvar);
    [propput, id(DISPID_ROOT), helpstring("set the root")]
    HRESULT Root([in] VARIANT var);
    [propget, id(DISPID_DEPTH)]
    HRESULT Depth([out, retval] int* piDepth);
    [propput, id(DISPID_DEPTH)]
    HRESULT Depth([in] int iDepth);
    [propget, id(DISPID_MODE)]
    HRESULT Mode([out, retval] UINT* puMode);
    [propput, id(DISPID_MODE)]
    HRESULT Mode([in] UINT uMode);
    [propget, id(DISPID_FLAGS)]
    HRESULT Flags([out, retval] DWORD* pdwFlags);
    [propput, id(DISPID_FLAGS)]
    HRESULT Flags([in] DWORD dwFlags);
    [propput, id(DISPID_TVFLAGS)]
    HRESULT TVFlags([in] DWORD dwFlags);
    [propget, id(DISPID_TVFLAGS)]
    HRESULT TVFlags([out, retval] DWORD* dwFlags);
    [propget, id(DISPID_NSCOLUMNS)]
    HRESULT Columns([out, retval] BSTR* bstrColumns);
    [propput, id(DISPID_NSCOLUMNS)]
    HRESULT Columns([in] BSTR bstrColumns);
    [propget, id(DISPID_COUNTVIEWTYPES), helpstring("number of view types")]
    HRESULT CountViewTypes([out, retval] int* piTypes);
    [id(DISPID_SETVIEWTYPE), helpstring("set view type")]
    HRESULT SetViewType([in] int iType);
    [id(DISPID_SELECTEDITEMS), helpstring("collection of selected items")]
    HRESULT SelectedItems([out, retval] IDispatch** ppid);
    [id(DISPID_EXPAND), helpstring("expands item specified depth")]
    HRESULT Expand([in] VARIANT var, [in] int iDepth);
    //[propget,id(DISPID_READYSTATE), helpstring("return ready state of the control")]
    //    HRESULT ReadyState([retval, out] READYSTATE * plReadyState);
    [id(DISPID_UNSELECTALL), helpstring("unselects all items")]
    HRESULT UnselectAll();
}

[
    uuid(55136805-B2DE-11D1-B9F2-00A0C98BC547)      // CLSID_ShellNameSpace
]
coclass ShellNameSpace
{
    [default] interface IShellNameSpace;
    [default, source] dispinterface DShellNameSpaceEvents;
};

[
    uuid(F3470F24-15FD-11d2-BB2E-00805FF7EFCA), // IID_IScriptErrorList
    helpstring("Script Error List Interface"),
    oleautomation,
    //hidden,
    dual,
]
interface IScriptErrorList : IDispatch
{
    // navigation through list of errors
    [id(DISPID_ADVANCEERROR)] HRESULT advanceError();
    [id(DISPID_RETREATERROR)] HRESULT retreatError();
    [id(DISPID_CANADVANCEERROR)] HRESULT canAdvanceError([out, retval] BOOL* pfCanAdvance);
    [id(DISPID_CANRETREATERROR)] HRESULT canRetreatError([out, retval] BOOL* pfCanRetreat);

    // data access for the current error in the error list
    [id(DISPID_GETERRORLINE)] HRESULT getErrorLine([out, retval] LONG* plLine);
    [id(DISPID_GETERRORCHAR)] HRESULT getErrorChar([out, retval] LONG* plChar);
    [id(DISPID_GETERRORCODE)] HRESULT getErrorCode([out, retval] LONG* plCode);
    [id(DISPID_GETERRORMSG)] HRESULT getErrorMsg([out, retval] BSTR* pstr);
    [id(DISPID_GETERRORURL)] HRESULT getErrorUrl([out, retval] BSTR* pstr);

    [id(DISPID_GETALWAYSSHOWLOCKSTATE)] HRESULT getAlwaysShowLockState([out, retval] BOOL* pfAlwaysShowLocked);
    [id(DISPID_GETDETAILSSTATE)] HRESULT getDetailsPaneOpen([out, retval] BOOL* pfDetailsPaneOpen);
    [id(DISPID_SETDETAILSSTATE)] HRESULT setDetailsPaneOpen([in] BOOL fDetailsPaneOpen);
    [id(DISPID_GETPERERRSTATE)] HRESULT getPerErrorDisplay([out, retval] BOOL* pfPerErrorDisplay);
    [id(DISPID_SETPERERRSTATE)] HRESULT setPerErrorDisplay([in] BOOL fPerErrorDisplay);
}
[
    uuid(EFD01300-160F-11d2-BB2E-00805FF7EFCA),  // CLSID_ScriptErrorList
    hidden,
    noncreatable,
]
coclass CScriptErrorList
{
    [default] interface IScriptErrorList;
}


[
	uuid(EAB22AC3-30C1-11CF-A7EB-0000C05BAE0B), // v.1 clsid CLSID_WebBrowser_V1
	control,
	helpstring("WebBrowser Control")
]
coclass WebBrowser_V1
{
	interface     IWebBrowser2;
	[default] interface     IWebBrowser;
	[source] dispinterface DWebBrowserEvents2;
	[default, source] dispinterface DWebBrowserEvents;
}

[
	uuid(8856F961-340A-11D0-A96B-00C04FD705A2), // v.2 clsid CLSID_WebBrowser
	control,
	helpstring("WebBrowser Control")
]
coclass WebBrowser
{
	[default] interface     IWebBrowser2;
	interface     IWebBrowser;
	[default, source] dispinterface DWebBrowserEvents2;
	[source] dispinterface DWebBrowserEvents;
}

[
	uuid(0002DF01-0000-0000-C000-000000000046), // CLSID_InternetExplorer
	helpstring("Internet Explorer Application."),
]
coclass InternetExplorer
{
	[default] interface     IWebBrowser2;
	interface     IWebBrowserApp;
	[default, source] dispinterface DWebBrowserEvents2;
	[source] dispinterface DWebBrowserEvents;
}

[
	uuid(D5E8041D-920F-45e9-B8FB-B1DEB82C6E5E), // CLSID_InternetExplorerMedium
	helpstring("Internet Explorer Application with default integrity of Medium"),
]
coclass InternetExplorerMedium
{
	[default] interface     IWebBrowser2;
	interface     IWebBrowserApp;
	[default, source] dispinterface DWebBrowserEvents2;
	[source] dispinterface DWebBrowserEvents;
}

[
	uuid(c08afd90-f2a1-11d1-8455-00a0c91f3880), // CLSID_ShellBrowserWindow
	helpstring("Shell Browser Window."),
	hidden,
	noncreatable,
]
coclass ShellBrowserWindow
{
	[default] interface     IWebBrowser2;
	interface     IWebBrowserApp;
	[default, source] dispinterface DWebBrowserEvents2;
	[source] dispinterface DWebBrowserEvents;
}