//SensorsApi.h, locationapi.h

typedef /* [public][public][public][public] */
enum SensorState
{
    SENSOR_STATE_MIN = 0,
    SENSOR_STATE_READY, // = SENSOR_STATE_MIN,
    SENSOR_STATE_NOT_AVAILABLE, // = (SENSOR_STATE_READY + 1),
    SENSOR_STATE_NO_DATA, // = (SENSOR_STATE_NOT_AVAILABLE + 1),
    SENSOR_STATE_INITIALIZING, // = (SENSOR_STATE_NO_DATA + 1),
    SENSOR_STATE_ACCESS_DENIED, // = (SENSOR_STATE_INITIALIZING + 1),
    SENSOR_STATE_ERROR, // = (SENSOR_STATE_ACCESS_DENIED + 1),
    SENSOR_STATE_MAX // = SENSOR_STATE_ERROR
} 	SensorState;

typedef /* [public] */
enum SensorConnectionType
{
    SENSOR_CONNECTION_TYPE_PC_INTEGRATED = 0,
    SENSOR_CONNECTION_TYPE_PC_ATTACHED = 1, //(SENSOR_CONNECTION_TYPE_PC_INTEGRATED + 1),
    SENSOR_CONNECTION_TYPE_PC_EXTERNAL = 2 //(SENSOR_CONNECTION_TYPE_PC_ATTACHED + 1)
} 	SensorConnectionType;

typedef
enum LOCATION_DESIRED_ACCURACY
{
    LOCATION_DESIRED_ACCURACY_DEFAULT = 0,
    LOCATION_DESIRED_ACCURACY_HIGH //= (LOCATION_DESIRED_ACCURACY_DEFAULT + 1)
} 	LOCATION_DESIRED_ACCURACY;

typedef
enum LOCATION_POSITION_SOURCE
{
    LOCATION_POSITION_SOURCE_CELLULAR = 0,
    LOCATION_POSITION_SOURCE_SATELLITE, //= (LOCATION_POSITION_SOURCE_CELLULAR + 1),
    LOCATION_POSITION_SOURCE_WIFI, //= (LOCATION_POSITION_SOURCE_SATELLITE + 1),
    LOCATION_POSITION_SOURCE_IPADDRESS, //= (LOCATION_POSITION_SOURCE_WIFI + 1),
    LOCATION_POSITION_SOURCE_UNKNOWN //= (LOCATION_POSITION_SOURCE_IPADDRESS + 1)
} 	LOCATION_POSITION_SOURCE;

typedef
enum SimpleDeviceOrientation
{
    SIMPLE_DEVICE_ORIENTATION_NOT_ROTATED = 0,
    SIMPLE_DEVICE_ORIENTATION_ROTATED_90, // = (SIMPLE_DEVICE_ORIENTATION_NOT_ROTATED + 1),
    SIMPLE_DEVICE_ORIENTATION_ROTATED_180, // = (SIMPLE_DEVICE_ORIENTATION_ROTATED_90 + 1),
    SIMPLE_DEVICE_ORIENTATION_ROTATED_270, // = (SIMPLE_DEVICE_ORIENTATION_ROTATED_180 + 1),
    SIMPLE_DEVICE_ORIENTATION_ROTATED_FACE_UP, // = (SIMPLE_DEVICE_ORIENTATION_ROTATED_270 + 1),
    SIMPLE_DEVICE_ORIENTATION_ROTATED_FACE_DOWN, // = (SIMPLE_DEVICE_ORIENTATION_ROTATED_FACE_UP + 1)
} 	SimpleDeviceOrientation;

typedef
enum MagnetometerAccuracy
{
    MAGNETOMETER_ACCURACY_UNKNOWN = 0,
    MAGNETOMETER_ACCURACY_UNRELIABLE, // = (MAGNETOMETER_ACCURACY_UNKNOWN + 1),
    MAGNETOMETER_ACCURACY_APPROXIMATE, // = (MAGNETOMETER_ACCURACY_UNRELIABLE + 1),
    MAGNETOMETER_ACCURACY_HIGH, // = (MAGNETOMETER_ACCURACY_APPROXIMATE + 1)
} 	MagnetometerAccuracy;

typedef UUID SENSOR_CATEGORY_ID;

typedef REFGUID REFSENSOR_CATEGORY_ID;

typedef UUID SENSOR_TYPE_ID;

typedef REFGUID REFSENSOR_TYPE_ID;

typedef UUID SENSOR_ID;

typedef REFGUID REFSENSOR_ID;

interface ISensorCollection;
interface ISensor;
interface ISensorManagerEvents;
interface ISensorDataReport;
interface ISensorEvents;

[
    odl,
    uuid(BD77DB67-45A8-42DC-8D00-6DCF15F8377A)
]
interface ISensorManager : stdole.IUnknown
{
    HRESULT GetSensorsByCategory(
        [in] REFSENSOR_CATEGORY_ID sensorCategory,
        [out] ISensorCollection * *ppSensorsFound);

    HRESULT GetSensorsByType(
        [in] REFSENSOR_TYPE_ID sensorType,
       [out]  ISensorCollection** ppSensorsFound);

    HRESULT GetSensorByID(
        [in] REFSENSOR_ID sensorID,
       [out]  ISensor** ppSensor);

    HRESULT SetEventSink(
        [in] ISensorManagerEvents* pEvents);

    HRESULT RequestPermissions(
        [in] LongPtr hParent,
        [in] ISensorCollection* pSensors,
        [in] BOOL fModal);

}

[
    odl,
    uuid(D5FB0A7F-E74E-44f5-8E02-4806863A274F)
]
interface ILocationPermissions : stdole.IUnknown
{
    HRESULT GetGlobalLocationPermission(
        [out] BOOL * pfEnabled);

    HRESULT CheckLocationCapability(
        [in] DWORD dwClientThreadId);

};


[
    odl,
    uuid(23571E11-E545-4DD8-A337-B89BF44B10DF)
]
interface ISensorCollection : stdole.IUnknown
{

    HRESULT GetAt(
        [in] ULONG ulIndex,
       [out]  ISensor * *ppSensor);

    HRESULT GetCount(
        [out] ULONG* pCount);

    HRESULT Add(
        [in] ISensor* pSensor);

    HRESULT Remove(
        [in] ISensor* pSensor);

    HRESULT RemoveByID(
        [in] REFSENSOR_ID sensorID);

    HRESULT Clear(void);

};

[
    odl,
    uuid(5FA08F80-2657-458E-AF75-46F73FA6AC5C)
]
interface ISensor : stdole.IUnknown
{

    HRESULT GetID(
        [out] SENSOR_ID * pID);

    HRESULT GetCategory(
        [out] SENSOR_CATEGORY_ID* pSensorCategory);

    HRESULT GetType(
        [out] SENSOR_TYPE_ID* pSensorType);

    HRESULT GetFriendlyName(
       [out]  BSTR* pFriendlyName);

    HRESULT GetProperty(
        [in] REFPROPERTYKEY key,
        [out] VARIANT* pProperty);

    HRESULT GetProperties(
        [in] IPortableDeviceKeyCollection* pKeys,
       [out]  IPortableDeviceValues** ppProperties);

    HRESULT GetSupportedDataFields(
       [out]  IPortableDeviceKeyCollection** ppDataFields);

    HRESULT SetProperties(
        [in] IPortableDeviceValues* pProperties,
       [out]  IPortableDeviceValues** ppResults);

    HRESULT SupportsDataField(
        [in] REFPROPERTYKEY key,
        [out] VARIANT_BOOL* pIsSupported);

    HRESULT GetState(
        [out] SensorState* pState);

    HRESULT GetData(
       [out]  ISensorDataReport** ppDataReport);

    HRESULT SupportsEvent(
        [in] REFGUID eventGuid,
        [out] VARIANT_BOOL* pIsSupported);

    HRESULT GetEventInterest(
        [out] LongPtr *ppValues,
        [out] ULONG* pCount);

    HRESULT SetEventInterest(
        [in] UUID* pValues,
        [in] ULONG count);

    HRESULT SetEventSink(
        [in] ISensorEvents* pEvents);

};

[
    odl,
    uuid(0AB9DF9B-C4B5-4796-8898-0470706A2E1D)
]
interface ISensorDataReport : stdole.IUnknown
{

    HRESULT GetTimestamp(
        [out] SYSTEMTIME * pTimeStamp);

    HRESULT GetSensorValue(
        [in] REFPROPERTYKEY pKey,
        [out] VARIANT* pValue);

    HRESULT GetSensorValues(
        [in] IPortableDeviceKeyCollection* pKeys,
       [out]  IPortableDeviceValues** ppValues);

};

[
    odl,
    uuid(9B3B0B86-266A-4AAD-B21F-FDE5501001B7)
]
interface ISensorManagerEvents : stdole.IUnknown
{

    HRESULT OnSensorEnter(
        [in] ISensor * pSensor,
        [in] SensorState state);

};


[
    odl,
    uuid(5D8DCC91-4641-47E7-B7C3-B74F48A6C391)
]
interface ISensorEvents : stdole.IUnknown
{

    HRESULT OnStateChanged(
        [in] ISensor * pSensor,
        [in] SensorState state);

    HRESULT OnDataUpdated(
        [in] ISensor* pSensor,
        [in] ISensorDataReport* pNewData);

    HRESULT OnEvent(
        [in] ISensor* pSensor,
        [in] REFGUID eventID,
        [in] IPortableDeviceValues* pEventData);

    HRESULT OnLeave(
        [in] REFSENSOR_ID ID);

};


//CLSID_SensorManager;
[uuid(77A1C827-FCD2-4689-8915-9D613CC5FA3E)] coclass SensorManager {[default] interface ISensorManager; }

//CLSID_SensorCollection;
[uuid(79C43ADB-A429-469F-AA39-2F2B74B75937)] coclass SensorCollection {[default] interface ISensorCollection; }

//CLSID_Sensor;
[uuid(E97CED00-523A-4133-BF6F-D3A2DAE7F6BA)] coclass Sensor {[default] interface ISensor; }

//CLSID_SensorDataReport;
[uuid(4EA9D6EF-694B-4218-8816-CCDA8DA74BBA)] coclass SensorDataReport {[default] interface ISensorDataReport; }










typedef
enum LOCATION_REPORT_STATUS
{
    REPORT_NOT_SUPPORTED = 0,
    REPORT_ERROR = 1,
    REPORT_ACCESS_DENIED = 2,
    REPORT_INITIALIZING = 3,
    REPORT_RUNNING = 4
} 	LOCATION_REPORT_STATUS;

[
    odl,
    uuid(C8B7F7EE-75D0-4db9-B62D-7A0F369CA456)
]
interface ILocationReport : stdole.IUnknown
{

    HRESULT GetSensorID(
        [out, retval] SENSOR_ID * pSensorID);

    HRESULT GetTimestamp(
        [out, retval] SYSTEMTIME* pCreationTime);

    HRESULT GetValue(
        [in] REFPROPERTYKEY pKey,
        [out, retval] VARIANT* pValue);

};

[
    odl,
    uuid(7FED806D-0EF8-4f07-80AC-36A0BEAE3134)
]
interface ILatLongReport : ILocationReport
{

    HRESULT GetLatitude(
        [out, retval] DOUBLE * pLatitude);

    HRESULT GetLongitude(
        [out, retval] DOUBLE* pLongitude);

    HRESULT GetErrorRadius(
        [out, retval] DOUBLE* pErrorRadius);

    HRESULT GetAltitude(
        [out, retval] DOUBLE* pAltitude);

    HRESULT GetAltitudeError(
        [out, retval] DOUBLE* pAltitudeError);

};


[
    odl,
    uuid(C0B19F70-4ADF-445d-87F2-CAD8FD711792)
]
interface ICivicAddressReport : ILocationReport
{

    HRESULT GetAddressLine1(
        [out, retval] BSTR * pbstrAddress1);

    HRESULT GetAddressLine2(
        [out, retval] BSTR* pbstrAddress2);

    HRESULT GetCity(
        [out, retval] BSTR* pbstrCity);

    HRESULT GetStateProvince(
        [out, retval] BSTR* pbstrStateProvince);

    HRESULT GetPostalCode(
        [out, retval] BSTR* pbstrPostalCode);

    HRESULT GetCountryRegion(
        [out, retval] BSTR* pbstrCountryRegion);

    HRESULT GetDetailLevel(
        [out, retval] DWORD* pDetailLevel);

};

interface ILocationEvents;

[
    odl,
    uuid(AB2ECE69-56D9-4F28-B525-DE1B0EE44237)
]
interface ILocation : stdole.IUnknown
{

    HRESULT RegisterForReport(
        [in] ILocationEvents * pEvents,
        [in] REFIID reportType,
        [in] DWORD dwRequestedReportInterval);

    HRESULT UnregisterForReport(
        [in] REFIID reportType);

    HRESULT GetReport(
        [in] REFIID reportType,
        [out, retval] ILocationReport** ppLocationReport);

    HRESULT GetReportStatus(
        [in] REFIID reportType,
        [out, retval] LOCATION_REPORT_STATUS* pStatus);

    HRESULT GetReportInterval(
        [in] REFIID reportType,
        [out, retval] DWORD* pMilliseconds);

    HRESULT SetReportInterval(
        [in] REFIID reportType,
        [in] DWORD millisecondsRequested);

    HRESULT GetDesiredAccuracy(
        [in] REFIID reportType,
        [out, retval] LOCATION_DESIRED_ACCURACY* pDesiredAccuracy);

    HRESULT SetDesiredAccuracy(
        [in] REFIID reportType,
        [in] LOCATION_DESIRED_ACCURACY desiredAccuracy);

    HRESULT RequestPermissions(
        [in] LongPtr hParent,
        [in] UUID* pReportTypes,
        [in] ULONG count,
        [in] BOOL fModal);

};

[
    odl,
    uuid(193E7729-AB6B-4b12-8617-7596E1BB191C)
]
interface ILocationPower : stdole.IUnknown
{

    HRESULT Connect(void);

    HRESULT Disconnect(void);

};

[
    odl,
    uuid(A65AF77E-969A-4a2e-8ACA-33BB7CBB1235)
]
interface IDefaultLocation : stdole.IUnknown
{

    HRESULT SetReport(
        [in] REFIID reportType,
        [in] ILocationReport * pLocationReport);

    HRESULT GetReport(
        [in] REFIID reportType,
        [out, retval] ILocationReport** ppLocationReport);

};

[
    odl,
    uuid(CAE02BBF-798B-4508-A207-35A7906DC73D)
]
interface ILocationEvents : stdole.IUnknown
{

    HRESULT OnLocationChanged(
        [in] REFIID reportType,
        [in] ILocationReport * pLocationReport);

    HRESULT OnStatusChanged(
        [in] REFIID reportType,
        [in] LOCATION_REPORT_STATUS newStatus);

};

[
    odl,
    uuid(8AE32723-389B-4A11-9957-5BDD48FC9617)
]
interface IDispLatLongReport : stdole.IDispatch
{

    [propget] HRESULT Latitude(
        [out, retval] DOUBLE * pVal);

    [propget] HRESULT Longitude(
        [out, retval] DOUBLE* pVal);

    [propget] HRESULT ErrorRadius(
        [out, retval] DOUBLE* pVal);

    [propget] HRESULT Altitude(
        [out, retval] DOUBLE* pVal);

    [propget] HRESULT AltitudeError(
        [out, retval] DOUBLE* pVal);

    [propget] HRESULT Timestamp(
        [out, retval] DATE* pVal);

};

[
    odl,
    uuid(16FF1A34-9E30-42c3-B44D-E22513B5767A)
]
interface IDispCivicAddressReport : stdole.IDispatch
{

    [propget] HRESULT AddressLine1(
        [out, retval] BSTR * pAddress1);

    [propget] HRESULT AddressLine2(
        [out, retval] BSTR* pAddress2);

    [propget] HRESULT City(
        [out, retval] BSTR* pCity);

    [propget] HRESULT StateProvince(
        [out, retval] BSTR* pStateProvince);

    [propget] HRESULT PostalCode(
        [out, retval] BSTR* pPostalCode);

    [propget] HRESULT CountryRegion(
        [out, retval] BSTR* pCountryRegion);

    [propget] HRESULT DetailLevel(
        [out, retval] ULONG* pDetailLevel);

    [propget] HRESULT Timestamp(
        [out, retval] DATE* pVal);

};

[
    odl,
    uuid(2DAEC322-90B2-47e4-BB08-0DA841935A6B)
]
interface ILocationReportFactory : stdole.IDispatch
{

    HRESULT ListenForReports(
        [in] ULONG requestedReportInterval);

    HRESULT StopListeningForReports(void);

    [propget] HRESULT Status(
        [out, retval] ULONG* pVal);

    [propget] HRESULT ReportInterval(
        [out, retval] ULONG* pMilliseconds);

    [propput] HRESULT ReportInterval(
        [in] ULONG millisecondsRequested);

    [propget] HRESULT DesiredAccuracy(
        [out, retval] ULONG* pDesiredAccuracy);

    [propput] HRESULT DesiredAccuracy(
        [in] ULONG desiredAccuracy);

    HRESULT RequestPermissions(
        [in] ULONG* hWnd);

};

[
    odl,
    uuid(3F0804CB-B114-447D-83DD-390174EBB082)
]
interface ILatLongReportFactory : ILocationReportFactory
{

    [propget] HRESULT LatLongReport(
        [out, retval] IDispLatLongReport * *pVal);

};


[
    odl,
    uuid(BF773B93-C64F-4bee-BEB2-67C0B8DF66E0)
]
interface ICivicAddressReportFactory : ILocationReportFactory
{

    [propget] HRESULT CivicAddressReport(
        [out, retval] IDispCivicAddressReport * *pVal);

};


//CLSID_Location;
[uuid(E5B8E079-EE6D-4E33-A438-C87F2E959254)] coclass Location {[default] interface ILocation; }

//CLSID_DefaultLocation;
[uuid(8B7FBFE0-5CD7-494a-AF8C-283A65707506)] coclass DefaultLocation {[default] interface IDefaultLocation; }

//CLSID_LatLongReport;
[uuid(ED81C073-1F84-4ca8-A161-183C776BC651)] coclass LatLongReport {[default] interface ILatLongReport; }

//CLSID_CivicAddressReport;
[uuid(D39E7BDD-7D05-46b8-8721-80CF035F57D7)] coclass CivicAddressReport {[default] interface ICivicAddressReport; }


[
    odl,
    uuid(16EE6CB7-AB3C-424B-849F-269BE551FCBC)
]
interface ILatLongReportFactoryEvents : stdole.IDispatch
{
};

[
    odl,
    uuid(C96039FF-72EC-4617-89BD-84D88BEDC722)
]
interface ICivicAddressReportFactoryEvents : stdole.IDispatch
{
};

//CLSID_LatLongReportFactory;
[uuid(9DCC3CC8-8609-4863-BAD4-03601F4C65E8)] coclass LatLongReportFactory {[default] interface ILatLongReportFactory; }

//CLSID_CivicAddressReportFactory;
[uuid(2A11F42C-3E81-4ad4-9CBE-45579D89671A)] coclass CivicAddressReportFactory {[default] interface ICivicAddressReportFactory; }

//CLSID_DispLatLongReport;
[uuid(7A7C3277-8F84-4636-95B2-EBB5507FF77E)] coclass DispLatLongReport {[default] interface IDispLatLongReport;}

//CLSID_DispCivicAddressReport;
[uuid(4C596AEC-8544-4082-BA9F-EB0A7D8E65C6)] coclass DispCivicAddressReport {[default] interface IDispCivicAddressReport; }
