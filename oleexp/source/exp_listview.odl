//Undocumented ListView interfaces 
//ListView structures are not a complete set, just those needed for support

typedef struct LVFooterButton {
	BSTR pszText;
	LONG nIcon;
	LONG lId;
} LVFooterButton;


typedef struct LVITEMW
{
	UINT mask;
	int iItem;
	int iSubItem;
	UINT state;
	UINT stateMask;
	LONG pszText;
	int cchTextMax;
	int iImage;
	LONG lParam;
	int iIndent;
	int iGroupId;
	UINT cColumns; // tile view columns
	UINT puColumns;
	int piColFmt;
	int iGroup; // readonly. only valid for owner data.
} LVITEMW;
typedef struct LVBKIMAGEW
{
	LONG ulFlags;              // LVBKIF_*
	HBITMAP hbm;
	LONG pszImage;
	UINT cchImageMax;
	int xOffsetPercent;
	int yOffsetPercent;
} LVBKIMAGEW;
typedef struct LVITEMINDEX
{
	int iItem;          // listview item index
	int iGroup;         // group index (must be -1 if group view is not enabled)
} LVITEMINDEX;
typedef struct LVHITTESTINFO
{
	POINT pt;
	UINT flags;
	int iItem;
	int iSubItem;    // this is was NOT in win95.  valid only for LVM_SUBITEMHITTEST
	int iGroup; // readonly. index of group. only valid for owner data.
	// supports single item in multiple groups.
} LVHITTESTINFO;
typedef struct LVFINDINFOW
{
	UINT flags;
	LONG psz;
	LONG lParam;
	POINT pt;
	UINT vkDirection;
} LVFINDINFOW;
typedef struct LVCOLUMNW
{
	UINT mask;
	int fmt;
	int cx;
	LONG pszText;
	int cchTextMax;
	int iSubItem;
	int iImage;
	int iOrder;
	int cxMin;       // min snap point
	int cxDefault;   // default snap point
	int cxIdeal;     // read only. ideal may not eqaul current width if auto sized (LVS_EX_AUTOSIZECOLUMNS) to a lesser width.
} LVCOLUMNW;
typedef struct LVGROUP
{
	UINT    cbSize;
	UINT    mask;
	LONG    pszHeader;
	int     cchHeader;

	LONG    pszFooter;
	int     cchFooter;

	int     iGroupId;

	UINT    stateMask;
	UINT    state;
	UINT    uAlign;
	LONG    pszSubtitle;
	UINT    cchSubtitle;
	LONG    pszTask;
	UINT    cchTask;
	LONG    pszDescriptionTop;
	UINT    cchDescriptionTop;
	LONG    pszDescriptionBottom;
	UINT    cchDescriptionBottom;
	int     iTitleImage;
	int     iExtendedImage;
	int     iFirstItem;         // Read only
	UINT    cItems;             // Read only
	LONG    pszSubsetTitle;     // NULL if group is not subset
	UINT    cchSubsetTitle;

} LVGROUP;
typedef struct LVINSERTGROUPSORTED
{
	LONG pfnGroupCompare;
	LONG pvData;
	LVGROUP lvGroup;
} LVINSERTGROUPSORTED;
typedef struct LVGROUPMETRICS
{
	UINT cbSize;
	UINT mask;
	UINT Left;
	UINT Top;
	UINT Right;
	UINT Bottom;
	COLORREF crLeft;
	COLORREF crTop;
	COLORREF crRight;
	COLORREF crBottom;
	COLORREF crHeader;
	COLORREF crFooter;
} LVGROUPMETRICS;
typedef struct LVTILEVIEWINFO
{
	UINT    cbSize;
	DWORD   dwMask;     //LVTVIM_*
	DWORD   dwFlags;    //LVTVIF_*
	SIZE    sizeTile;
	int     cLines;
	RECT    rcLabelMargin;
} LVTILEVIEWINFO;

typedef struct LVTILEINFO
{
	UINT    cbSize;
	int     iItem;
	UINT    cColumns;
	UINT   puColumns;
	int    piColFmt;
} LVTILEINFO;
typedef struct LVINSERTMARK
{
	UINT cbSize;
	DWORD dwFlags;
	int iItem;
	DWORD dwReserved;
} LVINSERTMARK;
typedef struct LVSETINFOTIP
{
	UINT cbSize;
	DWORD dwFlags;
	LONG pszText;
	int iItem;
	int iSubItem;
} LVSETINFOTIP;


//[
//	odl,
//	uuid(00000114-0000-0000-C000-000000000046)
//]
//interface IOleWindow : stdole.IUnknown{
//
//	HRESULT GetWindow(
//	[out, retval] long *phwnd);
//
//	HRESULT ContextSensitiveHelp(
//		[in] BOOL fEnterMode);
//
//};

//IID_ILVRange = {96a23e16-a1bc-11d1-b084-00c04fc33aa5}
[
	odl,
	uuid(96a23e16-a1bc-11d1-b084-00c04fc33aa5)
]
interface ILVRange : stdole.IUnknown
{
	HRESULT IncludeRange([in] long iBegin, [in] long iEnd);

	HRESULT ExcludeRange([in] long iBegin, [in] long iEnd);

	HRESULT InvertRange([in] long iBegin, [in] long iEnd);

	HRESULT InsertItem([in] long iItem);

	HRESULT RemoveItem([in] long iItem);

	HRESULT Clear(void);

	HRESULT IsSelected([in] long iItem);

	HRESULT IsEmpty(void);

	HRESULT NextSelected([in] long iItem, [out] long *piItem);

	HRESULT NextUnSelected([in] long iItem, [out] long *piItem);

	HRESULT CountIncluded([out] long *pcIncluded);
};

[
	odl,
	uuid(44C09D56-8D3B-419D-A462-7B956B105B47)
]
interface IOwnerDataCallback : stdole.IUnknown
{
	HRESULT GetItemPosition(
	[in] int iItem,
	[in, out] POINT *pt);
	HRESULT SetItemPosition(
		[in] int iItem,
		[in] POINT *pt);
	HRESULT GetItemInGroup(
		[in] int groupIndex,
		[in] int groupWideItemIndex,
		[in, out] int *pTotalItemIndex);
	HRESULT GetItemGroup(
		[in] int iItem,
		[in] int occurenceIndex,
		[in, out] int *pGroupIndex);
	HRESULT GetItemGroupCount(
		[in] int iItem,
		[in, out] int *pOccurenceCount);
	HRESULT OnCacheHint(
		[in] LONG lviiFirst1,
		[in] LONG lviiFirst2,
		[in] LONG lviiLast1,
		[in] LONG lviiLast2);
}

//typedef enum PROPDESC_CONTROL_TYPE PROPDESC_CONTROL_TYPE;
//
//typedef enum PROPCTL_RECT_TYPE PROPCTL_RECT_TYPE;
[
	odl,
	uuid(6E71A510-732A-4557-9596-A827E36DAF8F)
]
interface IPropertyControlBase : stdole.IUnknown
{
	HRESULT Initialize(
	[in] LONG pUnk, //IUnknown *pUnk,
	[in] LONG pct); //PROPDESC_CONTROL_TYPE pct
	//HRESULT GetSize(
	//	[in] LONG prt, //PROPCTL_RECT_TYPE
	//	[in] LONG hdc,
	//	[in, out] LONG *siz1a, [in, out] LONG *siz1b,
	//	[in, out] SIZE *siz2a);
	HRESULT GetSize(
		[in] LONG prt, //PROPCTL_RECT_TYPE
		[in] LONG hdc,
		[in, out] SIZE *siz1,
		[in, out] SIZE *siz2);
	HRESULT SetWindowTheme(
		[in] LONG lpsz1,
		[in] LONG lpsz2);
	HRESULT SetFont(
		[in] LONG phf);
	HRESULT SetTextColor(
		[in] LONG clrText);
	HRESULT GetFlags(
		[out] LONG *dwFlags);
	HRESULT SetFlags(
		[in] LONG dwFlags);
	HRESULT AdjustWindowRectPCB(
		[in] LONG hWnd,
		[in, out] RECT *prc1,
		[in, out] RECT *prc2,
		[in] LONG unknown);
	//HRESULT AdjustWindowRectPCB(
	//	[in] LONG hWnd,
	//	[in, out] RECT* prc1,
	//	[in, out] LONG *prc2a, [in, out] LONG* prc2b, [in, out] LONG *prc2c, [in, out] LONG* prc2d,
	//	[in] LONG unknown);
	HRESULT SetValue(
		[in] IUnknown *pUnk);
	HRESULT InvokeDefaultAction();
	HRESULT Destroy();
	HRESULT SetFormatFlags(
		[in] LONG dwFlags);
	HRESULT GetFormatFlags(
		[out] LONG *dwFlags);
};


[
	odl,
	uuid(5E82A4DD-9561-476A-8634-1BEBACBA4A38)
]
interface IPropertyControl : IPropertyControlBase
{
	HRESULT GetValue(
	[in] UUID* riid,
	[in, out] LPVOID ppv);
	HRESULT Create(
		[in] LONG hWnd,
		[in] RECT *prc,
		[in, out] RECT *prc2,
		[in] LONG unknown);
	HRESULT SetPosition(
		[in] RECT *prc,
		[in] RECT *prc2);
	//HRESULT Create(
	//	[in] LONG hWnd,
	//	[in, out] LONG *prc1a, [in, out] LONG* prc1b, [in, out] LONG *prc1c, [in, out] LONG* prc1d,
	//	[in, out] LONG *prc2a, [in, out] LONG* prc2b, [in, out] LONG *prc2c, [in, out] LONG* prc2d,
	//	[in] LONG unknown);
	//HRESULT SetPosition(
	//	[in, out] LONG *prc1a, [in, out] LONG* prc1b, [in, out] LONG *prc1c, [in, out] LONG* prc1d,
	//	[in, out] LONG *prc2a, [in, out] LONG* prc2b, [in, out] LONG *prc2c, [in, out] LONG* prc2d);
	HRESULT IsModified(
		[in, out] long *bModified);
	HRESULT SetModified(
		[in] BOOL bModified);
	HRESULT ValidationFailed(
		[in] LONG lpsz);
	HRESULT GetState(
		[out] LONG *pstate);
};

[
	odl,
	uuid(E6DFF6FD-BCD5-4162-9C65-A3B18C616FDB)
]
interface IDrawPropertyControl : IPropertyControlBase
{
	HRESULT GetDrawFlags([out] int* pdwFlags);
	HRESULT WindowlessDraw([in] LONG hDC,
		[in] RECT *pRect,
		[in] int a);
	long HasVisibleContent();
	HRESULT GetDisplayText([out] LONG* lpText);
	HRESULT GetTooltipInfo([in] LONG hDC, [in] SIZE *sz, [out] LONG* unn);
};

[
	odl,
	uuid(7AF7F355-1066-4E17-B1F2-19FE2F099CD2)
]
interface IPropertyValue : stdole.IUnknown
{
	HRESULT SetPropertyKey([in, out] PROPERTYKEY* pk);
	HRESULT GetPropertyKey([in, out] PROPERTYKEY* pk);
	HRESULT GetValue([in, out] VARIANT *pprop);
	HRESULT InitValue([in] VARIANT pprop);
};



[
	odl,
	uuid(11A66240-5489-42C2-AEBF-286FC831524C)
]
interface ISubItemCallback : stdole.IUnknown
{
//	HRESULT _stdcall GetSubItemTitle(
//	[in] int subitemIndex,
//		[in, out] long* lpszBuffer,
//		[in] int BufferSize);
//HRESULT _stdcall GetSubItemControl(
//	[in] int arg1,
//	[in] int arg2,
//	[in] UUID* riid,
//	[in, out] IPropertyControlBase** ppv);
//HRESULT _stdcall BeginSubItemEdit(
//	[in] long p1,
//	[in] long p2,
//	[in] long p3,
//	[in] UUID* riid,
//	[in, out] IPropertyControlBase** ppv);
//HRESULT _stdcall EndSubItemEdit(
//	[in] long p1,
//	[in] long p2,
//	[in] long p3,
//	[in, out] IPropertyControl** ppc);
//HRESULT _stdcall BeginGroupEdit(
//	[in] long iGroup,
//	[in] UUID* riid,
//	[in, out] IPropertyControlBase** ppv);
//HRESULT _stdcall EndGroupEdit(
//	[in] long p1,
//	[in] long p2,
//	[in, out] IPropertyControl** ppc);
//HRESULT _stdcall OnInvokeVerb(
//	[in] long iVerb,
//	[in] long lpsz);

	HRESULT GetSubItemTitle(
	[in] int subitemIndex,
	[in, out] LONG *lpszBuffer,
	[in] int BufferSize);
	HRESULT GetSubItemControl(
		[in] int arg1,
		[in] int arg2,
		[in] UUID *riid,
		//[in, out] IPropertyControlBase **ppv);
		[in] LONG ptrppv);
	HRESULT BeginSubItemEdit(
		[in] LONG p1,
		[in] LONG p2,
		[in] LONG p3,
		[in] UUID* riid,
		//[in, out] IPropertyControlBase **ppv);
		[in] LONG ptrppv);
	HRESULT EndSubItemEdit(
		[in] LONG p1,
		[in] LONG p2,
		[in] LONG p3,
//		[in, out] IPropertyControl **ppc);
		[in] LONG ppc);
	HRESULT BeginGroupEdit(
		[in] LONG iGroup,
		[in] UUID* riid,
//		[in, out] IPropertyControlBase **ppv);
		[in] LONG ppv);
	HRESULT EndGroupEdit(
		[in] LONG p1,
		[in] LONG p2,
//		[in, out] IPropertyControl **ppc);
		[in] LONG ppc);
	HRESULT OnInvokeVerb(
		[in] LONG iVerb,
		[in] LONG lpsz);
};

[
	odl,
	uuid(E5B16AF2-3990-4681-A609-1F060CD14269),
	helpstring("IListView for Windows 7+")
]
interface IListView : IOleWindow
{
	HRESULT GetImageList(
	[in] int lIndex,
	[out] LONG *himl);
	HRESULT SetImageList(
		[in] int lIndex,
		[in] LONG himl,
		[out] LONG *phimlOld);
	HRESULT GetBackgroundColor(
		[out] COLORREF *clrBk);
	HRESULT SetBackgroundColor(
		[in] COLORREF clrBk);
	HRESULT GetTextColor(
		[out] COLORREF *clrText);
	HRESULT SetTextColor(
		[in] COLORREF clrText);
	HRESULT GetTextBackgroundColor(
		[out] COLORREF *clrTextBk);
	HRESULT SetTextBackgroundColor(
		[in] COLORREF clrTextBk);
	HRESULT GetHotLightColor(
		[out] COLORREF *clrHot);
	HRESULT SetHotLightColor(
		[in] COLORREF clrHot);
	HRESULT GetItemCount(
		[out] LONG *nItems);
	HRESULT SetItemCount(
		[in] int nItems,
		[in] DWORD nParam2);
	HRESULT GetItem(
		//[in, out] LVITEMW *tLVI);
		[in] LONG ptLVI);
	[helpstring("SetItem(VarPtr(lvitemw))")]
	HRESULT SetItem(
		[in] LVITEMW *pLVI);
	HRESULT GetItemState(
		[in] int iItem,
		[in] int iSubItem,
		[in] LONG mask,
		[out] LONG *pState);
	HRESULT SetItemState(
		[in] int iItem,
		[in] int iSubItem,
		[in] LONG mask,
		[in] LONG state);
	HRESULT GetItemText(
		[in] int iItem,
		[in] int iSubItem,
		[in, out] long *pBuffer,
		[in] int nBufferSize);
	HRESULT SetItemText(
		[in] int iItem,
		[in] int iSubItem,
		[in] long pszText);
	HRESULT GetBackgroundImage(
		[in, out] LVBKIMAGEW *lvbk);
	[helpstring("SetBackgroundImage(VarPtr(lvbkimage))")]
	HRESULT SetBackgroundImage(
		[in] LONG pLVBK);
	HRESULT GetFocusedColumn(
		[out] LONG *iCol);
	HRESULT SetSelectionFlags(
		[in] LONG mask,
		[in] LONG flags);
	HRESULT GetSelectedColumn(
		[out] LONG *iCol);
	HRESULT SetSelectedColumn(
		[in] LONG iCol);
	HRESULT GetView(
		[out] LONG *iView);
	HRESULT SetView(
		[in] LONG iView);
	HRESULT InsertItem(
		[in] LONG pItem,
		[in] LONG iIndex);
	HRESULT DeleteItem(
		[in] LONG iIndex);
	HRESULT DeleteAllItems();
	HRESULT UpdateItem(
		[in] LONG iIndex);
	HRESULT GetItemRect(
		[in] LONG pLVII,
		[in] int nRectType,
		[out] RECT *rc);
	HRESULT GetSubItemRect(
		[in] LONG pLVII,
		[in] int iSubItem,
		[in] int nRectType,
		[out] RECT *rc);
	HRESULT HitTestSubItem(
		[in, out] LVHITTESTINFO *pHitTestData);
	HRESULT GetIncrSearchString(
		[in] long pStr,
		[in] int nBufferSize,
		[in, out] int *pCopiedChars);
	HRESULT GetItemSpacing(
		[in] BOOL smallIconView,
		[out] LONG *pHoriz,
		[out] LONG *pVert);
	HRESULT SetIconSpacing(
		[in] int nHoriz,
		[in] int nVert,
		[out] int *pHoriz,
		[out] int *pVert);
	HRESULT GetNextItem(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup,
		[in] LONG flags,
		[out] LVITEMINDEX *lvii);
	HRESULT FindItem(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup,
		[in] LVFINDINFOW *lvfi,
		[out] LVITEMINDEX *lviiFound);
	HRESULT GetSelectionMark(
		[out] LVITEMINDEX *lvii);
	HRESULT SetSelectionMark(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup,
		[out] LVITEMINDEX *lviiprev);
	HRESULT GetItemPosition(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup,
		[out] POINT *pt);
	HRESULT SetItemPosition(
		[in] int iIndex,
		[in] POINT *pt);
	HRESULT ScrollView(
		[in] int hdist,
		[in] int vdist);
	HRESULT EnsureItemVisible(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup,
		[in] BOOL fPartialOk);
	HRESULT EnsureSubItemVisible(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup,
		[in] int iSubItem);
	HRESULT EditSubItem(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup,
		[in] int iSubItem);
	HRESULT RedrawItems(
		[in] int iFirst,
		[in] int iLast);
	HRESULT ArrangeItems(
		[in] int mode);
	HRESULT RecomputeItems(
		[in] int unknwn);
	HRESULT GetEditControl(
		[out] LONG *hEdit);
	HRESULT EditLabel(
		//[in] LVITEMINDEX *lvii,
		[in] LONG iItem,
		[in] LONG iGroup,
		[in] long pszInitial,
		[out] LONG *hEdit);
	HRESULT EditGroupLabel(
		[in] int iGroup);
	HRESULT CancelEditLabel();
	HRESULT GetEditItem(
		[out] LVITEMINDEX *lvii,
		[out] int *iSubItem);
	HRESULT HitTest(
		[in, out] LVHITTESTINFO *lvhti);
	HRESULT GetStringWidth(
		[in] long pString,
		[out] int *pWidth);
	HRESULT GetColumn(
		[in] int iCol,
		[out] LVCOLUMNW *lvcol);
	HRESULT SetColumn(
		[in] int iCol,
		[in] LVCOLUMNW *lvcol);
	HRESULT GetColumnOrderArray(
		[in] int iNumOfColumns,
		[out] int *pCol);
	HRESULT SetColumnOrderArray(
		[in] int iNumOfColumns,
		[in] int pColumns);
	HRESULT GetHeaderControl(
		[out] LONG *hHeader);
	HRESULT InsertColumn(
		[in] int iInsertAt,
		[in] LVCOLUMNW *lvcol,
		[out] int *pColIndex);
	HRESULT DeleteColumn(
		[in] int iIndex);
	HRESULT CreateDragImage(
		[in] int iItem,
		[in] POINT *ptUpperLeft,
		[out] LONG *phiml);
	HRESULT GetViewRect(
		[out] RECT *rc);
	HRESULT GetClientRect(
		[in] BOOL unknwn,
		[out] RECT *rc);
	HRESULT GetColumnWidth(
		[in] int iCol,
		[out] int *pWidth);
	HRESULT SetColumnWidth(
		[in] int iCol,
		[in] int width);
	HRESULT GetCallbackMask(
		[out] LONG *pMask);
	HRESULT SetCallbackMask(
		[in] LONG mask);
	HRESULT GetTopIndex(
		[out] int *index);
	HRESULT GetCountPerPage(
		[out] int *pCount);
	HRESULT GetOrigin(
		[out] POINT *pt);
	HRESULT GetSelectedCount(
		[out] int *pSelCnt);
	HRESULT SortItems(
		[in] BOOL unknwn,
		[in] LONG lParam,
		[in] LONG pfnCompare);
	HRESULT GetExtendedStyle(
		[out] LONG *dwStyle);
	HRESULT SetExtendedStyle(
		[in] LONG mask,
		[in] LONG dwStyleNew,
		[out] LONG *dwStyleOld);
	HRESULT GetHoverTime(
		[out] UINT *pTime);
	HRESULT SetHoverTime(
		[in] UINT time,
		[out] UINT *prevtime);
	HRESULT GetToolTip(
		[out] LONG *hToolTip);
	HRESULT SetToolTip(
		[in] LONG hToolTip,
		[out] LONG *hOldToolTip);
	HRESULT GetHotItem(
		[out] LVITEMINDEX *lvii);
	HRESULT SetHotItem(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup,
		[out] LVITEMINDEX *oldlvii);
	HRESULT GetHotCursor(
		[out] LONG *hCursor);
	HRESULT SetHotCursor(
		[in] LONG hCursor,
		[out] LONG *hOldCursor);
	HRESULT ApproximateViewRect(
		[in] int nItemCount,
		[out] int *pWidth,
		[out] int *pHeight);
	HRESULT SetRangeObject(
		[in] int unknwn,
		[in, out] LPVOID pObj);
	HRESULT GetWorkAreas(
		[in] int iNumOfWorkAreas,
		[out] RECT *rc);
	HRESULT SetWorkAreas(
		[in] int iNumOfWorkAreas,
		[in] RECT *rc);
	HRESULT GetWorkAreaCount(
		[out] int *nAreas);
	HRESULT ResetEmptyText();
	HRESULT EnableGroupView(
		[in] BOOL enable);
	HRESULT IsGroupViewEnabled(
		[out] BOOL *pEnabled);
	HRESULT SortGroups(
		[in] LONG pfnGroupCompare,
		[in] void *lParam);
	HRESULT GetGroupInfo(
		[in] int unknwn1,
		[in] int iGroupId,
		[in, out] LVGROUP *lvg);
	HRESULT SetGroupInfo(
		[in] int unknwn,
		[in] int iGroupID,
		[in] LVGROUP *lvg);
	HRESULT GetGroupRect(
		[in] BOOL unknwn,
		[in] int iGroupID,
		[in] int nRectType,
		[out] RECT *rc);
	HRESULT GetGroupState(
		[in] int iGroupID,
		[in] LONG mask,
		[out] LONG *pState);
	HRESULT HasGroup(
		[in] int iGroupID,
		[out] BOOL *pHasGroup);
	HRESULT InsertGroup(
		[in] int insertAt,
		[in] LVGROUP *lvg,
		[out] int *pGroupID);
	HRESULT RemoveGroup(
		[in] int iGroupID);
	HRESULT InsertGroupSorted(
		[in] LVINSERTGROUPSORTED *lvigs,
		[out] int *pGroupID);
	HRESULT GetGroupMetrics(
		[in, out] LVGROUPMETRICS *lvgm);
	HRESULT SetGroupMetrics(
		[in] LVGROUPMETRICS *lvgm);
	HRESULT RemoveAllGroups();
	HRESULT GetFocusedGroup(
		[out] int *iGroupID);
	HRESULT GetGroupCount(
		[out] int *nCount);
	HRESULT SetOwnerDataCallback(
		[in] IOwnerDataCallback *pCallback);
	HRESULT GetTileViewInfo(
		[out] LVTILEVIEWINFO *pInfo);
	HRESULT SetTileViewInfo(
		[in] LVTILEVIEWINFO *pInfo);
	HRESULT GetTileInfo(
		[out] LVTILEINFO *pInfo);
	HRESULT SetTileInfo(
		[in] LVTILEINFO *pInfo);
	HRESULT GetInsertMark(
		[out] LVINSERTMARK *pInsertMark);
	HRESULT SetInsertMark(
		[in] LVINSERTMARK *pInsertMark);
	HRESULT GetInsertMarkRect(
		[out] RECT *rc);
	HRESULT GetInsertMarkColor(
		[out] COLORREF *clrMark);
	HRESULT SetInsertMarkColor(
		[in] COLORREF clrMark,
		[out] COLORREF *clrMarkOld);
	HRESULT HitTestInsertMark(
		[in] POINT *pt,
		[in] LVINSERTMARK *pMark);
	HRESULT SetInfoTip(
		[in] LVSETINFOTIP *pInfoTip);
	HRESULT GetOutlineColor(
		[out] COLORREF *clrOutline);
	HRESULT SetOutlineColor(
		[in] COLORREF clrOutline,
		[out] COLORREF *clrOutlineOld);
	HRESULT GetFrozenItem(
		[out] int *pItem);
	HRESULT SetFrozenItem(
		[in] int iItemSometimes,
		[in] int iItemOthertimes);
	HRESULT GetFrozenSlot(
		[out] RECT *rcUnknown);
	HRESULT SetFrozenSlot(
		[in] int unknwn,
		[in] POINT *ptUnknwn);
	HRESULT GetViewMargin(
		[out] RECT *rcMargin);
	HRESULT SetViewMargin(
		[in] RECT *rcMargin);
	HRESULT SetKeyboardSelected(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup);
	HRESULT MapIndexToId(
		[in] int iItem,
		[out] int *pItemId);
	HRESULT MapIdToIndex(
		[in] int iIndex,
		[out] int *pItem);
	HRESULT IsItemVisible(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup,
		[out] BOOL *pVisible);
	HRESULT EnableAlphaShadow(
		[in] BOOL enable);
	HRESULT GetGroupSubsetCount(
		[out] int *pRows);
	HRESULT SetGroupSubsetCount(
		[in] int nRows);
	HRESULT GetVisibleSlotCount(
		[out] int *nCount);
	HRESULT GetColumnMarginRect(
		[out] RECT *rc);
	HRESULT SetSubItemCallback(
		[in] ISubItemCallback *pCallback);
	HRESULT GetVisibleItemRange(
		[out] LVITEMINDEX *pFirst,
		[out] LVITEMINDEX *pLast);
	HRESULT SetTypeAheadFlags(
		[in] UINT mask,
		[in] UINT flags);
}

[
	odl,
	uuid(2FFE2979-5928-4386-9CDB-8E1F15B72FB4),
	helpstring("IListView for Windows VistA")
]
interface IListViewVista : IOleWindow
{
	HRESULT GetImageList(
		[in] int lIndex,
		[out] LONG* himl);
	HRESULT SetImageList(
		[in] int lIndex,
		[in] LONG himl,
		[out] LONG* phimlOld);
	HRESULT GetBackgroundColor(
		[out] COLORREF* clrBk);
	HRESULT SetBackgroundColor(
		[in] COLORREF clrBk);
	HRESULT GetTextColor(
		[out] COLORREF* clrText);
	HRESULT SetTextColor(
		[in] COLORREF clrText);
	HRESULT GetTextBackgroundColor(
		[out] COLORREF* clrTextBk);
	HRESULT SetTextBackgroundColor(
		[in] COLORREF clrTextBk);
	HRESULT GetHotLightColor(
		[out] COLORREF* clrHot);
	HRESULT SetHotLightColor(
		[in] COLORREF clrHot);
	HRESULT GetItemCount(
		[out] LONG* nItems);
	HRESULT SetItemCount(
		[in] int nItems,
		[in] DWORD nParam2);
	HRESULT GetItem(
		//[in, out] LVITEMW *tLVI);
		[in] LONG ptLVI);
	[helpstring("SetItem(VarPtr(lvitemw))")]
	HRESULT SetItem(
		[in] LVITEMW* pLVI);
	HRESULT GetItemState(
		[in] int iItem,
		[in] int iSubItem,
		[in] LONG mask,
		[out] LONG* pState);
	HRESULT SetItemState(
		[in] int iItem,
		[in] int iSubItem,
		[in] LONG mask,
		[in] LONG state);
	HRESULT GetItemText(
		[in] int iItem,
		[in] int iSubItem,
		[in, out] long* pBuffer,
		[in] int nBufferSize);
	HRESULT SetItemText(
		[in] int iItem,
		[in] int iSubItem,
		[in] long pszText);
	HRESULT GetBackgroundImage(
		[in, out] LVBKIMAGEW* lvbk);
	[helpstring("SetBackgroundImage(VarPtr(lvbkimage))")]
	HRESULT SetBackgroundImage(
		[in] LONG pLVBK);
	HRESULT GetFocusedColumn(
		[out] LONG* iCol);
	HRESULT SetSelectionFlags(
		[in] LONG mask,
		[in] LONG flags);
	HRESULT GetSelectedColumn(
		[out] LONG* iCol);
	HRESULT SetSelectedColumn(
		[in] LONG iCol);
	HRESULT GetView(
		[out] LONG* iView);
	HRESULT SetView(
		[in] LONG iView);
	HRESULT InsertItem(
		[in] LONG pItem,
		[in] LONG iIndex);
	HRESULT DeleteItem(
		[in] LONG iIndex);
	HRESULT DeleteAllItems();
	HRESULT UpdateItem(
		[in] LONG iIndex);
	HRESULT GetItemRect(
		[in] LONG pLVII,
		[in] int nRectType,
		[out] RECT* rc);
	HRESULT GetSubItemRect(
		[in] LONG pLVII,
		[in] int iSubItem,
		[in] int nRectType,
		[out] RECT* rc);
	HRESULT HitTestSubItem(
		[in, out] LVHITTESTINFO* pHitTestData);
	HRESULT GetIncrSearchString(
		[in] long pStr,
		[in] int nBufferSize,
		[in, out] int* pCopiedChars);
	HRESULT GetItemSpacing(
		[in] BOOL smallIconView,
		[out] LONG* pHoriz,
		[out] LONG* pVert);
	HRESULT SetIconSpacing(
		[in] int nHoriz,
		[in] int nVert,
		[out] int* pHoriz,
		[out] int* pVert);
	HRESULT GetNextItem(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup,
		[in] LONG flags,
		[out] LVITEMINDEX* lvii);
	HRESULT FindItem(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup,
		[in] LVFINDINFOW* lvfi,
		[out] LVITEMINDEX* lviiFound);
	HRESULT GetSelectionMark(
		[out] LVITEMINDEX* lvii);
	HRESULT SetSelectionMark(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup,
		[out] LVITEMINDEX* lviiprev);
	HRESULT GetItemPosition(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup,
		[out] POINT* pt);
	HRESULT SetItemPosition(
		[in] int iIndex,
		[in] POINT* pt);
	HRESULT ScrollView(
		[in] int hdist,
		[in] int vdist);
	HRESULT EnsureItemVisible(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup,
		[in] BOOL fPartialOk);
	HRESULT EnsureSubItemVisible(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup,
		[in] int iSubItem);
	HRESULT EditSubItem(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup,
		[in] int iSubItem);
	HRESULT RedrawItems(
		[in] int iFirst,
		[in] int iLast);
	HRESULT ArrangeItems(
		[in] int mode);
	HRESULT RecomputeItems(
		[in] int unknwn);
	HRESULT GetEditControl(
		[out] LONG* hEdit);
	HRESULT EditLabel(
		//[in] LVITEMINDEX *lvii,
		[in] LONG iItem,
		[in] LONG iGroup,
		[in] long pszInitial,
		[out] LONG* hEdit);
	HRESULT EditGroupLabel(
		[in] int iGroup);
	HRESULT CancelEditLabel();
	HRESULT GetEditItem(
		[out] LVITEMINDEX* lvii,
		[out] int* iSubItem);
	HRESULT HitTest(
		[in, out] LVHITTESTINFO* lvhti);
	HRESULT GetStringWidth(
		[in] long pString,
		[out] int* pWidth);
	HRESULT GetColumn(
		[in] int iCol,
		[out] LVCOLUMNW* lvcol);
	HRESULT SetColumn(
		[in] int iCol,
		[in] LVCOLUMNW* lvcol);
	HRESULT GetColumnOrderArray(
		[in] int iNumOfColumns,
		[out] int* pCol);
	HRESULT SetColumnOrderArray(
		[in] int iNumOfColumns,
		[in] int pColumns);
	HRESULT GetHeaderControl(
		[out] LONG* hHeader);
	HRESULT InsertColumn(
		[in] int iInsertAt,
		[in] LVCOLUMNW* lvcol,
		[out] int* pColIndex);
	HRESULT DeleteColumn(
		[in] int iIndex);
	HRESULT CreateDragImage(
		[in] int iItem,
		[in] POINT* ptUpperLeft,
		[out] LONG* phiml);
	HRESULT GetViewRect(
		[out] RECT* rc);
	HRESULT GetClientRect(
		[in] BOOL unknwn,
		[out] RECT* rc);
	HRESULT GetColumnWidth(
		[in] int iCol,
		[out] int* pWidth);
	HRESULT SetColumnWidth(
		[in] int iCol,
		[in] int width);
	HRESULT GetCallbackMask(
		[out] LONG* pMask);
	HRESULT SetCallbackMask(
		[in] LONG mask);
	HRESULT GetTopIndex(
		[out] int* index);
	HRESULT GetCountPerPage(
		[out] int* pCount);
	HRESULT GetOrigin(
		[out] POINT* pt);
	HRESULT GetSelectedCount(
		[out] int* pSelCnt);
	HRESULT SortItems(
		[in] BOOL unknwn,
		[in] LONG lParam,
		[in] LONG pfnCompare);
	HRESULT GetExtendedStyle(
		[out] LONG* dwStyle);
	HRESULT SetExtendedStyle(
		[in] LONG mask,
		[in] LONG dwStyleNew,
		[out] LONG* dwStyleOld);
	HRESULT GetHoverTime(
		[out] UINT* pTime);
	HRESULT SetHoverTime(
		[in] UINT time,
		[out] UINT* prevtime);
	HRESULT GetToolTip(
		[out] LONG* hToolTip);
	HRESULT SetToolTip(
		[in] LONG hToolTip,
		[out] LONG* hOldToolTip);
	HRESULT GetHotItem(
		[out] LVITEMINDEX* lvii);
	HRESULT SetHotItem(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup,
		[out] LVITEMINDEX* oldlvii);
	HRESULT GetHotCursor(
		[out] LONG* hCursor);
	HRESULT SetHotCursor(
		[in] LONG hCursor,
		[out] LONG* hOldCursor);
	HRESULT ApproximateViewRect(
		[in] int nItemCount,
		[out] int* pWidth,
		[out] int* pHeight);
	HRESULT SetRangeObject(
		[in] int unknwn,
		[in, out] LPVOID pObj);
	HRESULT GetWorkAreas(
		[in] int iNumOfWorkAreas,
		[out] RECT* rc);
	HRESULT SetWorkAreas(
		[in] int iNumOfWorkAreas,
		[in] RECT* rc);
	HRESULT GetWorkAreaCount(
		[out] int* nAreas);
	HRESULT ResetEmptyText();
	HRESULT EnableGroupView(
		[in] BOOL enable);
	HRESULT IsGroupViewEnabled(
		[out] BOOL* pEnabled);
	HRESULT SortGroups(
		[in] LONG pfnGroupCompare,
		[in] void* lParam);
	HRESULT GetGroupInfo(
		[in] int unknwn1,
		[in] int iGroupId,
		[in, out] LVGROUP* lvg);
	HRESULT SetGroupInfo(
		[in] int unknwn,
		[in] int iGroupID,
		[in] LVGROUP* lvg);
	HRESULT GetGroupRect(
		[in] BOOL unknwn,
		[in] int iGroupID,
		[in] int nRectType,
		[out] RECT* rc);
	HRESULT GetGroupState(
		[in] int iGroupID,
		[in] LONG mask,
		[out] LONG* pState);
	HRESULT HasGroup(
		[in] int iGroupID,
		[out] BOOL* pHasGroup);
	HRESULT InsertGroup(
		[in] int insertAt,
		[in] LVGROUP* lvg,
		[out] int* pGroupID);
	HRESULT RemoveGroup(
		[in] int iGroupID);
	HRESULT InsertGroupSorted(
		[in] LVINSERTGROUPSORTED* lvigs,
		[out] int* pGroupID);
	HRESULT GetGroupMetrics(
		[in, out] LVGROUPMETRICS* lvgm);
	HRESULT SetGroupMetrics(
		[in] LVGROUPMETRICS* lvgm);
	HRESULT RemoveAllGroups();
	HRESULT GetFocusedGroup(
		[out] int* iGroupID);
	HRESULT GetGroupCount(
		[out] int* nCount);
	HRESULT SetOwnerDataCallback(
		[in] IOwnerDataCallback* pCallback);
	HRESULT GetTileViewInfo(
		[out] LVTILEVIEWINFO* pInfo);
	HRESULT SetTileViewInfo(
		[in] LVTILEVIEWINFO* pInfo);
	HRESULT GetTileInfo(
		[out] LVTILEINFO* pInfo);
	HRESULT SetTileInfo(
		[in] LVTILEINFO* pInfo);
	HRESULT GetInsertMark(
		[out] LVINSERTMARK* pInsertMark);
	HRESULT SetInsertMark(
		[in] LVINSERTMARK* pInsertMark);
	HRESULT GetInsertMarkRect(
		[out] RECT* rc);
	HRESULT GetInsertMarkColor(
		[out] COLORREF* clrMark);
	HRESULT SetInsertMarkColor(
		[in] COLORREF clrMark,
		[out] COLORREF* clrMarkOld);
	HRESULT HitTestInsertMark(
		[in] POINT* pt,
		[in] LVINSERTMARK* pMark);
	HRESULT SetInfoTip(
		[in] LVSETINFOTIP* pInfoTip);
	HRESULT GetOutlineColor(
		[out] COLORREF* clrOutline);
	HRESULT SetOutlineColor(
		[in] COLORREF clrOutline,
		[out] COLORREF* clrOutlineOld);
	HRESULT GetFrozenItem(
		[out] int* pItem);
	HRESULT SetFrozenItem(
		[in] int iItemSometimes,
		[in] int iItemOthertimes);
	HRESULT GetFrozenSlot(
		[out] RECT* rcUnknown);
	HRESULT SetFrozenSlot(
		[in] int unknwn,
		[in] POINT* ptUnknwn);
	HRESULT GetViewMargin(
		[out] RECT* rcMargin);
	HRESULT SetViewMargin(
		[in] RECT* rcMargin);
	HRESULT SetKeyboardSelected(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup);
	HRESULT MapIndexToId(
		[in] int iItem,
		[out] int* pItemId);
	HRESULT MapIdToIndex(
		[in] int iIndex,
		[out] int* pItem);
	HRESULT IsItemVisible(
		//[in] LVITEMINDEX *lvii,
		[in] int lviiItem,
		[in] int lviiGroup,
		[out] BOOL* pVisible);
	HRESULT GetGroupSubsetCount(
		[out] int* pRows);
	HRESULT SetGroupSubsetCount(
		[in] int nRows);
	HRESULT GetVisibleSlotCount(
		[out] int* nCount);
	HRESULT GetColumnMarginRect(
		[out] RECT* rc);
	HRESULT SetSubItemCallback(
		[in] ISubItemCallback* pCallback);
	HRESULT GetVisibleItemRange(
		[out] LVITEMINDEX* pFirst,
		[out] LVITEMINDEX* pLast);
	HRESULT SetTypeAheadFlags(
		[in] UINT mask,
		[in] UINT flags);
}

[
	odl,
	uuid(88EB9442-913B-4AB4-A741-DD99DCB7558B)
]
interface IListViewFooterCallback : stdole.IUnknown
{
	HRESULT OnButtonClicked(
	[in] int itemIndex,
	[in] LONG lParam,
	[in, out] LONG *pRemoveFooter);
	HRESULT OnDestroyButton(
		[in] int ItemIndex,
		[in] LONG lParam);
}

[
	odl,
	uuid(F0034DA8-8A22-4151-8F16-2EBA76565BCC)
]
interface IListViewFooter : stdole.IUnknown
{
	HRESULT IsVisible(
	[in] LONG pVisible);
	HRESULT GetFooterFocus(
		[out] LONG *pItemIndex);
	HRESULT SetFooterFocus(
		[in] LONG pItemIndex);
	HRESULT SetIntroText(
		[in] long pText);
	HRESULT Show(
		[in] IListViewFooterCallback *pCallbackObject);
	HRESULT RemoveAllButtons();
	HRESULT InsertButton(
		[in] int insertAt,
		[in] long pText,
		[in] long pAltText,
		[in] LONG iconIndex,
		[in] LONG lParam);
	HRESULT GetButtonLParam(
		[in] int itemIndex,
		[out] LONG *lParam);
}
