//Distributed Transaction Coordinator

interface ITransaction;
interface ITransactionDispenser;
interface ITransactionOptions;
interface ITransactionOutcomeEvents;
interface ITransactionCompletionEvents;
interface IKernelTransaction;

//==========================================================================
// Transaction related types
//==========================================================================


    typedef struct BOID {
        unsigned char rgb[16];
    } BOID;

    //cpp_quote("#define BOID_NULL (*((BOID*)(&IID_NULL)))")

        // change the following two line together
        //cpp_quote("#ifndef MAX_TRAN_DESC_DEFINED")          // conflicts with uimsg.h. This is temporary work around
        //cpp_quote("#define MAX_TRAN_DESC_DEFINED")
        typedef enum TX_MISC_CONSTANTS
    {
        MAX_TRAN_DESC = 40
    } TX_MISC_CONSTANTS;
   // cpp_quote("#endif")

        // Unit Of Work.

        typedef BOID XACTUOW;

    // Data type for isolation level values.

    //typedef LONG ISOLEVEL;

    // Constants that specifiy isolation level of a transaction.

    typedef enum ISOLATIONLEVEL {
        ISOLATIONLEVEL_UNSPECIFIED = 0xFFFFFFFF,   // 
        ISOLATIONLEVEL_CHAOS = 0x00000010,   // 
        ISOLATIONLEVEL_READUNCOMMITTED = 0x00000100,   // 
        ISOLATIONLEVEL_BROWSE = 0x00000100,   // Synonym for _READUNCOMITTED
        ISOLATIONLEVEL_CURSORSTABILITY = 0x00001000,   // 
        ISOLATIONLEVEL_READCOMMITTED = 0x00001000,   // Synonym for _CURSORSTABILITY
        ISOLATIONLEVEL_REPEATABLEREAD = 0x00010000,   // 
        ISOLATIONLEVEL_SERIALIZABLE = 0x00100000,   // 
        ISOLATIONLEVEL_ISOLATED = 0x00100000,   // Synonym for _SERIALIZABLE
    } ISOLATIONLEVEL;

    // Transaction information structure, used in ITransaction

    typedef struct XACTTRANSINFO {
        XACTUOW     uow;                        // The current unit of work
        ISOLATIONLEVEL    isoLevel;                   // The isolation level for the current UOW
        ULONG       isoFlags;                   // Values from ISOFLAG enumeration
        DWORD       grfTCSupported;             // Flags indicating capabilities
        DWORD       grfRMSupported;             //       ... of this transaction wrt
        DWORD       grfTCSupportedRetaining;    //       ... parameters to Commit
        DWORD       grfRMSupportedRetaining;    //       ...
    } XACTTRANSINFO;

    typedef struct XACTSTATS {
        ULONG       cOpen;              // The number of currently extant transactions.
        ULONG       cCommitting;        // The number of transactions which are proceding towards committing.
        ULONG       cCommitted;         // The number of transactions that are have been committed.
        ULONG       cAborting;          // The number of transactions which are in the process of aborting.
        ULONG       cAborted;           // The number of transactions that are have been aborted.
        ULONG       cInDoubt;           // The number of transactions which are presently in doubt.
        ULONG       cHeuristicDecision; // The number of transactions that have completed by heuristic decision.
        FILETIME    timeTransactionsUp; // The amount of time that this transaction service has been up.
    } XACTSTATS;

    // @enum ISOFLAG | Used in <t XACTTRANSINFO> and <i ITransactionDispenser>.

    typedef enum ISOFLAG {
        ISOFLAG_RETAIN_COMMIT_DC = 1,    // Use just one of ISOFLAG_RETAIN_COMMIT values
        ISOFLAG_RETAIN_COMMIT = 2,    // 
        ISOFLAG_RETAIN_COMMIT_NO = 3,    // 
        ISOFLAG_RETAIN_ABORT_DC = 4,    // Use just one of ISOFLAG_RETAIN_ABORT values
        ISOFLAG_RETAIN_ABORT = 8,    // 
        ISOFLAG_RETAIN_ABORT_NO = 12,   // 
        ISOFLAG_RETAIN_DONTCARE = 9, // ISOFLAG_RETAIN_COMMIT_DC | ISOFLAG_RETAIN_ABORT_DC,   // 
        ISOFLAG_RETAIN_BOTH = 0x0A, //ISOFLAG_RETAIN_COMMIT | ISOFLAG_RETAIN_ABORT,      // 
        ISOFLAG_RETAIN_NONE = 0x0F, // ISOFLAG_RETAIN_COMMIT_NO | ISOFLAG_RETAIN_ABORT_NO,   // 
        ISOFLAG_OPTIMISTIC = 16,   // 
        ISOFLAG_READONLY = 32    // 
    } ISOFLAG;

    // Used in ITransactionDispenser
    // A bit field of 32 bits; be sure to mask before comparing.

    typedef enum XACTTC {
        XACTTC_NONE = 0,    // use Provider's default.       
        XACTTC_SYNC_PHASEONE = 1,
        XACTTC_SYNC_PHASETWO = 2,
        XACTTC_SYNC = 2,    // nb alias for XACTTC_SYNC_PHASETWO
        XACTTC_ASYNC_PHASEONE = 4,
        XACTTC_ASYNC = 4     // nb alias for XACTTC_ASYNC_PHASEONE
    } XACTTC;

    // Used in ITransactionDispenser
    // A bit field of 32 bits; be sure to mask before comparing.

    typedef enum XACTRM {
        XACTRM_OPTIMISTICLASTWINS = 1,  //
        XACTRM_NOREADONLYPREPARES = 2,  //
    } XACTRM;

    typedef enum XACTCONST {
        XACTCONST_TIMEOUTINFINITE = 0,  //
    } XACTCONST;

    typedef enum XACTHEURISTIC {
        XACTHEURISTIC_ABORT = 1,
        XACTHEURISTIC_COMMIT = 2,
        XACTHEURISTIC_DAMAGE = 3,
        XACTHEURISTIC_DANGER = 4,
    } XACTHEURISTIC;

    typedef enum XACTSTAT {
        XACTSTAT_NONE = 0x00000000,
        XACTSTAT_OPENNORMAL = 0x00000001,
        XACTSTAT_OPENREFUSED = 0x00000002,
        XACTSTAT_PREPARING = 0x00000004,
        XACTSTAT_PREPARED = 0x00000008,
        XACTSTAT_PREPARERETAINING = 0x00000010,
        XACTSTAT_PREPARERETAINED = 0x00000020,
        XACTSTAT_COMMITTING = 0x00000040,
        XACTSTAT_COMMITRETAINING = 0x00000080,
        XACTSTAT_ABORTING = 0x00000100,
        XACTSTAT_ABORTED = 0x00000200,
        XACTSTAT_COMMITTED = 0x00000400,
        XACTSTAT_HEURISTIC_ABORT = 0x00000800,
        XACTSTAT_HEURISTIC_COMMIT = 0x00001000,
        XACTSTAT_HEURISTIC_DAMAGE = 0x00002000,
        XACTSTAT_HEURISTIC_DANGER = 0x00004000,
        XACTSTAT_FORCED_ABORT = 0x00008000,
        XACTSTAT_FORCED_COMMIT = 0x00010000,
        XACTSTAT_INDOUBT = 0x00020000,
        XACTSTAT_CLOSED = 0x00040000,
        XACTSTAT_OPEN = 0x00000003,
        XACTSTAT_NOTPREPARED = 0x0007FFC3,
        XACTSTAT_ALL = 0x0007FFFF,
    } XACTSTAT;

    typedef struct XACTOPT {                        // Transaction configuration options
        ULONG       ulTimeout;                      // timeout in milliseconds
        unsigned char        szDescription[40];   // description string for admin tools
    } XACTOPT;

//
//==========================================================================
// Basic transaction interfaces
//==========================================================================
//

// Transaction interface, single phase

[odl, uuid(0fb15084-af41-11ce-bd2b-204c4f4f5020)]
interface ITransaction : stdole.IUnknown {

    HRESULT Commit
    (
        [in] BOOL  fRetaining,
        [in] DWORD grfTC,
        [in] DWORD grfRM
    );
    HRESULT Abort
    (
        [in] BOID* pboidReason,
        [in]         BOOL  fRetaining,
        [in]         BOOL  fAsync
    );
    HRESULT GetTransactionInfo
    (
        [out] XACTTRANSINFO* pinfo
    );
}

// ITransactionCloner
[
    odl,
    uuid(02656950-2152-11d0-944C-00A0C905416E)
]
interface ITransactionCloner : ITransaction
{
    HRESULT CloneWithCommitDisabled
    (
        [out] ITransaction** ppITransaction
    );
};

// New: Transaction interface, single phase
[
    odl,
    uuid(34021548-0065-11d3-bac1-00c04f797be2)
]
interface ITransaction2 : ITransactionCloner
{
    HRESULT GetTransactionInfo2
    (
        [out] XACTTRANSINFO* pinfo
    );
}


//
//--------------------------------------------------------------------------
//

// Interface by which new transactions are commonly created

[odl, uuid(3A6AD9E1-23B9-11cf-AD60-00AA00A74CCD)]
interface ITransactionDispenser : stdole.IUnknown 
{
    HRESULT GetOptionsObject
    (
        [out] ITransactionOptions** ppOptions
    );
    HRESULT BeginTransaction
    (
        [in]    IUnknown* punkOuter,             // controlling unknown
        [in]            ISOLATIONLEVEL       isoLevel,              // isolation level for xtion
        [in]            ISOFLAG          isoFlags,              // values from ISOFLAG enumeration
        [in]    ITransactionOptions* pOptions,        // pointer retrieved from previous GetOptions
        [out]           ITransaction** ppTransaction
    );
}

//
//--------------------------------------------------------------------------
//

[odl, uuid(3A6AD9E0-23B9-11cf-AD60-00AA00A74CCD)]
interface ITransactionOptions : stdole.IUnknown 
{
    HRESULT SetOptions
    (
        [in]  XACTOPT* pOptions
    );
    HRESULT GetOptions
    (
        [in, out]  XACTOPT* pOptions
    );
}

//
//--------------------------------------------------------------------------
//

[odl, uuid(3A6AD9E2-23B9-11cf-AD60-00AA00A74CCD)]
interface ITransactionOutcomeEvents : stdole.IUnknown 
{
    HRESULT Committed
    (
        [in]            BOOL       fRetaining,
        [in]    XACTUOW* pNewUOW,
        [in]            HRESULT    hr
    );
    HRESULT Aborted
    (
        [in]    BOID* pboidReason,
        [in]            BOOL       fRetaining,
        [in]    XACTUOW* pNewUOW,
        [in]            HRESULT    hr
    );
    HRESULT HeuristicDecision
    (
        [in]            DWORD      dwDecision,
        [in]    BOID* pboidReason,
        [in]            HRESULT    hr
    );
    HRESULT Indoubt
    (
        void
    );
}

//
//--------------------------------------------------------------------------
//

[odl, uuid(30274F88-6EE4-474e-9B95-7807BC9EF8CF)]
interface ITmNodeName : stdole.IUnknown 
{
    HRESULT GetNodeNameSize
    (
        [out]  ULONG* pcbNodeNameSize
    );
    HRESULT GetNodeName
    (
        [in] ULONG cbNodeNameBufferSize,
        [in, out]  LPWSTR pNodeNameBuffer
    );
}

// Interface to retrieve Kernel Transaction handle.

[odl, uuid(79427A2B-F895-40e0-BE79-B57DC82ED231)]
interface IKernelTransaction : stdole.IUnknown {

    HRESULT GetHandle
    (
        [out] HANDLE* pHandle
    );
}


//CLSID_MSDtcTransactionManager
[uuid(5B18AB61-091D-11d1-97DF-00C04FB9618A)] coclass MSDtcTransactionManager { [default] interface ITransactionDispenser; }

//CLSID_MSDtcTransaction = {}
[uuid(39F8D76B-0928-11d1-97DF-00C04FB9618A)] coclass MSDtcTransaction { [default] interface ITransaction; }