//oleexp revised definitions
//Contains interfaces and structures from olelib that have been modified
//in ways that break binary compatibility significantly

typedef enum FOLDERFLAGS
    {	FWF_NONE	= 0,
	FWF_AUTOARRANGE	= 0x1,
	FWF_ABBREVIATEDNAMES	= 0x2,
	FWF_SNAPTOGRID	= 0x4,
	FWF_OWNERDATA	= 0x8,
	FWF_BESTFITWINDOW	= 0x10,
	FWF_DESKTOP	= 0x20,
	FWF_SINGLESEL	= 0x40,
	FWF_NOSUBFOLDERS	= 0x80,
	FWF_TRANSPARENT	= 0x100,
	FWF_NOCLIENTEDGE	= 0x200,
	FWF_NOSCROLL	= 0x400,
	FWF_ALIGNLEFT	= 0x800,
	FWF_NOICONS	= 0x1000,
	FWF_SHOWSELALWAYS	= 0x2000,
	FWF_NOVISIBLE	= 0x4000,
	FWF_SINGLECLICKACTIVATE	= 0x8000,
	FWF_NOWEBVIEW	= 0x10000,
	FWF_HIDEFILENAMES	= 0x20000,
	FWF_CHECKSELECT	= 0x40000,
	FWF_NOENUMREFRESH	= 0x80000,
	FWF_NOGROUPING	= 0x100000,
	FWF_FULLROWSELECT	= 0x200000,
	FWF_NOFILTERS	= 0x400000,
	FWF_NOCOLUMNHEADER	= 0x800000,
	FWF_NOHEADERINALLVIEWS	= 0x1000000,
	FWF_EXTENDEDTILES	= 0x2000000,
	FWF_TRICHECKSELECT	= 0x4000000,
	FWF_AUTOCHECKSELECT	= 0x8000000,
	FWF_NOBROWSERVIEWSTATE	= 0x10000000,
	FWF_SUBSETGROUPS	= 0x20000000,
	FWF_USESEARCHFOLDER	= 0x40000000,
	FWF_ALLOWRTLREADING	= 0x80000000
    } 	FOLDERFLAGS;

typedef enum FOLDERVIEWMODE
    {	FVM_AUTO	= -1,
	FVM_FIRST	= 1,
	FVM_ICON	= 1,
	FVM_SMALLICON	= 2,
	FVM_LIST	= 3,
	FVM_DETAILS	= 4,
	FVM_THUMBNAIL	= 5,
	FVM_TILE	= 6,
	FVM_THUMBSTRIP	= 7,
	FVM_CONTENT	= 8,
	FVM_LAST	= 8
    } 	FOLDERVIEWMODE;

typedef struct SHELLDETAILS {
    int     fmt;            // LVCFMT_* value (header only)
    int     cxChar;         // Number of "average" characters (header only)
    STRRET  str;            // String information
} SHELLDETAILS;
[
    odl,
    uuid(000214F2-0000-0000-C000-000000000046),
    helpstring("IEnumIDList interface")
]
interface IEnumIDList : IUnknown
{
    // *** IEnumIDList methods ***
    long    Next(
                [in]     ULONG         celt,
                [in,out] LPITEMIDLIST  *rgelt,
                [in,out] ULONG         *pceltFetched);
    HRESULT Skip([in] ULONG celt);                     // E_NOTIMPL
    HRESULT Reset();                                   // E_NOTIMPL
    HRESULT Clone([in,out] IEnumIDList **ppenum);      // E_NOTIMPL
}
typedef IEnumIDList *LPENUMIDLIST;


[
  odl,
  uuid(000214E6-0000-0000-C000-000000000046),
  helpstring("IShellFolder interface")
]
interface IShellFolder : stdole.IUnknown {

    [helpstring("ParseDisplayName")]
    long    ParseDisplayName(
                [in]     LONG          hwndOwner,        // Handle of owner window
                [in]     LONG          pbcReserved,      // Reserved (LPBC)
                [in]     LONG          lpszDisplayName,  // Pointer to diplay name 
                [in,out] LONG         *pchEaten,        // Pointer to value for parsed characters
                [in,out] LPITEMIDLIST  *ppidl,           // Pointer to new item identifier list
                [in,out] LONG         *pdwAttributes);  // Address receiving attributes of file object

    [helpstring("EnumObjects")]
    long    EnumObjects( 
                [in]     HWND          hwndOwner, 
                [in]     SHCONTF       grfFlags, 
                [in,out] LPENUMIDLIST  *ppenumIDList);

    [helpstring("BindToObject")]
    long    BindToObject(
                [in]     LPCITEMIDLIST pidl, 
                [in]     long          pbcReserved,
                [in]     UUID          *riid, 
                [in,out] LPVOID        ppvOut);

    // VB handles E_NOTIMPL
    [helpstring("BindToStorage")]
    long BindToStorage(
                [in]     LPCITEMIDLIST pidl, 
                [in]     long          pbcReserved,  // (LPBC)
                [in]     UUID          *riid, 
                [in,out] LPVOID        ppvObj);      // * v1.2, was *ppvObj

    [helpstring("CompareIDs")]
    long    CompareIDs(
                [in]     LONG        lParam, 
                [in]     LPCITEMIDLIST pidl1, 
                [in]     LPCITEMIDLIST pidl2);

    [helpstring("CreateViewObject")]
    long    CreateViewObject(
                [in]     HWND          hwndOwner, 
                [in]     UUID          *riid, 
                [in,out] LPVOID        ppvOut);      // * v1.2, was *ppvOut

    [helpstring("GetAttributesOf")]
    long    GetAttributesOf(
                [in]     LONG          cidl, 
                [in]     LPCITEMIDLIST *apidl,
                [in,out] LONG         *rgfInOut);

    [helpstring("GetUIObjectOf")]
    long    GetUIObjectOf(
                [in]     LONG          hwndOwner,
                [in]     LONG          cidl,
                [in]     LPCITEMIDLIST *apidl,
                [in]     UUID          *riid,
                [in]     LONG          *prgfInOut,
                [in,out] LPVOID        ppvOut);   // *ppvOut

    [helpstring("GetDisplayNameOf")]
    long    GetDisplayNameOf(
                [in]     LPCITEMIDLIST pidl,
                [in]     SHGNO_Flags   uFlags,
                [in,out] STRRET*       lpName);

    [helpstring("SetNameOf")]
    long    SetNameOf(
                [in]     LONG          hwndOwner,
                [in]     LPCITEMIDLIST pidl,
                //[in]     LPCOLESTR     lpszName,
				[in]     LONG     lpszName,
				[in]     SHGNO_Flags   uFlags,
                [in,out] LPCITEMIDLIST *ppidlOut);
};
[
	odl,
    helpstring("IShellFolder2"),
    uuid(93F2F68C-1D1B-11d3-A30E-00C04F79ABD1),
]
interface IShellFolder2 : IShellFolder {

    //long ParseDisplayName(
    //    [in] long hwndOwner,
    //    [in] long pbcReserved,
    //    [in] long lpszDisplayName,
    //    [in, out] long* pchEaten,
    //    [in, out] long* ppidl,
    //    [in, out] long* pdwAttributes);

    //long EnumObjects(
    //    [in] long hwndOwner,
    //    [in] SHCONTF grfFlags,
    //    [in, out] IEnumIDList **ppenumIDList);

    //long BindToObject(
    //    [in] long pidl,
    //    [in] long pbcReserved,
    //    [in, out] UUID *riid,
    //    [in, out] LPVOID ppvOut);

    //long BindToStorage(
    //    [in] long pidl,
    //    [in] long pbcReserved,
    //    [in, out] UUID *riid,
    //    [out] IStorage **ppvObj);

    //long CompareIDs(
    //    [in] long lparam,
    //    [in] long pidl1,
    //    [in] long pidl2);

    //long CreateViewObject(
    //    [in] long hwndOwner,
    //    [in, out] UUID* riid,
    //    [in, out] LPVOID ppvOut);

    //long GetAttributesOf(
    //    [in] long cidl,
    //    [in, out] long* apidl,
    //    [in, out] long* rgfInOut);

    //long GetUIObjectOf(
    //    [in] long hwndOwner,
    //    [in] long cidl,
    //    [in, out] long *apidl,
    //    [in, out] UUID  *riid,
    //    [in, out] long *prgfInOut,
    //    [out] long *ppvOut);

    //long GetDisplayNameOf(
    //    [in] long pidl,
    //    [in] SHGNO_Flags uFlags,
    //    [in, out] STRRET* lpName);

    //long SetNameOf(
    //    [in] long hwndOwner,
    //    [in] long pidl,
    //    [in] long lpszName,
    //    [in] SHGNO_Flags uFlags,
    //    [out] long* ppidlOut);

    // Returns the guid of the search that is to be invoked when user clicks 
    // on the search toolbar button
    long GetDefaultSearchGUID(
		[out] UUID *pguid);

    // gives an enumerator of the searches to be added to the search menu
    long EnumSearches(
		[out] IEnumExtraSearch **ppenum);
    
    long GetDefaultColumn(
		[in] LONG dwRes,
		[out] LONG *pSort,
		[out] LONG *pDisplay);

    // return SHCOLSTATE_ values
    long GetDefaultColumnState(
		[in] INT iColumn, 
		[out] SHCOLSTATEF *pcsFlags);
    
    long GetDetailsEx(
		[in] LONG pidl,
		[in] SHCOLUMNID *pscid,
		[out] VARIANT *pv);
    
    long GetDetailsOf(
		[in] LONG pidl,
		[in] INT iColumn,
		[out] SHELLDETAILS *psd);
    
    long MapColumnToSCID(
		[in] INT iColumn,
		[in] SHCOLUMNID *pscid);
};
//typedef struct SHELLDETAILS {
//    int     fmt;            // LVCFMT_* value (header only)
//    int     cxChar;         // Number of "average" characters (header only)
//    STRRET  str;            // String information
//} SHELLDETAILS;
[
    odl,
    uuid(000214E2-0000-0000-C000-000000000046),
    helpstring("IShellBrowser ")
]
interface IShellBrowser : IOleWindow /* IOleWindow */
{
    HRESULT InsertMenusSB(
        [in] LONG hmenuShared,
        [in, out] OLEMENUGROUPWIDTHS *lpMenuWidths);

    HRESULT SetMenuSB(
        [in] LONG hmenuShared,
        [in] LONG holemenuReserved,
        [in] LONG LONGActiveObject);

    HRESULT RemoveMenusSB(
        [in] LONG hmenuShared);

    HRESULT SetStatusTextSB(
        [in] LPWSTR lpszStatusText);

    HRESULT EnableModelessSB(
        [in] BOOL fEnable);

    HRESULT TranslateAcceleratorSB(
        [in, out] MSG *lpmsg,
        [in] short wID);

    HRESULT BrowseObject(
        [in] LONG pidl,
        [in] BO_Flags wFlags);

    HRESULT GetViewStateStream(
        [in] LONG grfMode,
        [out] IStream **ppStrm);

    HRESULT GetControlWindow(
        [in] GCW_IDs id,
        [out] LONG *lpLONG);

    HRESULT SendControlMsg(
        [in] GCW_IDs id,
        [in] LONG uMsg,
        [in] LONG wParam,
        [in] void *lParam,
        [out] LONG *pret);

    HRESULT QueryActiveShellView(
        [out] IShellView ** ppshv);

    HRESULT OnViewWindowActive(
        [in] IShellView * ppshv);

    HRESULT SetToolbarItems(
        [in] void *lpButtons,
        [in] LONG nButtons,
        [in] STI_Flags uFlags);
};

typedef struct FOLDERSETTINGS {
    FOLDERVIEWMODE ViewMode;
    FOLDERFLAGS fFlags;
} FOLDERSETTINGS;

//
// uState values for IShellView::UIActivate
//
typedef enum SVUIA_STATUS {
	SVUIA_DEACTIVATE = 0,
	SVUIA_ACTIVATE_NOFOCUS = 1,
	SVUIA_ACTIVATE_FOCUS = 2,
	SVUIA_INPLACEACTIVATE = 3         // new flag for IShellView2
} SVUIA_STATUS;

[
    odl,
    uuid(000214E3-0000-0000-C000-000000000046),
    helpstring("IShellView interface")
]
interface IShellView : IOleWindow 
{
    HRESULT TranslateAccelerator(
        [in, out] MSG *lpmsg);

    HRESULT EnableModelessSV(
        [in] LONG fEnable);

    HRESULT UIActivate(
        [in] SVUIA_STATUS uState);

    HRESULT Refresh();

    HRESULT CreateViewWindow(
        [in] IShellView *lpPrevView,
        [in] FOLDERSETTINGS *lpfs,
        [in] IShellBrowser *psb,
        [in] RECT *prcView,
        [out] LONG *pLONG);

    HRESULT DestroyViewWindow();

    HRESULT GetCurrentInfo(
        [in, out] FOLDERSETTINGS *lpfs);

    HRESULT AddPropertySheetPages(
        [in] LONG dwReserved,
        [in] LONG lpfn,
        [in] LONG lParam);

    HRESULT SaveViewState();

    HRESULT SelectItem(
        [in] LONG pidlItem,
        [in] SVSI_Flags uFlags);

    HRESULT GetItemObject(
        [in] SVGIO_Flags uItem,
        [in, out] UUID *riid,
        [in, out] LPVOID ppv);

};


typedef struct SV2CVW2_PARAMS {
    LONG cbSize;
    IShellView *psvPrev;
    LONG pFOLDERSETTING;
    IShellBrowser *psbOwner;
    LONG prcView;
    LONG pvUUID;
    LONG hwndView;
} SV2CVW2_PARAMS;

[
    uuid(88E39E80-3578-11CF-AE69-08002B2E1262),
    odl
]
interface IShellView2 : IShellView {

    HRESULT GetView(
        [in, out] UUID* pvid, 
        [in] SV2GV_Flags uView);

    HRESULT CreateViewWindow2(
        [in, out] SV2CVW2_PARAMS *lpParams);

    HRESULT HandleRename(
        [in] LONG pidlNew);

    HRESULT SelectAndPositionItem(
        [in] LONG pidlItem,
        [in] SVSI_Flags uFlags,
        [in, out] POINT *point);
};

[
    odl,
    uuid(EBBC7C04-315E-11d2-B62F-006097DF5BD4)
]
interface IProgressDialog : stdole.IUnknown {

    HRESULT StartProgressDialog(
        [in] LONG hwndParent,
        [in] IUnknown *punkEnableModless,
        [in] PROGDLG dwFlags,
        [in, defaultvalue(0)] void *pvResevered);

    HRESULT StopProgressDialog();

    HRESULT SetTitle(
        [in] LPWSTR pwzTitle);

    HRESULT SetAnimation(
        [in] LONG hInstAnimation,
        [in] LONG idAnimation);

    BOOL HasUserCancelled();

    HRESULT SetProgress(
        [in] LONG dwCompleted,
        [in] LONG dwTotal);

    HRESULT SetProgress64(
        [in] CURRENCY ullCompleted,
        [in] CURRENCY ullTotal);

    HRESULT SetLine(
        [in] LONG dwLineNum,
        [in] LPWSTR pwzString,
        [in] BOOL fCompactPath,
        [in, defaultvalue(0)] void *pvResevered);

    HRESULT SetCancelMsg(
        [in] LPWSTR pwzCancelMsg,
        [in, defaultvalue(0)] void *pvResevered);

    HRESULT Timer(
        [in] LONG dwTimerAction,
        [in, defaultvalue(0)] void *pvResevered);
};

    [
        odl,
        uuid(0000000f-0000-0000-C000-000000000046),
    ]
    interface IMoniker : IPersistStream {

        // system moniker types; returned from IsSystemMoniker.
        typedef enum MKSYS {
            MKSYS_NONE = 0,
            MKSYS_GENERICCOMPOSITE = 1,
            MKSYS_FILEMONIKER = 2,
            MKSYS_ANTIMONIKER = 3,
            MKSYS_ITEMMONIKER = 4,
            MKSYS_POINTERMONIKER = 5,
            MKSYS_URLMONIKER = 6,
            MKSYS_CLASSMONIKER = 7,
            MKSYS_OBJREFMONIKER = 8,
            MKSYS_SESSIONMONIKER = 9
        } MKSYS;

        typedef enum MKREDUCE {
            MKRREDUCE_ONE           =   0x30,
            MKRREDUCE_TOUSER        =   0x20,
            MKRREDUCE_THROUGHUSER   =   0x10,
            MKRREDUCE_ALL           =   0
        } MKRREDUCE;

        HRESULT BindToObject(
            [in] IBindCtx *pbc,
            [in] IMoniker *pmkToLeft,
            [in] UUID *riidResult,
            [in, out] void *ppvResult);

        HRESULT BindToStorage(
            [in] IBindCtx *pbc,
            [in] IMoniker *pmkToLeft,
            [in] UUID *riid,
            [in, out] void *ppvObj);

        HRESULT Reduce(
            [in] IBindCtx *pbc,
            [in] LONG dwReduceHowFar,
            [in, out] IMoniker **ppmkToLeft,
            [out, retval] IMoniker **ppmkReduced);

        HRESULT ComposeWith(
            [in] IMoniker *pmkRight,
            [in] BOOL fOnlyIfNotGeneric,
            [out, retval] IMoniker **ppmkComposite);

        HRESULT Enum(
            [in] BOOL fForward,
            [out, retval] IEnumMoniker **ppenumMoniker);

        LONG IsEqual(
            [in] IMoniker *pmkOtherMoniker);

        HRESULT Hash(
            [out, retval] LONG *pdwHash);

		//Pass ObjPtr if not using ByVal 0
        LONG IsRunning(
            //[in] IBindCtx *pbc,
			[in] LONG pbc,
            //[in] IMoniker *pmkToLeft,
			[in] LONG pmkToLeft,
			//[in] IMoniker *pmkNewlyRunning);
			[in] LONG pmkNewlyRunning);
        HRESULT GetTimeOfLastChange(
            [in] IBindCtx *pbc,
            [in] IMoniker *pmkToLeft,
            [out, retval] CURRENCY *pFileTime);

        HRESULT Inverse(
            [out, retval] IMoniker **ppmk);

        HRESULT CommonPrefixWith(
            [in] IMoniker *pmkOther,
            [out, retval] IMoniker **ppmkPrefix);

        HRESULT RelativePathTo(
            [in] IMoniker *pmkOther,
            [out, retval] IMoniker **ppmkRelPath);

        long GetDisplayName(
            //[in] IBindCtx *pbc, //PASS OBJPTR
			[in] LONG pbc,
            //[in] IMoniker *pmkToLeft,
			[in] LONG pmkToLeft,
            [out] LONG *ppszDisplayName);

        HRESULT ParseDisplayName(
            [in] IBindCtx *pbc,
            [in] IMoniker *pmkToLeft,
            [in] LPWSTR pszDisplayName,
            [out, defaultvalue(0)] LONG *pchEaten,
            [out, retval] IMoniker **ppmkOut);

        HRESULT IsSystemMoniker(
            [out, retval] LONG *pdwMksys);
    }


	[
		odl,
		helpstring("IFolderView"),
		uuid(cde725b0-ccc9-4519-917e-325d72fab4ce),
	]
	interface IFolderView : stdole.IUnknown{

		HRESULT GetCurrentViewMode(
		[in, out] INT *pViewMode);

	HRESULT SetCurrentViewMode(
		[in] INT ViewMode);

	HRESULT GetFolder(
		[in] UUID *riid,
		[out] LPVOID ppv);

	HRESULT Item(
		[in] int iItemIndex,
		[out] LONG *ppidl);

	HRESULT ItemCount(
		[in] SVGIO_Flags uFlags,
		[out] int *pcItems);

	HRESULT Items(
		[in] SVGIO_Flags uFlags,
		[in] UUID *riid,
		[out] LPVOID ppv);

	HRESULT GetSelectionMarkedItem(
		[out] int *piItem);

	HRESULT GetFocusedItem(
		[out] int *piItem);

	HRESULT GetItemPosition(
		[in] LONG pidl,
		[out] POINT *ppt);

	HRESULT GetSpacing(
		[in, out] POINT *ppt);

	HRESULT GetDefaultSpacing(
		[out] POINT *ppt);

	HRESULT GetAutoArrange();

	// like IShellView::SelectItem() by index
	HRESULT SelectItem(
		[in] int iItem,
		[in] SVSI_Flags dwFlags);

	HRESULT SelectAndPositionItems(
		[in] INT cidl,
		[in] LONG *apidl,
		[in] POINT *apt,
		[in] SVSI_Flags dwFlags);
	};
