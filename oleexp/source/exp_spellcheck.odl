//tbShellLib - 100% Complete

typedef enum WORDLIST_TYPE
{
	WORDLIST_TYPE_IGNORE = 0, // Ignore wordlist - words that should be considered correctly spelled in a single spell checking session
	WORDLIST_TYPE_ADD = 1, // Added words wordlist - words that should be considered correctly spelled - permanent and applies to all clients
	WORDLIST_TYPE_EXCLUDE = 2, // Excluded words wordlist - words that should be considered misspelled - permanent and applies to all clients
	WORDLIST_TYPE_AUTOCORRECT = 3, // Autocorrect wordlit - pairs of words with a word that should be automatically substituted by the other word in the pair - permanent and applies to all clients
} WORDLIST_TYPE;
// This interface represents a spelling error - you can get information like the range that comprises the error, or the suggestions for that misspelled word
// Should be implemented by any spell check provider (someone who provides a spell checking engine), and used by clients of spell checking
// It is obtained through IEnumSpellingError::Next
	typedef enum CORRECTIVE_ACTION
	{
		CORRECTIVE_ACTION_NONE = 0, // None - there's no error
		CORRECTIVE_ACTION_GET_SUGGESTIONS = 1, // GetSuggestions - the client should show a list of suggestions (obtained through ISpellChecker::Suggest) to the user
		CORRECTIVE_ACTION_REPLACE = 2, // Replace - the client should autocorrect the word to the word obtained from ISpellingError::get_Replacement
		CORRECTIVE_ACTION_DELETE = 3, // Delete - the client should delete this word
	} CORRECTIVE_ACTION;
[
	odl,
	uuid(B7C82D61-FBE8-4B47-9B27-6C0D2E0DE0A3)
]
interface ISpellingError : stdole.IUnknown
{
	// Action that a client should take on a specific spelling error (obtained from ISpellingError::get_CorrectiveAction)


	[propget] HRESULT StartIndex([out, retval] ULONG* value);
	[propget] HRESULT Length([out, retval] ULONG* value);
	[propget] HRESULT CorrectiveAction([out, retval] CORRECTIVE_ACTION* value);
	[propget] HRESULT Replacement([out, retval] long* value);
}

// This interface is an enumeration of spelling errors
// Should be implemented by any spell check provider (someone who provides a spell checking engine), and used by clients of spell checking
// It is obtained through ISpellChecker::Check
[
	odl,
	uuid(803E3BD4-2828-4410-8290-418D1D73C762)
]
interface IEnumSpellingError : stdole.IUnknown
{
	long Next([out] ISpellingError** value);
}

// This interface holds the associated data of a spelling option
// Should be implemented by any spell check provider (someone who provides a spell checking engine), and used by clients of spell checking
// It is obtained through ISpellChecker::GetOptionDescription
[
	odl,
	uuid(432E5F85-35CF-4606-A801-6F70277E1D7A)
]
interface IOptionDescription : stdole.IUnknown
{
	[propget] HRESULT Id([out, retval] long* value);
	[propget] HRESULT Heading([out, retval] long* value);
	[propget] HRESULT Description([out, retval] long* value);
	[propget] HRESULT Labels([out, retval] IEnumString** value);
}

interface ISpellChecker;

// This interface should be implemented by clients of spell checking that wish to be notified of any changes that might change spell checking results
[
	odl,
	uuid(0B83A5B0-792F-4EAB-9799-ACF52C5ED08A)
]
interface ISpellCheckerChangedEventHandler : stdole.IUnknown
{
	HRESULT Invoke([in] ISpellChecker* sender);
}

// This interface represents a spell checker for a specific language
// Should be used by clients of spell checking
// It is obtained through ISpellCheckerFactory::CreateSpellChecker

// A suggested scenario for ComprehensiveCheck is for a real-time text input of small text by the user (such as when the user is typing a word) 
// On the other hand, Check is better suited for large-text input scenarios

[
	odl,
	uuid(B6FD0B71-E2BC-4653-8D05-F197E412770B)
]
interface ISpellChecker : stdole.IUnknown
{
	[propget] HRESULT LanguageTag([out, retval] long* value);
	HRESULT Check([in] long text, [out, retval] IEnumSpellingError** value);
	HRESULT Suggest([in] long word, [out, retval] IEnumString** value);
	HRESULT Add([in] long word);
	HRESULT Ignore([in] long word);
	HRESULT AutoCorrect([in] long from, [in] long to);
	HRESULT GetOptionValue([in] long optionId, [out, retval] BYTE* value);
	[propget] HRESULT OptionIds([out, retval] IEnumString** value);
	[propget] HRESULT Id([out, retval] long* value);
	[propget] HRESULT LocalizedName([out, retval] long* value);
	HRESULT add_SpellCheckerChanged([in] ISpellCheckerChangedEventHandler* handler, [out, retval] DWORD* eventCookie);
	HRESULT remove_SpellCheckerChanged([in] DWORD eventCookie);
	HRESULT GetOptionDescription([in] long optionId, [out, retval] IOptionDescription** value);
	HRESULT ComprehensiveCheck([in] long text, [out, retval] IEnumSpellingError** value);
};

[
	odl,
	uuid(E7ED1C71-87F7-4378-A840-C9200DACEE47)
]
interface ISpellChecker2 : ISpellChecker
{
	HRESULT Remove([in] LPCWSTR word);
};


// This interface is used to create a spell checker for a given language and to obtain information about which language do have a spell checker available in the system
// Should be used by clients of spell checking
// It is obtained through CoCreateInstance
[
	odl,
	uuid(8E018A9D-2415-4677-BF08-794EA61F94BB)
]
interface ISpellCheckerFactory : stdole.IUnknown
{
	[propget] HRESULT SupportedLanguages([out, retval] IEnumString** value);
	HRESULT IsSupported([in] long languageTag, [out, retval] BOOL* value);
	HRESULT CreateSpellChecker([in] long languageTag, [out, retval] ISpellChecker** value);
}

// This interface is used to register new spelling dictionaries to be read by the spell checking facility
// Should be used by clients of spell checking
// It is obtained through a QueryInterface in ISpellCheckerFactory
[
	odl,
	uuid(AA176B85-0E12-4844-8E1A-EEF1DA77F586)
]
interface IUserDictionariesRegistrar : stdole.IUnknown
{
	HRESULT RegisterUserDictionary([in] long dictionaryPath, [in] long languageTag);
	HRESULT UnregisterUserDictionary([in] long dictionaryPath, [in] long languageTag);
}
 
	[
		uuid(7AB36653-1796-484B-BDFA-E74F1DB7C1DC)
	]
	coclass SpellCheckerFactory
	{
		[default] interface ISpellCheckerFactory;
		interface IUserDictionariesRegistrar;
	};
 
	[
		odl,
		uuid(73E976E0-8ED4-4EB1-80D7-1BE0A16B0C38)
	]
	interface ISpellCheckProvider : stdole.IUnknown
	{
		[propget] HRESULT LanguageTag([out, retval] long* value);
		HRESULT Check([in] long text, [out, retval] IEnumSpellingError** value);
		HRESULT Suggest([in] long word, [out, retval] IEnumString** value);
		HRESULT GetOptionValue([in] long optionId, [out, retval] BYTE* value);
		HRESULT SetOptionValue([in] long optionId, [in] BYTE value);
		[propget] HRESULT OptionIds([out, retval] IEnumString** value);
		[propget] HRESULT Id([out, retval] long* value);
		[propget] HRESULT LocalizedName([out, retval] long* value);
		HRESULT GetOptionDescription([in] long optionId, [out, retval] IOptionDescription** value);
		HRESULT InitializeWordlist([in] WORDLIST_TYPE wordlistType, [in] IEnumString* words);
	}

	// This interface represents extended functionality that a spell check provider  (someone who provides a spell checker to be used in the system)
	// A provider may optionally implement on the same object that implements ISpellCheckProvider - it is NOT used by clients, but by the system
	// When the provider engine has the option of doing a more thorough but slower checking, this interface should be implemented
	// If this interface is not implemented, all client calls to ISpellChecker::ComprehensiveCheck or ISpellChecker::Check will both be served by ISpellCheckProvider::Check
	[
		odl,
		uuid(0C58F8DE-8E94-479E-9717-70C42C4AD2C3)
	]
	interface IComprehensiveSpellCheckProvider : stdole.IUnknown
	{
		HRESULT ComprehensiveCheck([in] long text, [out, retval] IEnumSpellingError** value);
	}

	// This interface should be implemented by spell checking providers - it is NOT used by clients, but by the system
	// It creates a provider for a given language and gives information about which providers a given spell checking engine supports
	[
		odl,
		uuid(9F671E11-77D6-4C92-AEFB-615215E3A4BE)
	]
	interface ISpellCheckProviderFactory : stdole.IUnknown
	{
		[propget] HRESULT SupportedLanguages([out, retval] IEnumString** value);
		HRESULT IsSupported([in] long languageTag, [out, retval] BOOL* value);
		HRESULT CreateSpellCheckProvider([in] long languageTag, [out, retval] ISpellCheckProvider** value);
	}