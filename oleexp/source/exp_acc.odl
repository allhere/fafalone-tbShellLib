



//tbShellLib - 100% implemented

interface IAccessible;

[
	dllname("oleacc.dll")
]
module OleAcc
{
	const long STATE_SYSTEM_HASPOPUP = 0x40000000;

// PROPERTIES:  Hierarchical

	const long DISPID_ACC_PARENT = -5000;
const long DISPID_ACC_CHILDCOUNT = -5001;
const long DISPID_ACC_CHILD = -5002;

// PROPERTIES:  Descriptional

const long DISPID_ACC_NAME = -5003;
const long DISPID_ACC_VALUE = -5004;
const long DISPID_ACC_DESCRIPTION = -5005;
const long DISPID_ACC_ROLE = -5006;
const long DISPID_ACC_STATE = -5007;
const long DISPID_ACC_HELP = -5008;
const long DISPID_ACC_HELPTOPIC = -5009;
const long DISPID_ACC_KEYBOARDSHORTCUT = -5010;
const long DISPID_ACC_FOCUS = -5011;
const long DISPID_ACC_SELECTION = -5012;
const long DISPID_ACC_DEFAULTACTION = -5013;

// METHODS

const long DISPID_ACC_SELECT = -5014;
const long DISPID_ACC_LOCATION = -5015;
const long DISPID_ACC_NAVIGATE = -5016;
const long DISPID_ACC_HITTEST = -5017;
const long DISPID_ACC_DODEFAULTACTION = -5018;

	const long NAVDIR_MIN = 0x00000000;
const long NAVDIR_UP = 0x00000001;
const long NAVDIR_DOWN = 0x00000002;
const long NAVDIR_LEFT = 0x00000003;
const long NAVDIR_RIGHT = 0x00000004;
const long NAVDIR_NEXT = 0x00000005;
const long NAVDIR_PREVIOUS = 0x00000006;
const long NAVDIR_FIRSTCHILD = 0x00000007;
const long NAVDIR_LASTCHILD = 0x00000008;
const long NAVDIR_MAX = 0x00000009;

// Input to DISPID_ACC_SELECT
const long SELFLAG_NONE = 0x00000000;
const long SELFLAG_TAKEFOCUS = 0x00000001;
const long SELFLAG_TAKESELECTION = 0x00000002;
const long SELFLAG_EXTENDSELECTION = 0x00000004;
const long SELFLAG_ADDSELECTION = 0x00000008;
const long SELFLAG_REMOVESELECTION = 0x00000010;
const long SELFLAG_VALID = 0x0000001F;

// Output from DISPID_ACC_STATE
const long STATE_SYSTEM_NORMAL = 0x00000000;
const long STATE_SYSTEM_UNAVAILABLE = 0x00000001;  // Disabled
const long STATE_SYSTEM_SELECTED = 0x00000002;
const long STATE_SYSTEM_FOCUSED = 0x00000004;
const long STATE_SYSTEM_PRESSED = 0x00000008;
const long STATE_SYSTEM_CHECKED = 0x00000010;
const long STATE_SYSTEM_MIXED = 0x00000020;  // 3-state checkbox or toolbar button
const long STATE_SYSTEM_INDETERMINATE = 0x00000020;  //STATE_SYSTEM_MIXED;
const long STATE_SYSTEM_READONLY = 0x00000040;
const long STATE_SYSTEM_HOTTRACKED = 0x00000080;
const long STATE_SYSTEM_DEFAULT = 0x00000100;
const long STATE_SYSTEM_EXPANDED = 0x00000200;
const long STATE_SYSTEM_COLLAPSED = 0x00000400;
const long STATE_SYSTEM_BUSY = 0x00000800;
const long STATE_SYSTEM_FLOATING = 0x00001000;  // Children "owned" not "contained" by parent
const long STATE_SYSTEM_MARQUEED = 0x00002000;
const long STATE_SYSTEM_ANIMATED = 0x00004000;
const long STATE_SYSTEM_INVISIBLE = 0x00008000;
const long STATE_SYSTEM_OFFSCREEN = 0x00010000;
const long STATE_SYSTEM_SIZEABLE = 0x00020000;
const long STATE_SYSTEM_MOVEABLE = 0x00040000;
const long STATE_SYSTEM_SELFVOICING = 0x00080000;
const long STATE_SYSTEM_FOCUSABLE = 0x00100000;
const long STATE_SYSTEM_SELECTABLE = 0x00200000;
const long STATE_SYSTEM_LINKED = 0x00400000;
const long STATE_SYSTEM_TRAVERSED = 0x00800000;
const long STATE_SYSTEM_MULTISELECTABLE = 0x01000000;  // Supports multiple selection
const long STATE_SYSTEM_EXTSELECTABLE = 0x02000000;  // Supports extended selection
const long STATE_SYSTEM_ALERT_LOW = 0x04000000;  // This information is of low priority
const long STATE_SYSTEM_ALERT_MEDIUM = 0x08000000;  // This information is of medium priority
const long STATE_SYSTEM_ALERT_HIGH = 0x10000000;  // This information is of high priority
const long STATE_SYSTEM_PROTECTED = 0x20000000;
const long STATE_SYSTEM_VALID = 0x7FFFFFFF;

	const long ROLE_SYSTEM_TITLEBAR = 0x00000001;
const long ROLE_SYSTEM_MENUBAR = 0x00000002;
const long ROLE_SYSTEM_SCROLLBAR = 0x00000003;
const long ROLE_SYSTEM_GRIP = 0x00000004;
const long ROLE_SYSTEM_SOUND = 0x00000005;
const long ROLE_SYSTEM_CURSOR = 0x00000006;
const long ROLE_SYSTEM_CARET = 0x00000007;
const long ROLE_SYSTEM_ALERT = 0x00000008;
const long ROLE_SYSTEM_WINDOW = 0x00000009;
const long ROLE_SYSTEM_CLIENT = 0x0000000A;
const long ROLE_SYSTEM_MENUPOPUP = 0x0000000B;
const long ROLE_SYSTEM_MENUITEM = 0x0000000C;
const long ROLE_SYSTEM_TOOLTIP = 0x0000000D;
const long ROLE_SYSTEM_APPLICATION = 0x0000000E;
const long ROLE_SYSTEM_DOCUMENT = 0x0000000F;
const long ROLE_SYSTEM_PANE = 0x00000010;
const long ROLE_SYSTEM_CHART = 0x00000011;
const long ROLE_SYSTEM_DIALOG = 0x00000012;
const long ROLE_SYSTEM_BORDER = 0x00000013;
const long ROLE_SYSTEM_GROUPING = 0x00000014;
const long ROLE_SYSTEM_SEPARATOR = 0x00000015;
const long ROLE_SYSTEM_TOOLBAR = 0x00000016;
const long ROLE_SYSTEM_STATUSBAR = 0x00000017;
const long ROLE_SYSTEM_TABLE = 0x00000018;
const long ROLE_SYSTEM_COLUMNHEADER = 0x00000019;
const long ROLE_SYSTEM_ROWHEADER = 0x0000001A;
const long ROLE_SYSTEM_COLUMN = 0x0000001B;
const long ROLE_SYSTEM_ROW = 0x0000001C;
const long ROLE_SYSTEM_CELL = 0x0000001D;
const long ROLE_SYSTEM_LINK = 0x0000001E;
const long ROLE_SYSTEM_HELPBALLOON = 0x0000001F;
const long ROLE_SYSTEM_CHARACTER = 0x00000020;
const long ROLE_SYSTEM_LIST = 0x00000021;
const long ROLE_SYSTEM_LISTITEM = 0x00000022;
const long ROLE_SYSTEM_OUTLINE = 0x00000023;
const long ROLE_SYSTEM_OUTLINEITEM = 0x00000024;
const long ROLE_SYSTEM_PAGETAB = 0x00000025;
const long ROLE_SYSTEM_PROPERTYPAGE = 0x00000026;
const long ROLE_SYSTEM_INDICATOR = 0x00000027;
const long ROLE_SYSTEM_GRAPHIC = 0x00000028;
const long ROLE_SYSTEM_STATICTEXT = 0x00000029;
const long ROLE_SYSTEM_TEXT = 0x0000002A;  // Editable, selectable, etc.
const long ROLE_SYSTEM_PUSHBUTTON = 0x0000002B;
const long ROLE_SYSTEM_CHECKBUTTON = 0x0000002C;
const long ROLE_SYSTEM_RADIOBUTTON = 0x0000002D;
const long ROLE_SYSTEM_COMBOBOX = 0x0000002E;
const long ROLE_SYSTEM_DROPLIST = 0x0000002F;
const long ROLE_SYSTEM_PROGRESSBAR = 0x00000030;
const long ROLE_SYSTEM_DIAL = 0x00000031;
const long ROLE_SYSTEM_HOTKEYFIELD = 0x00000032;
const long ROLE_SYSTEM_SLIDER = 0x00000033;
const long ROLE_SYSTEM_SPINBUTTON = 0x00000034;
const long ROLE_SYSTEM_DIAGRAM = 0x00000035;
const long ROLE_SYSTEM_ANIMATION = 0x00000036;
const long ROLE_SYSTEM_EQUATION = 0x00000037;
const long ROLE_SYSTEM_BUTTONDROPDOWN = 0x00000038;
const long ROLE_SYSTEM_BUTTONMENU = 0x00000039;
const long ROLE_SYSTEM_BUTTONDROPDOWNGRID = 0x0000003A;
const long ROLE_SYSTEM_WHITESPACE = 0x0000003B;
const long ROLE_SYSTEM_PAGETABLIST = 0x0000003C;
const long ROLE_SYSTEM_CLOCK = 0x0000003D;
const long ROLE_SYSTEM_SPLITBUTTON = 0x0000003E;
const long ROLE_SYSTEM_IPADDRESS = 0x0000003F;
const long ROLE_SYSTEM_OUTLINEBUTTON = 0x00000040;

const DWORD MSAA_MENU_SIG = 0xAA0DF00D;

	[entry("LresultFromObject")]
    LongPtr LresultFromObject([in] REFIID riid, [in] LongPtr wParam, [in] IUnknown* punk);
	[entry("ObjectFromLresult")]
	long           ObjectFromLresult([in] LongPtr lResult, [in] REFIID riid, [in] LongPtr wParam, [out] LPVOID ppvObject);
	[entry("WindowFromAccessibleObject")]
	long           WindowFromAccessibleObject([in] IAccessible* pAcc, [out] HWND* phwnd);
	[entry("AccessibleObjectFromWindow")]
	long           AccessibleObjectFromWindow([in] HWND hwnd, [in] DWORD dwId, [in] REFIID riid, [out] LPVOID ppvObject);
	[entry("AccessibleObjectFromEvent")]
	long           AccessibleObjectFromEvent([in] HWND hwnd, [in] DWORD dwId, [in] DWORD dwChildId, [out]IAccessible** ppacc, [out] VARIANT* pvarChild);
	[entry("AccessibleObjectFromPoint")]
	long           AccessibleObjectFromPoint(/*[in] POINT*/ [in] int ptScreenX, [in] int ptScreenY, [out] IAccessible * *ppacc, [out] VARIANT * pvarChild);
	[entry("AccessibleChildren")]
	long           AccessibleChildren ([in] IAccessible* paccContainer, [in] LONG iChildStart, [in] LONG cChildren, [out] VARIANT* rgvarChildren, [out] LONG* pcObtained);

	[entry("GetRoleTextA")]
	long    GetRoleTextA([in] DWORD lRole, [out] LongPtr lpszRole, [in] UINT cchRoleMax);
	[entry("GetRoleTextW")]
	long    GetRoleTextW([in] DWORD lRole, [out] LongPtr lpszRole, [in] UINT cchRoleMax);
	[entry("GetRoleTextW")]
	long    GetRoleText([in] DWORD lRole, [out] LongPtr lpszRole, [in] UINT cchRoleMax);

	[entry("GetStateTextA")]
	long     GetStateTextA([in] DWORD lStateBit, [out] LongPtr lpszState, [in] UINT cchState);
	[entry("GetStateTextW")]
	long    GetStateTextW([in] DWORD lStateBit, [out] LongPtr lpszState, [in] UINT cchState);
	[entry("GetStateTextW")]
	long    GetStateText([in] DWORD lStateBit, [out] LongPtr lpszState, [in] UINT cchState);

	[entry("GetOleaccVersionInfo")]
	void   GetOleaccVersionInfo([out] DWORD* pVer, [out] DWORD* pBuild);

	[entry("CreateStdAccessibleObject")]
	long           CreateStdAccessibleObject([in] HWND hwnd, [in] LONG idObject, [in] REFIID riid, [out] LPVOID ppvObject);

	[entry("CreateStdAccessibleProxyA")]
	long           CreateStdAccessibleProxyA([in] HWND hwnd, [in] LPSTR pClassName, [in] LONG idObject, [in] REFIID riid, [out] LPVOID ppvObject);
	[entry("CreateStdAccessibleProxyW")]
	long           CreateStdAccessibleProxyW([in] HWND hwnd, [in] LongPtr pClassName, [in] LONG idObject, [in] REFIID riid, [out] LPVOID ppvObject);
	[entry("CreateStdAccessibleProxyW")]
	long           CreateStdAccessibleProxy([in] HWND hwnd, [in] LongPtr pClassName, [in] LONG idObject, [in] REFIID riid, [out] LPVOID ppvObject);

typedef enum ANRUS_Flags {
	ANRUS_ON_SCREEN_KEYBOARD_ACTIVE = 0x0000001,
	ANRUS_TOUCH_MODIFICATION_ACTIVE = 0x0000002,
	ANRUS_PRIORITY_AUDIO_ACTIVE     = 0x0000004,
	ANRUS_PRIORITY_AUDIO_ACTIVE_NODUCK = 0x0000008,
	 ANRUS_PRIORITY_AUDIO_DYNAMIC_DUCK = 0x0000010
} ANRUS_Flags;
[entry("AccSetRunningUtilityState")]
long           AccSetRunningUtilityState([in] HWND hwndApp, [in] ANRUS_Flags dwUtilityStateMask, [in] ANRUS_Flags dwUtilityState);

[entry("AccNotifyTouchInteraction")]
long           AccNotifyTouchInteraction([in] HWND hwndApp, [in] HWND hwndTarget,  /*POINT*/[in] int ptTargetX, [in] int ptTargetY);
};

typedef struct MSAAMENUINFO {
	DWORD   dwMSAASignature; // Must be MSAA_MENU_SIG
	DWORD   cchWText;        // Length of text, in Unicode characters, excluding terminating NUL
    long    pszWText;        // NUL-terminated text, in Unicode
} MSAAMENUINFO;


[
	odl,
	uuid(618736e0-3c3d-11cf-810c-00aa00389b71),
	dual
]

interface IAccessible : IDispatch
{

	// Hierarchy Properties

	[hidden, propget, id(-5000)] HRESULT accParent([out, retval] IDispatch** ppdispParent);

	[hidden, propget, id(-5001)] HRESULT accChildCount([out, retval] long* pcountChildren);

	[hidden, propget, id(-5002)] HRESULT accChild([in] VARIANT varChild, [out, retval] IDispatch** ppdispChild);

	// Description Properties

	[hidden, propget, id(-5003)] HRESULT accName([in, optional] VARIANT varChild, [out, retval] BSTR* pszName);

	[hidden, propget, id(-5004)] HRESULT accValue([in, optional] VARIANT varChild, [out, retval] BSTR* pszValue);

	[hidden, propget, id(-5005)] HRESULT accDescription([in, optional] VARIANT varChild, [out, retval] BSTR* pszDescription);

	[hidden, propget, id(-5006)] HRESULT accRole([in, optional] VARIANT varChild, [out, retval] VARIANT * pvarRole);

	[hidden, propget, id(-5007)] HRESULT accState([in, optional] VARIANT varChild, [out, retval] VARIANT * pvarState);

	[hidden, propget, id(-5008)] HRESULT accHelp([in, optional] VARIANT varChild, [out, retval] BSTR * pszHelp);

	[hidden, propget, id(-5009)] HRESULT accHelpTopic([out] BSTR * pszHelpFile, [in, optional] VARIANT varChild, [out, retval] long * pidTopic);

	[hidden, propget, id(-5010)] HRESULT accKeyboardShortcut([in, optional] VARIANT varChild, [out, retval] BSTR * pszKeyboardShortcut);

	[hidden, propget, id(-5011)] HRESULT accFocus([out, retval] VARIANT * pvarChild);

	[hidden, propget, id(-5012)] HRESULT accSelection([out, retval] VARIANT * pvarChildren);

	[hidden, propget, id(-5013)] HRESULT accDefaultAction([in, optional] VARIANT varChild, [out, retval] BSTR * pszDefaultAction);


	// Methods

	[hidden, id(-5014)] HRESULT accSelect([in] long flagsSelect, [in, optional] VARIANT varChild);

	[hidden, id(-5015)] HRESULT accLocation([out] long * pxLeft, [out] long * pyTop, [out] long * pcxWidth, [out] long * pcyHeight, [in, optional] VARIANT varChild);

	[hidden, id(-5016)] HRESULT accNavigate([in] long navDir, [in, optional] VARIANT varStart, [out, retval] VARIANT * pvarEndUpAt);

	[hidden, id(-5017)] HRESULT accHitTest([in] long xLeft, [in] long yTop, [out, retval] VARIANT * pvarChild);

	[hidden, id(-5018)] HRESULT accDoDefaultAction([in, optional] VARIANT varChild);

	// Description Properties, puts

	[hidden, propput, id(-5003)] HRESULT accName([in, optional] VARIANT varChild, [in] BSTR szName);

	[hidden, propput, id(-5004)] HRESULT accValue([in, optional] VARIANT varChild, [in] BSTR szValue);
}

//
//
//  Contained object hosting interfaces
//
//  These enable a contained binary control, such as an ActiveX control, to communicate
//  with its control host to expose MSAA properties, methods and events.
//
//
[
	odl,
	uuid(03022430-ABC4-11d0-BDE2-00AA001A1953)
]

interface IAccessibleHandler : stdole.IUnknown
{
	HRESULT AccessibleObjectFromID([in] long hwnd,[in] long lObjectID,[out] IAccessible **pIAccessible);
}


[
	odl,
	uuid(BF3ABD9C-76DA-4389-9EB6-1427D25ABAB7)
]

interface IAccessibleWindowlessSite : stdole.IUnknown
{
	//typedef [unique] IAccessibleWindowlessSite *LPACCESSIBLEWINDOWLESSSITE;

	HRESULT AcquireObjectIdRange(
	[in] long rangeSize,
		[in] IAccessibleHandler * pRangeOwner,
		[out] long * pRangeBase);

HRESULT ReleaseObjectIdRange(
	[in] long rangeBase,
	[in] IAccessibleHandler * pRangeOwner);

// Returns an array of ranges for this control; the safe array is structured
// as (base1, size1, base2, size2, ...)
HRESULT QueryObjectIdRanges(
	[in] IAccessibleHandler * pRangesOwner,
	[out] long * psaRanges);
//[out] SAFEARRAY(int) * psaRanges);

HRESULT GetParentAccessible(
	[out] IAccessible ** ppParent);
}


//
//
//  Annotation interfaces
//
//



typedef enum AnnoScope
{
	ANNO_THIS = 0,    // Just this object
	ANNO_CONTAINER = 1,    // This object, plus immediate children
} AnnoScope;



typedef UUID MSAAPROPID;


// This interface is used to expose an identity string that is used as a key
// into the annotation database.
[
	odl,
	uuid(7852b78d-1cfd-41c1-a615-9c0c85960b5f)
]
interface IAccIdentity : stdole.IUnknown
{
	HRESULT GetIdentityString(
	[in]                                DWORD               dwIDChild,

		//		[out, size_is(, *pdwIDStringLen)]  BYTE **             ppIDString,
		[out]  long* ppIDString,
		[out]                               DWORD *             pdwIDStringLen
		);
};



[
	odl,
	uuid(76c0dbbb-15e0-4e7b-b61b-20eeea2001e0)
]
interface IAccPropServer : stdole.IUnknown
{
	HRESULT GetPropValue(
	//[in, size_is(dwIDStringLen)]        const BYTE *        pIDString,
		[in]        long        pIDString,
		[in]                                DWORD               dwIDStringLen,

		[in]                                MSAAPROPID          idProp,
		[out]                               VARIANT *           pvarValue,
		[out]                               BOOL *              pfHasProp);
};


[
	odl,
	uuid(6e26e776-04f0-495d-80e4-3330352e3169)
]
interface IAccPropServices : stdole.IUnknown
{
	HRESULT SetPropValue(
	//[in, size_is(dwIDStringLen)]        const BYTE *        pIDString,
		[in]        long        pIDString,
		[in]                                DWORD               dwIDStringLen,

		[in]                                MSAAPROPID          idProp,
		[in]                                VARIANT             var
		);


HRESULT SetPropServer(
	//[in, size_is(dwIDStringLen)]        const BYTE *        pIDString,
	[in]        long        pIDString,
	[in]                                DWORD               dwIDStringLen,

	//[in, size_is(cProps)]               const MSAAPROPID *  paProps,
	[in]               MSAAPROPID *  paProps,
	[in]                                int                 cProps,

	[in]                                IAccPropServer *    pServer,
	[in]                                AnnoScope           annoScope
	);


HRESULT ClearProps(
	//[in, size_is(dwIDStringLen)]        const BYTE *        pIDString,
	[in]       long       pIDString,
	[in]                                DWORD               dwIDStringLen,

	//[in, size_is(cProps)]               const MSAAPROPID *  paProps,
	[in]         MSAAPROPID *  paProps,
	[in]                                int                 cProps
	);




// Quick OLEACC/HWND-based functionality

HRESULT SetHwndProp(
	[in]                                HWND                hwnd,
	[in]                                DWORD               idObject,
	[in]                                DWORD               idChild,
	[in]                                MSAAPROPID          idProp,
	[in]                                VARIANT             var
	);

HRESULT SetHwndPropStr(
	[in]                                HWND                hwnd,
	[in]                                DWORD               idObject,
	[in]                                DWORD               idChild,
	[in]                                MSAAPROPID          idProp,
	[in]                        LongPtr             str
	);

HRESULT SetHwndPropServer(
	[in]                                HWND                hwnd,
	[in]                                DWORD               idObject,
	[in]                                DWORD               idChild,

	//[in, size_is(cProps)]               const MSAAPROPID *  paProps,
	[in]               MSAAPROPID *  paProps,
	[in]                                int                 cProps,

	[in]                                IAccPropServer *    pServer,
	[in]                                AnnoScope           annoScope
	);

HRESULT ClearHwndProps(
	[in]                                HWND                hwnd,
	[in]                                DWORD               idObject,
	[in]                                DWORD               idChild,

	//[in, size_is(cProps)]               const MSAAPROPID *  paProps,
	[in]         MSAAPROPID *  paProps,
	[in]                                int                 cProps
	);



// Methods for composing/decomposing HWND based identity strings...

HRESULT ComposeHwndIdentityString(
	[in]                                HWND                hwnd,
	[in]                                DWORD               idObject,
	[in]                                DWORD               idChild,

	//[out, size_is(, *pdwIDStringLen)]  BYTE **             ppIDString,
	[out]  long*           ppIDString,
	[out]                               DWORD *             pdwIDStringLen
	);


HRESULT DecomposeHwndIdentityString(
	//[in, size_is(dwIDStringLen)]        const BYTE *        pIDString,
	[in]       long        pIDString,
	[in]                                DWORD               dwIDStringLen,

	[out]                               HWND *              phwnd,
	[out]                               DWORD *             pidObject,
	[out]                               DWORD *             pidChild
	);



// Quick OLEACC/HMENU-based functionality

HRESULT SetHmenuProp(
	[in]                                HMENU               hmenu,
	[in]                                DWORD               idChild,
	[in]                                MSAAPROPID          idProp,
	[in]                                VARIANT             var
	);

HRESULT SetHmenuPropStr(
	[in]                                HMENU               hmenu,
	[in]                                DWORD               idChild,
	[in]                                MSAAPROPID          idProp,
	[in]                        long         str
	);

HRESULT SetHmenuPropServer(
	[in]                                HMENU               hmenu,
	[in]                                DWORD               idChild,

	//[in, size_is(cProps)]               const MSAAPROPID *  paProps,
	[in]                 MSAAPROPID *  paProps,
	[in]                                int                 cProps,

	[in]                                IAccPropServer *    pServer,
	[in]                                AnnoScope           annoScope
	);

HRESULT ClearHmenuProps(
	[in]                                HMENU               hmenu,
	[in]                                DWORD               idChild,

	//[in, size_is(cProps)]               const MSAAPROPID *  paProps,
	[in]             MSAAPROPID *  paProps,
	[in]                                int                 cProps
	);


// Methods for composing/decomposing HMENU based identity strings...

HRESULT ComposeHmenuIdentityString(
	[in]                                HMENU               hmenu,
	[in]                                DWORD               idChild,

	//[out, size_is(, *pdwIDStringLen)]  BYTE **             ppIDString,
	[out]  long*             ppIDString,
	[out]                               DWORD *             pdwIDStringLen
	);


HRESULT DecomposeHmenuIdentityString(
	//[in, size_is(dwIDStringLen)]        const BYTE *        pIDString,
	[in]        long        pIDString,
	[in]                                DWORD               dwIDStringLen,

	[out]                               HMENU *             phmenu,
	[out]                               DWORD *             pidChild
	);
};

typedef enum UNDOCK_REASON
{
	UR_RESOLUTION_CHANGE = 0, // The accessibility window has been undocked because the resolution has changed
	UR_MONITOR_DISCONNECT = 1, // Undocked because the monitor was disconnected
} UNDOCK_REASON;

[
	odl,
	uuid(157733FD-A592-42E5-B594-248468C5A81B)
]
interface IAccessibilityDockingServiceCallback : stdole.IUnknown
{
	HRESULT Undocked([in] UNDOCK_REASON undockReason); // Called when the accessibility window has been undocked
}

// Developers who are interested in using the Accessibility Docking Service
// do not need to implement the following interface. An implementation is provided through the CoCreatable Object
// with the ID CLSID_AccessibilityDockingService
[
	odl,
	uuid(8849DC22-CEDF-4C95-998D-051419DD3F76)
]
interface IAccessibilityDockingService : stdole.IUnknown
{
	// This is used to get the available docking size (Fixed Width, Max Height) on a particular monitor
	// The units passed back are in screen pixels
	HRESULT GetAvailableSize([in] HMONITOR hMonitor, [out] UINT* pcxFixed, [out] UINT* pcyMax);

	// This is used to dock a window into the bottom of a monitor while the system is in immersive mode
	// The requested height is in screen pixels
	HRESULT DockWindow([in] HWND hwnd, [in] HMONITOR hMonitor, [in] UINT cyRequested, [in] IAccessibilityDockingServiceCallback* pCallback);

	// This undocks the passed in window
	HRESULT UndockWindow([in] HWND hwnd);
}

[
	uuid(b5f8350b-0548-48b1-a6ee-88bd00b4a5e7)
]
coclass CAccPropServices
{
	interface IAccPropServices;
}

// CLSID_AccessibilityDockingService
[uuid(29CE1D46-B481-4AA0-A08A-D3EBC8ACA402)] coclass AccessibilityDockingService { interface IAccessibilityDockingService; }


typedef enum Uia_TreeScope
{
    TreeScope_None = 0x0,
    TreeScope_Element = 0x1,
    TreeScope_Children = 0x2,
    TreeScope_Descendants = 0x4,
    TreeScope_Parent = 0x8,
    TreeScope_Ancestors = 0x10,
    TreeScope_Subtree = 0x7 //TreeScope_Element | TreeScope_Children | TreeScope_Descendants
} Uia_TreeScope;

typedef enum Uia_PropertyConditionFlags
{
    PropertyConditionFlags_None = 0x00,
    PropertyConditionFlags_IgnoreCase = 0x01,
    PropertyConditionFlags_MatchSubstring = 0x02,
} Uia_PropertyConditionFlags;

typedef enum Uia_AutomationElementMode
{
    AutomationElementMode_None,
    AutomationElementMode_Full
} Uia_AutomationElementMode;

typedef enum Uia_TreeTraversalOptions
{
    // Default traversal options are:
    // 1) Preorder,
    // 2) Visit children from first to last.
    TreeTraversalOptions_Default = 0x0,

    // Traversal order: Postorder 
    TreeTraversalOptions_PostOrder = 0x1,

    // Visit order: Visit children from last to first.
    TreeTraversalOptions_LastToFirstOrder = 0x2
} Uia_TreeTraversalOptions;

// Enum for IUIAutomation6 ConnectionRecoveryBehavior get/set property to set
// the options of the connection recovery behavior.
typedef enum ConnectionRecoveryBehaviorOptions
{
    ConnectionRecoveryBehaviorOptions_Disabled = 0x00,
    ConnectionRecoveryBehaviorOptions_Enabled = 0x01,
} ConnectionRecoveryBehaviorOptions;

// Enum for IUIAutomation6 CoalesceEvents get/set property to set the options
// of the connection recovery behavior.
typedef enum CoalesceEventsOptions
{
    CoalesceEventsOptions_Disabled = 0x00,
    CoalesceEventsOptions_Enabled = 0x01,
} CoalesceEventsOptions;

typedef enum Uia_NavigateDirection
{
    NavigateDirection_Parent = 0,
    NavigateDirection_NextSibling = 1,
    NavigateDirection_PreviousSibling = 2,
    NavigateDirection_FirstChild = 3,
    NavigateDirection_LastChild = 4
} Uia_NavigateDirection;

typedef enum Uia_ProviderOptions
{
    ProviderOptions_ClientSideProvider = 0x0001,
    ProviderOptions_ServerSideProvider = 0x0002,
    ProviderOptions_NonClientAreaProvider = 0x0004,
    ProviderOptions_OverrideProvider = 0x0008,
    ProviderOptions_ProviderOwnsSetFocus = 0x0010,
    ProviderOptions_UseComThreading = 0x0020,
    ProviderOptions_RefuseNonClientSupport = 0x0040,
    ProviderOptions_HasNativeIAccessible = 0x0080,
    ProviderOptions_UseClientCoordinates = 0x0100,
} Uia_ProviderOptions;

//cpp_quote("DEFINE_ENUM_FLAG_OPERATORS(ProviderOptions)")


// Pattern, Event & property enums
typedef enum Uia_StructureChangeType
{
    StructureChangeType_ChildAdded,
    StructureChangeType_ChildRemoved,
    StructureChangeType_ChildrenInvalidated,
    StructureChangeType_ChildrenBulkAdded,
    StructureChangeType_ChildrenBulkRemoved,
    StructureChangeType_ChildrenReordered,
} Uia_StructureChangeType;

typedef enum Uia_TextEditChangeType
{
    TextEditChangeType_None = 0,
    TextEditChangeType_AutoCorrect = 1,
    TextEditChangeType_Composition = 2,
    TextEditChangeType_CompositionFinalized = 3,
    TextEditChangeType_AutoComplete = 4
} Uia_TextEditChangeType;

typedef enum Uia_OrientationType
{
    OrientationType_None = 0,
    OrientationType_Horizontal = 1,
    OrientationType_Vertical = 2
} Uia_OrientationType;

typedef enum Uia_DockPosition
{
    DockPosition_Top = 0,
    DockPosition_Left = 1,
    DockPosition_Bottom = 2,
    DockPosition_Right = 3,
    DockPosition_Fill = 4,
    DockPosition_None = 5
} Uia_DockPosition;

typedef enum Uia_ExpandCollapseState
{
    ExpandCollapseState_Collapsed = 0,
    ExpandCollapseState_Expanded = 1,
    ExpandCollapseState_PartiallyExpanded = 2,
    ExpandCollapseState_LeafNode = 3
} Uia_ExpandCollapseState;

typedef enum Uia_ScrollAmount
{
    ScrollAmount_LargeDecrement = 0,
    ScrollAmount_SmallDecrement = 1,
    ScrollAmount_NoAmount = 2,
    ScrollAmount_LargeIncrement = 3,
    ScrollAmount_SmallIncrement = 4
} Uia_ScrollAmount;

typedef enum Uia_RowOrColumnMajor
{
    RowOrColumnMajor_RowMajor = 0,
    RowOrColumnMajor_ColumnMajor = 1,
    RowOrColumnMajor_Indeterminate = 2
} Uia_RowOrColumnMajor;

typedef enum Uia_ToggleState
{
    ToggleState_Off = 0,
    ToggleState_On = 1,
    ToggleState_Indeterminate = 2
} Uia_ToggleState;

typedef enum Uia_WindowVisualState
{
    WindowVisualState_Normal = 0,
    WindowVisualState_Maximized = 1,
    WindowVisualState_Minimized = 2
} Uia_WindowVisualState;

typedef enum Uia_SynchronizedInputType
{
    SynchronizedInputType_KeyUp = 0x01,
    SynchronizedInputType_KeyDown = 0x02,
    SynchronizedInputType_LeftMouseUp = 0x04,
    SynchronizedInputType_LeftMouseDown = 0x08,
    SynchronizedInputType_RightMouseUp = 0x10,
    SynchronizedInputType_RightMouseDown = 0x20
} Uia_SynchronizedInputType;

//cpp_quote("DEFINE_ENUM_FLAG_OPERATORS(SynchronizedInputType)")

typedef enum Uia_WindowInteractionState
{
    WindowInteractionState_Running = 0,
    WindowInteractionState_Closing = 1,
    WindowInteractionState_ReadyForUserInteraction = 2,
    WindowInteractionState_BlockedByModalWindow = 3,
    WindowInteractionState_NotResponding = 4
} Uia_WindowInteractionState;

typedef enum Uia_SayAsInterpretAs
{
    SayAsInterpretAs_None = 0,                          // <say-as interpret-as="none">x</say-as>
    SayAsInterpretAs_Spell = 1,                         // <say-as interpret-as="spell">x</say-as>
    SayAsInterpretAs_Cardinal = 2,                      // <say-as interpret-as="cardinal">x</say-as>
    SayAsInterpretAs_Ordinal = 3,                       // <say-as interpret-as="Ordinal">x</say-as>
    SayAsInterpretAs_Number = 4,                        // <say-as interpret-as="Number">x</say-as>
    SayAsInterpretAs_Date = 5,                          // <say-as interpret-as="Date">x</say-as>
    SayAsInterpretAs_Time = 6,                          // <say-as interpret-as="Time">x</say-as>
    SayAsInterpretAs_Telephone = 7,                     // <say-as interpret-as="Telephone">x</say-as>
    SayAsInterpretAs_Currency = 8,                      // <say-as interpret-as="Currency">x</say-as>
    SayAsInterpretAs_Net = 9,                           // <say-as interpret-as="Net">x</say-as>
    SayAsInterpretAs_Url = 10,                          // <say-as interpret-as="Url">x</say-as>
    SayAsInterpretAs_Address = 11,                      // <say-as interpret-as="Address">x</say-as>
    SayAsInterpretAs_Alphanumeric = 12,                 // <say-as interpret-as="Alphanumeric">x</say-as>
    SayAsInterpretAs_Name = 13,                         // <say-as interpret-as="Name">x</say-as>
    SayAsInterpretAs_Media = 14,                        // <say-as interpret-as="Media">x</say-as>
    SayAsInterpretAs_Date_MonthDayYear = 15,            // <say-as interpret-as="Date" format="mdy">x</say-as>
    SayAsInterpretAs_Date_DayMonthYear = 16,            // <say-as interpret-as="Date" format="dmy">x</say-as>
    SayAsInterpretAs_Date_YearMonthDay = 17,            // <say-as interpret-as="Date" format="ymd">x</say-as>
    SayAsInterpretAs_Date_YearMonth = 18,               // <say-as interpret-as="Date" format="ym">x</say-as>
    SayAsInterpretAs_Date_MonthYear = 19,               // <say-as interpret-as="Date" format="my">x</say-as>
    SayAsInterpretAs_Date_DayMonth = 20,                // <say-as interpret-as="Date" format="dm">x</say-as>
    SayAsInterpretAs_Date_MonthDay = 21,                // <say-as interpret-as="Date" format="md">x</say-as>
    SayAsInterpretAs_Date_Year = 22,                    // <say-as interpret-as="Date" format="y">x</say-as>
    SayAsInterpretAs_Time_HoursMinutesSeconds12 = 23,   // <say-as interpret-as="Time" format="hms12">x</say-as>
    SayAsInterpretAs_Time_HoursMinutes12 = 24,          // <say-as interpret-as="Time" format="hm12">x</say-as>
    SayAsInterpretAs_Time_HoursMinutesSeconds24 = 25,   // <say-as interpret-as="Time" format="hms24">x</say-as>
    SayAsInterpretAs_Time_HoursMinutes24 = 26           // <say-as interpret-as="Time" format="hm24">x</say-as>
} Uia_SayAsInterpretAs;

// Text enums

typedef enum Uia_TextUnit
{
    TextUnit_Character = 0,
    TextUnit_Format = 1,
    TextUnit_Word = 2,
    TextUnit_Line = 3,
    TextUnit_Paragraph = 4,
    TextUnit_Page = 5,
    TextUnit_Document = 6
} Uia_TextUnit;

typedef enum Uia_TextPatternRangeEndpoint
{
    TextPatternRangeEndpoint_Start = 0,
    TextPatternRangeEndpoint_End = 1
} Uia_TextPatternRangeEndpoint;

typedef enum Uia_SupportedTextSelection
{
    SupportedTextSelection_None = 0,
    SupportedTextSelection_Single = 1,
    SupportedTextSelection_Multiple = 2
} Uia_SupportedTextSelection;

typedef enum Uia_LiveSetting
{
    LiveSetting_Off = 0,
    LiveSetting_Polite = 1,
    LiveSetting_Assertive = 2
} Uia_LiveSetting;

typedef enum Uia_ActiveEnd
{
    ActiveEnd_None = 0,
    ActiveEnd_Start = 1,
    ActiveEnd_End = 2
} Uia_ActiveEnd;

typedef enum Uia_CaretPosition
{
    CaretPosition_Unknown = 0,
    CaretPosition_EndOfLine = 1,
    CaretPosition_BeginningOfLine = 2
} Uia_CaretPosition;

typedef enum Uia_CaretBidiMode
{
    CaretBidiMode_LTR = 0,
    CaretBidiMode_RTL = 1
} Uia_CaretBidiMode;

typedef enum Uia_ZoomUnit
{
    ZoomUnit_NoAmount = 0,
    ZoomUnit_LargeDecrement = 1,
    ZoomUnit_SmallDecrement = 2,
    ZoomUnit_LargeIncrement = 3,
    ZoomUnit_SmallIncrement = 4
} Uia_ZoomUnit;

// Text attributes

typedef enum Uia_AnimationStyle
{
    AnimationStyle_None = 0,
    AnimationStyle_LasVegasLights = 1,
    AnimationStyle_BlinkingBackground = 2,
    AnimationStyle_SparkleText = 3,
    AnimationStyle_MarchingBlackAnts = 4,
    AnimationStyle_MarchingRedAnts = 5,
    AnimationStyle_Shimmer = 6,
    AnimationStyle_Other = -1
} Uia_AnimationStyle;

typedef enum Uia_BulletStyle
{
    BulletStyle_None = 0,
    BulletStyle_HollowRoundBullet = 1,
    BulletStyle_FilledRoundBullet = 2,
    BulletStyle_HollowSquareBullet = 3,
    BulletStyle_FilledSquareBullet = 4,
    BulletStyle_DashBullet = 5,
    BulletStyle_Other = -1
} Uia_BulletStyle;

typedef enum Uia_CapStyle
{
    CapStyle_None = 0,
    CapStyle_SmallCap = 1,
    CapStyle_AllCap = 2,
    CapStyle_AllPetiteCaps = 3,
    CapStyle_PetiteCaps = 4,
    CapStyle_Unicase = 5,
    CapStyle_Titling = 6,
    CapStyle_Other = -1
} Uia_CapStyle;

typedef enum Uia_FillType
{
    FillType_None = 0,
    FillType_Color = 1,
    FillType_Gradient = 2,
    FillType_Picture = 3,
    FillType_Pattern = 4
} Uia_FillType;

typedef enum Uia_FlowDirections
{
    FlowDirections_Default = 0,
    FlowDirections_RightToLeft = 0x1,
    FlowDirections_BottomToTop = 0x2,
    FlowDirections_Vertical = 0x4,
} Uia_FlowDirections;

typedef enum Uia_HorizontalTextAlignment
{
    HorizontalTextAlignment_Left = 0,
    HorizontalTextAlignment_Centered = 1,
    HorizontalTextAlignment_Right = 2,
    HorizontalTextAlignment_Justified = 3
} Uia_HorizontalTextAlignment;

typedef enum Uia_OutlineStyles
{
    OutlineStyles_None = 0,
    OutlineStyles_Outline = 1,
    OutlineStyles_Shadow = 2,
    OutlineStyles_Engraved = 4,
    OutlineStyles_Embossed = 8
} Uia_OutlineStyles;

typedef enum Uia_TextDecorationLineStyle
{
    TextDecorationLineStyle_None = 0,
    TextDecorationLineStyle_Single = 1,
    TextDecorationLineStyle_WordsOnly = 2,
    TextDecorationLineStyle_Double = 3,
    TextDecorationLineStyle_Dot = 4,
    TextDecorationLineStyle_Dash = 5,
    TextDecorationLineStyle_DashDot = 6,
    TextDecorationLineStyle_DashDotDot = 7,
    TextDecorationLineStyle_Wavy = 8,
    TextDecorationLineStyle_ThickSingle = 9,
    TextDecorationLineStyle_DoubleWavy = 11,
    TextDecorationLineStyle_ThickWavy = 12,
    TextDecorationLineStyle_LongDash = 13,
    TextDecorationLineStyle_ThickDash = 14,
    TextDecorationLineStyle_ThickDashDot = 15,
    TextDecorationLineStyle_ThickDashDotDot = 16,
    TextDecorationLineStyle_ThickDot = 17,
    TextDecorationLineStyle_ThickLongDash = 18,
    TextDecorationLineStyle_Other = -1,
} Uia_TextDecorationLineStyle;

typedef enum Uia_VisualEffects
{
    VisualEffects_None = 0,
    VisualEffects_Shadow = 1, //(1 << 0),
    VisualEffects_Reflection = 2, //(1 << 1),
    VisualEffects_Glow = 4, //(1 << 2),
    VisualEffects_SoftEdges = 8, //(1 << 3),
    VisualEffects_Bevel = 16 //(1 << 4),
} Uia_VisualEffects;

typedef enum Uia_NotificationProcessing
{
    NotificationProcessing_ImportantAll = 0,
    NotificationProcessing_ImportantMostRecent = 1,
    NotificationProcessing_All = 2,
    NotificationProcessing_MostRecent = 3,
    NotificationProcessing_CurrentThenMostRecent = 4,
} Uia_NotificationProcessing;

typedef enum Uia_NotificationKind
{
    NotificationKind_ItemAdded = 0,
    NotificationKind_ItemRemoved = 1,
    NotificationKind_ActionCompleted = 2,
    NotificationKind_ActionAborted = 3,
    NotificationKind_Other = 4,
} Uia_NotificationKind;

// Types...

typedef int PROPERTYID;
typedef int PATTERNID;
typedef int EVENTID;
typedef int TEXTATTRIBUTEID;
typedef int CONTROLTYPEID;
typedef int LANDMARKTYPEID;
typedef int METADATAID;
typedef int HEADINGLEVELID;

typedef struct UiaRect
{
    double left;
    double top;
    double width;
    double height;
} UiaRect;

typedef struct UiaPoint
{
    double x;
    double y;
} UiaPoint;

typedef struct UiaChangeInfo
{
    int uiaId;
    VARIANT payload;
    VARIANT extraInfo;
} UiaChangeInfo;


    //[dllname("<no entry points>")]
    //module UIA_OtherConstants
    //{
    //    const double UIA_ScrollPatternNoScroll = -1;
    //}

        //
        //  IRawElementProviderSimple
        //
    [
        odl, 
        uuid(d6dd68d1-86fd-4332-8666-9abedea2d24c)//,
        //oleautomation
    ]
    interface IRawElementProviderSimple : stdole.IUnknown
    {
        [propget] HRESULT ProviderOptions(
            [out, retval] Uia_ProviderOptions* pRetVal);

        HRESULT GetPatternProvider(
            [in] PATTERNID patternId,
            [out, retval] IUnknown** pRetVal);

        HRESULT GetPropertyValue(
            [in] PROPERTYID propertyId,
            [out, retval] VARIANT* pRetVal);

        [propget] HRESULT HostRawElementProvider(
            [out, retval] IRawElementProviderSimple** pRetVal);
    }

    //
    // IAccessibleEx
    //
    [
        odl, 
        uuid(f8b80ada-2c44-48d0-89be-5ff23c9cd875)//,
        //oleautomation
    ]
    interface IAccessibleEx : stdole.IUnknown
    {
        // Returns the IAccessibleEx for specified child. Returns
        // S_OK/NULL if this implementation does not use child ids,
        // or does not have an IAccessibleEx for the specified child,
        // or already represents a child element.
        // idChild must be normalized; ie. client must have previously
        // used get_accChild to check whether it actually has its own
        // IAccessible. Only idChild values that do not have a corresponding
        // IAccessible can be used here.
        HRESULT GetObjectForChild(
            [in] long idChild,
            [out, retval] IAccessibleEx** pRetVal);

        // Returns an IAccessible and idChild pair for this IAccessibleEx.
        // Implementation must return fully normalized idChild values: ie.
        // it is not required to call get_accChild on the resulting pair.
        //
        // For IAccessible implementations that do not use child ids, this
        // just returns the corresponding IAccessible and CHILDID_SELF.
        HRESULT GetIAccessiblePair(
            [out] IAccessible** ppAcc,
            [out] long* pidChild);


        HRESULT GetRuntimeId(
            [out, retval] SAFEARRAY(int)* pRetVal);


        // Some wrapper-based implementations (notably UIABridge) can't reasonably wrap all
        // IRawElementProviderSimple elements returned as property values or patterns, so
        // these elements won't QI to IAccessibleEx. Where this is the case, the original
        // IAccessibleEx that the property was retreived from must implement this method
        // so that the client can get an IAccessibleEx.
        //
        // Usage for a client is as follows:
        // When an IRawElementProviderSimple is obtained as a property value,
        // - first try to QI to IAccessibleEx
        // - if that fails, call this method on the source IAccessibleEx
        HRESULT ConvertReturnedElement(
            [in] IRawElementProviderSimple* pIn,
            [out] IAccessibleEx** ppRetValOut);
    }

    //
    //  IRawElementProviderSimple2
    //
    [
        odl, 
        uuid(A0A839A9-8DA1-4A82-806A-8E0D44E79F56)//,
        //oleautomation
    ]
    interface IRawElementProviderSimple2 : IRawElementProviderSimple
    {
        HRESULT ShowContextMenu();
    }

    //
    //  IRawElementProviderSimple3
    //
    [
        odl, 
        uuid(fcf5d820-d7ec-4613-bdf6-42a84ce7daaf)//,
        //oleautomation
    ]
    interface IRawElementProviderSimple3 : IRawElementProviderSimple2
    {
        HRESULT GetMetadataValue(
            [in] int targetId,
            [in] METADATAID metadataId,
            [out, retval] VARIANT* returnVal
        );
    }

    interface IRawElementProviderFragmentRoot;

    //
    //  IRawElementProviderFragment
    //
    [
        odl, 
        uuid(f7063da8-8359-439c-9297-bbc5299a7d87)//,
        //oleautomation
    ]
    interface IRawElementProviderFragment : stdole.IUnknown
    {
        HRESULT  Navigate(
            [in] Uia_NavigateDirection direction,
            [out, retval] IRawElementProviderFragment** pRetVal);

        HRESULT GetRuntimeId(
            [out, retval] SAFEARRAY(int)* pRetVal);

        HRESULT get_BoundingRectangle(
            [out, retval] struct UiaRect* pRetVal);

        HRESULT GetEmbeddedFragmentRoots(
            [out, retval] SAFEARRAY(IRawElementProviderFragmentRoot*)* pRetVal);

        HRESULT SetFocus();

        [propget] HRESULT FragmentRoot(
            [out, retval] IRawElementProviderFragmentRoot** pRetVal);
    }

    //
    //  IRawElementProviderFragmentRoot
    //
    [
        odl, 
        uuid(620ce2a5-ab8f-40a9-86cb-de3c75599b58)//,
        //oleautomation
    ]
    interface IRawElementProviderFragmentRoot : stdole.IUnknown
    {
        HRESULT ElementProviderFromPoint(
            [in] double x,
            [in] double y,
            [out, retval] IRawElementProviderFragment** pRetVal);

        HRESULT GetFocus(
            [out, retval] IRawElementProviderFragment** pRetVal);
    }

    //
    //  IRawElementProviderAdviseEvents
    //
    [
        odl, 
        uuid(a407b27b-0f6d-4427-9292-473c7bf93258)//,
        //oleautomation
    ]
    interface IRawElementProviderAdviseEvents : stdole.IUnknown
    {
        HRESULT AdviseEventAdded(
            [in] EVENTID eventId,
            [in] SAFEARRAY(PROPERTYID) propertyIDs);

        HRESULT AdviseEventRemoved(
            [in] EVENTID eventId,
            [in] SAFEARRAY(PROPERTYID) propertyIDs);
    }

    //
    //  IRawElementProviderHwndOverride
    //

    [
        odl, 
        uuid(1d5df27c-8947-4425-b8d9-79787bb460b8)//,
        //oleautomation
    ]
    interface IRawElementProviderHwndOverride : stdole.IUnknown
    {
        HRESULT GetOverrideProviderForHwnd(
            [in] HWND hwnd,
            [out, retval] IRawElementProviderSimple** pRetVal);
    }

    //
    //  IProxyProviderWinEventSink
    //    
    // This is provided by UiaCore when it calls IProxyProviderWinEventHandler::RespondToWinEvent
    // It stores up the events added to it, and when RespondToWinEvent returns, it passes
    // the events back to the client side, where they are actually fired.
    [
        odl, 
        uuid(4fd82b78-a43e-46ac-9803-0a6969c7c183)//,
        //oleautomation
    ]
    interface IProxyProviderWinEventSink : stdole.IUnknown
    {
        HRESULT AddAutomationPropertyChangedEvent(
            [in] IRawElementProviderSimple* pProvider,
            [in] PROPERTYID id,
            [in] VARIANT newValue);

        HRESULT AddAutomationEvent(
            [in] IRawElementProviderSimple* pProvider,
            [in] EVENTID id);

        HRESULT AddStructureChangedEvent(
            [in] IRawElementProviderSimple* pProvider,
            [in] Uia_StructureChangeType structureChangeType,
            [in] SAFEARRAY(int) runtimeId);
    }

    //
    //  IProxyProviderWinEventHandler
    //
    // A Proxy that registers to receive certain WinEvents should implement this interface
    // When the core receives a WinEvent it will create the proxy the call this method on it.
    // 
    // This pattern is only meant to be used by registered proxies.
    // 
    // When responding to WinEvents, RespondToWinEvent should not actually fire Events directly,
    // it should use the Add*Event methods on the provided IProxyProviderWinEventSink
    [
        odl, 
        uuid(89592ad4-f4e0-43d5-a3b6-bad7e111b435)//,
        //oleautomation
    ]
    interface IProxyProviderWinEventHandler : stdole.IUnknown
    {
        HRESULT RespondToWinEvent(
            [in] DWORD idWinEvent,
            [in] HWND hwnd,
            [in] LONG idObject,
            [in] LONG idChild,
            [in] IProxyProviderWinEventSink* pSink);
    }

    //
    //  IRawElementProviderWindowlessSite
    //  
    // Implemented by a windowless control site in order to enable the control
    // to expose its UIA elements, properties, and events.
    [
        odl, 
        uuid(0a2a93cc-bfad-42ac-9b2e-0991fb0d3ea0)//,
        //oleautomation
    ]
    interface IRawElementProviderWindowlessSite : stdole.IUnknown
    {
        // Get an adjacent fragment for navigation.
        // The supported directions are Parent, NextSibling, and PreviousSibling.
        // A windowless control would know its own children.
        HRESULT GetAdjacentFragment(
            [in] Uia_NavigateDirection direction,
            [out, retval] IRawElementProviderFragment** ppParent);

        // Returns a runtime ID unique to this site
        HRESULT GetRuntimeIdPrefix(
            [out, retval] SAFEARRAY(int)* pRetVal);
    }

    //
    //  IAccessibleHostingElementProviders
    //  
    // Implemented by a root element for an HWND to indicate that the
    // HWND is hosting windowless UIA fragments internally.
    [
        odl, 
        uuid(33AC331B-943E-4020-B295-DB37784974A3)//,
        //oleautomation
    ]
    interface IAccessibleHostingElementProviders : stdole.IUnknown
    {
        // Get an array of fragment roots hosted by this IAccessible.
        HRESULT GetEmbeddedFragmentRoots(
            [out, retval] SAFEARRAY(IRawElementProviderFragmentRoot*)* pRetVal);

        // Get an object ID for a given provider.
        // This is used for firing a WinEvent; the implementation is
        // not guaranteed to return the same object ID twice.
        // Once the WinEvent is fired and received, client can 
        HRESULT GetObjectIdForProvider(
            [in] IRawElementProviderSimple* pProvider,
            [out] long* pidObject);
    }

    //
    //  IRawElementProviderHostingAccessibles
    //  
    // Implemented by a root element for an HWND to indicate that the
    // HWND is hosting windowless MSAA fragments internally.
    [
        odl, 
        uuid(24BE0B07-D37D-487A-98CF-A13ED465E9B3)//,
        //oleautomation
    ]
    interface IRawElementProviderHostingAccessibles : stdole.IUnknown
    {
        HRESULT GetEmbeddedAccessibles(
            [out, retval] SAFEARRAY(IAccessible*)* pRetVal);
    }

    //
    // Control Pattern Interfaces...
    //

    [
        odl, 
        uuid(159bc72c-4ad3-485e-9637-d7052edf0146)//,
        //oleautomation
    ]
    interface IDockProvider : stdole.IUnknown
    {
        HRESULT SetDockPosition(
            [in] Uia_DockPosition dockPosition);

        [propget] HRESULT DockPosition(
            [out, retval] Uia_DockPosition* pRetVal);

    };

    [
        odl, 
        uuid(d847d3a5-cab0-4a98-8c32-ecb45c59ad24)//,
        //oleautomation
    ]
    interface IExpandCollapseProvider : stdole.IUnknown
    {
        HRESULT Expand();
        HRESULT Collapse();
        [propget] HRESULT ExpandCollapseState(
            [out, retval] Uia_ExpandCollapseState* pRetVal);
    };

    [
        odl, 
        uuid(b17d6187-0907-464b-a168-0ef17a1572b1)//,
        //oleautomation
    ]
    interface IGridProvider : stdole.IUnknown
    {
        HRESULT GetItem(
            [in] int row,
            [in] int column,
            [out, retval] IRawElementProviderSimple** pRetVal);
        [propget] HRESULT RowCount(
            [out, retval] int* pRetVal);
        [propget] HRESULT ColumnCount(
            [out, retval] int* pRetVal);
    };

    [
        odl, 
        uuid(d02541f1-fb81-4d64-ae32-f520f8a6dbd1)//,
        //oleautomation
    ]
    interface IGridItemProvider : stdole.IUnknown
    {
        [propget] HRESULT Row(
            [out, retval] int* pRetVal);
        [propget] HRESULT Column(
            [out, retval] int* pRetVal);
        [propget] HRESULT RowSpan(
            [out, retval] int* pRetVal);
        [propget] HRESULT ColumnSpan(
            [out, retval] int* pRetVal);
        [propget] HRESULT ContainingGrid(
            [out, retval] IRawElementProviderSimple** pRetVal);
    };

    [
        odl, 
        uuid(54fcb24b-e18e-47a2-b4d3-eccbe77599a2)//,
        //oleautomation
    ]
    interface IInvokeProvider : stdole.IUnknown
    {
        HRESULT Invoke();
    };

    [
        odl, 
        uuid(6278cab1-b556-4a1a-b4e0-418acc523201)//,
        //oleautomation
    ]
    interface IMultipleViewProvider : stdole.IUnknown
    {
        HRESULT GetViewName(
            [in] int viewId,
            [out, retval] BSTR* pRetVal);
        HRESULT SetCurrentView(
            [in] int viewId);
        [propget] HRESULT CurrentView(
            [out, retval] int* pRetVal);
        HRESULT GetSupportedViews(
            [out, retval] SAFEARRAY(int)* pRetVal);
    };

    [
        odl, 
        uuid(36dc7aef-33e6-4691-afe1-2be7274b3d33)//,
        //oleautomation
    ]
    interface IRangeValueProvider : stdole.IUnknown
    {
        HRESULT SetValue(
            [in] double val);
        [propget] HRESULT Value(
            [out, retval] double* pRetVal);
        [propget] HRESULT IsReadOnly(
            [out, retval] BOOL* pRetVal);
        [propget] HRESULT Maximum(
            [out, retval] double* pRetVal);
        [propget] HRESULT Minimum(
            [out, retval] double* pRetVal);
        [propget] HRESULT LargeChange(
            [out, retval] double* pRetVal);
        [propget] HRESULT SmallChange(
            [out, retval] double* pRetVal);
    };

    [
        odl, 
        uuid(2360c714-4bf1-4b26-ba65-9b21316127eb)//,
        //oleautomation
    ]
    interface IScrollItemProvider : stdole.IUnknown
    {
        HRESULT ScrollIntoView();
    };

    [
        odl, 
        uuid(fb8b03af-3bdf-48d4-bd36-1a65793be168)//,
        //oleautomation
    ]
    interface ISelectionProvider : stdole.IUnknown
    {
        HRESULT GetSelection(
            [out, retval] SAFEARRAY(IRawElementProviderSimple*)* pRetVal);
        [propget] HRESULT CanSelectMultiple(
            [out, retval] BOOL* pRetVal);
        [propget] HRESULT IsSelectionRequired(
            [out, retval] BOOL* pRetVal);
    };

    [
        odl, 
        uuid(14f68475-ee1c-44f6-a869-d239381f0fe7)//,
        //oleautomation
    ]
    interface ISelectionProvider2 : ISelectionProvider
    {
        [propget] HRESULT FirstSelectedItem(
            [out, retval] IRawElementProviderSimple** retVal);
        [propget] HRESULT LastSelectedItem(
            [out, retval] IRawElementProviderSimple** retVal);
        [propget] HRESULT CurrentSelectedItem(
            [out, retval] IRawElementProviderSimple** retVal);
        [propget] HRESULT ItemCount(
            [out, retval] int* retVal);
    };

    [
        odl, 
        uuid(b38b8077-1fc3-42a5-8cae-d40c2215055a)//,
        //oleautomation
    ]
    interface IScrollProvider : stdole.IUnknown
    {
        HRESULT Scroll(
            [in] Uia_ScrollAmount horizontalAmount,
            [in] Uia_ScrollAmount verticalAmount);
        HRESULT SetScrollPercent(
            [in] double horizontalPercent,
            [in] double verticalPercent);
        [propget] HRESULT HorizontalScrollPercent(
            [out, retval] double* pRetVal);
        [propget] HRESULT VerticalScrollPercent(
            [out, retval] double* pRetVal);
        [propget] HRESULT HorizontalViewSize(
            [out, retval] double* pRetVal);
        [propget] HRESULT VerticalViewSize(
            [out, retval] double* pRetVal);
        [propget] HRESULT HorizontallyScrollable(
            [out, retval] BOOL* pRetVal);
        [propget] HRESULT VerticallyScrollable(
            [out, retval] BOOL* pRetVal);
    };

    [
        odl, 
        uuid(2acad808-b2d4-452d-a407-91ff1ad167b2)//,
        //oleautomation
    ]
    interface ISelectionItemProvider : stdole.IUnknown
    {
        HRESULT Select();
        HRESULT AddToSelection();
        HRESULT RemoveFromSelection();
        [propget] HRESULT IsSelected(
            [out, retval] BOOL* pRetVal);
        [propget] HRESULT SelectionContainer(
            [out, retval] IRawElementProviderSimple** pRetVal);
    };

    [
        odl, 
        uuid(29db1a06-02ce-4cf7-9b42-565d4fab20ee)//,
        //oleautomation
    ]
    interface ISynchronizedInputProvider : stdole.IUnknown
    {
        HRESULT StartListening(
            [in] Uia_SynchronizedInputType inputType);
        HRESULT Cancel();
    };

    [
        odl, 
        uuid(9c860395-97b3-490a-b52a-858cc22af166)//,
        //oleautomation
    ]
    interface ITableProvider : stdole.IUnknown
    {
        HRESULT GetRowHeaders(
            [out, retval] SAFEARRAY(IRawElementProviderSimple*)* pRetVal);
        HRESULT GetColumnHeaders(
            [out, retval] SAFEARRAY(IRawElementProviderSimple*)* pRetVal);
        [propget] HRESULT RowOrColumnMajor(
            [out, retval] Uia_RowOrColumnMajor* pRetVal);
    };

    [
        odl, 
        uuid(b9734fa6-771f-4d78-9c90-2517999349cd)//,
        //oleautomation
    ]
    interface ITableItemProvider : stdole.IUnknown
    {
        HRESULT GetRowHeaderItems(
            [out, retval] SAFEARRAY(IRawElementProviderSimple*)* pRetVal);
        HRESULT GetColumnHeaderItems(
            [out, retval] SAFEARRAY(IRawElementProviderSimple*)* pRetVal);
    };

    [
        odl, 
        uuid(56d00bd0-c4f4-433c-a836-1a52a57e0892)//,
        //oleautomation
    ]
    interface IToggleProvider : stdole.IUnknown
    {
        HRESULT Toggle();
        [propget] HRESULT ToggleState(
            [out, retval] Uia_ToggleState* pRetVal);
    };

    [
        odl, 
        uuid(6829ddc4-4f91-4ffa-b86f-bd3e2987cb4c)//,
        //oleautomation
    ]
    interface ITransformProvider : stdole.IUnknown
    {
        HRESULT Move(
            [in] double x,
            [in] double y);
        HRESULT Resize(
            [in] double width,
            [in] double height);
        HRESULT Rotate(
            [in] double degrees);
        [propget] HRESULT CanMove(
            [out, retval] BOOL* pRetVal);
        [propget] HRESULT CanResize(
            [out, retval] BOOL* pRetVal);
        [propget] HRESULT CanRotate(
            [out, retval] BOOL* pRetVal);
    };

    [
        odl, 
        uuid(c7935180-6fb3-4201-b174-7df73adbf64a)//,
        //oleautomation
    ]
    interface IValueProvider : stdole.IUnknown
    {
        HRESULT SetValue(
            [in] LongPtr val);
        [propget] HRESULT Value(
            [out, retval] BSTR* pRetVal);
        [propget] HRESULT IsReadOnly(
            [out, retval] BOOL* pRetVal);
    };

    [
        odl, 
        uuid(987df77b-db06-4d77-8f8a-86a9c3bb90b9)//,
        //oleautomation
    ]
    interface IWindowProvider : stdole.IUnknown
    {
        HRESULT SetVisualState(
            [in] Uia_WindowVisualState state);
        HRESULT Close();
        HRESULT WaitForInputIdle(
            [in] int milliseconds,
            [out, retval] BOOL* pRetVal);
        [propget] HRESULT CanMaximize(
            [out, retval] BOOL* pRetVal);
        [propget] HRESULT CanMinimize(
            [out, retval] BOOL* pRetVal);
        [propget] HRESULT IsModal(
            [out, retval] BOOL* pRetVal);
        [propget] HRESULT WindowVisualState(
            [out, retval] Uia_WindowVisualState* pRetVal);
        [propget] HRESULT WindowInteractionState(
            [out, retval] Uia_WindowInteractionState* pRetVal);
        [propget] HRESULT IsTopmost(
            [out, retval] BOOL* pRetVal);
    };

    [
        odl, 
        uuid(e44c3566-915d-4070-99c6-047bff5a08f5)//,
        //oleautomation
    ]
    interface ILegacyIAccessibleProvider : stdole.IUnknown
    {
        HRESULT Select([in] long flagsSelect);
        HRESULT DoDefaultAction();
        HRESULT SetValue([in] LongPtr szValue);
        HRESULT GetIAccessible([out, retval] IAccessible** ppAccessible);
        [propget] HRESULT ChildId(
            [out, retval] int* pRetVal);
        [propget] HRESULT Name(
            [out, retval] BSTR* pszName);
        [propget] HRESULT Value(
            [out, retval] BSTR* pszValue);
        [propget] HRESULT Description(
            [out, retval] BSTR* pszDescription);
        [propget] HRESULT Role(
            [out, retval] DWORD* pdwRole);
        [propget] HRESULT State(
            [out, retval] DWORD* pdwState);
        [propget] HRESULT Help(
            [out, retval] BSTR* pszHelp);
        [propget] HRESULT KeyboardShortcut(
            [out, retval] BSTR* pszKeyboardShortcut);
        HRESULT GetSelection(
            [out, retval] SAFEARRAY(IRawElementProviderSimple*)* pvarSelectedChildren);
        [propget] HRESULT DefaultAction(
            [out, retval] BSTR* pszDefaultAction);
    };

    [
        odl, 
        uuid(e747770b-39ce-4382-ab30-d8fb3f336f24)//,
        //oleautomation
    ]
    interface IItemContainerProvider : stdole.IUnknown
    {
        // Find item by specified property/value. May return actual 
        // AutomationElement or a placeholder if the matching element is
        // virtualized.
        // Returns E_INVALIDARG if the property requested is not one that the
        // container supports searching over. Expected that most containers will
        // support Name property, and if appropriate for the container,
        // AutomationId and IsSelected.
        //
        // This method is expected to be relatively slow, since it may need to
        // traverse multiple objects in order to find a matching one.
        // When used in a loop to return multiple items, no specific order is
        // defined so long as each item is returned only once (ie. loop should
        // terminate). This method is also item-centric, not UI-centric, so items
        // with multiple UI representations need only be returned once.
        //
        // A special propertyId of 0 means 'match all items'. This can be used
        // with pStartAfter=NULL to get the first item, and then to get successive
        // items. Value should be VT_EMPTY in this case.
        HRESULT FindItemByProperty([in] IRawElementProviderSimple* pStartAfter,
            [in] PROPERTYID propertyId,
            [in] VARIANT value,
            [out, retval] IRawElementProviderSimple** pFound);
    };

    [
        odl, 
        uuid(cb98b665-2d35-4fac-ad35-f3c60d0c0b8b)//,
        //oleautomation
    ]
    interface IVirtualizedItemProvider : stdole.IUnknown
    {
        // Request that a placeholder element make itself fully available. Blocks
        // until element is available, which could take time.
        // Returns S_OK if item is already available.
        // Parent control may scroll as a side effect if the container needs to
        // being the item into view in order to devirtualize it.
        HRESULT Realize();
    };


    [
        odl, 
        uuid(3ad86ebd-f5ef-483d-bb18-b1042a475d64)//,
        //oleautomation
    ]
    interface IObjectModelProvider : stdole.IUnknown
    {
        HRESULT GetUnderlyingObjectModel([out, retval] IUnknown** ppUnknown);
    };

    [
        odl, 
        uuid(f95c7e80-bd63-4601-9782-445ebff011fc)//,
        //oleautomation
    ]
    interface IAnnotationProvider : stdole.IUnknown
    {
        [propget] HRESULT AnnotationTypeId(
            [out, retval] int* retVal);

        [propget] HRESULT AnnotationTypeName(
            [out, retval] BSTR* retVal);

        [propget] HRESULT Author(
            [out, retval] BSTR* retVal);

        [propget] HRESULT DateTime(
            [out, retval] BSTR* retVal);

        [propget] HRESULT Target(
            [out, retval] IRawElementProviderSimple** retVal);

    };

    [
        odl, 
        uuid(19b6b649-f5d7-4a6d-bdcb-129252be588a)//,
        //oleautomation
    ]
    interface IStylesProvider : stdole.IUnknown
    {
        [propget] HRESULT StyleId(
            [out, retval] int* retVal);

        [propget] HRESULT StyleName(
            [out, retval] BSTR* retVal);

        [propget] HRESULT FillColor(
            [out, retval] int* retVal);

        [propget] HRESULT FillPatternStyle(
            [out, retval] BSTR* retVal);

        [propget] HRESULT Shape(
            [out, retval] BSTR* retVal);

        [propget] HRESULT FillPatternColor(
            [out, retval] int* retVal);

        [propget] HRESULT ExtendedProperties(
            [out, retval] BSTR* retVal);
    };

    [
        odl, 
        uuid(6f6b5d35-5525-4f80-b758-85473832ffc7)//,
        //oleautomation
    ]
    interface ISpreadsheetProvider : stdole.IUnknown
    {
        HRESULT GetItemByName(
            [in] LongPtr name,
            [out, retval] IRawElementProviderSimple** pRetVal);
    };


    [
        odl, 
        uuid(eaed4660-7b3d-4879-a2e6-365ce603f3d0)//,
        //oleautomation
    ]
    interface ISpreadsheetItemProvider : stdole.IUnknown
    {
        [propget] HRESULT Formula(
            [out, retval] BSTR* pRetVal);

        HRESULT GetAnnotationObjects(
            [out, retval] SAFEARRAY(IRawElementProviderSimple*)* pRetVal);

        HRESULT GetAnnotationTypes(
            [out, retval] SAFEARRAY(int)* pRetVal);
    };

    [
        odl, 
        uuid(4758742f-7ac2-460c-bc48-09fc09308a93)//,
        //oleautomation
    ]
    interface ITransformProvider2 : ITransformProvider
    {
        HRESULT Zoom(
            [in] double zoom);

        [propget] HRESULT CanZoom(
            [out, retval] BOOL* pRetVal);

        [propget] HRESULT ZoomLevel(
            [out, retval] double* pRetVal);

        [propget] HRESULT ZoomMinimum(
            [out, retval] double* pRetVal);

        [propget] HRESULT ZoomMaximum(
            [out, retval] double* pRetVal);

        HRESULT ZoomByUnit(
            [in] Uia_ZoomUnit zoomUnit);
    }

    [
        odl, 
        uuid(6aa7bbbb-7ff9-497d-904f-d20b897929d8)//,
        //oleautomation
    ]
    interface IDragProvider : stdole.IUnknown
    {
        [propget] HRESULT IsGrabbed(
            [out, retval] BOOL* pRetVal);

        [propget] HRESULT DropEffect(
            [out, retval] BSTR* pRetVal);

        [propget] HRESULT DropEffects(
            [out, retval] SAFEARRAY(BSTR)* pRetVal);

        HRESULT GetGrabbedItems(
            [out, retval] SAFEARRAY(IRawElementProviderSimple*)* pRetVal);
    };

    [
        odl, 
        uuid(bae82bfd-358a-481c-85a0-d8b4d90a5d61)//,
        //oleautomation
    ]
    interface IDropTargetProvider : stdole.IUnknown
    {
        [propget] HRESULT DropTargetEffect(
            [out, retval] BSTR* pRetVal);

        [propget] HRESULT DropTargetEffects(
            [out, retval] SAFEARRAY(BSTR)* pRetVal);
    };

    interface ITextRangeProvider;

    [
        odl, 
        uuid(3589c92c-63f3-4367-99bb-ada653b77cf2)//,
        //oleautomation
    ]
    interface ITextProvider : stdole.IUnknown
    {
        HRESULT GetSelection(
            [out, retval] SAFEARRAY(ITextRangeProvider*)* pRetVal);
        HRESULT GetVisibleRanges(
            [out, retval] SAFEARRAY(ITextRangeProvider*)* pRetVal);
        HRESULT RangeFromChild(
            [in] IRawElementProviderSimple* childElement,
            [out, retval] ITextRangeProvider** pRetVal);
        HRESULT RangeFromPoint(
            /*struct UiaPoint point*/[in]  double pointX, [in] double pointY,
            [out, retval] ITextRangeProvider** pRetVal);
        [propget] HRESULT DocumentRange(
            [out, retval] ITextRangeProvider** pRetVal);
        [propget] HRESULT SupportedTextSelection(
            [out, retval] Uia_SupportedTextSelection* pRetVal);
    };

    [
        odl, 
        uuid(0dc5e6ed-3e16-4bf1-8f9a-a979878bc195)//,
        //oleautomation
    ]
    interface ITextProvider2 : ITextProvider
    {
        HRESULT RangeFromAnnotation(
            [in] IRawElementProviderSimple* annotationElement,
            [out, retval] ITextRangeProvider** pRetVal);

        HRESULT GetCaretRange(
            [out] BOOL* isActive,
            [out, retval] ITextRangeProvider** pRetVal);
    }

    [
        odl, 
        uuid(EA3605B4-3A05-400E-B5F9-4E91B40F6176)//,
        //oleautomation
    ]
    interface ITextEditProvider : ITextProvider
    {
        HRESULT GetActiveComposition(
            [out, retval] ITextRangeProvider** pRetVal);

        HRESULT GetConversionTarget(
            [out, retval] ITextRangeProvider** pRetVal);
    }

    [
        odl, 
        uuid(5347ad7b-c355-46f8-aff5-909033582f63)//,
        //oleautomation
    ]
    interface ITextRangeProvider : stdole.IUnknown
    {
        HRESULT Clone(
            [out, retval] ITextRangeProvider** pRetVal);
        HRESULT Compare(
            [in] ITextRangeProvider* range,
            [out, retval] BOOL* pRetVal);
        HRESULT CompareEndpoints(
            [in] Uia_TextPatternRangeEndpoint endpoint,
            [in] ITextRangeProvider* targetRange,
            [in] Uia_TextPatternRangeEndpoint targetEndpoint,
            [out, retval] int* pRetVal);
        HRESULT ExpandToEnclosingUnit(
            [in] Uia_TextUnit unit);
        HRESULT FindAttribute(
            [in] TEXTATTRIBUTEID attributeId,
            [in] VARIANT val,
            [in] BOOL backward,
            [out, retval] ITextRangeProvider** pRetVal);
        HRESULT FindText(
            [in] BSTR text,
            [in] BOOL backward,
            [in] BOOL ignoreCase,
            [out, retval] ITextRangeProvider** pRetVal);
        HRESULT GetAttributeValue(
            [in] TEXTATTRIBUTEID attributeId,
            [out, retval] VARIANT* pRetVal);
        HRESULT GetBoundingRectangles(
            [out, retval] SAFEARRAY(double)* pRetVal);
        HRESULT GetEnclosingElement(
            [out, retval] IRawElementProviderSimple** pRetVal);
        HRESULT GetText(
            [in] int maxLength,
            [out, retval] BSTR* pRetVal);
        HRESULT Move(
            [in] Uia_TextUnit unit,
            [in] int count,
            [out, retval] int* pRetVal);
        HRESULT MoveEndpointByUnit(
            [in] Uia_TextPatternRangeEndpoint endpoint,
            [in] Uia_TextUnit unit,
            [in] int count,
            [out, retval] int* pRetVal);
        HRESULT MoveEndpointByRange(
            [in] Uia_TextPatternRangeEndpoint endpoint,
            [in] ITextRangeProvider* targetRange,
            [in] Uia_TextPatternRangeEndpoint targetEndpoint);
        HRESULT Select();
        HRESULT AddToSelection();
        HRESULT RemoveFromSelection();
        HRESULT ScrollIntoView(
            [in] BOOL alignToTop);
        HRESULT GetChildren(
            [out, retval] SAFEARRAY(IRawElementProviderSimple*)* pRetVal);
    };

    [
        odl, 
        uuid(9BBCE42C-1921-4F18-89CA-DBA1910A0386)//,
        //oleautomation
    ]
    interface ITextRangeProvider2 : ITextRangeProvider
    {
        HRESULT ShowContextMenu();
    }

    [
        odl, 
        uuid(4c2de2b9-c88f-4f88-a111-f1d336b7d1a9)//,
        //oleautomation
    ]
    interface ITextChildProvider : stdole.IUnknown
    {
        [propget] HRESULT TextContainer(
            [out, retval] IRawElementProviderSimple** pRetVal);

        [propget] HRESULT TextRange(
            [out, retval] ITextRangeProvider** pRetVal);
    };

    [
        odl, 
        uuid(2062A28A-8C07-4B94-8E12-7037C622AEB8)//,
        //oleautomation
    ]
    interface ICustomNavigationProvider : stdole.IUnknown
    {
        HRESULT Navigate(
            [in] Uia_NavigateDirection direction,
            [out, retval] IRawElementProviderSimple** pRetVal);
    }

    //
    // User-registered property, event and pattern support...
    //

    // Used to specify property types, and method parameter types.
    // UI Automation needs more information than just a VT_/VARTYPE. Note that some
    // types get special handling - eg. Rect and Points get translated with DPI.
    typedef enum UIAutomationType
    {
        UIAutomationType_Int = 0x0001,
        UIAutomationType_Bool = 0x0002,
        UIAutomationType_String = 0x0003,
        UIAutomationType_Double = 0x0004,
        UIAutomationType_Point = 0x0005,
        UIAutomationType_Rect = 0x0006,
        UIAutomationType_Element = 0x0007,

        UIAutomationType_Array = 0x00010000,
        UIAutomationType_Out = 0x00020000,

        UIAutomationType_IntArray = 0x10001, //(UIAutomationType_Int | UIAutomationType_Array),
        UIAutomationType_BoolArray, // = (UIAutomationType_Bool | UIAutomationType_Array),
        UIAutomationType_StringArray, // = (UIAutomationType_String | UIAutomationType_Array),
        UIAutomationType_DoubleArray, // = (UIAutomationType_Double | UIAutomationType_Array),
        UIAutomationType_PointArray, // = (UIAutomationType_Point | UIAutomationType_Array),
        UIAutomationType_RectArray, // = (UIAutomationType_Rect | UIAutomationType_Array),
        UIAutomationType_ElementArray,// = (UIAutomationType_Element | UIAutomationType_Array),

        UIAutomationType_OutInt = 0x20001, //(UIAutomationType_Int | UIAutomationType_Out),
        UIAutomationType_OutBool, // = (UIAutomationType_Bool | UIAutomationType_Out),
        UIAutomationType_OutString, // = (UIAutomationType_String | UIAutomationType_Out),
        UIAutomationType_OutDouble, // = (UIAutomationType_Double | UIAutomationType_Out),
        UIAutomationType_OutPoint, // = (UIAutomationType_Point | UIAutomationType_Out),
        UIAutomationType_OutRect, // = (UIAutomationType_Rect | UIAutomationType_Out),
        UIAutomationType_OutElement, // = (UIAutomationType_Element | UIAutomationType_Out),

        UIAutomationType_OutIntArray = 0x30001, //(UIAutomationType_Int | UIAutomationType_Array | UIAutomationType_Out),
        UIAutomationType_OutBoolArray, // = (UIAutomationType_Bool | UIAutomationType_Array | UIAutomationType_Out),
        UIAutomationType_OutStringArray, // = (UIAutomationType_String | UIAutomationType_Array | UIAutomationType_Out),
        UIAutomationType_OutDoubleArray, // = (UIAutomationType_Double | UIAutomationType_Array | UIAutomationType_Out),
        UIAutomationType_OutPointArray, // = (UIAutomationType_Point | UIAutomationType_Array | UIAutomationType_Out),
        UIAutomationType_OutRectArray, // = (UIAutomationType_Rect | UIAutomationType_Array | UIAutomationType_Out),
        UIAutomationType_OutElementArray, // = (UIAutomationType_Element | UIAutomationType_Array | UIAutomationType_Out),
    } UIAutomationType;

    //cpp_quote("DEFINE_ENUM_FLAG_OPERATORS(UIAutomationType)")

    typedef struct UIAutomationParameter
    {
        UIAutomationType type;
        LongPtr pData;
    } UIAutomationParameter;

    typedef struct UIAutomationPropertyInfo
    {
        GUID guid;
        LongPtr pProgrammaticName;
        UIAutomationType type;
    } UIAutomationPropertyInfo;

    typedef struct UIAutomationEventInfo
    {
        GUID guid;
        LongPtr pProgrammaticName;
    } UIAutomationEventInfo;

    typedef struct UIAutomationMethodInfo
    {
        LongPtr pProgrammaticName;
        BOOL doSetFocus;
        UINT cInParameters;
        UINT cOutParameters;
        // Parameters are always in params followed by out params
        //[size_is(cInParameters + cOutParameters)]
        LongPtr pParameterTypes;
        // Param names used for debugging/diagnostics
        //[size_is(cInParameters + cOutParameters)]
        LongPtr pParameterNames;
        // Most methods require the object to have focus as a precondition, set this
        // to true if this is such a method, and UIA will do the SetFocus call
        // automatically first.
    } UIAutomationMethodInfo;


    // For a given pattern, a single index is used to specify both its properties and
    // its methods. The first property is 0, followed by the other properties, followed
    // by methods. This index is used in some of the methods below.
    // Total number of indices == cProperties + cMethods.

    // This interface is implemented by UIA and represents a pattern object; the
    // client API wrapper sits on top of this, and implements all property/method
    // calls in terms of GetProperty and CallMethod.
    [
        odl, 
        uuid(c03a7fe4-9431-409f-bed8-ae7c2299bc8d)//,
        //oleautomation
    ]
    interface IUIAutomationPatternInstance : stdole.IUnknown
    {
        // Client wrapper object implements get_CurrentXxxx and get_CachedXxxx
        // by calling through to this, specifying the property by index. pPtr is
        // the [out] pointer from the getter, passed as-is. UIA knows its type from
        // the meta-data, and assigns to it appropriately.
        HRESULT GetProperty(
            [in] UINT index, // must be a property index
            [in] BOOL cached,
            [in] UIAutomationType type,
            [out] void* pPtr);

        // Client wrapper implements methods by calling through to this, specifying the
        // paramters as an array of void*'s; in params (passed by address) followed by
        // out params (which are passed as-is, since they are already pointers).
        // (UIA already knows the count and types from the metadata)
        HRESULT CallMethod(
            [in] UINT index, // must be a method index
            [in] UIAutomationParameter* pParams,
            [in] UINT cParams);
    };


    // This interface is implemented by the 3rd party pattern supplier, and is
    // responsible for returning a client API wrapper object, and for unmarhalling
    // property and method requests to an actual provider instance.
    // The PatternHandler object is stateless, so can be implemented by a singleton.
    [
        odl, 
        uuid(d97022f3-a947-465e-8b2a-ac4315fa54e8)//,
        //oleautomation
    ]
    interface IUIAutomationPatternHandler : stdole.IUnknown
    {
        // UIA calls this when it needs to return a wrapper to the client. UIA supplies
        // the pPatternInstance, which the client wrapper calls through to.
        HRESULT CreateClientWrapper(
            [in] IUIAutomationPatternInstance* pPatternInstance,
            [out] IUnknown** pClientWrapper);

        // UIA calls this to dispatch a property getter or method call to an actual
        // provider interface object. The implementation should cast pTarget as
        // appropriate, and call the property getter or method indicated by index,
        // passing the parameters from the pParams array, and casting appropriately.
        // (Since UIA knows what the parameters and types are, it sets up a param
        // array of the appropriate size and types.)
        HRESULT Dispatch(
            [in] IUnknown* pTarget, // target provider, already QI'd
            [in] UINT index, // may be property or method index
            [in] UIAutomationParameter* pParams,
            [in] UINT cParams);
    }


    // This struct specifies a pattern, in terms of its identifiers, properties
    // methods, events, and handler...
    typedef struct UIAutomationPatternInfo
    {
        GUID guid;
        LongPtr pProgrammaticName;
        GUID providerInterfaceId;
        GUID clientInterfaceId;
        UINT cProperties;
        LongPtr pProperties;
        UINT cMethods;
        LongPtr pMethods;
        UINT cEvents;
        LongPtr pEvents;
        LongPtr pPatternHandler;
    } UIAutomationPatternInfo;


    // Additional methods added to new IUIAutomationRegistrar object for registering 
    // patterns, properties and events; and for getting the patterns/properties supported
    // by an object.
    [
        odl,
        uuid(8609c4ec-4a1a-4d88-a357-5a66e060e1cf)//,
        //oleautomation
    ]
    interface IUIAutomationRegistrar : stdole.IUnknown
    {
        // Register a general element property; the returned ID can then be used in the
        // various APIs (GetCurrentPropertyValue, PropertyCondition, etc.)
        // (Can also be used as a WinEvent value for IAccEx property change events)
        HRESULT RegisterProperty(
            [in] UIAutomationPropertyInfo* property,
            [out] PROPERTYID* propertyId); // same as for winevent

        // Register a general element event; the returned ID can then be used in the
        // various event APIs.
        // (Also can be used as a WinEvent value for IAccEx events)
        HRESULT RegisterEvent(
            [in] UIAutomationEventInfo* event,
            [out] EVENTID* eventId); // same as for winevent

        // Register a pattern; returns identifiers for the pattern (and its availability
        // property), and an array of ids for associated properties and events.
        // (Pattern and Event IDs can also can be used as a WinEvent value for IAccEx
        // events)
        HRESULT RegisterPattern(
            [in] UIAutomationPatternInfo* pattern,
            [out] PATTERNID* pPatternId,
            [out] PROPERTYID* pPatternAvailablePropertyId,
            [in] UINT propertyIdCount,
            [out] PROPERTYID* pPropertyIds,
            [in] UINT eventIdCount,
            [out] EVENTID* pEventIds);
    };

    typedef struct Uia_ExtendedProperty {
        BSTR PropertyName;
        BSTR PropertyValue;
    } Uia_ExtendedProperty;

    typedef LongPtr UIA_HWND;

    [dllname("<no entry points>")]
    module UIA_PatternIds
    {
        const long UIA_InvokePatternId = 10000;
        const long UIA_SelectionPatternId = 10001;
        const long UIA_ValuePatternId = 10002;
        const long UIA_RangeValuePatternId = 10003;
        const long UIA_ScrollPatternId = 10004;
        const long UIA_ExpandCollapsePatternId = 10005;
        const long UIA_GridPatternId = 10006;
        const long UIA_GridItemPatternId = 10007;
        const long UIA_MultipleViewPatternId = 10008;
        const long UIA_WindowPatternId = 10009;
        const long UIA_SelectionItemPatternId = 10010;
        const long UIA_DockPatternId = 10011;
        const long UIA_TablePatternId = 10012;
        const long UIA_TableItemPatternId = 10013;
        const long UIA_TextPatternId = 10014;
        const long UIA_TogglePatternId = 10015;
        const long UIA_TransformPatternId = 10016;
        const long UIA_ScrollItemPatternId = 10017;
        const long UIA_LegacyIAccessiblePatternId = 10018;
        const long UIA_ItemContainerPatternId = 10019;
        const long UIA_VirtualizedItemPatternId = 10020;
        const long UIA_SynchronizedInputPatternId = 10021;
        const long UIA_ObjectModelPatternId = 10022;
        const long UIA_AnnotationPatternId = 10023;
        const long UIA_TextPattern2Id = 10024;
        const long UIA_StylesPatternId = 10025;
        const long UIA_SpreadsheetPatternId = 10026;
        const long UIA_SpreadsheetItemPatternId = 10027;
        const long UIA_TransformPattern2Id = 10028;
        const long UIA_TextChildPatternId = 10029;
        const long UIA_DragPatternId = 10030;
        const long UIA_DropTargetPatternId = 10031;
        const long UIA_TextEditPatternId = 10032;
        const long UIA_CustomNavigationPatternId = 10033;
        const long UIA_SelectionPattern2Id = 10034;
    };

    [dllname("<no entry points>")]
    module UIA_EventIds
    {
        const long UIA_ToolTipOpenedEventId = 20000;
        const long UIA_ToolTipClosedEventId = 20001;
        const long UIA_StructureChangedEventId = 20002;
        const long UIA_MenuOpenedEventId = 20003;
        const long UIA_AutomationPropertyChangedEventId = 20004;
        const long UIA_AutomationFocusChangedEventId = 20005;
        const long UIA_AsyncContentLoadedEventId = 20006;
        const long UIA_MenuClosedEventId = 20007;
        const long UIA_LayoutInvalidatedEventId = 20008;
        const long UIA_Invoke_InvokedEventId = 20009;
        const long UIA_SelectionItem_ElementAddedToSelectionEventId = 20010;
        const long UIA_SelectionItem_ElementRemovedFromSelectionEventId = 20011;
        const long UIA_SelectionItem_ElementSelectedEventId = 20012;
        const long UIA_Selection_InvalidatedEventId = 20013;
        const long UIA_Text_TextSelectionChangedEventId = 20014;
        const long UIA_Text_TextChangedEventId = 20015;
        const long UIA_Window_WindowOpenedEventId = 20016;
        const long UIA_Window_WindowClosedEventId = 20017;
        const long UIA_MenuModeStartEventId = 20018;
        const long UIA_MenuModeEndEventId = 20019;
        const long UIA_InputReachedTargetEventId = 20020;
        const long UIA_InputReachedOtherElementEventId = 20021;
        const long UIA_InputDiscardedEventId = 20022;
        const long UIA_SystemAlertEventId = 20023;
        const long UIA_LiveRegionChangedEventId = 20024;
        const long UIA_HostedFragmentRootsInvalidatedEventId = 20025;
        const long UIA_Drag_DragStartEventId = 20026;
        const long UIA_Drag_DragCancelEventId = 20027;
        const long UIA_Drag_DragCompleteEventId = 20028;
        const long UIA_DropTarget_DragEnterEventId = 20029;
        const long UIA_DropTarget_DragLeaveEventId = 20030;
        const long UIA_DropTarget_DroppedEventId = 20031;
        const long UIA_TextEdit_TextChangedEventId = 20032;
        const long UIA_TextEdit_ConversionTargetChangedEventId = 20033;
        const long UIA_ChangesEventId = 20034;
        const long UIA_NotificationEventId = 20035;
        const long UIA_ActiveTextPositionChangedEventId = 20036;
    };

    [dllname("<no entry points>")]
    module UIA_PropertyIds
    {
        const long UIA_RuntimeIdPropertyId = 30000;
        const long UIA_BoundingRectanglePropertyId = 30001;
        const long UIA_ProcessIdPropertyId = 30002;
        const long UIA_ControlTypePropertyId = 30003;
        const long UIA_LocalizedControlTypePropertyId = 30004;
        const long UIA_NamePropertyId = 30005;
        const long UIA_AcceleratorKeyPropertyId = 30006;
        const long UIA_AccessKeyPropertyId = 30007;
        const long UIA_HasKeyboardFocusPropertyId = 30008;
        const long UIA_IsKeyboardFocusablePropertyId = 30009;
        const long UIA_IsEnabledPropertyId = 30010;
        const long UIA_AutomationIdPropertyId = 30011;
        const long UIA_ClassNamePropertyId = 30012;
        const long UIA_HelpTextPropertyId = 30013;
        const long UIA_ClickablePointPropertyId = 30014;
        const long UIA_CulturePropertyId = 30015;
        const long UIA_IsControlElementPropertyId = 30016;
        const long UIA_IsContentElementPropertyId = 30017;
        const long UIA_LabeledByPropertyId = 30018;
        const long UIA_IsPasswordPropertyId = 30019;
        const long UIA_NativeWindowHandlePropertyId = 30020;
        const long UIA_ItemTypePropertyId = 30021;
        const long UIA_IsOffscreenPropertyId = 30022;
        const long UIA_OrientationPropertyId = 30023;
        const long UIA_FrameworkIdPropertyId = 30024;
        const long UIA_IsRequiredForFormPropertyId = 30025;
        const long UIA_ItemStatusPropertyId = 30026;
        const long UIA_IsDockPatternAvailablePropertyId = 30027;
        const long UIA_IsExpandCollapsePatternAvailablePropertyId = 30028;
        const long UIA_IsGridItemPatternAvailablePropertyId = 30029;
        const long UIA_IsGridPatternAvailablePropertyId = 30030;
        const long UIA_IsInvokePatternAvailablePropertyId = 30031;
        const long UIA_IsMultipleViewPatternAvailablePropertyId = 30032;
        const long UIA_IsRangeValuePatternAvailablePropertyId = 30033;
        const long UIA_IsScrollPatternAvailablePropertyId = 30034;
        const long UIA_IsScrollItemPatternAvailablePropertyId = 30035;
        const long UIA_IsSelectionItemPatternAvailablePropertyId = 30036;
        const long UIA_IsSelectionPatternAvailablePropertyId = 30037;
        const long UIA_IsTablePatternAvailablePropertyId = 30038;
        const long UIA_IsTableItemPatternAvailablePropertyId = 30039;
        const long UIA_IsTextPatternAvailablePropertyId = 30040;
        const long UIA_IsTogglePatternAvailablePropertyId = 30041;
        const long UIA_IsTransformPatternAvailablePropertyId = 30042;
        const long UIA_IsValuePatternAvailablePropertyId = 30043;
        const long UIA_IsWindowPatternAvailablePropertyId = 30044;
        const long UIA_ValueValuePropertyId = 30045;
        const long UIA_ValueIsReadOnlyPropertyId = 30046;
        const long UIA_RangeValueValuePropertyId = 30047;
        const long UIA_RangeValueIsReadOnlyPropertyId = 30048;
        const long UIA_RangeValueMinimumPropertyId = 30049;
        const long UIA_RangeValueMaximumPropertyId = 30050;
        const long UIA_RangeValueLargeChangePropertyId = 30051;
        const long UIA_RangeValueSmallChangePropertyId = 30052;
        const long UIA_ScrollHorizontalScrollPercentPropertyId = 30053;
        const long UIA_ScrollHorizontalViewSizePropertyId = 30054;
        const long UIA_ScrollVerticalScrollPercentPropertyId = 30055;
        const long UIA_ScrollVerticalViewSizePropertyId = 30056;
        const long UIA_ScrollHorizontallyScrollablePropertyId = 30057;
        const long UIA_ScrollVerticallyScrollablePropertyId = 30058;
        const long UIA_SelectionSelectionPropertyId = 30059;
        const long UIA_SelectionCanSelectMultiplePropertyId = 30060;
        const long UIA_SelectionIsSelectionRequiredPropertyId = 30061;
        const long UIA_GridRowCountPropertyId = 30062;
        const long UIA_GridColumnCountPropertyId = 30063;
        const long UIA_GridItemRowPropertyId = 30064;
        const long UIA_GridItemColumnPropertyId = 30065;
        const long UIA_GridItemRowSpanPropertyId = 30066;
        const long UIA_GridItemColumnSpanPropertyId = 30067;
        const long UIA_GridItemContainingGridPropertyId = 30068;
        const long UIA_DockDockPositionPropertyId = 30069;
        const long UIA_ExpandCollapseExpandCollapseStatePropertyId = 30070;
        const long UIA_MultipleViewCurrentViewPropertyId = 30071;
        const long UIA_MultipleViewSupportedViewsPropertyId = 30072;
        const long UIA_WindowCanMaximizePropertyId = 30073;
        const long UIA_WindowCanMinimizePropertyId = 30074;
        const long UIA_WindowWindowVisualStatePropertyId = 30075;
        const long UIA_WindowWindowInteractionStatePropertyId = 30076;
        const long UIA_WindowIsModalPropertyId = 30077;
        const long UIA_WindowIsTopmostPropertyId = 30078;
        const long UIA_SelectionItemIsSelectedPropertyId = 30079;
        const long UIA_SelectionItemSelectionContainerPropertyId = 30080;
        const long UIA_TableRowHeadersPropertyId = 30081;
        const long UIA_TableColumnHeadersPropertyId = 30082;
        const long UIA_TableRowOrColumnMajorPropertyId = 30083;
        const long UIA_TableItemRowHeaderItemsPropertyId = 30084;
        const long UIA_TableItemColumnHeaderItemsPropertyId = 30085;
        const long UIA_ToggleToggleStatePropertyId = 30086;
        const long UIA_TransformCanMovePropertyId = 30087;
        const long UIA_TransformCanResizePropertyId = 30088;
        const long UIA_TransformCanRotatePropertyId = 30089;
        const long UIA_IsLegacyIAccessiblePatternAvailablePropertyId = 30090;
        const long UIA_LegacyIAccessibleChildIdPropertyId = 30091;
        const long UIA_LegacyIAccessibleNamePropertyId = 30092;
        const long UIA_LegacyIAccessibleValuePropertyId = 30093;
        const long UIA_LegacyIAccessibleDescriptionPropertyId = 30094;
        const long UIA_LegacyIAccessibleRolePropertyId = 30095;
        const long UIA_LegacyIAccessibleStatePropertyId = 30096;
        const long UIA_LegacyIAccessibleHelpPropertyId = 30097;
        const long UIA_LegacyIAccessibleKeyboardShortcutPropertyId = 30098;
        const long UIA_LegacyIAccessibleSelectionPropertyId = 30099;
        const long UIA_LegacyIAccessibleDefaultActionPropertyId = 30100;
        const long UIA_AriaRolePropertyId = 30101;
        const long UIA_AriaPropertiesPropertyId = 30102;
        const long UIA_IsDataValidForFormPropertyId = 30103;
        const long UIA_ControllerForPropertyId = 30104;
        const long UIA_DescribedByPropertyId = 30105;
        const long UIA_FlowsToPropertyId = 30106;
        const long UIA_ProviderDescriptionPropertyId = 30107;
        const long UIA_IsItemContainerPatternAvailablePropertyId = 30108;
        const long UIA_IsVirtualizedItemPatternAvailablePropertyId = 30109;
        const long UIA_IsSynchronizedInputPatternAvailablePropertyId = 30110;
        const long UIA_OptimizeForVisualContentPropertyId = 30111;
        const long UIA_IsObjectModelPatternAvailablePropertyId = 30112;
        const long UIA_AnnotationAnnotationTypeIdPropertyId = 30113;
        const long UIA_AnnotationAnnotationTypeNamePropertyId = 30114;
        const long UIA_AnnotationAuthorPropertyId = 30115;
        const long UIA_AnnotationDateTimePropertyId = 30116;
        const long UIA_AnnotationTargetPropertyId = 30117;
        const long UIA_IsAnnotationPatternAvailablePropertyId = 30118;
        const long UIA_IsTextPattern2AvailablePropertyId = 30119;
        const long UIA_StylesStyleIdPropertyId = 30120;
        const long UIA_StylesStyleNamePropertyId = 30121;
        const long UIA_StylesFillColorPropertyId = 30122;
        const long UIA_StylesFillPatternStylePropertyId = 30123;
        const long UIA_StylesShapePropertyId = 30124;
        const long UIA_StylesFillPatternColorPropertyId = 30125;
        const long UIA_StylesExtendedPropertiesPropertyId = 30126;
        const long UIA_IsStylesPatternAvailablePropertyId = 30127;
        const long UIA_IsSpreadsheetPatternAvailablePropertyId = 30128;
        const long UIA_SpreadsheetItemFormulaPropertyId = 30129;
        const long UIA_SpreadsheetItemAnnotationObjectsPropertyId = 30130;
        const long UIA_SpreadsheetItemAnnotationTypesPropertyId = 30131;
        const long UIA_IsSpreadsheetItemPatternAvailablePropertyId = 30132;
        const long UIA_Transform2CanZoomPropertyId = 30133;
        const long UIA_IsTransformPattern2AvailablePropertyId = 30134;
        const long UIA_LiveSettingPropertyId = 30135;
        const long UIA_IsTextChildPatternAvailablePropertyId = 30136;
        const long UIA_IsDragPatternAvailablePropertyId = 30137;
        const long UIA_DragIsGrabbedPropertyId = 30138;
        const long UIA_DragDropEffectPropertyId = 30139;
        const long UIA_DragDropEffectsPropertyId = 30140;
        const long UIA_IsDropTargetPatternAvailablePropertyId = 30141;
        const long UIA_DropTargetDropTargetEffectPropertyId = 30142;
        const long UIA_DropTargetDropTargetEffectsPropertyId = 30143;
        const long UIA_DragGrabbedItemsPropertyId = 30144;
        const long UIA_Transform2ZoomLevelPropertyId = 30145;
        const long UIA_Transform2ZoomMinimumPropertyId = 30146;
        const long UIA_Transform2ZoomMaximumPropertyId = 30147;
        const long UIA_FlowsFromPropertyId = 30148;
        const long UIA_IsTextEditPatternAvailablePropertyId = 30149;
        const long UIA_IsPeripheralPropertyId = 30150;
        const long UIA_IsCustomNavigationPatternAvailablePropertyId = 30151;
        const long UIA_PositionInSetPropertyId = 30152;
        const long UIA_SizeOfSetPropertyId = 30153;
        const long UIA_LevelPropertyId = 30154;
        const long UIA_AnnotationTypesPropertyId = 30155;
        const long UIA_AnnotationObjectsPropertyId = 30156;
        const long UIA_LandmarkTypePropertyId = 30157;
        const long UIA_LocalizedLandmarkTypePropertyId = 30158;
        const long UIA_FullDescriptionPropertyId = 30159;
        const long UIA_FillColorPropertyId = 30160;
        const long UIA_OutlineColorPropertyId = 30161;
        const long UIA_FillTypePropertyId = 30162;
        const long UIA_VisualEffectsPropertyId = 30163;
        const long UIA_OutlineThicknessPropertyId = 30164;
        const long UIA_CenterPointPropertyId = 30165;
        const long UIA_RotationPropertyId = 30166;
        const long UIA_SizePropertyId = 30167;
        const long UIA_IsSelectionPattern2AvailablePropertyId = 30168;
        const long UIA_Selection2FirstSelectedItemPropertyId = 30169;
        const long UIA_Selection2LastSelectedItemPropertyId = 30170;
        const long UIA_Selection2CurrentSelectedItemPropertyId = 30171;
        const long UIA_Selection2ItemCountPropertyId = 30172;
        const long UIA_HeadingLevelPropertyId = 30173;
        const long UIA_IsDialogPropertyId = 30174;
    }

        [dllname("<no entry points>")]
    module UIA_TextAttributeIds
    {
        const long UIA_AnimationStyleAttributeId = 40000;
        const long UIA_BackgroundColorAttributeId = 40001;
        const long UIA_BulletStyleAttributeId = 40002;
        const long UIA_CapStyleAttributeId = 40003;
        const long UIA_CultureAttributeId = 40004;
        const long UIA_FontNameAttributeId = 40005;
        const long UIA_FontSizeAttributeId = 40006;
        const long UIA_FontWeightAttributeId = 40007;
        const long UIA_ForegroundColorAttributeId = 40008;
        const long UIA_HorizontalTextAlignmentAttributeId = 40009;
        const long UIA_IndentationFirstLineAttributeId = 40010;
        const long UIA_IndentationLeadingAttributeId = 40011;
        const long UIA_IndentationTrailingAttributeId = 40012;
        const long UIA_IsHiddenAttributeId = 40013;
        const long UIA_IsItalicAttributeId = 40014;
        const long UIA_IsReadOnlyAttributeId = 40015;
        const long UIA_IsSubscriptAttributeId = 40016;
        const long UIA_IsSuperscriptAttributeId = 40017;
        const long UIA_MarginBottomAttributeId = 40018;
        const long UIA_MarginLeadingAttributeId = 40019;
        const long UIA_MarginTopAttributeId = 40020;
        const long UIA_MarginTrailingAttributeId = 40021;
        const long UIA_OutlineStylesAttributeId = 40022;
        const long UIA_OverlineColorAttributeId = 40023;
        const long UIA_OverlineStyleAttributeId = 40024;
        const long UIA_StrikethroughColorAttributeId = 40025;
        const long UIA_StrikethroughStyleAttributeId = 40026;
        const long UIA_TabsAttributeId = 40027;
        const long UIA_TextFlowDirectionsAttributeId = 40028;
        const long UIA_UnderlineColorAttributeId = 40029;
        const long UIA_UnderlineStyleAttributeId = 40030;
        const long UIA_AnnotationTypesAttributeId = 40031;
        const long UIA_AnnotationObjectsAttributeId = 40032;
        const long UIA_StyleNameAttributeId = 40033;
        const long UIA_StyleIdAttributeId = 40034;
        const long UIA_LinkAttributeId = 40035;
        const long UIA_IsActiveAttributeId = 40036;
        const long UIA_SelectionActiveEndAttributeId = 40037;
        const long UIA_CaretPositionAttributeId = 40038;
        const long UIA_CaretBidiModeAttributeId = 40039;
        const long UIA_LineSpacingAttributeId = 40040;
        const long UIA_BeforeParagraphSpacingAttributeId = 40041;
        const long UIA_AfterParagraphSpacingAttributeId = 40042;
        const long UIA_SayAsInterpretAsAttributeId = 40043;
    }

        [dllname("<no entry points>")]
    module UIA_ControlTypeIds
    {
        const long UIA_ButtonControlTypeId = 50000;
        const long UIA_CalendarControlTypeId = 50001;
        const long UIA_CheckBoxControlTypeId = 50002;
        const long UIA_ComboBoxControlTypeId = 50003;
        const long UIA_EditControlTypeId = 50004;
        const long UIA_HyperlinkControlTypeId = 50005;
        const long UIA_ImageControlTypeId = 50006;
        const long UIA_ListItemControlTypeId = 50007;
        const long UIA_ListControlTypeId = 50008;
        const long UIA_MenuControlTypeId = 50009;
        const long UIA_MenuBarControlTypeId = 50010;
        const long UIA_MenuItemControlTypeId = 50011;
        const long UIA_ProgressBarControlTypeId = 50012;
        const long UIA_RadioButtonControlTypeId = 50013;
        const long UIA_ScrollBarControlTypeId = 50014;
        const long UIA_SliderControlTypeId = 50015;
        const long UIA_SpinnerControlTypeId = 50016;
        const long UIA_StatusBarControlTypeId = 50017;
        const long UIA_TabControlTypeId = 50018;
        const long UIA_TabItemControlTypeId = 50019;
        const long UIA_TextControlTypeId = 50020;
        const long UIA_ToolBarControlTypeId = 50021;
        const long UIA_ToolTipControlTypeId = 50022;
        const long UIA_TreeControlTypeId = 50023;
        const long UIA_TreeItemControlTypeId = 50024;
        const long UIA_CustomControlTypeId = 50025;
        const long UIA_GroupControlTypeId = 50026;
        const long UIA_ThumbControlTypeId = 50027;
        const long UIA_DataGridControlTypeId = 50028;
        const long UIA_DataItemControlTypeId = 50029;
        const long UIA_DocumentControlTypeId = 50030;
        const long UIA_SplitButtonControlTypeId = 50031;
        const long UIA_WindowControlTypeId = 50032;
        const long UIA_PaneControlTypeId = 50033;
        const long UIA_HeaderControlTypeId = 50034;
        const long UIA_HeaderItemControlTypeId = 50035;
        const long UIA_TableControlTypeId = 50036;
        const long UIA_TitleBarControlTypeId = 50037;
        const long UIA_SeparatorControlTypeId = 50038;
        const long UIA_SemanticZoomControlTypeId = 50039;
        const long UIA_AppBarControlTypeId = 50040;
    };

    [dllname("<no entry points>")]
    module UIA_AnnotationTypes
    {
        const long AnnotationType_Unknown = 60000;
        const long AnnotationType_SpellingError = 60001;
        const long AnnotationType_GrammarError = 60002;
        const long AnnotationType_Comment = 60003;
        const long AnnotationType_FormulaError = 60004;
        const long AnnotationType_TrackChanges = 60005;
        const long AnnotationType_Header = 60006;
        const long AnnotationType_Footer = 60007;
        const long AnnotationType_Highlighted = 60008;
        const long AnnotationType_Endnote = 60009;
        const long AnnotationType_Footnote = 60010;
        const long AnnotationType_InsertionChange = 60011;
        const long AnnotationType_DeletionChange = 60012;
        const long AnnotationType_MoveChange = 60013;
        const long AnnotationType_FormatChange = 60014;
        const long AnnotationType_UnsyncedChange = 60015;
        const long AnnotationType_EditingLockedChange = 60016;
        const long AnnotationType_ExternalChange = 60017;
        const long AnnotationType_ConflictingChange = 60018;
        const long AnnotationType_Author = 60019;
        const long AnnotationType_AdvancedProofingIssue = 60020;
        const long AnnotationType_DataValidationError = 60021;
        const long AnnotationType_CircularReferenceError = 60022;
        const long AnnotationType_Mathematics = 60023;
        const long AnnotationType_Sensitive = 60024;
    };

    [dllname("<no entry points>")]
    module UIA_StyleIds
    {
        const long StyleId_Custom = 70000;
        const long StyleId_Heading1 = 70001;
        const long StyleId_Heading2 = 70002;
        const long StyleId_Heading3 = 70003;
        const long StyleId_Heading4 = 70004;
        const long StyleId_Heading5 = 70005;
        const long StyleId_Heading6 = 70006;
        const long StyleId_Heading7 = 70007;
        const long StyleId_Heading8 = 70008;
        const long StyleId_Heading9 = 70009;
        const long StyleId_Title = 70010;
        const long StyleId_Subtitle = 70011;
        const long StyleId_Normal = 70012;
        const long StyleId_Emphasis = 70013;
        const long StyleId_Quote = 70014;
        const long StyleId_BulletedList = 70015;
        const long StyleId_NumberedList = 70016;
    };

    [dllname("<no entry points>")]
    module UIA_LandmarkTypeIds
    {
        const long UIA_CustomLandmarkTypeId = 80000;
        const long UIA_FormLandmarkTypeId = 80001;
        const long UIA_MainLandmarkTypeId = 80002;
        const long UIA_NavigationLandmarkTypeId = 80003;
        const long UIA_SearchLandmarkTypeId = 80004;
    };

    [dllname("<no entry points>")]
    module UIA_HeadingLevelIds
    {
        const long HeadingLevel_None = 80050;
        const long HeadingLevel1 = 80051;
        const long HeadingLevel2 = 80052;
        const long HeadingLevel3 = 80053;
        const long HeadingLevel4 = 80054;
        const long HeadingLevel5 = 80055;
        const long HeadingLevel6 = 80056;
        const long HeadingLevel7 = 80057;
        const long HeadingLevel8 = 80058;
        const long HeadingLevel9 = 80059;
    };

    [dllname("<no entry points>")]
    module UIA_ChangeIds
    {
        const long UIA_SummaryChangeId = 90000;
    };

    [dllname("<no entry points>")]
    module UIA_MetadataIds
    {
        const long UIA_SayAsInterpretAsMetadataId = 100000;
    };

    interface IUIAutomationElement;
    interface IUIAutomationElementArray;

    //
    //  IUIAutomationCondition
    //
    [
        odl, 
        uuid(352ffba8-0973-437c-a61f-f64cafd81df9)
    ]
    interface IUIAutomationCondition : stdole.IUnknown
    {
    }

    //
    //  IUIAutomationBoolCondition
    //
    [
        odl, 
        uuid(1b4e1f2e-75eb-4d0b-8952-5a69988e2307)
    ]
    interface IUIAutomationBoolCondition : IUIAutomationCondition
    {
        [propget] HRESULT BooleanValue(
            [out, retval] BOOL* boolVal);
    }

    //
    //  IUIAutomationPropertyCondition
    //
    [
        odl, 
        uuid(99ebf2cb-5578-4267-9ad4-afd6ea77e94b)
    ]
    interface IUIAutomationPropertyCondition : IUIAutomationCondition
    {
        [propget] HRESULT PropertyId(
            [out, retval] PROPERTYID* propertyId);

        [propget] HRESULT PropertyValue(
            [out, retval] VARIANT* propertyValue);

        [propget] HRESULT PropertyConditionFlags(
            [out, retval] Uia_PropertyConditionFlags* flags);
    }
    
    //
    //  IUIAutomationAndCondition
    //
    [
        odl, 
        uuid(a7d0af36-b912-45fe-9855-091ddc174aec)
    ]
    interface IUIAutomationAndCondition : IUIAutomationCondition
    {
        [propget] HRESULT ChildCount(
            [out, retval] int* childCount);

        HRESULT GetChildrenAsNativeArray(
            [out] LongPtr* childArray,
            [out] int* childArrayCount);

        HRESULT GetChildren(
            [out, retval] LongPtr*  childArray);
    }
//SAFEARRAY(IUIAutomationCondition)
    //
    //  IUIAutomationOrCondition
    //
    [
        odl, 
        uuid(8753f032-3db1-47b5-a1fc-6e34a266c712)
    ]
    interface IUIAutomationOrCondition : IUIAutomationCondition
    {
        [propget] HRESULT ChildCount(
            [out, retval] int* childCount);

        HRESULT GetChildrenAsNativeArray(
            [out] LongPtr* childArray,
            [out] int* childArrayCount);

        HRESULT GetChildren(
            [out, retval] LongPtr*  childArray);
    }
//SAFEARRAY(IUIAutomationCondition)**
    //
    //  IUIAutomationNotCondition
    //
    [
        odl, 
        uuid(f528b657-847b-498c-8896-d52b565407a1)
    ]
    interface IUIAutomationNotCondition : IUIAutomationCondition
    {
        HRESULT GetChild(
            [out, retval] IUIAutomationCondition** condition);
    }

    //
    //  IUIAutomationCacheRequest
    //
    [
        odl, 
        uuid(b32a92b5-bc25-4078-9c08-d7ee95c48e03)
    ]
    interface IUIAutomationCacheRequest : stdole.IUnknown
    {
        HRESULT AddProperty(
            [in] PROPERTYID propertyId);

        HRESULT AddPattern(
            [in] PATTERNID patternId);

        HRESULT Clone(
            [out, retval] IUIAutomationCacheRequest** clonedRequest);

        [propget] HRESULT TreeScope(
            [out, retval] Uia_TreeScope* scope);

        [propput] HRESULT TreeScope(
            [in] Uia_TreeScope scope);

        [propget] HRESULT TreeFilter(
            [out, retval] IUIAutomationCondition** filter);

        [propput] HRESULT TreeFilter(
            [in] IUIAutomationCondition* filter);

        [propget] HRESULT AutomationElementMode(
            [out, retval] Uia_AutomationElementMode* mode);

        [propput] HRESULT AutomationElementMode(
            [in] Uia_AutomationElementMode mode);

    }

    //
    //  IUIAutomationTreeWalker
    //
    [
        odl, 
        uuid(4042c624-389c-4afc-a630-9df854a541fc)
    ]
    interface IUIAutomationTreeWalker : stdole.IUnknown
    {
        HRESULT GetParentElement(
            [in] IUIAutomationElement* element,
            [out, retval] IUIAutomationElement** parent);

        HRESULT GetFirstChildElement(
            [in] IUIAutomationElement* element,
            [out, retval] IUIAutomationElement** first);

        HRESULT GetLastChildElement(
            [in] IUIAutomationElement* element,
            [out, retval] IUIAutomationElement** last);

        HRESULT GetNextSiblingElement(
            [in] IUIAutomationElement* element,
            [out, retval] IUIAutomationElement** next);

        HRESULT GetPreviousSiblingElement(
            [in] IUIAutomationElement* element,
            [out, retval] IUIAutomationElement** previous);

        HRESULT NormalizeElement(
            [in] IUIAutomationElement* element,
            [out, retval] IUIAutomationElement** normalized);


        // Separate * CacheRequest names exist, because there's no name overloading in COM
        HRESULT GetParentElementBuildCache(
            [in] IUIAutomationElement* element,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [out, retval] IUIAutomationElement** parent);

        HRESULT GetFirstChildElementBuildCache(
            [in] IUIAutomationElement* element,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [out, retval] IUIAutomationElement** first);

        HRESULT GetLastChildElementBuildCache(
            [in] IUIAutomationElement* element,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [out, retval] IUIAutomationElement** last);

        HRESULT GetNextSiblingElementBuildCache(
            [in] IUIAutomationElement* element,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [out, retval] IUIAutomationElement** next);

        HRESULT GetPreviousSiblingElementBuildCache(
            [in] IUIAutomationElement* element,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [out, retval] IUIAutomationElement** previous);

        HRESULT NormalizeElementBuildCache(
            [in] IUIAutomationElement* element,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [out, retval] IUIAutomationElement** normalized);


        [propget] HRESULT Condition(
            [out, retval] IUIAutomationCondition** condition);

    }

    //
    //  IUIAutomationEventHandler
    //
    [
        odl, 
        uuid(146c3c17-f12e-4e22-8c27-f894b9b79c69)//,
        //oleautomation
    ]
    interface IUIAutomationEventHandler : stdole.IUnknown
    {
        HRESULT HandleAutomationEvent(
            [in] IUIAutomationElement* sender,
            [in] EVENTID eventId);
    }

    //
    //  IUIAutomationPropertyChangedEventHandler
    //
    [
        odl, 
        uuid(40cd37d4-c756-4b0c-8c6f-bddfeeb13b50)//,
        //oleautomation
    ]
    interface IUIAutomationPropertyChangedEventHandler : stdole.IUnknown
    {
        HRESULT HandlePropertyChangedEvent(
            [in] IUIAutomationElement* sender,
            [in] PROPERTYID propertyId,
            [in] VARIANT newValue);
    }

    //
    //  IUIAutomationStructureChangedEventHandler
    //
    [
        odl, 
        uuid(e81d1b4e-11c5-42f8-9754-e7036c79f054)//, 
        //oleautomation
    ]
    interface IUIAutomationStructureChangedEventHandler : stdole.IUnknown
    {
        HRESULT HandleStructureChangedEvent(
            [in] IUIAutomationElement* sender,
            [in] Uia_StructureChangeType changeType,
            [in] SAFEARRAY(int) runtimeId);
    }

    //
    //  IUIAutomationFocusChangedEventHandler
    //
    [
        odl, 
        uuid(c270f6b5-5c69-4290-9745-7a7f97169468)//,
        //oleautomation
    ]
    interface IUIAutomationFocusChangedEventHandler : stdole.IUnknown
    {
        HRESULT HandleFocusChangedEvent(
            [in] IUIAutomationElement* sender);
    }

    //
    //  IUIAutomationTextEditTextChangedEventHandler
    //
    [
        odl, 
        uuid(92FAA680-E704-4156-931A-E32D5BB38F3F)//,
        //oleautomation
    ]
    interface IUIAutomationTextEditTextChangedEventHandler : stdole.IUnknown
    {
        HRESULT HandleTextEditTextChangedEvent(
            [in] IUIAutomationElement* sender,
            [in] Uia_TextEditChangeType textEditChangeType,
            [in] SAFEARRAY(BSTR) eventStrings);
    }

    //
    //  IUIAutomationChangesEventHandler
    //
    [
        odl, 
        uuid(58EDCA55-2C3E-4980-B1B9-56C17F27A2A0)//,
        //oleautomation
    ]
    interface IUIAutomationChangesEventHandler : stdole.IUnknown
    {
        HRESULT HandleChangesEvent(
            [in] IUIAutomationElement* sender,
            [in] UiaChangeInfo* uiaChanges,
            [in] int changesCount);
    }

    //
    //  IUIAutomationNotificationEventHandler
    //
    [
        odl, 
        uuid(C7CB2637-E6C2-4D0C-85DE-4948C02175C7)//, 
        //oleautomation
    ]
    interface IUIAutomationNotificationEventHandler : stdole.IUnknown
    {
        HRESULT HandleNotificationEvent(
            [in] IUIAutomationElement* sender,
            [in] Uia_NotificationKind notificationKind,
            [in] Uia_NotificationProcessing notificationProcessing,
            [in] BSTR displayString,
            [in] BSTR activityId);
    }

    //
    //  IUIAutomationInvokePattern
    //
    [
        odl, 
        uuid(fb377fbe-8ea6-46d5-9c73-6499642d3059)
    ]
    interface IUIAutomationInvokePattern : stdole.IUnknown
    {
        HRESULT Invoke();

    }

    //
    //  IUIAutomationDockPattern
    //
    [
        odl, 
        uuid(fde5ef97-1464-48f6-90bf-43d0948e86ec)
    ]
    interface IUIAutomationDockPattern : stdole.IUnknown
    {
        HRESULT SetDockPosition(
            [in] Uia_DockPosition dockPos);

        [propget] HRESULT CurrentDockPosition(
            [out, retval] Uia_DockPosition* retVal);

        [propget] HRESULT CachedDockPosition(
            [out, retval] Uia_DockPosition* retVal);
    }

    //
    //  IUIAutomationExpandCollapsePattern
    //
    [
        odl, 
        uuid(619be086-1f4e-4ee4-bafa-210128738730)
    ]
    interface IUIAutomationExpandCollapsePattern : stdole.IUnknown
    {
        HRESULT Expand();

        HRESULT Collapse();

        [propget] HRESULT CurrentExpandCollapseState(
            [out, retval] Uia_ExpandCollapseState* retVal);

        [propget] HRESULT CachedExpandCollapseState(
            [out, retval] Uia_ExpandCollapseState* retVal);
    }

    //
    //  IUIAutomationGridPattern
    //
    [
        odl, 
        uuid(414c3cdc-856b-4f5b-8538-3131c6302550)
    ]
    interface IUIAutomationGridPattern : stdole.IUnknown
    {
        HRESULT GetItem(
            [in] int row,
            [in] int column,
            [out, retval] IUIAutomationElement** element);

        [propget] HRESULT CurrentRowCount(
            [out, retval] int* retVal);

        [propget] HRESULT CurrentColumnCount(
            [out, retval] int* retVal);

        [propget] HRESULT CachedRowCount(
            [out, retval] int* retVal);

        [propget] HRESULT CachedColumnCount(
            [out, retval] int* retVal);
    }

    //
    //  IUIAutomationGridItemPattern
    //
    [
        odl, 
        uuid(78f8ef57-66c3-4e09-bd7c-e79b2004894d)
    ]
    interface IUIAutomationGridItemPattern : stdole.IUnknown
    {
        [propget] HRESULT CurrentContainingGrid(
            [out, retval] IUIAutomationElement** retVal);

        [propget] HRESULT CurrentRow(
            [out, retval] int* retVal);

        [propget] HRESULT CurrentColumn(
            [out, retval] int* retVal);

        [propget] HRESULT CurrentRowSpan(
            [out, retval] int* retVal);

        [propget] HRESULT CurrentColumnSpan(
            [out, retval] int* retVal);

        [propget] HRESULT CachedContainingGrid(
            [out, retval] IUIAutomationElement** retVal);

        [propget] HRESULT CachedRow(
            [out, retval] int* retVal);

        [propget] HRESULT CachedColumn(
            [out, retval] int* retVal);

        [propget] HRESULT CachedRowSpan(
            [out, retval] int* retVal);

        [propget] HRESULT CachedColumnSpan(
            [out, retval] int* retVal);
    }

    //
    //  IUIAutomationMultipleViewPattern
    //
    [
        odl, 
        uuid(8d253c91-1dc5-4bb5-b18f-ade16fa495e8)
    ]
    interface IUIAutomationMultipleViewPattern : stdole.IUnknown
    {
        HRESULT GetViewName(
            [in] int view,
            [out, retval] BSTR* name);

        HRESULT SetCurrentView(
            [in] int view);

        [propget] HRESULT CurrentCurrentView(
            [out, retval] int* retVal);

        HRESULT GetCurrentSupportedViews(
            [out, retval] SAFEARRAY(int)* retVal);

        [propget] HRESULT CachedCurrentView(
            [out, retval] int* retVal);

        HRESULT GetCachedSupportedViews(
            [out, retval] SAFEARRAY(int)* retVal);
    }

    //
    //  IUIAutomationObjectModelPattern
    //
    [
        odl, 
        uuid(71c284b3-c14d-4d14-981e-19751b0d756d)
    ]
    interface IUIAutomationObjectModelPattern : stdole.IUnknown
    {
        HRESULT GetUnderlyingObjectModel(
            [out, retval] IUnknown** retVal);
    }

    //
    //  IUIAutomationRangeValuePattern
    //
    [
        odl, 
        uuid(59213f4f-7346-49e5-b120-80555987a148)
    ]
    interface IUIAutomationRangeValuePattern : stdole.IUnknown
    {
        HRESULT SetValue(
            [in] double val);

        [propget] HRESULT CurrentValue(
            [out, retval] double* retVal);

        [propget] HRESULT CurrentIsReadOnly(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentMaximum(
            [out, retval] double* retVal);

        [propget] HRESULT CurrentMinimum(
            [out, retval] double* retVal);

        [propget] HRESULT CurrentLargeChange(
            [out, retval] double* retVal);

        [propget] HRESULT CurrentSmallChange(
            [out, retval] double* retVal);

        [propget] HRESULT CachedValue(
            [out, retval] double* retVal);

        [propget] HRESULT CachedIsReadOnly(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedMaximum(
            [out, retval] double* retVal);

        [propget] HRESULT CachedMinimum(
            [out, retval] double* retVal);

        [propget] HRESULT CachedLargeChange(
            [out, retval] double* retVal);

        [propget] HRESULT CachedSmallChange(
            [out, retval] double* retVal);
    }

    //
    //  IUIAutomationScrollPattern
    //
    [
        odl, 
        uuid(88f4d42a-e881-459d-a77c-73bbbb7e02dc)
    ]
    interface IUIAutomationScrollPattern : stdole.IUnknown
    {
        HRESULT Scroll(
            [in] Uia_ScrollAmount horizontalAmount,
            [in] Uia_ScrollAmount verticalAmount);

        HRESULT SetScrollPercent(
            [in] double horizontalPercent,
            [in] double verticalPercent);

        [propget] HRESULT CurrentHorizontalScrollPercent(
            [out, retval] double* retVal);

        [propget] HRESULT CurrentVerticalScrollPercent(
            [out, retval] double* retVal);

        [propget] HRESULT CurrentHorizontalViewSize(
            [out, retval] double* retVal);

        [propget] HRESULT CurrentVerticalViewSize(
            [out, retval] double* retVal);

        [propget] HRESULT CurrentHorizontallyScrollable(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentVerticallyScrollable(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedHorizontalScrollPercent(
            [out, retval] double* retVal);

        [propget] HRESULT CachedVerticalScrollPercent(
            [out, retval] double* retVal);

        [propget] HRESULT CachedHorizontalViewSize(
            [out, retval] double* retVal);

        [propget] HRESULT CachedVerticalViewSize(
            [out, retval] double* retVal);

        [propget] HRESULT CachedHorizontallyScrollable(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedVerticallyScrollable(
            [out, retval] BOOL* retVal);
    }

    //
    //  IUIAutomationScrollItemPattern
    //
    [
        odl, 
        uuid(b488300f-d015-4f19-9c29-bb595e3645ef)
    ]
    interface IUIAutomationScrollItemPattern : stdole.IUnknown
    {
        HRESULT ScrollIntoView();
    }

    //
    //  IUIAutomationSelectionPattern
    //
    [
        odl, 
        uuid(5ed5202e-b2ac-47a6-b638-4b0bf140d78e)
    ]
    interface IUIAutomationSelectionPattern : stdole.IUnknown
    {
        HRESULT GetCurrentSelection(
            [out, retval] IUIAutomationElementArray** retVal);

        [propget] HRESULT CurrentCanSelectMultiple(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentIsSelectionRequired(
            [out, retval] BOOL* retVal);

        HRESULT GetCachedSelection(
            [out, retval] IUIAutomationElementArray** retVal);

        [propget] HRESULT CachedCanSelectMultiple(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedIsSelectionRequired(
            [out, retval] BOOL* retVal);
    }

    //
    //  IUIAutomationSelectionPattern2
    //
    [
        odl, 
        uuid(0532bfae-c011-4e32-a343-6d642d798555)
    ]
    interface IUIAutomationSelectionPattern2 : IUIAutomationSelectionPattern
    {
        [propget] HRESULT CurrentFirstSelectedItem(
            [out, retval] IUIAutomationElement** retVal);

        [propget] HRESULT CurrentLastSelectedItem(
            [out, retval] IUIAutomationElement** retVal);

        [propget] HRESULT CurrentCurrentSelectedItem(
            [out, retval] IUIAutomationElement** retVal);

        [propget] HRESULT CurrentItemCount(
            [out, retval] int* retVal);

        [propget] HRESULT CachedFirstSelectedItem(
            [out, retval] IUIAutomationElement** retVal);

        [propget] HRESULT CachedLastSelectedItem(
            [out, retval] IUIAutomationElement** retVal);

        [propget] HRESULT CachedCurrentSelectedItem(
            [out, retval] IUIAutomationElement** retVal);

        [propget] HRESULT CachedItemCount(
            [out, retval] int* retVal);
    }

    //
    //  IUIAutomationSelectionItemPattern
    //
    [
        odl, 
        uuid(a8efa66a-0fda-421a-9194-38021f3578ea)
    ]
    interface IUIAutomationSelectionItemPattern : stdole.IUnknown
    {
        HRESULT Select();

        HRESULT AddToSelection();

        HRESULT RemoveFromSelection();

        [propget] HRESULT CurrentIsSelected(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentSelectionContainer(
            [out, retval] IUIAutomationElement** retVal);

        [propget] HRESULT CachedIsSelected(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedSelectionContainer(
            [out, retval] IUIAutomationElement** retVal);
    }
        
    //
    //  IUIAutomationSynchronizedInputPattern
    //
    [
        odl, 
        uuid(2233be0b-afb7-448b-9fda-3b378aa5eae1)
    ]
    interface IUIAutomationSynchronizedInputPattern : stdole.IUnknown
    {
        HRESULT StartListening(
            [in] Uia_SynchronizedInputType inputType);

        HRESULT Cancel();
    }


    //
    //  IUIAutomationTablePattern
    //
    [
        odl, 
        uuid(620e691c-ea96-4710-a850-754b24ce2417)
    ]
    interface IUIAutomationTablePattern : stdole.IUnknown
    {
        HRESULT GetCurrentRowHeaders(
            [out, retval] IUIAutomationElementArray** retVal);

        HRESULT GetCurrentColumnHeaders(
            [out, retval] IUIAutomationElementArray** retVal);

        [propget] HRESULT CurrentRowOrColumnMajor(
            [out, retval] Uia_RowOrColumnMajor* retVal);

        HRESULT GetCachedRowHeaders(
            [out, retval] IUIAutomationElementArray** retVal);

        HRESULT GetCachedColumnHeaders(
            [out, retval] IUIAutomationElementArray** retVal);

        [propget] HRESULT CachedRowOrColumnMajor(
            [out, retval] Uia_RowOrColumnMajor* retVal);
    }

    //
    //  IUIAutomationTableItemPattern
    //
    [
        odl, 
        uuid(0b964eb3-ef2e-4464-9c79-61d61737a27e)
    ]
    interface IUIAutomationTableItemPattern : stdole.IUnknown
    {
        HRESULT GetCurrentRowHeaderItems(
            [out, retval] IUIAutomationElementArray** retVal);

        HRESULT GetCurrentColumnHeaderItems(
            [out, retval] IUIAutomationElementArray** retVal);

        HRESULT GetCachedRowHeaderItems(
            [out, retval] IUIAutomationElementArray** retVal);

        HRESULT GetCachedColumnHeaderItems(
            [out, retval] IUIAutomationElementArray** retVal);
    }

    //
    //  IUIAutomationTogglePattern
    //
    [
        odl, 
        uuid(94cf8058-9b8d-4ab9-8bfd-4cd0a33c8c70)
    ]
    interface IUIAutomationTogglePattern : stdole.IUnknown
    {
        HRESULT Toggle();

        [propget] HRESULT CurrentToggleState(
            [out, retval] Uia_ToggleState* retVal);

        [propget] HRESULT CachedToggleState(
            [out, retval] Uia_ToggleState* retVal);
    }

    //
    //  IUIAutomationTransformPattern
    //
    [
        odl, 
        uuid(a9b55844-a55d-4ef0-926d-569c16ff89bb)
    ]
    interface IUIAutomationTransformPattern : stdole.IUnknown
    {
        HRESULT Move(
            [in] double x,
            [in] double y);

        HRESULT Resize(
            [in] double width,
            [in] double height);

        HRESULT Rotate(
            [in] double degrees);

        [propget] HRESULT CurrentCanMove(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentCanResize(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentCanRotate(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedCanMove(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedCanResize(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedCanRotate(
            [out, retval] BOOL* retVal);
    }

    //
    //  IUIAutomationValuePattern
    //
    [
        odl, 
        uuid(a94cd8b1-0844-4cd6-9d2d-640537ab39e9)
    ]
    interface IUIAutomationValuePattern : stdole.IUnknown
    {
        HRESULT SetValue(
            [in] BSTR val);

        [propget] HRESULT CurrentValue(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentIsReadOnly(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedValue(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedIsReadOnly(
            [out, retval] BOOL* retVal);
    }

    //
    //  IUIAutomationWindowPattern
    //
    [
        odl, 
        uuid(0faef453-9208-43ef-bbb2-3b485177864f)
    ]
    interface IUIAutomationWindowPattern : stdole.IUnknown
    {
        HRESULT Close();

        HRESULT WaitForInputIdle(
            [in] int milliseconds,
            [out, retval] BOOL* success);

        HRESULT SetWindowVisualState(
            [in] Uia_WindowVisualState state);

        [propget] HRESULT CurrentCanMaximize(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentCanMinimize(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentIsModal(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentIsTopmost(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentWindowVisualState(
            [out, retval] Uia_WindowVisualState* retVal);

        [propget] HRESULT CurrentWindowInteractionState(
            [out, retval] Uia_WindowInteractionState* retVal);

        [propget] HRESULT CachedCanMaximize(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedCanMinimize(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedIsModal(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedIsTopmost(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedWindowVisualState(
            [out, retval] Uia_WindowVisualState* retVal);

        [propget] HRESULT CachedWindowInteractionState(
            [out, retval] Uia_WindowInteractionState* retVal);
    }


    //
    //  IUIAutomationTextRange
    //
    [
        odl, 
        uuid(a543cc6a-f4ae-494b-8239-c814481187a8)
    ]
    interface IUIAutomationTextRange : stdole.IUnknown
    {
        HRESULT Clone(
            [out, retval] IUIAutomationTextRange** clonedRange);

        HRESULT Compare(
            [in] IUIAutomationTextRange* range,
            [out, retval] BOOL* areSame);

        HRESULT CompareEndpoints(
            [in] Uia_TextPatternRangeEndpoint srcEndPoint,
            [in] IUIAutomationTextRange* range,
            [in] Uia_TextPatternRangeEndpoint targetEndPoint,
            [out, retval] int* compValue);

        HRESULT ExpandToEnclosingUnit(
            [in] Uia_TextUnit textUnit);

        HRESULT FindAttribute(
            [in] TEXTATTRIBUTEID attr,
            [in] VARIANT val,
            [in] BOOL backward,
            [out, retval] IUIAutomationTextRange** found);

        HRESULT FindText(
            [in] BSTR text,
            [in] BOOL backward,
            [in] BOOL ignoreCase,
            [out, retval] IUIAutomationTextRange** found);

        HRESULT GetAttributeValue(
            [in] TEXTATTRIBUTEID attr,
            [out, retval] VARIANT* value);

        HRESULT GetBoundingRectangles(
            [out, retval] SAFEARRAY(double)* boundingRects);

        HRESULT GetEnclosingElement(
            [out, retval] IUIAutomationElement** enclosingElement);

        HRESULT GetText(
            [in] int maxLength,
            [out, retval] BSTR* text);

        HRESULT Move(
            [in] Uia_TextUnit unit,
            [in] int count,
            [out, retval] int* moved);

        HRESULT MoveEndpointByUnit(
            [in] Uia_TextPatternRangeEndpoint endpoint,
            [in] Uia_TextUnit unit,
            [in] int count,
            [out, retval] int* moved);

        HRESULT MoveEndpointByRange(
            [in] Uia_TextPatternRangeEndpoint srcEndPoint,
            [in] IUIAutomationTextRange* range,
            [in] Uia_TextPatternRangeEndpoint targetEndPoint);

        HRESULT Select();

        HRESULT AddToSelection();

        HRESULT RemoveFromSelection();

        HRESULT ScrollIntoView(
            [in] BOOL alignToTop);

        HRESULT GetChildren(
            [out, retval] IUIAutomationElementArray** children);

    }

    //
    //  IUIAutomationTextRange2
    //
    [
        odl, 
        uuid(BB9B40E0-5E04-46BD-9BE0-4B601B9AFAD4)
    ]
    interface IUIAutomationTextRange2 : IUIAutomationTextRange
    {
        HRESULT ShowContextMenu();
    }

    //
    // IUIAutomationTextRange3 
    //
    [
        odl, 
        uuid(6A315D69-5512-4C2E-85F0-53FCE6DD4BC2)
    ]
    interface IUIAutomationTextRange3 : IUIAutomationtextRange2
    {
        HRESULT GetEnclosingElementBuildCache(
            [in] IUIAutomationCacheRequest* cacheRequest,
            [out, retval] IUIAutomationElement** enclosingElement);

        HRESULT GetChildrenBuildCache(
            [in] IUIAutomationCacheRequest* cacheRequest,
            [out, retval] IUIAutomationElementArray** children);

        HRESULT GetAttributeValues(
            [in] TEXTATTRIBUTEID* attributeIds,
            [in] int attributeIdCount,
            [out, retval] SAFEARRAY(VARIANT)* attributeValues);
    }

    //
    //  IUIAutomationTextRangeArray
    //
    [
        odl, 
        uuid(ce4ae76a-e717-4c98-81ea-47371d028eb6)
    ]
    interface IUIAutomationTextRangeArray : stdole.IUnknown
    {
        [propget] HRESULT Length(
            [out, retval] int* length);

        HRESULT GetElement(
            [in] int index,
            [out, retval] IUIAutomationTextRange** element);

    }

    //
    //  IUIAutomationTextPattern
    //
    [
        odl, 
        uuid(32eba289-3583-42c9-9c59-3b6d9a1e9b6a)
    ]
    interface IUIAutomationTextPattern : stdole.IUnknown
    {
        HRESULT RangeFromPoint(
            [in] int ptX, [in] int ptY,
            [out, retval] IUIAutomationTextRange** range);
            //POINT
        HRESULT RangeFromChild(
            [in] IUIAutomationElement* child,
            [out, retval] IUIAutomationTextRange** range);

        HRESULT GetSelection(
            [out, retval] IUIAutomationTextRangeArray** ranges);

        HRESULT GetVisibleRanges(
            [out, retval] IUIAutomationTextRangeArray** ranges);

        [propget] HRESULT DocumentRange(
            [out, retval] IUIAutomationTextRange** range);

        [propget] HRESULT SupportedTextSelection(
            [out, retval] Uia_SupportedTextSelection* supportedTextSelection);

    }

    //
    //  IUIAutomationTextPattern2
    //
    [
        odl, 
        uuid(506a921a-fcc9-409f-b23b-37eb74106872)
    ]
    interface IUIAutomationTextPattern2 : IUIAutomationTextPattern
    {
        HRESULT RangeFromAnnotation(
            [in] IUIAutomationElement* annotation,
            [out, retval] IUIAutomationTextRange** range);

        HRESULT GetCaretRange(
            [out] BOOL* isActive,
            [out, retval] IUIAutomationTextRange** range);
    }

    //
    // IUIAutomationTextEditPattern
    //
    [
        odl, 
        uuid(17E21576-996C-4870-99D9-BFF323380C06)
    ]
    interface IUIAutomationTextEditPattern : IUIAutomationTextPattern
    {
        HRESULT GetActiveComposition(
            [out, retval] IUIAutomationTextRange** range);

        HRESULT GetConversionTarget(
            [out, retval] IUIAutomationTextRange** range);
    }

    //
    //  IUIAutomationGridItemPattern
    //
    [
        odl, 
        uuid(01EA217A-1766-47ED-A6CC-ACF492854B1F)
    ]
    interface IUIAutomationCustomNavigationPattern : stdole.IUnknown
    {
        HRESULT Navigate(
            [in] Uia_NavigateDirection direction,
            [out, retval] IUIAutomationElement** pRetVal);
    }

    //
    //  IUIAutomationActiveTextPositionChangedEventHandler
    //
    [
        odl, 
        uuid(F97933B0-8DAE-4496-8997-5BA015FE0D82)//, 
        //oleautomation
    ]
    interface IUIAutomationActiveTextPositionChangedEventHandler : stdole.IUnknown
    {
        HRESULT HandleActiveTextPositionChangedEvent(
            [in] IUIAutomationElement* sender,
            [in] IUIAutomationTextRange* range);
    }

    //
    //  IUIAutomationLegacyIAccessiblePattern
    //

    // Parameter names are intentionally kept the same as IAccessible
    [
        odl, 
        uuid(828055ad-355b-4435-86d5-3b51c14a9b1b)
    ]
    interface IUIAutomationLegacyIAccessiblePattern : stdole.IUnknown
    {
        HRESULT Select([in] long flagsSelect);

        HRESULT DoDefaultAction();

        HRESULT SetValue([in] LongPtr szValue);

        [propget] HRESULT CurrentChildId(
            [out, retval] int* pRetVal);

        [propget] HRESULT CurrentName(
            [out, retval] BSTR* pszName);

        [propget] HRESULT CurrentValue(
            [out, retval] BSTR* pszValue);

        [propget] HRESULT CurrentDescription(
            [out, retval] BSTR* pszDescription);

        [propget] HRESULT CurrentRole(
            [out, retval] DWORD* pdwRole);

        [propget] HRESULT CurrentState(
            [out, retval] DWORD* pdwState);

        [propget] HRESULT CurrentHelp(
            [out, retval] BSTR* pszHelp);

        [propget] HRESULT CurrentKeyboardShortcut(
            [out, retval] BSTR* pszKeyboardShortcut);

        HRESULT GetCurrentSelection(
            [out, retval] IUIAutomationElementArray** pvarSelectedChildren);

        [propget] HRESULT CurrentDefaultAction(
            [out, retval] BSTR* pszDefaultAction);

        [propget] HRESULT CachedChildId(
            [out, retval] int* pRetVal);

        [propget] HRESULT CachedName(
            [out, retval] BSTR* pszName);

        [propget] HRESULT CachedValue(
            [out, retval] BSTR* pszValue);

        [propget] HRESULT CachedDescription(
            [out, retval] BSTR* pszDescription);

        [propget] HRESULT CachedRole(
            [out, retval] DWORD* pdwRole);

        [propget] HRESULT CachedState(
            [out, retval] DWORD* pdwState);

        [propget] HRESULT CachedHelp(
            [out, retval] BSTR* pszHelp);

        [propget] HRESULT CachedKeyboardShortcut(
            [out, retval] BSTR* pszKeyboardShortcut);

        HRESULT GetCachedSelection(
            [out, retval] IUIAutomationElementArray** pvarSelectedChildren);

        [propget] HRESULT CachedDefaultAction(
            [out, retval] BSTR* pszDefaultAction);

        HRESULT GetIAccessible([out, retval] IAccessible** ppAccessible);
    };

    [
        odl, 
        uuid(c690fdb2-27a8-423c-812d-429773c9084e)
    ]
    interface IUIAutomationItemContainerPattern : stdole.IUnknown
    {
        // Find item by specified property/value. May return actual 
        // AutomationElement or a placeholder if the matching element is
        // virtualized.
        // Returns E_INVALIDARG if the property requested is not one that the
        // container supports searching over. Expected that most containers will
        // support Name property, and if appropriate for the container,
        // AutomationId and IsSelected.
        //
        // This method is expected to be relatively slow, since it may need to
        // traverse multiple objects in order to find a matching one.
        // When used in a loop to return multiple items, no specific order is
        // defined so long as each item is returned only once (ie. loop should
        // terminate). This method is also item-centric, not UI-centric, so items
        // with multiple UI representations need only be returned once.
        //
        // A special propertyId of 0 means 'match all items'. This can be used
        // with pStartAfter=NULL to get the first item, and then to get successive
        // items. Value should be VT_EMPTY in this case.
        HRESULT FindItemByProperty([in] IUIAutomationElement* pStartAfter,
            [in] PROPERTYID propertyId,
            [in] VARIANT value,
            [out, retval] IUIAutomationElement** pFound);
    };

    [
        odl, 
        uuid(6ba3d7a6-04cf-4f11-8793-a8d1cde9969f)
    ]
    interface IUIAutomationVirtualizedItemPattern : stdole.IUnknown
    {
        // Request that a placeholder element make itself fully available. Blocks
        // until element is available, which could take time.
        // Returns S_OK if item is already available.
        // Parent control may scroll as a side effect if the container needs to
        // being the item into view in order to devirtualize it.
        HRESULT Realize();
    };


    //
    //  IUIAutomationAnnotationPattern
    //
    [
        odl, 
        uuid(9a175b21-339e-41b1-8e8b-623f6b681098)
    ]
    interface IUIAutomationAnnotationPattern : stdole.IUnknown
    {
        [propget] HRESULT CurrentAnnotationTypeId(
            [out, retval] int* retVal);

        [propget] HRESULT CurrentAnnotationTypeName(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentAuthor(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentDateTime(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentTarget(
            [out, retval] IUIAutomationElement** retVal);

        [propget] HRESULT CachedAnnotationTypeId(
            [out, retval] int* retVal);

        [propget] HRESULT CachedAnnotationTypeName(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedAuthor(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedDateTime(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedTarget(
            [out, retval] IUIAutomationElement** retVal);

    };

    //
    //  IUIAutomationStylesPattern
    //
    [
        odl, 
        uuid(85b5f0a2-bd79-484a-ad2b-388c9838d5fb)
    ]
    interface IUIAutomationStylesPattern : stdole.IUnknown
    {
        [propget] HRESULT CurrentStyleId(
            [out, retval] int* retVal);

        [propget] HRESULT CurrentStyleName(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentFillColor(
            [out, retval] int* retVal);

        [propget] HRESULT CurrentFillPatternStyle(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentShape(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentFillPatternColor(
            [out, retval] int* retVal);

        [propget] HRESULT CurrentExtendedProperties(
            [out, retval] BSTR* retVal);

        HRESULT GetCurrentExtendedPropertiesAsArray(
            [out] LongPtr* propertyArray,
            [out] int* propertyCount);

        [propget] HRESULT CachedStyleId(
            [out, retval] int* retVal);

        [propget] HRESULT CachedStyleName(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedFillColor(
            [out, retval] int* retVal);

        [propget] HRESULT CachedFillPatternStyle(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedShape(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedFillPatternColor(
            [out, retval] int* retVal);

        [propget] HRESULT CachedExtendedProperties(
            [out, retval] BSTR* retVal);

        HRESULT GetCachedExtendedPropertiesAsArray(
            [out] LongPtr* propertyArray,
            [out] int* propertyCount);
    };

    //
    //  IUIAutomationSpreadsheetPattern
    //
    [
        odl, 
        uuid(7517a7c8-faae-4de9-9f08-29b91e8595c1)
    ]
    interface IUIAutomationSpreadsheetPattern : stdole.IUnknown
    {
        HRESULT GetItemByName(
            [in] BSTR name,
            [out, retval] IUIAutomationElement** element);
    };


    //
    //  IUIAutomationSpreadsheetItemPattern
    //
    [
        odl, 
        uuid(7d4fb86c-8d34-40e1-8e83-62c15204e335)
    ]
    interface IUIAutomationSpreadsheetItemPattern : stdole.IUnknown
    {
        [propget] HRESULT CurrentFormula(
            [out, retval] BSTR* retVal);

        HRESULT GetCurrentAnnotationObjects(
            [out, retval] IUIAutomationElementArray** retVal);

        HRESULT GetCurrentAnnotationTypes(
            [out, retval] SAFEARRAY(int)* retVal);

        [propget] HRESULT CachedFormula(
            [out, retval] BSTR* retVal);

        HRESULT GetCachedAnnotationObjects(
            [out, retval] IUIAutomationElementArray** retVal);

        HRESULT GetCachedAnnotationTypes(
            [out, retval] SAFEARRAY(int)* retVal);
    };

    //
    //  IUIAutomationTransformPattern2
    //
    [
        odl, 
        uuid(6d74d017-6ecb-4381-b38b-3c17a48ff1c2)
    ]
    interface IUIAutomationTransformPattern2 : IUIAutomationTransformPattern
    {
        HRESULT Zoom(
            [in] double zoomValue);

        HRESULT ZoomByUnit(
            [in] Uia_ZoomUnit zoomUnit);

        [propget] HRESULT CurrentCanZoom(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedCanZoom(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentZoomLevel(
            [out, retval] double* retVal);

        [propget] HRESULT CachedZoomLevel(
            [out, retval] double* retVal);

        [propget] HRESULT CurrentZoomMinimum(
            [out, retval] double* retVal);

        [propget] HRESULT CachedZoomMinimum(
            [out, retval] double* retVal);

        [propget] HRESULT CurrentZoomMaximum(
            [out, retval] double* retVal);

        [propget] HRESULT CachedZoomMaximum(
            [out, retval] double* retVal);
    }

    //
    //  IUIAutomationTextChildPattern
    //
    [
        odl, 
        uuid(6552b038-ae05-40c8-abfd-aa08352aab86)
    ]
    interface IUIAutomationTextChildPattern : stdole.IUnknown
    {
        [propget] HRESULT TextContainer(
            [out, retval] IUIAutomationElement** container);

        [propget] HRESULT TextRange(
            [out, retval] IUIAutomationTextRange** range);
    }

    //
    //  IUIAutomationDragPattern
    //
    [
        odl, 
        uuid(1dc7b570-1f54-4bad-bcda-d36a722fb7bd)
    ]
    interface IUIAutomationDragPattern : stdole.IUnknown
    {
        [propget] HRESULT CurrentIsGrabbed(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedIsGrabbed(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentDropEffect(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedDropEffect(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentDropEffects(
            [out, retval] SAFEARRAY(BSTR)* retVal);

        [propget] HRESULT CachedDropEffects(
            [out, retval] SAFEARRAY(BSTR)* retVal);

        HRESULT GetCurrentGrabbedItems(
            [out, retval] IUIAutomationElementArray** retVal);

        HRESULT GetCachedGrabbedItems(
            [out, retval] IUIAutomationElementArray** retVal);
    }

    //
    //  IUIAutomationDropTargetPattern
    //
    [
        odl, 
        uuid(69a095f7-eee4-430e-a46b-fb73b1ae39a5)
    ]
    interface IUIAutomationDropTargetPattern : stdole.IUnknown
    {
        [propget] HRESULT CurrentDropTargetEffect(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedDropTargetEffect(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentDropTargetEffects(
            [out, retval] SAFEARRAY(BSTR)* retVal);

        [propget] HRESULT CachedDropTargetEffects(
            [out, retval] SAFEARRAY(BSTR)* retVal);
    }

    //
    //  IUIAutomationElement
    //
    [
        odl, 
        uuid(d22108aa-8ac5-49a5-837b-37bbb3d7591e)
    ]
    interface IUIAutomationElement : stdole.IUnknown
    {
        HRESULT SetFocus();

        HRESULT GetRuntimeId(
            [out, retval] SAFEARRAY(int)* runtimeId);

        HRESULT FindFirst(
            [in] Uia_TreeScope scope,
            [in] IUIAutomationCondition* condition,
            [out, retval] IUIAutomationElement** found);

        HRESULT FindAll(
            [in] Uia_TreeScope scope,
            [in] IUIAutomationCondition* condition,
            [out, retval] IUIAutomationElementArray** found);

        HRESULT FindFirstBuildCache(
            [in] Uia_TreeScope scope,
            [in] IUIAutomationCondition* condition,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [out, retval] IUIAutomationElement** found);

        HRESULT FindAllBuildCache(
            [in] Uia_TreeScope scope,
            [in] IUIAutomationCondition* condition,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [out, retval] IUIAutomationElementArray** found);

        HRESULT BuildUpdatedCache(
            [in] IUIAutomationCacheRequest* cacheRequest,
            [out, retval] IUIAutomationElement** updatedElement);

        HRESULT GetCurrentPropertyValue(
            [in] PROPERTYID propertyId,
            [out, retval] VARIANT* retVal);

        HRESULT GetCurrentPropertyValueEx(
            [in] PROPERTYID propertyId,
            [in] BOOL ignoreDefaultValue,
            [out, retval] VARIANT* retVal);

        HRESULT GetCachedPropertyValue(
            [in] PROPERTYID propertyId,
            [out, retval] VARIANT* retVal);

        HRESULT GetCachedPropertyValueEx(
            [in] PROPERTYID propertyId,
            [in] BOOL ignoreDefaultValue,
            [out, retval] VARIANT* retVal);


        // These versions exist to simplify using these methods, avoiding the extra Query
        // Interface step that inevitably follows getting the Pattern.
        HRESULT GetCurrentPatternAs(
            [in] PATTERNID patternId,
            [in] REFIID riid,
            [out, retval]  IUnknown** patternObject);
// void**
        HRESULT GetCachedPatternAs(
            [in] PATTERNID patternId,
            [in] REFIID riid,
            [out, retval] IUnknown** patternObject);
// void**  
        // These versions are better for managed code, or code that wants a generalized
        // handling path, they return as pure IUnknowns
        HRESULT GetCurrentPattern(
            [in] PATTERNID patternId,
            [out, retval] IUnknown** patternObject);

        HRESULT GetCachedPattern(
            [in] PATTERNID patternId,
            [out, retval] IUnknown** patternObject);

        HRESULT GetCachedParent(
            [out, retval] IUIAutomationElement** parent);

        HRESULT GetCachedChildren(
            [out, retval] IUIAutomationElementArray** children);

        // Current Property Getters (for convenience)
        [propget] HRESULT CurrentProcessId(
            [out, retval] int* retVal);

        [propget] HRESULT CurrentControlType(
            [out, retval] CONTROLTYPEID* retVal);

        [propget] HRESULT CurrentLocalizedControlType(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentName(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentAcceleratorKey(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentAccessKey(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentHasKeyboardFocus(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentIsKeyboardFocusable(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentIsEnabled(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentAutomationId(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentClassName(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentHelpText(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentCulture(
            [out, retval] int* retVal);

        [propget] HRESULT CurrentIsControlElement(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentIsContentElement(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentIsPassword(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentNativeWindowHandle(
            [out, retval] UIA_HWND* retVal);

        [propget] HRESULT CurrentItemType(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentIsOffscreen(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentOrientation(
            [out, retval] Uia_OrientationType* retVal);

        [propget] HRESULT CurrentFrameworkId(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentIsRequiredForForm(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentItemStatus(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentBoundingRectangle(
            [out, retval] RECT* retVal);

        [propget] HRESULT CurrentLabeledBy(
            [out, retval] IUIAutomationElement** retVal);

        [propget] HRESULT CurrentAriaRole(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentAriaProperties(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CurrentIsDataValidForForm(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentControllerFor(
            [out, retval] IUIAutomationElementArray** retVal);

        [propget] HRESULT CurrentDescribedBy(
            [out, retval] IUIAutomationElementArray** retVal);

        [propget] HRESULT CurrentFlowsTo(
            [out, retval] IUIAutomationElementArray** retVal);

        [propget] HRESULT CurrentProviderDescription(
            [out, retval] BSTR* retVal);

        // Cached Property Getters (for convenience)
        [propget] HRESULT CachedProcessId(
            [out, retval] int* retVal);

        [propget] HRESULT CachedControlType(
            [out, retval] CONTROLTYPEID* retVal);

        [propget] HRESULT CachedLocalizedControlType(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedName(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedAcceleratorKey(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedAccessKey(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedHasKeyboardFocus(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedIsKeyboardFocusable(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedIsEnabled(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedAutomationId(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedClassName(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedHelpText(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedCulture(
            [out, retval] int* retVal);

        [propget] HRESULT CachedIsControlElement(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedIsContentElement(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedIsPassword(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedNativeWindowHandle(
            [out, retval] UIA_HWND* retVal);

        [propget] HRESULT CachedItemType(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedIsOffscreen(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedOrientation(
            [out, retval] Uia_OrientationType* retVal);

        [propget] HRESULT CachedFrameworkId(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedIsRequiredForForm(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedItemStatus(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedBoundingRectangle(
            [out, retval] RECT* retVal);

        [propget] HRESULT CachedLabeledBy(
            [out, retval] IUIAutomationElement** retVal);

        [propget] HRESULT CachedAriaRole(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedAriaProperties(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedIsDataValidForForm(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedControllerFor(
            [out, retval] IUIAutomationElementArray** retVal);

        [propget] HRESULT CachedDescribedBy(
            [out, retval] IUIAutomationElementArray** retVal);

        [propget] HRESULT CachedFlowsTo(
            [out, retval] IUIAutomationElementArray** retVal);

        [propget] HRESULT CachedProviderDescription(
            [out, retval] BSTR* retVal);

        // Clickable point helper
        HRESULT GetClickablePoint(
            [out] POINT* clickable,
            [out, retval] BOOL* gotClickable);
    }
    
    //
    //  IUIAutomationElement2
    //
    [
        odl, 
        uuid(6749c683-f70d-4487-a698-5f79d55290d6)
    ]
    interface IUIAutomationElement2 : IUIAutomationElement
    {
        [propget] HRESULT CurrentOptimizeForVisualContent(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedOptimizeForVisualContent(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CurrentLiveSetting(
            [out, retval] Uia_LiveSetting* retVal);

        [propget] HRESULT CachedLiveSetting(
            [out, retval] Uia_LiveSetting* retVal);

        [propget] HRESULT CurrentFlowsFrom(
            [out, retval] IUIAutomationElementArray** retVal);

        [propget] HRESULT CachedFlowsFrom(
            [out, retval] IUIAutomationElementArray** retVal);
    }

    //
    //  IUIAutomationElement3
    //
    [
        odl, 
        uuid(8471DF34-AEE0-4A01-A7DE-7DB9AF12C296)
    ]
    interface IUIAutomationElement3 : IUIAutomationElement2
    {
        HRESULT ShowContextMenu();

        [propget] HRESULT CurrentIsPeripheral(
            [out, retval] BOOL* retVal);

        [propget] HRESULT CachedIsPeripheral(
            [out, retval] BOOL* retVal);
    }

    //
    //  IUIAutomationElement4
    //
    [
        odl, 
        uuid(3B6E233C-52FB-4063-A4C9-77C075C2A06B)
    ]
    interface IUIAutomationElement4 : IUIAutomationElement3
    {
        [propget] HRESULT CurrentPositionInSet(
            [out, retval] int* retVal);

        [propget] HRESULT CurrentSizeOfSet(
            [out, retval] int* retVal);

        [propget] HRESULT CurrentLevel(
            [out, retval] int* retVal);

        [propget] HRESULT CurrentAnnotationTypes(
            [out, retval] SAFEARRAY(int)* retVal);

        [propget] HRESULT CurrentAnnotationObjects(
            [out, retval] IUIAutomationElementArray** retVal);

        [propget] HRESULT CachedPositionInSet(
            [out, retval] int* retVal);

        [propget] HRESULT CachedSizeOfSet(
            [out, retval] int* retVal);

        [propget] HRESULT CachedLevel(
            [out, retval] int* retVal);

        [propget] HRESULT CachedAnnotationTypes(
            [out, retval] SAFEARRAY(int)* retVal);

        [propget] HRESULT CachedAnnotationObjects(
            [out, retval] IUIAutomationElementArray** retVal);
    }

    //
    //  IUIAutomationElement5
    //
    [
        odl, 
        uuid(98141C1D-0D0E-4175-BBE2-6BFF455842A7)
    ]
    interface IUIAutomationElement5 : IUIAutomationElement4
    {
        [propget] HRESULT CurrentLandmarkType(
            [out, retval] LANDMARKTYPEID* retVal);

        [propget] HRESULT CurrentLocalizedLandmarkType(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedLandmarkType(
            [out, retval] LANDMARKTYPEID* retVal);

        [propget] HRESULT CachedLocalizedLandmarkType(
            [out, retval] BSTR* retVal);
    }

    //
    //  IUIAutomationElement6
    //
    [
        odl, 
        uuid(4780d450-8bca-4977-afa5-a4a517f555e3)
    ]
    interface IUIAutomationElement6 : IUIAutomationElement5
    {
        [propget] HRESULT CurrentFullDescription(
            [out, retval] BSTR* retVal);

        [propget] HRESULT CachedFullDescription(
            [out, retval] BSTR* retVal);
    }

    //
    //  IUIAutomationElement7
    //
    [
        odl, 
        uuid(204e8572-cfc3-4c11-b0c8-7da7420750b7)
    ]
    interface IUIAutomationElement7 : IUIAutomationElement6
    {
        HRESULT FindFirstWithOptions(
            [in] Uia_TreeScope scope,
            [in] IUIAutomationCondition* condition,
            [in] Uia_TreeTraversalOptions traversalOptions,
            [in] IUIAutomationElement* root,
            [out, retval] IUIAutomationElement** found);

        HRESULT FindAllWithOptions(
            [in] Uia_TreeScope scope,
            [in] IUIAutomationCondition* condition,
            [in] Uia_TreeTraversalOptions traversalOptions,
            [in] IUIAutomationElement* root,
            [out, retval] IUIAutomationElementArray** found);

        HRESULT FindFirstWithOptionsBuildCache(
            [in] Uia_TreeScope scope,
            [in] IUIAutomationCondition* condition,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [in] Uia_TreeTraversalOptions traversalOptions,
            [in] IUIAutomationElement* root,
            [out, retval] IUIAutomationElement** found);

        HRESULT FindAllWithOptionsBuildCache(
            [in] Uia_TreeScope scope,
            [in] IUIAutomationCondition* condition,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [in] Uia_TreeTraversalOptions traversalOptions,
            [in] IUIAutomationElement* root,
            [out, retval] IUIAutomationElementArray** found);

        HRESULT GetCurrentMetadataValue(
            [in] int targetId,
            [in] METADATAID metadataId,
            [out, retval] VARIANT* returnVal);
    }

    [
        odl, 
        uuid(8C60217D-5411-4CDE-BCC0-1CEDA223830C)
    ]
    interface IUIAutomationElement8 : IUIAutomationElement7
    {
        [propget] HRESULT CurrentHeadingLevel(
            [out, retval] HEADINGLEVELID* retVal);

        [propget] HRESULT CachedHeadingLevel(
            [out, retval] HEADINGLEVELID* retVal);
    }

    [
        odl, 
        uuid(39325fac-039d-440e-a3a3-5eb81a5cecc3)
    ]
    interface IUIAutomationElement9 : IUIAutomationElement8
    {
        [propget] HRESULT CurrentIsDialog(
            [out, retval] BOOL* retVal);
        [propget] HRESULT CachedIsDialog(
            [out, retval] BOOL* retVal);
    }

    //  IUIAutomationElementArray
    //
    [
        odl, 
        uuid(14314595-b4bc-4055-95f2-58f2e42c9855)
    ]
    interface IUIAutomationElementArray : stdole.IUnknown
    {
        [propget] HRESULT Length(
            [out, retval] int* length);

        HRESULT GetElement(
            [in] int index,
            [out, retval] IUIAutomationElement** element);
    }


       
    //
    //  IUIAutomationProxyFactory
    //
    [
        odl, 
        uuid(85b94ecd-849d-42b6-b94d-d6db23fdf5a4)
    ]
    interface IUIAutomationProxyFactory : stdole.IUnknown
    {
        HRESULT CreateProvider(
            [in] UIA_HWND hwnd,
            [in] LONG idObject,
            [in] LONG idChild,
            [out, retval] IRawElementProviderSimple** provider);

        // The proxy Factory Id is an identifier of the Proxy Factory, it serves several purposes:
        //    - It uniquely identifies a given proxy factory, for ease of finding in the ProxyFactoryMapping
        //    - It is non-localized, so programs can use it to find a given proxy factory in the mapping for removal or position changing
        //    - It identifies which proxy factory created the proxy of a given element, for debugging purposes
        //    - Recommended Format is "Company Name: Proxy Name", to assist with uniqueness
        [propget] HRESULT ProxyFactoryId(
            [out, retval] BSTR* factoryId);
    }


    //
    //  IUIAutomationProxyFactoryEntry
    //
    [
        odl, 
        uuid(d50e472e-b64b-490c-bca1-d30696f9f289)
    ]
    interface IUIAutomationProxyFactoryEntry : stdole.IUnknown
    {
        [propget] HRESULT ProxyFactory(
            [out, retval] IUIAutomationProxyFactory** factory);

        [propget] HRESULT ClassName(
            [out, retval] BSTR* className);

        [propget] HRESULT ImageName(
            [out, retval] BSTR* imageName);

        [propget] HRESULT AllowSubstringMatch(
            [out, retval] BOOL* allowSubstringMatch);

        [propget] HRESULT CanCheckBaseClass(
            [out, retval] BOOL* canCheckBaseClass);

        [propget] HRESULT NeedsAdviseEvents(
            [out, retval] BOOL* adviseEvents);

        [propput] HRESULT ClassName(
            [in] LongPtr className);

        [propput] HRESULT ImageName(
            [in] LongPtr imageName);

        [propput] HRESULT AllowSubstringMatch(
            [in] BOOL allowSubstringMatch);

        [propput] HRESULT CanCheckBaseClass(
            [in] BOOL canCheckBaseClass);

        [propput] HRESULT NeedsAdviseEvents(
            [in] BOOL adviseEvents);

        HRESULT SetWinEventsForAutomationEvent(
            [in] EVENTID eventId,
            [in] PROPERTYID propertyId,
            [in] SAFEARRAY(UINT) winEvents);

        HRESULT GetWinEventsForAutomationEvent(
            [in] EVENTID eventId,
            [in] PROPERTYID propertyId,
            [out, retval] SAFEARRAY(UINT)* winEvents);
    }

    //
    //  IUIAutomationProxyFactoryMapping
    //
    [
        odl, 
        uuid(09e31e18-872d-4873-93d1-1e541ec133fd)
    ]
    interface IUIAutomationProxyFactoryMapping : stdole.IUnknown
    {
        [propget] HRESULT Count(
            [out, retval] UINT* count);

        HRESULT GetTable(
            [out, retval] LongPtr* table);
            //SAFEARRAY(IUIAutomationProxyFactoryEntry)*
        HRESULT GetEntry(
            [in] UINT index,
            [out, retval] IUIAutomationProxyFactoryEntry** entry);

        HRESULT SetTable(
            [in] LongPtr factoryList); //SAFEARRAY(IUIAutomationProxyFactoryEntry)

        HRESULT InsertEntries(
            [in] UINT before,
            [in] LongPtr factoryList); //SAFEARRAY(IUIAutomationProxyFactoryEntry)

        HRESULT InsertEntry(
            [in] UINT before,
            [in] IUIAutomationProxyFactoryEntry* factory);

        HRESULT RemoveEntry(
            [in] UINT index);

        HRESULT ClearTable();

        HRESULT RestoreDefaultTable();
    }

    //
    //  IUIAutomationEventHandlerGroup
    //
    [
        odl, 
        uuid(C9EE12F2-C13B-4408-997C-639914377F4E)
    ]
    interface IUIAutomationEventHandlerGroup : stdole.IUnknown
    {
        HRESULT AddActiveTextPositionChangedEventHandler(
            [in] Uia_TreeScope scope,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [in] IUIAutomationActiveTextPositionChangedEventHandler* handler);

        HRESULT AddAutomationEventHandler(
            [in] EVENTID eventId,
            [in] Uia_TreeScope scope,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [in] IUIAutomationEventHandler* handler);

        HRESULT AddChangesEventHandler(
            [in] Uia_TreeScope scope,
            [in] int* changeTypes,
            [in] int changesCount,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [in] IUIAutomationChangesEventHandler* handler);

        HRESULT AddNotificationEventHandler(
            [in] Uia_TreeScope scope,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [in] IUIAutomationNotificationEventHandler* handler);

        HRESULT AddPropertyChangedEventHandler(
            [in] Uia_TreeScope scope,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [in] IUIAutomationPropertyChangedEventHandler* handler,
            [in] PROPERTYID* propertyArray,
            [in] int propertyCount);

        HRESULT AddStructureChangedEventHandler(
            [in] Uia_TreeScope scope,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [in] IUIAutomationStructureChangedEventHandler* handler);

        HRESULT AddTextEditTextChangedEventHandler(
            [in] Uia_TreeScope scope,
            [in] Uia_TextEditChangeType textEditChangeType,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [in] IUIAutomationTextEditTextChangedEventHandler* handler);
    }


    //  IUIAutomation
    //
    [
        odl, 
        uuid(30cbe57d-d9d0-452a-ab13-7ac5ac4825ee)
    ]
    interface IUIAutomation : stdole.IUnknown
    {
        // Comparisons
        HRESULT CompareElements(
            [in] IUIAutomationElement* el1,
            [in] IUIAutomationElement* el2,
            [out, retval] BOOL* areSame);

        HRESULT CompareRuntimeIds(
            [in] SAFEARRAY(int) runtimeId1,
            [in] SAFEARRAY(int) runtimeId2,
            [out, retval] BOOL* areSame);

        // Automation Element fetching
        HRESULT GetRootElement(
            [out, retval] IUIAutomationElement** root);

        HRESULT ElementFromHandle(
            [in] UIA_HWND hwnd,
            [out, retval] IUIAutomationElement** element);

        HRESULT ElementFromPoint(
            [in] int ptX, [in] int ptY,
            [out, retval] IUIAutomationElement** element);

        HRESULT GetFocusedElement(
            [out, retval] IUIAutomationElement** element);

        HRESULT GetRootElementBuildCache(
            [in] IUIAutomationCacheRequest* cacheRequest,
            [out, retval] IUIAutomationElement** root);

        HRESULT ElementFromHandleBuildCache(
            [in] UIA_HWND hwnd,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [out, retval] IUIAutomationElement** element);

        HRESULT ElementFromPointBuildCache(
            [in] int ptX, [in] int ptY,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [out, retval] IUIAutomationElement** element);

        HRESULT GetFocusedElementBuildCache(
            [in] IUIAutomationCacheRequest* cacheRequest,
            [out, retval] IUIAutomationElement** element);

        HRESULT CreateTreeWalker(
            [in] IUIAutomationCondition* pCondition,
            [out, retval] IUIAutomationTreeWalker** walker);

        [propget] HRESULT ControlViewWalker(
            [out, retval] IUIAutomationTreeWalker** walker);

        [propget] HRESULT ContentViewWalker(
            [out, retval] IUIAutomationTreeWalker** walker);

        [propget] HRESULT RawViewWalker(
            [out, retval] IUIAutomationTreeWalker** walker);

        [propget] HRESULT RawViewCondition(
            [out, retval] IUIAutomationCondition** condition);

        [propget] HRESULT ControlViewCondition(
            [out, retval] IUIAutomationCondition** condition);

        [propget] HRESULT ContentViewCondition(
            [out, retval] IUIAutomationCondition** condition);


        // Cache Request Creation
        HRESULT CreateCacheRequest(
            [out, retval] IUIAutomationCacheRequest** cacheRequest);


        // Condition Creation
        HRESULT CreateTrueCondition(
            [out, retval] IUIAutomationCondition** newCondition);

        HRESULT CreateFalseCondition(
            [out, retval] IUIAutomationCondition** newCondition);

        HRESULT CreatePropertyCondition(
            [in] PROPERTYID propertyId,
            [in] VARIANT value,
            [out, retval] IUIAutomationCondition** newCondition);

        HRESULT CreatePropertyConditionEx(
            [in] PROPERTYID propertyId,
            [in] VARIANT value,
            [in] Uia_PropertyConditionFlags flags,
            [out, retval] IUIAutomationCondition** newCondition);

        HRESULT CreateAndCondition(
            [in] IUIAutomationCondition* condition1,
            [in] IUIAutomationCondition* condition2,
            [out, retval] IUIAutomationCondition** newCondition);

        HRESULT CreateAndConditionFromArray(
            [in] LongPtr conditions, //SAFEARRAY(IUIAutomationCondition)
            [out, retval] IUIAutomationCondition** newCondition);

        HRESULT CreateAndConditionFromNativeArray(
            [in] IUIAutomationCondition* conditions,
            [in] int conditionCount,
            [out, retval] IUIAutomationCondition** newCondition);

        HRESULT CreateOrCondition(
            [in] IUIAutomationCondition* condition1,
            [in] IUIAutomationCondition* condition2,
            [out, retval] IUIAutomationCondition** newCondition);

        HRESULT CreateOrConditionFromArray(
            [in] LongPtr conditions, //SAFEARRAY(IUIAutomationCondition)
            [out, retval] IUIAutomationCondition** newCondition);

        HRESULT CreateOrConditionFromNativeArray(
            [in] IUIAutomationCondition* conditions,
            [in] int conditionCount,
            [out, retval] IUIAutomationCondition** newCondition);

        HRESULT CreateNotCondition(
            [in] IUIAutomationCondition* condition,
            [out, retval] IUIAutomationCondition** newCondition);

        // Event Registration and Removal
        HRESULT AddAutomationEventHandler(
            [in] EVENTID eventId,
            [in] IUIAutomationElement* element,
            [in] Uia_TreeScope scope,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [in] IUIAutomationEventHandler* handler);

        HRESULT RemoveAutomationEventHandler(
            [in] EVENTID eventId,
            [in] IUIAutomationElement* element,
            [in] IUIAutomationEventHandler* handler);

        HRESULT AddPropertyChangedEventHandlerNativeArray(
            [in] IUIAutomationElement* element,
            [in] Uia_TreeScope scope,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [in] IUIAutomationPropertyChangedEventHandler* handler,
            [in] PROPERTYID* propertyArray,
            [in] int propertyCount);

        HRESULT AddPropertyChangedEventHandler(
            [in] IUIAutomationElement* element,
            [in] Uia_TreeScope scope,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [in] IUIAutomationPropertyChangedEventHandler* handler,
            [in] SAFEARRAY(PROPERTYID) propertyArray);

        HRESULT RemovePropertyChangedEventHandler(
            [in] IUIAutomationElement* element,
            [in] IUIAutomationPropertyChangedEventHandler* handler);

        HRESULT AddStructureChangedEventHandler(
            [in] IUIAutomationElement* element,
            [in] Uia_TreeScope scope,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [in] IUIAutomationStructureChangedEventHandler* handler);

        HRESULT RemoveStructureChangedEventHandler(
            [in] IUIAutomationElement* element,
            [in] IUIAutomationStructureChangedEventHandler* handler);

        HRESULT AddFocusChangedEventHandler(
            [in] IUIAutomationCacheRequest* cacheRequest,
            [in] IUIAutomationFocusChangedEventHandler* handler);

        HRESULT RemoveFocusChangedEventHandler(
            [in] IUIAutomationFocusChangedEventHandler* handler);

        HRESULT RemoveAllEventHandlers();

        // Conversion helpers
        HRESULT IntNativeArrayToSafeArray(
            [in] int* array,
            [in] int arrayCount,
            [out, retval] SAFEARRAY(int)* safeArray);

        HRESULT IntSafeArrayToNativeArray(
            [in] SAFEARRAY(int) intArray,
            [out] LongPtr* array,
            [out, retval] int* arrayCount);

        //HRESULT RectToVariant(
        //    [in] RECT rc,
        //    [out, retval] VARIANT* var);
        HRESULT RectToVariant(
            [in] int rcLeft, [in] int rcTop, [in] int rcRight, [in] int rcBottom,
            [out, retval] VARIANT* var);
        HRESULT VariantToRect(
            [in] VARIANT var,
            [out, retval] RECT* rc);

        HRESULT SafeArrayToRectNativeArray(
            [in] SAFEARRAY(double) rects,
            [out] LongPtr* rectArray,
            [out, retval] int* rectArrayCount);

        // Proxy registration
        HRESULT CreateProxyFactoryEntry(
            [in] IUIAutomationProxyFactory* factory,
            [out, retval] IUIAutomationProxyFactoryEntry** factoryEntry);

        [propget] HRESULT ProxyFactoryMapping(
            [out, retval] IUIAutomationProxyFactoryMapping** factoryMapping);

        // Name Lookup
        HRESULT GetPropertyProgrammaticName(
            [in] PROPERTYID property,
            [out, retval] BSTR* name);

        HRESULT GetPatternProgrammaticName(
            [in] PATTERNID pattern,
            [out, retval] BSTR* name);

        // Return potentially supported patterns. Note that object may not actually
        // support the pattern when asked for it later.
        HRESULT PollForPotentialSupportedPatterns(
            [in] IUIAutomationElement* pElement,
            [out] SAFEARRAY(int)* patternIds,
            [out] SAFEARRAY(BSTR)* patternNames);

        // Return potentially supported properties. Note that object may not actually
        // support all properties when asked.
        HRESULT PollForPotentialSupportedProperties(
            [in] IUIAutomationElement* pElement,
            [out] SAFEARRAY(int)* propertyIds,
            [out] SAFEARRAY(BSTR)* propertyNames);

        // Check whether this variant (returned from GetPropertyValue) is the NotSupported item.
        HRESULT CheckNotSupported(
            [in] VARIANT value,
            [out, retval] BOOL* isNotSupported);

        // Get the "Not Supported" object
        [propget] HRESULT ReservedNotSupportedValue(
            [out, retval] IUnknown** notSupportedValue);

        // Get the "Mixed Attribute" object
        [propget] HRESULT ReservedMixedAttributeValue(
            [out, retval] IUnknown** mixedAttributeValue);

        // IAccessible interop
        HRESULT ElementFromIAccessible(
            [in] IAccessible* accessible,
            [in] int childId,
            [out, retval] IUIAutomationElement** element);

        HRESULT ElementFromIAccessibleBuildCache(
            [in] IAccessible* accessible,
            [in] int childId,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [out, retval] IUIAutomationElement** element);
    }

    //
    //  IUIAutomation2
    //
    [
        odl, 
        uuid(34723aff-0c9d-49d0-9896-7ab52df8cd8a)
    ]
    interface IUIAutomation2 : IUIAutomation
    {
        // Mode to set focus automatically when element methods are called
        [propget] HRESULT AutoSetFocus(
            [out, retval] BOOL* autoSetFocus);

        [propput] HRESULT AutoSetFocus(
            [in] BOOL autoSetFocus);

        // Adjust timeout (in milliseconds) for connecting to an element.
        [propget] HRESULT ConnectionTimeout(
            [out, retval] DWORD* timeout);

        [propput] HRESULT ConnectionTimeout(
            [in] DWORD timeout);

        // Adjust timeout (in milliseconds) for interacting with an element after connecting to it.
        [propget] HRESULT TransactionTimeout(
            [out, retval] DWORD* timeout);

        [propput] HRESULT TransactionTimeout(
            [in] DWORD timeout);
    }

    //
    //  IUIAutomation3
    //
    [
        odl, 
        uuid(73D768DA-9B51-4B89-936E-C209290973E7)
    ]
    interface IUIAutomation3 : IUIAutomation2
    {
        HRESULT AddTextEditTextChangedEventHandler(
            [in] IUIAutomationElement* element,
            [in] Uia_TreeScope scope,
            [in] Uia_TextEditChangeType textEditChangeType,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [in] IUIAutomationTextEditTextChangedEventHandler* handler);

        HRESULT RemoveTextEditTextChangedEventHandler(
            [in] IUIAutomationElement* element,
            [in] IUIAutomationTextEditTextChangedEventHandler* handler);
    }

    //
    //  IUIAutomation4
    //
    [
        odl, 
        uuid(1189C02A-05F8-4319-8E21-E817E3DB2860)
    ]
    interface IUIAutomation4 : IUIAutomation3
    {
        HRESULT AddChangesEventHandler(
            [in] IUIAutomationElement* element,
            [in] Uia_TreeScope scope,
            [in] int* changeTypes,
            [in] int changesCount,
            [in] IUIAutomationCacheRequest* pCacheRequest,
            [in] IUIAutomationChangesEventHandler* handler);

        HRESULT RemoveChangesEventHandler(
            [in] IUIAutomationElement* element,
            [in] IUIAutomationChangesEventHandler* handler);
    }

    //
    //  IUIAutomation5
    //
    [
        odl, 
        uuid(25F700C8-D816-4057-A9DC-3CBDEE77E256)
    ]
    interface IUIAutomation5 : IUIAutomation4
    {
        HRESULT AddNotificationEventHandler(
            [in] IUIAutomationElement* element,
            [in] Uia_TreeScope scope,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [in] IUIAutomationNotificationEventHandler* handler);

        HRESULT RemoveNotificationEventHandler(
            [in] IUIAutomationElement* element,
            [in] IUIAutomationNotificationEventHandler* handler);
    }

    //
    //  IUIAutomation6
    //
    [
        odl, 
        uuid(AAE072DA-29E3-413D-87A7-192DBF81ED10)
    ]
    interface IUIAutomation6 : IUIAutomation5
    {
        HRESULT CreateEventHandlerGroup(
            [out] IUIAutomationEventHandlerGroup** handlerGroup);

        HRESULT AddEventHandlerGroup(
            [in] IUIAutomationElement* element,
            [in] IUIAutomationEventHandlerGroup* handlerGroup);

        HRESULT RemoveEventHandlerGroup(
            [in] IUIAutomationElement* element,
            [in] IUIAutomationEventHandlerGroup* handlerGroup);

        [propget] HRESULT ConnectionRecoveryBehavior(
            [out, retval] ConnectionRecoveryBehaviorOptions* connectionRecoveryBehaviorOptions);

        [propput] HRESULT ConnectionRecoveryBehavior(
            [in] ConnectionRecoveryBehaviorOptions connectionRecoveryBehaviorOptions);

        [propget] HRESULT CoalesceEvents(
            [out, retval] CoalesceEventsOptions* coalesceEventsOptions);

        [propput] HRESULT CoalesceEvents(
            [in] CoalesceEventsOptions coalesceEventsOptions);

        HRESULT AddActiveTextPositionChangedEventHandler(
            [in] IUIAutomationElement* element,
            [in] Uia_TreeScope scope,
            [in] IUIAutomationCacheRequest* cacheRequest,
            [in] IUIAutomationActiveTextPositionChangedEventHandler* handler);

        HRESULT RemoveActiveTextPositionChangedEventHandler(
            [in] IUIAutomationElement* element,
            [in] IUIAutomationActiveTextPositionChangedEventHandler* handler);
    }

    //
    //  CUIAutomation
    //
    [
        uuid(ff48dba4-60ef-4201-aa87-54103eef594e),
        helpstring("The Central Class for UIAutomation")
    ]
    coclass CUIAutomation
    {
        [default] interface IUIAutomation;
    }


    //
    //  CUIAutomation8
    //
    //  Using this object provides the same interface
    //  as CUIAutomation, but some control proxy behaviors
    //  may be different.  Use CUIAutomation if you want
    //  Win7-compatible control proxy behavior.
    //
    [
        uuid(e22ad333-b25f-460c-83d0-0581107395c9),
        helpstring("The Central Class for UIAutomation8")
    ]
    coclass CUIAutomation8
    {
        [default] interface IUIAutomation2;
        interface IUIAutomation3;
        interface IUIAutomation4;
        interface IUIAutomation5;
        interface IUIAutomation6;
    }


    //
    //  CUIAutomationRegistrar
    //
    [
        uuid(6e29fabf-9977-42d1-8d0e-ca7e61ad87e6),
        helpstring("Class for registering UIAutomation patterns, properties and events.")
    ]
    coclass CUIAutomationRegistrar
    {
        [default] interface IUIAutomationRegistrar;
    }

    typedef LongPtr HUIANODE;
    typedef LongPtr HUIAPATTERNOBJECT;
    typedef LongPtr HUIATEXTRANGE;
    typedef LongPtr HUIAEVENT;
        typedef enum Uia_ConditionType
        {
            ConditionType_True = 0,
            ConditionType_False = 1,
            ConditionType_Property = 2,
            ConditionType_And = 3,
            ConditionType_Or = 4,
            ConditionType_Not = 5,
        } Uia_ConditionType;

        typedef struct UiaCondition
        {
            Uia_ConditionType ConditionType;
        } UiaCondition;

        typedef struct UiaPropertyCondition
        {
            Uia_ConditionType ConditionType;
            PROPERTYID PropertyId;
            VARIANT Value;
            Uia_PropertyConditionFlags Flags;
        } UiaPropertyCondition;

        typedef struct UiaAndOrCondition
        {
            Uia_ConditionType ConditionType;
            LongPtr ppConditions; // ptr to array-of-ptrs to conditions
            int cConditions;
        } UiaAndOrCondition;

        typedef struct UiaNotCondition
        {
            Uia_ConditionType ConditionType;
            LongPtr pCondition;
        } UiaNotCondition;

        typedef struct UiaCacheRequest
        {
            LongPtr pViewCondition;
            Uia_TreeScope  Scope;

            LongPtr pProperties;
            int             cProperties;
            LongPtr pPatterns;
            int             cPatterns;
            Uia_AutomationElementMode automationElementMode;
        } UiaCacheRequest;

        typedef enum Uia_NormalizeState
        {
            NormalizeState_None,    // Don't normalize
            NormalizeState_View,    // Normalize against condition in UiaCacheRequest
            NormalizeState_Custom   // Normalize against supplied condition
        } Uia_NormalizeState;

        typedef struct UiaFindParams
        {
            int MaxDepth;
            BOOL FindFirst;
            BOOL ExcludeRoot;
            LongPtr pFindCondition;
        } UiaFindParams;

        typedef enum Uia_ProviderType
        {
            ProviderType_BaseHwnd,
            ProviderType_Proxy,
            ProviderType_NonClientArea,
        } Uia_ProviderType;

        typedef enum Uia_AutomationIdentifierType
        {
            AutomationIdentifierType_Property,
            AutomationIdentifierType_Pattern,
            AutomationIdentifierType_Event,
            AutomationIdentifierType_ControlType,
            AutomationIdentifierType_TextAttribute,
            AutomationIdentifierType_LandmarkType,
            AutomationIdentifierType_Annotation,
            AutomationIdentifierType_Changes,
            AutomationIdentifierType_Style,
        } Uia_AutomationIdentifierType;


        typedef enum Uia_EventArgsType
        {
            EventArgsType_Simple,
            EventArgsType_PropertyChanged,
            EventArgsType_StructureChanged,
            EventArgsType_AsyncContentLoaded,
            EventArgsType_WindowClosed,
            EventArgsType_TextEditTextChanged,
            EventArgsType_Changes,
            EventArgsType_Notification,
            EventArgsType_ActiveTextPositionChanged,
            EventArgsType_StructuredMarkup,
        } Uia_EventArgsType;

        typedef enum Uia_AsyncContentLoadedState
        {
            AsyncContentLoadedState_Beginning,
            AsyncContentLoadedState_Progress,
            AsyncContentLoadedState_Completed
        }  Uia_AsyncContentLoadedState;

        typedef struct UiaEventArgs
        {
            Uia_EventArgsType Type;
            int EventId;
        } UiaEventArgs;

        typedef struct UiaPropertyChangedEventArgs
        {
            Uia_EventArgsType Type;
            int EventId;
            PROPERTYID PropertyId;
            VARIANT OldValue;
            VARIANT NewValue;
        } UiaPropertyChangedEventArgs;

        typedef struct UiaStructureChangedEventArgs
        {
            Uia_EventArgsType Type;
            int EventId;
            Uia_StructureChangeType StructureChangeType;
            LongPtr pRuntimeId;
            int cRuntimeIdLen;
        } UiaStructureChangedEventArgs;

        typedef struct UiaTextEditTextChangedEventArgs
        {
            Uia_EventArgsType Type;
            int EventId;
            Uia_TextEditChangeType TextEditChangeType;
            LongPtr pTextChange;
        } UiaTextEditTextChangedEventArgs;

        typedef struct UiaChangesEventArgs {
            Uia_EventArgsType Type;
            int EventId;
            int EventIdCount;
            LongPtr pUiaChanges;
        } UiaChangesEventArgs;

        typedef struct UiaAsyncContentLoadedEventArgs
        {
            Uia_EventArgsType Type;
            int EventId;
            Uia_AsyncContentLoadedState AsyncContentLoadedState;
            double PercentComplete;
        } UiaAsyncContentLoadedEventArgs;

        typedef struct UiaWindowClosedEventArgs
        {
            Uia_EventArgsType Type;
            int EventId;
            LongPtr pRuntimeId;
            int cRuntimeIdLen;
        } UiaWindowClosedEventArgs;

        typedef enum UIA_IAFP_Flags
        {
            UIA_IAFP_DEFAULT = 0x0000,
            UIA_IAFP_UNWRAP_BRIDGE = 0x0001
        } UIA_IAFP_Flags;


        typedef enum UIA_PFIA_Flags {
            UIA_PFIA_DEFAULT = 0x0000,
            UIA_PFIA_UNWRAP_BRIDGE = 0x0001
        } UIA_PFIA_Flags;

    [
        dllname("UIAutomationCore.dll")
    ]
    module UIAutomationCoreAPI
    {
        const long UIA_E_ELEMENTNOTENABLED = 0x80040200;
        const long UIA_E_ELEMENTNOTAVAILABLE = 0x80040201;
        const long UIA_E_NOCLICKABLEPOINT = 0x80040202;
        const long UIA_E_PROXYASSEMBLYNOTLOADED = 0x80040203;

        // Can be thrown by providers to indicate they
        // explicitly don't support a pattern or property
        const long UIA_E_NOTSUPPORTED = 0x80040204;

        // The following are COR error codes, included here as a convenience
        // (equivalent codes are in <corerror.h>)
        const long UIA_E_INVALIDOPERATION = 0x80131509; // COR_E_INVALIDOPERATION
        const long UIA_E_TIMEOUT = 0x80131505; // COR_E_TIMEOUT

    // The following common managed exceptions are not represented here
    // since they already have standard COM  error codes assigned to them
    // by COM Interop:
    //   ArgumentException          E_INVALIDARG
    //   ArgumentNullException      - maps to ArgumentException

    // Other constants
        const long UiaAppendRuntimeId = 3;
        const long UiaRootObjectId = -25;



        [entry("UiaGetErrorDescription")]
        BOOL UiaGetErrorDescription([out] BSTR* pDescription);

        [entry("UiaHUiaNodeFromVariant")]
        long UiaHUiaNodeFromVariant([in] VARIANT* pvar, [out] HUIANODE* phnode);
        [entry("UiaHPatternObjectFromVariant")]
        long UiaHPatternObjectFromVariant([in] VARIANT* pvar, [out] HUIAPATTERNOBJECT* phobj);
        [entry("UiaHTextRangeFromVariant")]
        long UiaHTextRangeFromVariant([in] VARIANT* pvar, [out] HUIATEXTRANGE* phtextrange);

        [entry("UiaNodeRelease")]
        BOOL UiaNodeRelease([in] HUIANODE hnode);

        [entry("UiaGetPropertyValue")]
        long UiaGetPropertyValue([in] HUIANODE hnode, [in] PROPERTYID propertyId, [out] VARIANT* pValue);
        [entry("UiaGetPatternProvider")]
        long UiaGetPatternProvider([in] HUIANODE hnode, [in] PATTERNID patternId, [out] HUIAPATTERNOBJECT* phobj);
        [entry("UiaGetRuntimeId")]
        long UiaGetRuntimeId([in] HUIANODE hnode, [out] LongPtr* pruntimeId);
        [entry("UiaSetFocus")]
        long UiaSetFocus([in] HUIANODE hnode);
        [entry("UiaNavigate")]
        long UiaNavigate([in] HUIANODE hnode, [in]  Uia_NavigateDirection direction, [in]  UiaCondition* pCondition, [in]  UiaCacheRequest* pRequest, [out] LongPtr* ppRequestedData, [out] BSTR* ppTreeStructure);
        [entry("UiaGetUpdatedCache")]
        long UiaGetUpdatedCache([in] HUIANODE hnode, [in]  UiaCacheRequest* pRequest, [in] Uia_NormalizeState normalizeState, [in]  UiaCondition* pNormalizeCondition, [out] LongPtr* ppRequestedData, [out] BSTR* ppTreeStructure);
        [entry("UiaFind")]
        long UiaFind([in] HUIANODE hnode, [in]  UiaFindParams* pParams, [in]  UiaCacheRequest* pRequest, [out] LongPtr* ppRequestedData, [out] LongPtr* ppOffsets, [out] LongPtr* ppTreeStructures);

        [entry("UiaNodeFromPoint")]
        long UiaNodeFromPoint([in] double x, [in]  double y, [in]  UiaCacheRequest* pRequest, [out] LongPtr* ppRequestedData, [out] BSTR* ppTreeStructure);
        [entry("UiaNodeFromFocus")]
        long UiaNodeFromFocus([in]  UiaCacheRequest* pRequest, [out] LongPtr* ppRequestedData, [out] BSTR* ppTreeStructure);
        [entry("UiaNodeFromHandle")]
        long UiaNodeFromHandle([in] HWND hwnd, [out] HUIANODE* phnode);
        [entry("UiaNodeFromProvider")]
        long UiaNodeFromProvider([in] IRawElementProviderSimple* pProvider, [out] HUIANODE* phnode);
        [entry("UiaGetRootNode")]
        long UiaGetRootNode([out] HUIANODE* phnode);

        //typedef SAFEARRAY* UiaProviderCallback(HWND hwnd, ProviderType providerType);

        [entry("UiaRegisterProviderCallback")]
        void UiaRegisterProviderCallback([in] LongPtr pCallback);

        [entry("UiaLookupId")]
        int UiaLookupId([in] Uia_AutomationIdentifierType type, [in]  GUID* pGuid);

        [entry("UiaGetReservedNotSupportedValue")]
        long UiaGetReservedNotSupportedValue([out] IUnknown** punkNotSupportedValue);
        [entry("UiaGetReservedMixedAttributeValue")]
        long UiaGetReservedMixedAttributeValue([out] IUnknown** punkMixedAttributeValue);

        [entry("UiaClientsAreListening")]
        BOOL UiaClientsAreListening();
        [entry("UiaRaiseAutomationPropertyChangedEvent")]
        long UiaRaiseAutomationPropertyChangedEvent([in] IRawElementProviderSimple* pProvider, [in] PROPERTYID id, [in] VARIANT oldValue, [in] VARIANT newValue);
        [entry("UiaRaiseAutomationEvent")]
        long UiaRaiseAutomationEvent([in] IRawElementProviderSimple* pProvider, [in] EVENTID id);
        [entry("UiaRaiseStructureChangedEvent")]
        long UiaRaiseStructureChangedEvent([in] IRawElementProviderSimple* pProvider, [in]  Uia_StructureChangeType structureChangeType, [out] int* pRuntimeId, [in] int cRuntimeIdLen);
        [entry("UiaRaiseAsyncContentLoadedEvent")]
        long UiaRaiseAsyncContentLoadedEvent([in] IRawElementProviderSimple* pProvider, [in] Uia_AsyncContentLoadedState asyncContentLoadedState, [in] double percentComplete);
        [entry("UiaRaiseTextEditTextChangedEvent")]
        long UiaRaiseTextEditTextChangedEvent([in] IRawElementProviderSimple* pProvider, [in]  Uia_TextEditChangeType textEditChangeType, [in] LongPtr pChangedData);
        [entry("UiaRaiseChangesEvent")]
        long UiaRaiseChangesEvent([in] IRawElementProviderSimple* pProvider, [in] int eventIdCount, [in] UiaChangeInfo* pUiaChanges);
        [entry("UiaRaiseNotificationEvent")]
        long UiaRaiseNotificationEvent(
            [in] IRawElementProviderSimple* provider,
            [in] Uia_NotificationKind notificationKind,
            [in] Uia_NotificationProcessing notificationProcessing,
            [in] BSTR displayString,
            [in] BSTR activityId);
        [entry("UiaRaiseActiveTextPositionChangedEvent")]
        long UiaRaiseActiveTextPositionChangedEvent(
            [in] IRawElementProviderSimple* provider,
            [in] ITextRangeProvider* textRange);

        //
        // Client Event APIs
        //
        //typedef void UiaEventCallback(struct UiaEventArgs* pArgs, SAFEARRAY* pRequestedData, BSTR pTreeStructure);
        [entry("UiaAddEvent")]
        long UiaAddEvent([in] HUIANODE hnode, [in] EVENTID eventId, [in] LongPtr pCallback, [in] Uia_TreeScope scope, [in] PROPERTYID* pProperties, [in] int cProperties, [in] UiaCacheRequest* pRequest, [out] HUIAEVENT* phEvent);
        [entry("UiaRemoveEvent")]
        long UiaRemoveEvent([in] HUIAEVENT hEvent);
        [entry("UiaEventAddWindow")]
        long UiaEventAddWindow([in] HUIAEVENT hEvent, [in] HWND hwnd);
        [entry("UiaEventRemoveWindow")]
        long UiaEventRemoveWindow([in] HUIAEVENT hEvent, [in] HWND hwnd);


        // --------------------------------------------------------------------------
        //
        // Pattern methods
        //
        // --------------------------------------------------------------------------

        [entry("DockPattern_SetDockPosition")]
        long DockPattern_SetDockPosition([in] HUIAPATTERNOBJECT hobj, [in] Uia_DockPosition dockPosition);
        [entry("ExpandCollapsePattern_Collapse")]
        long ExpandCollapsePattern_Collapse([in] HUIAPATTERNOBJECT hobj);
        [entry("ExpandCollapsePattern_Expand")]
        long ExpandCollapsePattern_Expand([in] HUIAPATTERNOBJECT hobj);
        [entry("GridPattern_GetItem")]
        long GridPattern_GetItem([in] HUIAPATTERNOBJECT hobj, [in] int row, [in] int column, [out] HUIANODE* pResult);
        [entry("InvokePattern_Invoke")]
        long InvokePattern_Invoke([in] HUIAPATTERNOBJECT hobj);
        [entry("MultipleViewPattern_GetViewName")]
        long MultipleViewPattern_GetViewName([in] HUIAPATTERNOBJECT hobj, [in] int viewId, [out] BSTR* ppStr);
        [entry("MultipleViewPattern_SetCurrentView")]
        long MultipleViewPattern_SetCurrentView([in] HUIAPATTERNOBJECT hobj, [in] int viewId);
        [entry("RangeValuePattern_SetValue")]
        long RangeValuePattern_SetValue([in] HUIAPATTERNOBJECT hobj, [in] double val);
        [entry("ScrollItemPattern_ScrollIntoView")]
        long ScrollItemPattern_ScrollIntoView([in] HUIAPATTERNOBJECT hobj);
        [entry("ScrollPattern_Scroll")]
        long ScrollPattern_Scroll([in] HUIAPATTERNOBJECT hobj, [in] Uia_ScrollAmount horizontalAmount, [in] Uia_ScrollAmount verticalAmount);
        [entry("ScrollPattern_SetScrollPercent")]
        long ScrollPattern_SetScrollPercent([in] HUIAPATTERNOBJECT hobj, [in] double horizontalPercent, [in] double verticalPercent);
        [entry("SelectionItemPattern_AddToSelection")]
        long SelectionItemPattern_AddToSelection([in] HUIAPATTERNOBJECT hobj);
        [entry("SelectionItemPattern_RemoveFromSelection")]
        long SelectionItemPattern_RemoveFromSelection([in] HUIAPATTERNOBJECT hobj);
        [entry("SelectionItemPattern_Select")]
        long SelectionItemPattern_Select([in] HUIAPATTERNOBJECT hobj);
        [entry("TogglePattern_Toggle")]
        long TogglePattern_Toggle([in] HUIAPATTERNOBJECT hobj);
        [entry("TransformPattern_Move")]
        long TransformPattern_Move([in] HUIAPATTERNOBJECT hobj, [in] double x, [in] double y);
        [entry("TransformPattern_Resize")]
        long TransformPattern_Resize([in] HUIAPATTERNOBJECT hobj, [in] double width, [in] double height);
        [entry("TransformPattern_Rotate")]
        long TransformPattern_Rotate([in] HUIAPATTERNOBJECT hobj, [in] double degrees);
        [entry("ValuePattern_SetValue")]
        long ValuePattern_SetValue([in] HUIAPATTERNOBJECT hobj, [in] LongPtr pVal);
        [entry("WindowPattern_Close")]
        long WindowPattern_Close([in] HUIAPATTERNOBJECT hobj);
        [entry("WindowPattern_SetWindowVisualState")]
        long WindowPattern_SetWindowVisualState([in] HUIAPATTERNOBJECT hobj, [in] Uia_WindowVisualState state);
        [entry("WindowPattern_WaitForInputIdle")]
        long WindowPattern_WaitForInputIdle([in] HUIAPATTERNOBJECT hobj, [in] int milliseconds, [out] BOOL* pResult);

        [entry("TextPattern_GetSelection")]
        long TextPattern_GetSelection([in] HUIAPATTERNOBJECT hobj, [out] LongPtr* pRetVal);
        [entry("TextPattern_GetVisibleRanges")]
        long TextPattern_GetVisibleRanges([in] HUIAPATTERNOBJECT hobj, [out] LongPtr* pRetVal);
        [entry("TextPattern_RangeFromChild")]
        long TextPattern_RangeFromChild([in] HUIAPATTERNOBJECT hobj, [in] HUIANODE hnodeChild, [out] HUIATEXTRANGE*  pRetVal);
        [entry("TextPattern_RangeFromPoint")]
        long TextPattern_RangeFromPoint([in] HUIAPATTERNOBJECT hobj, [in] double pointX, [in] double pointY, [out] HUIATEXTRANGE*  pRetVal);
        //struct UiaPoint*
        [entry("TextPattern_get_DocumentRange")]
        long TextPattern_get_DocumentRange([in] HUIAPATTERNOBJECT hobj, [out] HUIATEXTRANGE*  pRetVal);
        [entry("TextPattern_get_SupportedTextSelection")]
        long TextPattern_get_SupportedTextSelection([in] HUIAPATTERNOBJECT hobj, [out] Uia_SupportedTextSelection* pRetVal);
        [entry("TextRange_Clone")]
        long TextRange_Clone([in] HUIATEXTRANGE hobj, [out] HUIATEXTRANGE*  pRetVal);
        [entry("TextRange_Compare")]
        long TextRange_Compare([in] HUIATEXTRANGE hobj, [in] HUIATEXTRANGE range, [out] BOOL* pRetVal);
        [entry("TextRange_CompareEndpoints")]
        long TextRange_CompareEndpoints([in] HUIATEXTRANGE hobj, [in] Uia_TextPatternRangeEndpoint endpoint, [in] HUIATEXTRANGE targetRange, [in] Uia_TextPatternRangeEndpoint targetEndpoint, [out] int* pRetVal);
        [entry("TextRange_ExpandToEnclosingUnit")]
        long TextRange_ExpandToEnclosingUnit([in] HUIATEXTRANGE hobj, [in] Uia_TextUnit unit);
        [entry("TextRange_GetAttributeValue")]
        long TextRange_GetAttributeValue([in] HUIATEXTRANGE hobj, [in] TEXTATTRIBUTEID attributeId, [out] VARIANT* pRetVal);
        [entry("TextRange_FindAttribute")]
        long TextRange_FindAttribute([in] HUIATEXTRANGE hobj, [in] TEXTATTRIBUTEID attributeId, [in] VARIANT val, [in] BOOL backward, [out] HUIATEXTRANGE*  pRetVal);
        [entry("TextRange_FindText")]
        long TextRange_FindText([in] HUIATEXTRANGE hobj, [in] BSTR text, [in] BOOL backward, [in] BOOL ignoreCase, [out] HUIATEXTRANGE*  pRetVal);
        [entry("TextRange_GetBoundingRectangles")]
        long TextRange_GetBoundingRectangles([in] HUIATEXTRANGE hobj, [out] LongPtr* pRetVal);
        [entry("TextRange_GetEnclosingElement")]
        long TextRange_GetEnclosingElement([in] HUIATEXTRANGE hobj, [out] HUIANODE* pRetVal);
        [entry("TextRange_GetText")]
        long TextRange_GetText([in] HUIATEXTRANGE hobj, [in] int maxLength, [out] BSTR* pRetVal);
        [entry("TextRange_Move")]
        long TextRange_Move([in] HUIATEXTRANGE hobj, [in] Uia_TextUnit unit, [in] int count, [out] int* pRetVal);
        [entry("TextRange_MoveEndpointByUnit")]
        long TextRange_MoveEndpointByUnit([in] HUIATEXTRANGE hobj, [in] Uia_TextPatternRangeEndpoint endpoint, [in] Uia_TextUnit unit, [in] int count, [out] int* pRetVal);
        [entry("TextRange_MoveEndpointByRange")]
        long TextRange_MoveEndpointByRange([in] HUIATEXTRANGE hobj, [in] Uia_TextPatternRangeEndpoint endpoint, [in] HUIATEXTRANGE targetRange, [in] Uia_TextPatternRangeEndpoint targetEndpoint);
        [entry("TextRange_Select")]
        long TextRange_Select([in] HUIATEXTRANGE hobj);
        [entry("TextRange_AddToSelection")]
        long TextRange_AddToSelection([in] HUIATEXTRANGE hobj);
        [entry("TextRange_RemoveFromSelection")]
        long TextRange_RemoveFromSelection([in] HUIATEXTRANGE hobj);
        [entry("TextRange_ScrollIntoView")]
        long TextRange_ScrollIntoView([in] HUIATEXTRANGE hobj, [in] BOOL alignToTop);
        [entry("TextRange_GetChildren")]
        long TextRange_GetChildren([in] HUIATEXTRANGE hobj, [out] LongPtr* pRetVal);

        [entry("ItemContainerPattern_FindItemByProperty")]
        long ItemContainerPattern_FindItemByProperty([in] HUIAPATTERNOBJECT hobj, [in] HUIANODE hnodeStartAfter, [in] PROPERTYID propertyId, [in] VARIANT value, [out] HUIANODE* pFound);
        [entry("LegacyIAccessiblePattern_Select")]
        long LegacyIAccessiblePattern_Select([in] HUIAPATTERNOBJECT hobj, [in] long flagsSelect);
        [entry("LegacyIAccessiblePattern_DoDefaultAction")]
        long LegacyIAccessiblePattern_DoDefaultAction([in] HUIAPATTERNOBJECT hobj);
        [entry("LegacyIAccessiblePattern_SetValue")]
        long LegacyIAccessiblePattern_SetValue([in] HUIAPATTERNOBJECT hobj, [in] LongPtr szValue);
        [entry("LegacyIAccessiblePattern_GetIAccessible")]
        long LegacyIAccessiblePattern_GetIAccessible([in] HUIAPATTERNOBJECT hobj, [out] IAccessible** pAccessible);
        [entry("SynchronizedInputPattern_StartListening")]
        long SynchronizedInputPattern_StartListening([in] HUIAPATTERNOBJECT hobj, [in] Uia_SynchronizedInputType inputType);
        [entry("SynchronizedInputPattern_Cancel")]
        long SynchronizedInputPattern_Cancel([in] HUIAPATTERNOBJECT hobj);
        [entry("VirtualizedItemPattern_Realize")]
        long VirtualizedItemPattern_Realize([in] HUIAPATTERNOBJECT hobj);
        [entry("CustomNavigationPattern_Navigate")]
        long CustomNavigationPattern_Navigate([in] HUIAPATTERNOBJECT hobj, [in] Uia_NavigateDirection direction, [out] HUIANODE* pResult);

        [entry("UiaPatternRelease")]
        BOOL UiaPatternRelease([in] HUIAPATTERNOBJECT hobj);
        [entry("UiaTextRangeRelease")]
        BOOL UiaTextRangeRelease([in] HUIATEXTRANGE hobj);


        // --------------------------------------------------------------------------
        //
        // Provider methods
        // 
        // --------------------------------------------------------------------------

        [entry("UiaReturnRawElementProvider")]
        LongPtr UiaReturnRawElementProvider([in] HWND hwnd, [in] LongPtr wParam, [in] LongPtr lParam, [in] IRawElementProviderSimple* el);
        [entry("UiaHostProviderFromHwnd")]
        long UiaHostProviderFromHwnd([in] HWND hwnd, [out] IRawElementProviderSimple** ppProvider);
        [entry("UiaProviderForNonClient")]
        long UiaProviderForNonClient([in] HWND hwnd, [in] long idObject, [in] long idChild, [out] IRawElementProviderSimple** ppProvider);


        [entry("UiaIAccessibleFromProvider")]
        long UiaIAccessibleFromProvider(
            [in] IRawElementProviderSimple* pProvider,
            [in] UIA_IAFP_Flags dwFlags,
            [out] IAccessible** ppAccessible,
            [out] VARIANT* pvarChild);

        [entry("UiaProviderFromIAccessible")]
        long UiaProviderFromIAccessible(
            [in] IAccessible* pAccessible,
            [in] long idChild,
            [in] DWORD dwFlags,
            [out] IRawElementProviderSimple** ppProvider);

        // --------------------------------------------------------------------------
        //
        // Provider Explicit Cleanup methods
        // 
        // --------------------------------------------------------------------------

        [entry("UiaDisconnectAllProviders")]
        long UiaDisconnectAllProviders();
        [entry("UiaDisconnectProvider")]
        long UiaDisconnectProvider([in] IRawElementProviderSimple* pProvider);

        //
        // Other APIs...
        //
        // --------------------------------------------------------------------------

        [entry("UiaHasServerSideProvider")]
        BOOL UiaHasServerSideProvider([in] HWND hwnd);

 } 